
loadcell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d70  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08003f50  08003f50  00004f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004010  08004010  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004010  08004010  00005010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004018  08004018  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004020  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000005c  0800407c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002a4  0800407c  000062a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb3f  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d9c  00000000  00000000  00012bcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00014968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079e  00000000  00000000  00015360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025162  00000000  00000000  00015afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c61b  00000000  00000000  0003ac60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea25e  00000000  00000000  0004727b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001314d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  0013151c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0013421c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08003f38 	.word	0x08003f38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08003f38 	.word	0x08003f38

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b988 	b.w	80005f8 <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	468e      	mov	lr, r1
 8000308:	4604      	mov	r4, r0
 800030a:	4688      	mov	r8, r1
 800030c:	2b00      	cmp	r3, #0
 800030e:	d14a      	bne.n	80003a6 <__udivmoddi4+0xa6>
 8000310:	428a      	cmp	r2, r1
 8000312:	4617      	mov	r7, r2
 8000314:	d962      	bls.n	80003dc <__udivmoddi4+0xdc>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	b14e      	cbz	r6, 8000330 <__udivmoddi4+0x30>
 800031c:	f1c6 0320 	rsb	r3, r6, #32
 8000320:	fa01 f806 	lsl.w	r8, r1, r6
 8000324:	fa20 f303 	lsr.w	r3, r0, r3
 8000328:	40b7      	lsls	r7, r6
 800032a:	ea43 0808 	orr.w	r8, r3, r8
 800032e:	40b4      	lsls	r4, r6
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	fa1f fc87 	uxth.w	ip, r7
 8000338:	fbb8 f1fe 	udiv	r1, r8, lr
 800033c:	0c23      	lsrs	r3, r4, #16
 800033e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000346:	fb01 f20c 	mul.w	r2, r1, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x62>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f101 30ff 	add.w	r0, r1, #4294967295
 8000354:	f080 80ea 	bcs.w	800052c <__udivmoddi4+0x22c>
 8000358:	429a      	cmp	r2, r3
 800035a:	f240 80e7 	bls.w	800052c <__udivmoddi4+0x22c>
 800035e:	3902      	subs	r1, #2
 8000360:	443b      	add	r3, r7
 8000362:	1a9a      	subs	r2, r3, r2
 8000364:	b2a3      	uxth	r3, r4
 8000366:	fbb2 f0fe 	udiv	r0, r2, lr
 800036a:	fb0e 2210 	mls	r2, lr, r0, r2
 800036e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000372:	fb00 fc0c 	mul.w	ip, r0, ip
 8000376:	459c      	cmp	ip, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x8e>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000380:	f080 80d6 	bcs.w	8000530 <__udivmoddi4+0x230>
 8000384:	459c      	cmp	ip, r3
 8000386:	f240 80d3 	bls.w	8000530 <__udivmoddi4+0x230>
 800038a:	443b      	add	r3, r7
 800038c:	3802      	subs	r0, #2
 800038e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000392:	eba3 030c 	sub.w	r3, r3, ip
 8000396:	2100      	movs	r1, #0
 8000398:	b11d      	cbz	r5, 80003a2 <__udivmoddi4+0xa2>
 800039a:	40f3      	lsrs	r3, r6
 800039c:	2200      	movs	r2, #0
 800039e:	e9c5 3200 	strd	r3, r2, [r5]
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d905      	bls.n	80003b6 <__udivmoddi4+0xb6>
 80003aa:	b10d      	cbz	r5, 80003b0 <__udivmoddi4+0xb0>
 80003ac:	e9c5 0100 	strd	r0, r1, [r5]
 80003b0:	2100      	movs	r1, #0
 80003b2:	4608      	mov	r0, r1
 80003b4:	e7f5      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003b6:	fab3 f183 	clz	r1, r3
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d146      	bne.n	800044c <__udivmoddi4+0x14c>
 80003be:	4573      	cmp	r3, lr
 80003c0:	d302      	bcc.n	80003c8 <__udivmoddi4+0xc8>
 80003c2:	4282      	cmp	r2, r0
 80003c4:	f200 8105 	bhi.w	80005d2 <__udivmoddi4+0x2d2>
 80003c8:	1a84      	subs	r4, r0, r2
 80003ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ce:	2001      	movs	r0, #1
 80003d0:	4690      	mov	r8, r2
 80003d2:	2d00      	cmp	r5, #0
 80003d4:	d0e5      	beq.n	80003a2 <__udivmoddi4+0xa2>
 80003d6:	e9c5 4800 	strd	r4, r8, [r5]
 80003da:	e7e2      	b.n	80003a2 <__udivmoddi4+0xa2>
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f000 8090 	beq.w	8000502 <__udivmoddi4+0x202>
 80003e2:	fab2 f682 	clz	r6, r2
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	f040 80a4 	bne.w	8000534 <__udivmoddi4+0x234>
 80003ec:	1a8a      	subs	r2, r1, r2
 80003ee:	0c03      	lsrs	r3, r0, #16
 80003f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003f4:	b280      	uxth	r0, r0
 80003f6:	b2bc      	uxth	r4, r7
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000402:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000406:	fb04 f20c 	mul.w	r2, r4, ip
 800040a:	429a      	cmp	r2, r3
 800040c:	d907      	bls.n	800041e <__udivmoddi4+0x11e>
 800040e:	18fb      	adds	r3, r7, r3
 8000410:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000414:	d202      	bcs.n	800041c <__udivmoddi4+0x11c>
 8000416:	429a      	cmp	r2, r3
 8000418:	f200 80e0 	bhi.w	80005dc <__udivmoddi4+0x2dc>
 800041c:	46c4      	mov	ip, r8
 800041e:	1a9b      	subs	r3, r3, r2
 8000420:	fbb3 f2fe 	udiv	r2, r3, lr
 8000424:	fb0e 3312 	mls	r3, lr, r2, r3
 8000428:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800042c:	fb02 f404 	mul.w	r4, r2, r4
 8000430:	429c      	cmp	r4, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x144>
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	f102 30ff 	add.w	r0, r2, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x142>
 800043c:	429c      	cmp	r4, r3
 800043e:	f200 80ca 	bhi.w	80005d6 <__udivmoddi4+0x2d6>
 8000442:	4602      	mov	r2, r0
 8000444:	1b1b      	subs	r3, r3, r4
 8000446:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800044a:	e7a5      	b.n	8000398 <__udivmoddi4+0x98>
 800044c:	f1c1 0620 	rsb	r6, r1, #32
 8000450:	408b      	lsls	r3, r1
 8000452:	fa22 f706 	lsr.w	r7, r2, r6
 8000456:	431f      	orrs	r7, r3
 8000458:	fa0e f401 	lsl.w	r4, lr, r1
 800045c:	fa20 f306 	lsr.w	r3, r0, r6
 8000460:	fa2e fe06 	lsr.w	lr, lr, r6
 8000464:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000468:	4323      	orrs	r3, r4
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	fa1f fc87 	uxth.w	ip, r7
 8000472:	fbbe f0f9 	udiv	r0, lr, r9
 8000476:	0c1c      	lsrs	r4, r3, #16
 8000478:	fb09 ee10 	mls	lr, r9, r0, lr
 800047c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000480:	fb00 fe0c 	mul.w	lr, r0, ip
 8000484:	45a6      	cmp	lr, r4
 8000486:	fa02 f201 	lsl.w	r2, r2, r1
 800048a:	d909      	bls.n	80004a0 <__udivmoddi4+0x1a0>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000492:	f080 809c 	bcs.w	80005ce <__udivmoddi4+0x2ce>
 8000496:	45a6      	cmp	lr, r4
 8000498:	f240 8099 	bls.w	80005ce <__udivmoddi4+0x2ce>
 800049c:	3802      	subs	r0, #2
 800049e:	443c      	add	r4, r7
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	fa1f fe83 	uxth.w	lr, r3
 80004a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004ac:	fb09 4413 	mls	r4, r9, r3, r4
 80004b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004b8:	45a4      	cmp	ip, r4
 80004ba:	d908      	bls.n	80004ce <__udivmoddi4+0x1ce>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f103 3eff 	add.w	lr, r3, #4294967295
 80004c2:	f080 8082 	bcs.w	80005ca <__udivmoddi4+0x2ca>
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d97f      	bls.n	80005ca <__udivmoddi4+0x2ca>
 80004ca:	3b02      	subs	r3, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004d2:	eba4 040c 	sub.w	r4, r4, ip
 80004d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004da:	4564      	cmp	r4, ip
 80004dc:	4673      	mov	r3, lr
 80004de:	46e1      	mov	r9, ip
 80004e0:	d362      	bcc.n	80005a8 <__udivmoddi4+0x2a8>
 80004e2:	d05f      	beq.n	80005a4 <__udivmoddi4+0x2a4>
 80004e4:	b15d      	cbz	r5, 80004fe <__udivmoddi4+0x1fe>
 80004e6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ea:	eb64 0409 	sbc.w	r4, r4, r9
 80004ee:	fa04 f606 	lsl.w	r6, r4, r6
 80004f2:	fa22 f301 	lsr.w	r3, r2, r1
 80004f6:	431e      	orrs	r6, r3
 80004f8:	40cc      	lsrs	r4, r1
 80004fa:	e9c5 6400 	strd	r6, r4, [r5]
 80004fe:	2100      	movs	r1, #0
 8000500:	e74f      	b.n	80003a2 <__udivmoddi4+0xa2>
 8000502:	fbb1 fcf2 	udiv	ip, r1, r2
 8000506:	0c01      	lsrs	r1, r0, #16
 8000508:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800050c:	b280      	uxth	r0, r0
 800050e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000512:	463b      	mov	r3, r7
 8000514:	4638      	mov	r0, r7
 8000516:	463c      	mov	r4, r7
 8000518:	46b8      	mov	r8, r7
 800051a:	46be      	mov	lr, r7
 800051c:	2620      	movs	r6, #32
 800051e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000522:	eba2 0208 	sub.w	r2, r2, r8
 8000526:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800052a:	e766      	b.n	80003fa <__udivmoddi4+0xfa>
 800052c:	4601      	mov	r1, r0
 800052e:	e718      	b.n	8000362 <__udivmoddi4+0x62>
 8000530:	4610      	mov	r0, r2
 8000532:	e72c      	b.n	800038e <__udivmoddi4+0x8e>
 8000534:	f1c6 0220 	rsb	r2, r6, #32
 8000538:	fa2e f302 	lsr.w	r3, lr, r2
 800053c:	40b7      	lsls	r7, r6
 800053e:	40b1      	lsls	r1, r6
 8000540:	fa20 f202 	lsr.w	r2, r0, r2
 8000544:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000548:	430a      	orrs	r2, r1
 800054a:	fbb3 f8fe 	udiv	r8, r3, lr
 800054e:	b2bc      	uxth	r4, r7
 8000550:	fb0e 3318 	mls	r3, lr, r8, r3
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb08 f904 	mul.w	r9, r8, r4
 800055e:	40b0      	lsls	r0, r6
 8000560:	4589      	cmp	r9, r1
 8000562:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000566:	b280      	uxth	r0, r0
 8000568:	d93e      	bls.n	80005e8 <__udivmoddi4+0x2e8>
 800056a:	1879      	adds	r1, r7, r1
 800056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000570:	d201      	bcs.n	8000576 <__udivmoddi4+0x276>
 8000572:	4589      	cmp	r9, r1
 8000574:	d81f      	bhi.n	80005b6 <__udivmoddi4+0x2b6>
 8000576:	eba1 0109 	sub.w	r1, r1, r9
 800057a:	fbb1 f9fe 	udiv	r9, r1, lr
 800057e:	fb09 f804 	mul.w	r8, r9, r4
 8000582:	fb0e 1119 	mls	r1, lr, r9, r1
 8000586:	b292      	uxth	r2, r2
 8000588:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800058c:	4542      	cmp	r2, r8
 800058e:	d229      	bcs.n	80005e4 <__udivmoddi4+0x2e4>
 8000590:	18ba      	adds	r2, r7, r2
 8000592:	f109 31ff 	add.w	r1, r9, #4294967295
 8000596:	d2c4      	bcs.n	8000522 <__udivmoddi4+0x222>
 8000598:	4542      	cmp	r2, r8
 800059a:	d2c2      	bcs.n	8000522 <__udivmoddi4+0x222>
 800059c:	f1a9 0102 	sub.w	r1, r9, #2
 80005a0:	443a      	add	r2, r7
 80005a2:	e7be      	b.n	8000522 <__udivmoddi4+0x222>
 80005a4:	45f0      	cmp	r8, lr
 80005a6:	d29d      	bcs.n	80004e4 <__udivmoddi4+0x1e4>
 80005a8:	ebbe 0302 	subs.w	r3, lr, r2
 80005ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b0:	3801      	subs	r0, #1
 80005b2:	46e1      	mov	r9, ip
 80005b4:	e796      	b.n	80004e4 <__udivmoddi4+0x1e4>
 80005b6:	eba7 0909 	sub.w	r9, r7, r9
 80005ba:	4449      	add	r1, r9
 80005bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c4:	fb09 f804 	mul.w	r8, r9, r4
 80005c8:	e7db      	b.n	8000582 <__udivmoddi4+0x282>
 80005ca:	4673      	mov	r3, lr
 80005cc:	e77f      	b.n	80004ce <__udivmoddi4+0x1ce>
 80005ce:	4650      	mov	r0, sl
 80005d0:	e766      	b.n	80004a0 <__udivmoddi4+0x1a0>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e6fd      	b.n	80003d2 <__udivmoddi4+0xd2>
 80005d6:	443b      	add	r3, r7
 80005d8:	3a02      	subs	r2, #2
 80005da:	e733      	b.n	8000444 <__udivmoddi4+0x144>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	443b      	add	r3, r7
 80005e2:	e71c      	b.n	800041e <__udivmoddi4+0x11e>
 80005e4:	4649      	mov	r1, r9
 80005e6:	e79c      	b.n	8000522 <__udivmoddi4+0x222>
 80005e8:	eba1 0109 	sub.w	r1, r1, r9
 80005ec:	46c4      	mov	ip, r8
 80005ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f2:	fb09 f804 	mul.w	r8, r9, r4
 80005f6:	e7c4      	b.n	8000582 <__udivmoddi4+0x282>

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <HX711_Init>:

// ————————————————————————————————————————————————————————————— Init & config —
void HX711_Init(hx711_t *hx,
                GPIO_TypeDef *clk_gpio, uint16_t clk_pin,
                GPIO_TypeDef *dat_gpio, uint16_t dat_pin)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08a      	sub	sp, #40	@ 0x28
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	4613      	mov	r3, r2
 800060a:	80fb      	strh	r3, [r7, #6]
  hx->clk_gpio = clk_gpio;
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	601a      	str	r2, [r3, #0]
  hx->clk_pin  = clk_pin;
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	88fa      	ldrh	r2, [r7, #6]
 8000616:	809a      	strh	r2, [r3, #4]
  hx->dat_gpio = dat_gpio;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	683a      	ldr	r2, [r7, #0]
 800061c:	609a      	str	r2, [r3, #8]
  hx->dat_pin  = dat_pin;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000622:	819a      	strh	r2, [r3, #12]

  GPIO_InitTypeDef gpio = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]

  // SCK as push-pull output
  gpio.Mode  = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	61bb      	str	r3, [r7, #24]
  gpio.Pull  = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	2302      	movs	r3, #2
 800063e:	623b      	str	r3, [r7, #32]
  gpio.Pin   = clk_pin;
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	68b8      	ldr	r0, [r7, #8]
 800064c:	f000 fe90 	bl	8001370 <HAL_GPIO_Init>

  // force SCK low so the chip isn’t stuck in power-down
  HAL_GPIO_WritePin(clk_gpio, clk_pin, GPIO_PIN_RESET);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	2200      	movs	r2, #0
 8000654:	4619      	mov	r1, r3
 8000656:	68b8      	ldr	r0, [r7, #8]
 8000658:	f001 f824 	bl	80016a4 <HAL_GPIO_WritePin>

  // DOUT as input pull-up
  gpio.Mode  = GPIO_MODE_INPUT;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  gpio.Pull  = GPIO_PULLUP;
 8000660:	2301      	movs	r3, #1
 8000662:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  gpio.Pin   = dat_pin;
 8000668:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800066a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	6838      	ldr	r0, [r7, #0]
 8000674:	f000 fe7c 	bl	8001370 <HAL_GPIO_Init>
}
 8000678:	bf00      	nop
 800067a:	3728      	adds	r7, #40	@ 0x28
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <HX711_ReadAverage>:

static long HX711_ReadAverage(hx711_t *hx, uint8_t times, uint8_t channel)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
 800068c:	4613      	mov	r3, r2
 800068e:	70bb      	strb	r3, [r7, #2]
  long sum = 0;
 8000690:	2300      	movs	r3, #0
 8000692:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < times; i++) {
 8000694:	2300      	movs	r3, #0
 8000696:	72fb      	strb	r3, [r7, #11]
 8000698:	e017      	b.n	80006ca <HX711_ReadAverage+0x4a>
    // wait until ready
    while (!HX711_IsReady(hx)) { HAL_Delay(0); }
 800069a:	2000      	movs	r0, #0
 800069c:	f000 fd36 	bl	800110c <HAL_Delay>
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f86d 	bl	8000780 <HX711_IsReady>
 80006a6:	4603      	mov	r3, r0
 80006a8:	f083 0301 	eor.w	r3, r3, #1
 80006ac:	b2db      	uxtb	r3, r3
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1f3      	bne.n	800069a <HX711_ReadAverage+0x1a>
    sum += HX711_ReadRaw(hx, channel);
 80006b2:	78bb      	ldrb	r3, [r7, #2]
 80006b4:	4619      	mov	r1, r3
 80006b6:	6878      	ldr	r0, [r7, #4]
 80006b8:	f000 f8b2 	bl	8000820 <HX711_ReadRaw>
 80006bc:	4602      	mov	r2, r0
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	4413      	add	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
  for (uint8_t i = 0; i < times; i++) {
 80006c4:	7afb      	ldrb	r3, [r7, #11]
 80006c6:	3301      	adds	r3, #1
 80006c8:	72fb      	strb	r3, [r7, #11]
 80006ca:	7afa      	ldrb	r2, [r7, #11]
 80006cc:	78fb      	ldrb	r3, [r7, #3]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3e6      	bcc.n	80006a0 <HX711_ReadAverage+0x20>
  }
  return sum / times;
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	68fa      	ldr	r2, [r7, #12]
 80006d6:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}

080006e2 <HX711_SetGain>:

void HX711_SetGain(hx711_t *hx, uint8_t Again, uint8_t Bgain)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
 80006ea:	460b      	mov	r3, r1
 80006ec:	70fb      	strb	r3, [r7, #3]
 80006ee:	4613      	mov	r3, r2
 80006f0:	70bb      	strb	r3, [r7, #2]
  hx->Again = (Again == 128 ? 1 : 3);
 80006f2:	78fb      	ldrb	r3, [r7, #3]
 80006f4:	2b80      	cmp	r3, #128	@ 0x80
 80006f6:	d101      	bne.n	80006fc <HX711_SetGain+0x1a>
 80006f8:	2201      	movs	r2, #1
 80006fa:	e000      	b.n	80006fe <HX711_SetGain+0x1c>
 80006fc:	2203      	movs	r2, #3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	739a      	strb	r2, [r3, #14]
  hx->Bgain = 2;  // we only use channel A
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2202      	movs	r2, #2
 8000706:	73da      	strb	r2, [r3, #15]
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr

08000714 <HX711_SetScale>:

void HX711_SetScale(hx711_t *hx, float Ascale, float Bscale)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	60f8      	str	r0, [r7, #12]
 800071c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000720:	edc7 0a01 	vstr	s1, [r7, #4]
  hx->Ascale = Ascale;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	68ba      	ldr	r2, [r7, #8]
 8000728:	611a      	str	r2, [r3, #16]
  hx->Bscale = Bscale;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	687a      	ldr	r2, [r7, #4]
 800072e:	615a      	str	r2, [r3, #20]
}
 8000730:	bf00      	nop
 8000732:	3714      	adds	r7, #20
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <HX711_Tare>:

void HX711_Tare(hx711_t *hx, uint8_t times, uint8_t channel)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]
 8000748:	4613      	mov	r3, r2
 800074a:	70bb      	strb	r3, [r7, #2]
  // dummy read to set channel/gain
  HX711_ReadRaw(hx, channel);
 800074c:	78bb      	ldrb	r3, [r7, #2]
 800074e:	4619      	mov	r1, r3
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 f865 	bl	8000820 <HX711_ReadRaw>

  long avg = HX711_ReadAverage(hx, times, channel);
 8000756:	78ba      	ldrb	r2, [r7, #2]
 8000758:	78fb      	ldrb	r3, [r7, #3]
 800075a:	4619      	mov	r1, r3
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ff8f 	bl	8000680 <HX711_ReadAverage>
 8000762:	60f8      	str	r0, [r7, #12]
  if (channel == CHANNEL_A)  hx->Aoffset = avg;
 8000764:	78bb      	ldrb	r3, [r7, #2]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d103      	bne.n	8000772 <HX711_Tare+0x36>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	619a      	str	r2, [r3, #24]
  else                       hx->Boffset = avg;
}
 8000770:	e002      	b.n	8000778 <HX711_Tare+0x3c>
  else                       hx->Boffset = avg;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	61da      	str	r2, [r3, #28]
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <HX711_IsReady>:
  HX711_Tare(hx, times, CHANNEL_B);
}

// ————————————————————————————————————————————————————————————— Low-level I/O —
bool HX711_IsReady(hx711_t *hx)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  return (HAL_GPIO_ReadPin(hx->dat_gpio, hx->dat_pin) == GPIO_PIN_RESET);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	689a      	ldr	r2, [r3, #8]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	899b      	ldrh	r3, [r3, #12]
 8000790:	4619      	mov	r1, r3
 8000792:	4610      	mov	r0, r2
 8000794:	f000 ff6e 	bl	8001674 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	bf0c      	ite	eq
 800079e:	2301      	moveq	r3, #1
 80007a0:	2300      	movne	r3, #0
 80007a2:	b2db      	uxtb	r3, r3
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <shiftIn>:

static uint8_t shiftIn(hx711_t *hx)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  uint8_t value = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 8; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	73bb      	strb	r3, [r7, #14]
 80007bc:	e028      	b.n	8000810 <shiftIn+0x64>
    HAL_GPIO_WritePin(hx->clk_gpio, hx->clk_pin, GPIO_PIN_SET);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6818      	ldr	r0, [r3, #0]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	889b      	ldrh	r3, [r3, #4]
 80007c6:	2201      	movs	r2, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	f000 ff6b 	bl	80016a4 <HAL_GPIO_WritePin>
    uint8_t b = HAL_GPIO_ReadPin(hx->dat_gpio, hx->dat_pin);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	689a      	ldr	r2, [r3, #8]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	899b      	ldrh	r3, [r3, #12]
 80007d6:	4619      	mov	r1, r3
 80007d8:	4610      	mov	r0, r2
 80007da:	f000 ff4b 	bl	8001674 <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	737b      	strb	r3, [r7, #13]
    value |= (b << (7 - i));
 80007e2:	7b7a      	ldrb	r2, [r7, #13]
 80007e4:	7bbb      	ldrb	r3, [r7, #14]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	b25a      	sxtb	r2, r3
 80007f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(hx->clk_gpio, hx->clk_pin, GPIO_PIN_RESET);
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	6818      	ldr	r0, [r3, #0]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	2200      	movs	r2, #0
 8000804:	4619      	mov	r1, r3
 8000806:	f000 ff4d 	bl	80016a4 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < 8; i++) {
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	3301      	adds	r3, #1
 800080e:	73bb      	strb	r3, [r7, #14]
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	2b07      	cmp	r3, #7
 8000814:	d9d3      	bls.n	80007be <shiftIn+0x12>
  }
  return value;
 8000816:	7bfb      	ldrb	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}

08000820 <HX711_ReadRaw>:

long HX711_ReadRaw(hx711_t *hx, uint8_t channel)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b086      	sub	sp, #24
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]
  // *single* blocking check to see if data is ready
  if (!HX711_IsReady(hx)) {
 800082c:	6878      	ldr	r0, [r7, #4]
 800082e:	f7ff ffa7 	bl	8000780 <HX711_IsReady>
 8000832:	4603      	mov	r3, r0
 8000834:	f083 0301 	eor.w	r3, r3, #1
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <HX711_ReadRaw+0x22>
    return 0;  // caller must verify ready before calling
 800083e:	2300      	movs	r3, #0
 8000840:	e043      	b.n	80008ca <HX711_ReadRaw+0xaa>
  }

  // read 24 bits
  uint8_t data[3];
  data[0] = shiftIn(hx);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffb2 	bl	80007ac <shiftIn>
 8000848:	4603      	mov	r3, r0
 800084a:	733b      	strb	r3, [r7, #12]
  data[1] = shiftIn(hx);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffad 	bl	80007ac <shiftIn>
 8000852:	4603      	mov	r3, r0
 8000854:	737b      	strb	r3, [r7, #13]
  data[2] = shiftIn(hx);
 8000856:	6878      	ldr	r0, [r7, #4]
 8000858:	f7ff ffa8 	bl	80007ac <shiftIn>
 800085c:	4603      	mov	r3, r0
 800085e:	73bb      	strb	r3, [r7, #14]

  // pulse SCK further to select gain/channel again
  uint8_t pulses = (channel == CHANNEL_A) ? hx->Again : hx->Bgain;
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d102      	bne.n	800086c <HX711_ReadRaw+0x4c>
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	7b9b      	ldrb	r3, [r3, #14]
 800086a:	e001      	b.n	8000870 <HX711_ReadRaw+0x50>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	7bdb      	ldrb	r3, [r3, #15]
 8000870:	75bb      	strb	r3, [r7, #22]
  for (uint8_t i = 0; i < pulses; i++) {
 8000872:	2300      	movs	r3, #0
 8000874:	75fb      	strb	r3, [r7, #23]
 8000876:	e012      	b.n	800089e <HX711_ReadRaw+0x7e>
    HAL_GPIO_WritePin(hx->clk_gpio, hx->clk_pin, GPIO_PIN_SET);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	6818      	ldr	r0, [r3, #0]
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	889b      	ldrh	r3, [r3, #4]
 8000880:	2201      	movs	r2, #1
 8000882:	4619      	mov	r1, r3
 8000884:	f000 ff0e 	bl	80016a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(hx->clk_gpio, hx->clk_pin, GPIO_PIN_RESET);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6818      	ldr	r0, [r3, #0]
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	2200      	movs	r2, #0
 8000892:	4619      	mov	r1, r3
 8000894:	f000 ff06 	bl	80016a4 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < pulses; i++) {
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	3301      	adds	r3, #1
 800089c:	75fb      	strb	r3, [r7, #23]
 800089e:	7dfa      	ldrb	r2, [r7, #23]
 80008a0:	7dbb      	ldrb	r3, [r7, #22]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d3e8      	bcc.n	8000878 <HX711_ReadRaw+0x58>
  }

  // build signed 32-bit
  uint32_t raw = ((data[0] & 0x80) ? 0xFF000000UL : 0) |
 80008a6:	7b3b      	ldrb	r3, [r7, #12]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	da02      	bge.n	80008b4 <HX711_ReadRaw+0x94>
 80008ae:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80008b2:	e000      	b.n	80008b6 <HX711_ReadRaw+0x96>
 80008b4:	2200      	movs	r2, #0
                 ((uint32_t)data[0] << 16) |
 80008b6:	7b3b      	ldrb	r3, [r7, #12]
 80008b8:	041b      	lsls	r3, r3, #16
  uint32_t raw = ((data[0] & 0x80) ? 0xFF000000UL : 0) |
 80008ba:	431a      	orrs	r2, r3
                 ((uint32_t)data[1] << 8) |
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	021b      	lsls	r3, r3, #8
                 ((uint32_t)data[0] << 16) |
 80008c0:	4313      	orrs	r3, r2
                  (uint32_t)data[2];
 80008c2:	7bba      	ldrb	r2, [r7, #14]
  uint32_t raw = ((data[0] & 0x80) ? 0xFF000000UL : 0) |
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]

  return (long)raw;
 80008c8:	693b      	ldr	r3, [r7, #16]
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HX711_GetRawNonBlocking>:

// ————————————————————————————————————————————————————————————— Non-blocking APIs —
bool HX711_GetRawNonBlocking(hx711_t *hx, uint8_t channel, long *raw)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b084      	sub	sp, #16
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	60f8      	str	r0, [r7, #12]
 80008da:	460b      	mov	r3, r1
 80008dc:	607a      	str	r2, [r7, #4]
 80008de:	72fb      	strb	r3, [r7, #11]
  if (!HX711_IsReady(hx)) {
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f7ff ff4d 	bl	8000780 <HX711_IsReady>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f083 0301 	eor.w	r3, r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HX711_GetRawNonBlocking+0x24>
    return false;
 80008f2:	2300      	movs	r3, #0
 80008f4:	e008      	b.n	8000908 <HX711_GetRawNonBlocking+0x36>
  }
  *raw = HX711_ReadRaw(hx, channel);
 80008f6:	7afb      	ldrb	r3, [r7, #11]
 80008f8:	4619      	mov	r1, r3
 80008fa:	68f8      	ldr	r0, [r7, #12]
 80008fc:	f7ff ff90 	bl	8000820 <HX711_ReadRaw>
 8000900:	4602      	mov	r2, r0
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	601a      	str	r2, [r3, #0]
  return true;
 8000906:	2301      	movs	r3, #1
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <HX711_GetUnitsNonBlocking>:

bool HX711_GetUnitsNonBlocking(hx711_t *hx, uint8_t channel, float *grams)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b088      	sub	sp, #32
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	460b      	mov	r3, r1
 800091a:	607a      	str	r2, [r7, #4]
 800091c:	72fb      	strb	r3, [r7, #11]
  long raw;
  if (!HX711_GetRawNonBlocking(hx, channel, &raw)) {
 800091e:	f107 0214 	add.w	r2, r7, #20
 8000922:	7afb      	ldrb	r3, [r7, #11]
 8000924:	4619      	mov	r1, r3
 8000926:	68f8      	ldr	r0, [r7, #12]
 8000928:	f7ff ffd3 	bl	80008d2 <HX711_GetRawNonBlocking>
 800092c:	4603      	mov	r3, r0
 800092e:	f083 0301 	eor.w	r3, r3, #1
 8000932:	b2db      	uxtb	r3, r3
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HX711_GetUnitsNonBlocking+0x2c>
    return false;
 8000938:	2300      	movs	r3, #0
 800093a:	e020      	b.n	800097e <HX711_GetUnitsNonBlocking+0x6e>
  }
  long offset = (channel == CHANNEL_A ? hx->Aoffset : hx->Boffset);
 800093c:	7afb      	ldrb	r3, [r7, #11]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <HX711_GetUnitsNonBlocking+0x38>
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	699b      	ldr	r3, [r3, #24]
 8000946:	e001      	b.n	800094c <HX711_GetUnitsNonBlocking+0x3c>
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	61fb      	str	r3, [r7, #28]
  float scale = (channel == CHANNEL_A ? hx->Ascale : hx->Bscale);
 800094e:	7afb      	ldrb	r3, [r7, #11]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d102      	bne.n	800095a <HX711_GetUnitsNonBlocking+0x4a>
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	e001      	b.n	800095e <HX711_GetUnitsNonBlocking+0x4e>
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	61bb      	str	r3, [r7, #24]
  *grams = ((float)(raw - offset)) / scale;
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	ee07 3a90 	vmov	s15, r3
 800096a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800096e:	ed97 7a06 	vldr	s14, [r7, #24]
 8000972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	edc3 7a00 	vstr	s15, [r3]
  return true;
 800097c:	2301      	movs	r3, #1
}
 800097e:	4618      	mov	r0, r3
 8000980:	3720      	adds	r7, #32
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
	...

08000988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000988:	b5b0      	push	{r4, r5, r7, lr}
 800098a:	b0aa      	sub	sp, #168	@ 0xa8
 800098c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 fb4c 	bl	800102a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f8fb 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f000 f98f 	bl	8000cb8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800099a:	f000 f943 	bl	8000c24 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HX711_Init   (&LOAD1, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 800099e:	2302      	movs	r3, #2
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009a6:	2201      	movs	r2, #1
 80009a8:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80009ac:	486c      	ldr	r0, [pc, #432]	@ (8000b60 <main+0x1d8>)
 80009ae:	f7ff fe25 	bl	80005fc <HX711_Init>
   HX711_SetGain(&LOAD1, 128, 32);
 80009b2:	2220      	movs	r2, #32
 80009b4:	2180      	movs	r1, #128	@ 0x80
 80009b6:	486a      	ldr	r0, [pc, #424]	@ (8000b60 <main+0x1d8>)
 80009b8:	f7ff fe93 	bl	80006e2 <HX711_SetGain>
   HX711_SetScale(&LOAD1, 107.0f, 0.0f);
 80009bc:	eddf 0a69 	vldr	s1, [pc, #420]	@ 8000b64 <main+0x1dc>
 80009c0:	ed9f 0a69 	vldr	s0, [pc, #420]	@ 8000b68 <main+0x1e0>
 80009c4:	4866      	ldr	r0, [pc, #408]	@ (8000b60 <main+0x1d8>)
 80009c6:	f7ff fea5 	bl	8000714 <HX711_SetScale>
   HX711_Tare(&LOAD1, 1, CHANNEL_A);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2101      	movs	r1, #1
 80009ce:	4864      	ldr	r0, [pc, #400]	@ (8000b60 <main+0x1d8>)
 80009d0:	f7ff feb4 	bl	800073c <HX711_Tare>

   // Initialize second HX711 (only Channel A)
   HX711_Init   (&LOAD2, GPIOA, GPIO_PIN_8, GPIOA, GPIO_PIN_9);
 80009d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009d8:	9300      	str	r3, [sp, #0]
 80009da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80009de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80009e2:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 80009e6:	4861      	ldr	r0, [pc, #388]	@ (8000b6c <main+0x1e4>)
 80009e8:	f7ff fe08 	bl	80005fc <HX711_Init>
   HX711_SetGain(&LOAD2, 128, 32);
 80009ec:	2220      	movs	r2, #32
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	485e      	ldr	r0, [pc, #376]	@ (8000b6c <main+0x1e4>)
 80009f2:	f7ff fe76 	bl	80006e2 <HX711_SetGain>
   HX711_SetScale(&LOAD2, 100.0f, 0.0f);
 80009f6:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 8000b64 <main+0x1dc>
 80009fa:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8000b70 <main+0x1e8>
 80009fe:	485b      	ldr	r0, [pc, #364]	@ (8000b6c <main+0x1e4>)
 8000a00:	f7ff fe88 	bl	8000714 <HX711_SetScale>
   HX711_Tare(&LOAD2, 1, CHANNEL_A);
 8000a04:	2200      	movs	r2, #0
 8000a06:	2101      	movs	r1, #1
 8000a08:	4858      	ldr	r0, [pc, #352]	@ (8000b6c <main+0x1e4>)
 8000a0a:	f7ff fe97 	bl	800073c <HX711_Tare>
   HAL_Delay(100);
 8000a0e:	2064      	movs	r0, #100	@ 0x64
 8000a10:	f000 fb7c 	bl	800110c <HAL_Delay>


   // Debug: confirm init succeeded
   {
     char ready[] = ">> Init done, entering loop\r\n";
 8000a14:	4b57      	ldr	r3, [pc, #348]	@ (8000b74 <main+0x1ec>)
 8000a16:	1d3c      	adds	r4, r7, #4
 8000a18:	461d      	mov	r5, r3
 8000a1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000a22:	c407      	stmia	r4!, {r0, r1, r2}
 8000a24:	8023      	strh	r3, [r4, #0]
     HAL_UART_Transmit(&hlpuart1, (uint8_t*)ready, strlen(ready), HAL_MAX_DELAY);
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fbf9 	bl	8000220 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	1d39      	adds	r1, r7, #4
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	484f      	ldr	r0, [pc, #316]	@ (8000b78 <main+0x1f0>)
 8000a3a:	f001 feef 	bl	800281c <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	float w1 = 0, w2 = 0;
 8000a3e:	f04f 0300 	mov.w	r3, #0
 8000a42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	677b      	str	r3, [r7, #116]	@ 0x74
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (HX711_GetUnitsNonBlocking(&LOAD1, CHANNEL_A, &w1) &&
 8000a4a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8000a4e:	461a      	mov	r2, r3
 8000a50:	2100      	movs	r1, #0
 8000a52:	4843      	ldr	r0, [pc, #268]	@ (8000b60 <main+0x1d8>)
 8000a54:	f7ff ff5c 	bl	8000910 <HX711_GetUnitsNonBlocking>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d0f5      	beq.n	8000a4a <main+0xc2>
	            HX711_GetUnitsNonBlocking(&LOAD2, CHANNEL_A, &w2))
 8000a5e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8000a62:	461a      	mov	r2, r3
 8000a64:	2100      	movs	r1, #0
 8000a66:	4841      	ldr	r0, [pc, #260]	@ (8000b6c <main+0x1e4>)
 8000a68:	f7ff ff52 	bl	8000910 <HX711_GetUnitsNonBlocking>
 8000a6c:	4603      	mov	r3, r0
	  if (HX711_GetUnitsNonBlocking(&LOAD1, CHANNEL_A, &w1) &&
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d0eb      	beq.n	8000a4a <main+0xc2>
	        {

			long c1 = lroundf(w1 * 100.0f);
 8000a72:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8000a76:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8000b70 <main+0x1e8>
 8000a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a82:	f003 fa2b 	bl	8003edc <lroundf>
 8000a86:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
			long g1 = c1 / 100;
 8000a8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000a8e:	4a3b      	ldr	r2, [pc, #236]	@ (8000b7c <main+0x1f4>)
 8000a90:	fb82 1203 	smull	r1, r2, r2, r3
 8000a94:	1152      	asrs	r2, r2, #5
 8000a96:	17db      	asrs	r3, r3, #31
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
			long frac1 = c1 % 100;
 8000a9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8000aa2:	4a36      	ldr	r2, [pc, #216]	@ (8000b7c <main+0x1f4>)
 8000aa4:	fb82 1203 	smull	r1, r2, r2, r3
 8000aa8:	1151      	asrs	r1, r2, #5
 8000aaa:	17da      	asrs	r2, r3, #31
 8000aac:	1a8a      	subs	r2, r1, r2
 8000aae:	2164      	movs	r1, #100	@ 0x64
 8000ab0:	fb01 f202 	mul.w	r2, r1, r2
 8000ab4:	1a9b      	subs	r3, r3, r2
 8000ab6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

			long c2 = lroundf(w2 * 100.0f);
 8000aba:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000abe:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8000b70 <main+0x1e8>
 8000ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8000aca:	f003 fa07 	bl	8003edc <lroundf>
 8000ace:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
			long g2 = c2 / 100;
 8000ad2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000ad6:	4a29      	ldr	r2, [pc, #164]	@ (8000b7c <main+0x1f4>)
 8000ad8:	fb82 1203 	smull	r1, r2, r2, r3
 8000adc:	1152      	asrs	r2, r2, #5
 8000ade:	17db      	asrs	r3, r3, #31
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
			long frac2 = c2 % 100;
 8000ae6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8000aea:	4a24      	ldr	r2, [pc, #144]	@ (8000b7c <main+0x1f4>)
 8000aec:	fb82 1203 	smull	r1, r2, r2, r3
 8000af0:	1151      	asrs	r1, r2, #5
 8000af2:	17da      	asrs	r2, r3, #31
 8000af4:	1a8a      	subs	r2, r1, r2
 8000af6:	2164      	movs	r1, #100	@ 0x64
 8000af8:	fb01 f202 	mul.w	r2, r1, r2
 8000afc:	1a9b      	subs	r3, r3, r2
 8000afe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
			mass1 = g1;
 8000b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b06:	ee07 3a90 	vmov	s15, r3
 8000b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b80 <main+0x1f8>)
 8000b10:	edc3 7a00 	vstr	s15, [r3]
			mass2 = g2;
 8000b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <main+0x1fc>)
 8000b22:	edc3 7a00 	vstr	s15, [r3]

			int len = snprintf(buf, sizeof(buf),
 8000b26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8000b2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8000b2e:	9302      	str	r3, [sp, #8]
 8000b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000b34:	9301      	str	r3, [sp, #4]
 8000b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8000b40:	4a11      	ldr	r2, [pc, #68]	@ (8000b88 <main+0x200>)
 8000b42:	2150      	movs	r1, #80	@ 0x50
 8000b44:	f002 fd16 	bl	8003574 <sniprintf>
 8000b48:	67f8      	str	r0, [r7, #124]	@ 0x7c
					"Load1: %ld.%02ld g, Load2: %ld.%02ld g\r\n", g1, frac1, g2,
					frac2);
	          HAL_UART_Transmit(&hlpuart1, (uint8_t*)buf, len, HAL_MAX_DELAY);
 8000b4a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	4808      	ldr	r0, [pc, #32]	@ (8000b78 <main+0x1f0>)
 8000b58:	f001 fe60 	bl	800281c <HAL_UART_Transmit>
	  if (HX711_GetUnitsNonBlocking(&LOAD1, CHANNEL_A, &w1) &&
 8000b5c:	e775      	b.n	8000a4a <main+0xc2>
 8000b5e:	bf00      	nop
 8000b60:	2000010c 	.word	0x2000010c
 8000b64:	00000000 	.word	0x00000000
 8000b68:	42d60000 	.word	0x42d60000
 8000b6c:	2000012c 	.word	0x2000012c
 8000b70:	42c80000 	.word	0x42c80000
 8000b74:	08003f7c 	.word	0x08003f7c
 8000b78:	20000078 	.word	0x20000078
 8000b7c:	51eb851f 	.word	0x51eb851f
 8000b80:	2000014c 	.word	0x2000014c
 8000b84:	20000150 	.word	0x20000150
 8000b88:	08003f50 	.word	0x08003f50

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b094      	sub	sp, #80	@ 0x50
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0318 	add.w	r3, r7, #24
 8000b96:	2238      	movs	r2, #56	@ 0x38
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 fd20 	bl	80035e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bae:	2000      	movs	r0, #0
 8000bb0:	f000 fdb4 	bl	800171c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bb4:	2302      	movs	r3, #2
 8000bb6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bbe:	2340      	movs	r3, #64	@ 0x40
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000bca:	2304      	movs	r3, #4
 8000bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bce:	2355      	movs	r3, #85	@ 0x55
 8000bd0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bde:	f107 0318 	add.w	r3, r7, #24
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fe4e 	bl	8001884 <HAL_RCC_OscConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bee:	f000 f8f1 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf2:	230f      	movs	r3, #15
 8000bf4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c06:	1d3b      	adds	r3, r7, #4
 8000c08:	2104      	movs	r1, #4
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f001 f94c 	bl	8001ea8 <HAL_RCC_ClockConfig>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c16:	f000 f8dd 	bl	8000dd4 <Error_Handler>
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	3750      	adds	r7, #80	@ 0x50
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c28:	4b21      	ldr	r3, [pc, #132]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c2a:	4a22      	ldr	r2, [pc, #136]	@ (8000cb4 <MX_LPUART1_UART_Init+0x90>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8000c2e:	4b20      	ldr	r3, [pc, #128]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c30:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 8000c34:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b1e      	ldr	r3, [pc, #120]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b19      	ldr	r3, [pc, #100]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b18      	ldr	r3, [pc, #96]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c54:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c5a:	4b15      	ldr	r3, [pc, #84]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c60:	4b13      	ldr	r3, [pc, #76]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c66:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c68:	f001 fd88 	bl	800277c <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c72:	f000 f8af 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c76:	2100      	movs	r1, #0
 8000c78:	480d      	ldr	r0, [pc, #52]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c7a:	f002 fbb1 	bl	80033e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000c84:	f000 f8a6 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4809      	ldr	r0, [pc, #36]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c8c:	f002 fbe6 	bl	800345c <HAL_UARTEx_SetRxFifoThreshold>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000c96:	f000 f89d 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_LPUART1_UART_Init+0x8c>)
 8000c9c:	f002 fb67 	bl	800336e <HAL_UARTEx_DisableFifoMode>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ca6:	f000 f895 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000078 	.word	0x20000078
 8000cb4:	40008000 	.word	0x40008000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b3f      	ldr	r3, [pc, #252]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000cd4:	f043 0304 	orr.w	r3, r3, #4
 8000cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cda:	4b3c      	ldr	r3, [pc, #240]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cde:	f003 0304 	and.w	r3, r3, #4
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ce6:	4b39      	ldr	r3, [pc, #228]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a38      	ldr	r2, [pc, #224]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000cec:	f043 0320 	orr.w	r3, r3, #32
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b36      	ldr	r3, [pc, #216]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0320 	and.w	r3, r3, #32
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b33      	ldr	r3, [pc, #204]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a32      	ldr	r2, [pc, #200]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b30      	ldr	r3, [pc, #192]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1a:	4a2c      	ldr	r2, [pc, #176]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f240 1121 	movw	r1, #289	@ 0x121
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d38:	f000 fcb4 	bl	80016a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d42:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	481f      	ldr	r0, [pc, #124]	@ (8000dd0 <MX_GPIO_Init+0x118>)
 8000d54:	f000 fb0c 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_8;
 8000d58:	f240 1301 	movw	r3, #257	@ 0x101
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d66:	2303      	movs	r3, #3
 8000d68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d74:	f000 fafc 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_9;
 8000d78:	f240 2302 	movw	r3, #514	@ 0x202
 8000d7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d90:	f000 faee 	bl	8001370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d94:	2320      	movs	r3, #32
 8000d96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dae:	f000 fadf 	bl	8001370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2028      	movs	r0, #40	@ 0x28
 8000db8:	f000 faa5 	bl	8001306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000dbc:	2028      	movs	r0, #40	@ 0x28
 8000dbe:	f000 fabc 	bl	800133a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3728      	adds	r7, #40	@ 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000800 	.word	0x48000800

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <Error_Handler+0x8>

08000de0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e24 <HAL_MspInit+0x44>)
 8000de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dea:	4a0e      	ldr	r2, [pc, #56]	@ (8000e24 <HAL_MspInit+0x44>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000df2:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <HAL_MspInit+0x44>)
 8000df4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dfe:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <HAL_MspInit+0x44>)
 8000e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e02:	4a08      	ldr	r2, [pc, #32]	@ (8000e24 <HAL_MspInit+0x44>)
 8000e04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_MspInit+0x44>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	603b      	str	r3, [r7, #0]
 8000e14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e16:	f000 fd25 	bl	8001864 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40021000 	.word	0x40021000

08000e28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b09e      	sub	sp, #120	@ 0x78
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2254      	movs	r2, #84	@ 0x54
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f002 fbc9 	bl	80035e0 <memset>
  if(huart->Instance==LPUART1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed0 <HAL_UART_MspInit+0xa8>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d136      	bne.n	8000ec6 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000e58:	2320      	movs	r3, #32
 8000e5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4618      	mov	r0, r3
 8000e66:	f001 fa3b 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e70:	f7ff ffb0 	bl	8000dd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e74:	4b17      	ldr	r3, [pc, #92]	@ (8000ed4 <HAL_UART_MspInit+0xac>)
 8000e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e78:	4a16      	ldr	r2, [pc, #88]	@ (8000ed4 <HAL_UART_MspInit+0xac>)
 8000e7a:	f043 0301 	orr.w	r3, r3, #1
 8000e7e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_UART_MspInit+0xac>)
 8000e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ed4 <HAL_UART_MspInit+0xac>)
 8000e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e90:	4a10      	ldr	r2, [pc, #64]	@ (8000ed4 <HAL_UART_MspInit+0xac>)
 8000e92:	f043 0301 	orr.w	r3, r3, #1
 8000e96:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e98:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed4 <HAL_UART_MspInit+0xac>)
 8000e9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e9c:	f003 0301 	and.w	r3, r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000ea4:	230c      	movs	r3, #12
 8000ea6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000eb4:	230c      	movs	r3, #12
 8000eb6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ec2:	f000 fa55 	bl	8001370 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000ec6:	bf00      	nop
 8000ec8:	3778      	adds	r7, #120	@ 0x78
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40008000 	.word	0x40008000
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <NMI_Handler+0x4>

08000ee0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <HardFault_Handler+0x4>

08000ee8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <MemManage_Handler+0x4>

08000ef0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <BusFault_Handler+0x4>

08000ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <UsageFault_Handler+0x4>

08000f00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f2e:	f000 f8cf 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f3a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000f3e:	f000 fbc9 	bl	80016d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	@ (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	@ (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	@ (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f002 fb3a 	bl	80035f0 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	@ (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	20000154 	.word	0x20000154
 8000fb0:	200002a8 	.word	0x200002a8

08000fb4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd8:	480d      	ldr	r0, [pc, #52]	@ (8001010 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fda:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000fdc:	f7ff ffea 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fe0:	480c      	ldr	r0, [pc, #48]	@ (8001014 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fe2:	490d      	ldr	r1, [pc, #52]	@ (8001018 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe4:	4a0d      	ldr	r2, [pc, #52]	@ (800101c <LoopForever+0xe>)
  movs r3, #0
 8000fe6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fe8:	e002      	b.n	8000ff0 <LoopCopyDataInit>

08000fea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fee:	3304      	adds	r3, #4

08000ff0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ff0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ff2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff4:	d3f9      	bcc.n	8000fea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff8:	4c0a      	ldr	r4, [pc, #40]	@ (8001024 <LoopForever+0x16>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ffc:	e001      	b.n	8001002 <LoopFillZerobss>

08000ffe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001000:	3204      	adds	r2, #4

08001002 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001002:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001004:	d3fb      	bcc.n	8000ffe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001006:	f002 faf9 	bl	80035fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800100a:	f7ff fcbd 	bl	8000988 <main>

0800100e <LoopForever>:

LoopForever:
    b LoopForever
 800100e:	e7fe      	b.n	800100e <LoopForever>
  ldr   r0, =_estack
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800101c:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 8001020:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001024:	200002a4 	.word	0x200002a4

08001028 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC1_2_IRQHandler>

0800102a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001030:	2300      	movs	r3, #0
 8001032:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f95b 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f80e 	bl	800105c <HAL_InitTick>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d002      	beq.n	800104c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	e001      	b.n	8001050 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800104c:	f7ff fec8 	bl	8000de0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001050:	79fb      	ldrb	r3, [r7, #7]

}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001064:	2300      	movs	r3, #0
 8001066:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_InitTick+0x68>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d022      	beq.n	80010b6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001070:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <HAL_InitTick+0x6c>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_InitTick+0x68>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800107c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001080:	fbb2 f3f3 	udiv	r3, r2, r3
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f966 	bl	8001356 <HAL_SYSTICK_Config>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d10f      	bne.n	80010b0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b0f      	cmp	r3, #15
 8001094:	d809      	bhi.n	80010aa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001096:	2200      	movs	r2, #0
 8001098:	6879      	ldr	r1, [r7, #4]
 800109a:	f04f 30ff 	mov.w	r0, #4294967295
 800109e:	f000 f932 	bl	8001306 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a2:	4a0a      	ldr	r2, [pc, #40]	@ (80010cc <HAL_InitTick+0x70>)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	e007      	b.n	80010ba <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	e004      	b.n	80010ba <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
 80010b4:	e001      	b.n	80010ba <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000008 	.word	0x20000008
 80010c8:	20000000 	.word	0x20000000
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <HAL_IncTick+0x1c>)
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <HAL_IncTick+0x20>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4413      	add	r3, r2
 80010de:	4a03      	ldr	r2, [pc, #12]	@ (80010ec <HAL_IncTick+0x1c>)
 80010e0:	6013      	str	r3, [r2, #0]
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	20000158 	.word	0x20000158
 80010f0:	20000008 	.word	0x20000008

080010f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return uwTick;
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_GetTick+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000158 	.word	0x20000158

0800110c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001114:	f7ff ffee 	bl	80010f4 <HAL_GetTick>
 8001118:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001124:	d004      	beq.n	8001130 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_Delay+0x40>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4413      	add	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001130:	bf00      	nop
 8001132:	f7ff ffdf 	bl	80010f4 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	68fa      	ldr	r2, [r7, #12]
 800113e:	429a      	cmp	r2, r3
 8001140:	d8f7      	bhi.n	8001132 <HAL_Delay+0x26>
  {
  }
}
 8001142:	bf00      	nop
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	@ (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	@ (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	@ (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	@ (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	@ (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	@ 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	@ 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	@ (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	@ (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff29 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001314:	f7ff ff40 	bl	8001198 <__NVIC_GetPriorityGrouping>
 8001318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	6978      	ldr	r0, [r7, #20]
 8001320:	f7ff ff90 	bl	8001244 <NVIC_EncodePriority>
 8001324:	4602      	mov	r2, r0
 8001326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff5f 	bl	80011f0 <__NVIC_SetPriority>
}
 8001332:	bf00      	nop
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff33 	bl	80011b4 <__NVIC_EnableIRQ>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b082      	sub	sp, #8
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff ffa4 	bl	80012ac <SysTick_Config>
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800137e:	e15a      	b.n	8001636 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 814c 	beq.w	8001630 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b03      	cmp	r3, #3
 800141c:	d017      	beq.n	800144e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	6939      	ldr	r1, [r7, #16]
 800149e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0203 	and.w	r2, r3, #3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80a6 	beq.w	8001630 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001654 <HAL_GPIO_Init+0x2e4>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014e8:	4a5a      	ldr	r2, [pc, #360]	@ (8001654 <HAL_GPIO_Init+0x2e4>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6613      	str	r3, [r2, #96]	@ 0x60
 80014f0:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <HAL_GPIO_Init+0x2e4>)
 80014f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fc:	4a56      	ldr	r2, [pc, #344]	@ (8001658 <HAL_GPIO_Init+0x2e8>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001526:	d01f      	beq.n	8001568 <HAL_GPIO_Init+0x1f8>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4c      	ldr	r2, [pc, #304]	@ (800165c <HAL_GPIO_Init+0x2ec>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d019      	beq.n	8001564 <HAL_GPIO_Init+0x1f4>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a4b      	ldr	r2, [pc, #300]	@ (8001660 <HAL_GPIO_Init+0x2f0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d013      	beq.n	8001560 <HAL_GPIO_Init+0x1f0>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4a      	ldr	r2, [pc, #296]	@ (8001664 <HAL_GPIO_Init+0x2f4>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d00d      	beq.n	800155c <HAL_GPIO_Init+0x1ec>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a49      	ldr	r2, [pc, #292]	@ (8001668 <HAL_GPIO_Init+0x2f8>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d007      	beq.n	8001558 <HAL_GPIO_Init+0x1e8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a48      	ldr	r2, [pc, #288]	@ (800166c <HAL_GPIO_Init+0x2fc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d101      	bne.n	8001554 <HAL_GPIO_Init+0x1e4>
 8001550:	2305      	movs	r3, #5
 8001552:	e00a      	b.n	800156a <HAL_GPIO_Init+0x1fa>
 8001554:	2306      	movs	r3, #6
 8001556:	e008      	b.n	800156a <HAL_GPIO_Init+0x1fa>
 8001558:	2304      	movs	r3, #4
 800155a:	e006      	b.n	800156a <HAL_GPIO_Init+0x1fa>
 800155c:	2303      	movs	r3, #3
 800155e:	e004      	b.n	800156a <HAL_GPIO_Init+0x1fa>
 8001560:	2302      	movs	r3, #2
 8001562:	e002      	b.n	800156a <HAL_GPIO_Init+0x1fa>
 8001564:	2301      	movs	r3, #1
 8001566:	e000      	b.n	800156a <HAL_GPIO_Init+0x1fa>
 8001568:	2300      	movs	r3, #0
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	f002 0203 	and.w	r2, r2, #3
 8001570:	0092      	lsls	r2, r2, #2
 8001572:	4093      	lsls	r3, r2
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800157a:	4937      	ldr	r1, [pc, #220]	@ (8001658 <HAL_GPIO_Init+0x2e8>)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001588:	4b39      	ldr	r3, [pc, #228]	@ (8001670 <HAL_GPIO_Init+0x300>)
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	43db      	mvns	r3, r3
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80015a4:	693a      	ldr	r2, [r7, #16]
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015ac:	4a30      	ldr	r2, [pc, #192]	@ (8001670 <HAL_GPIO_Init+0x300>)
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <HAL_GPIO_Init+0x300>)
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	43db      	mvns	r3, r3
 80015bc:	693a      	ldr	r2, [r7, #16]
 80015be:	4013      	ands	r3, r2
 80015c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d003      	beq.n	80015d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d6:	4a26      	ldr	r2, [pc, #152]	@ (8001670 <HAL_GPIO_Init+0x300>)
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <HAL_GPIO_Init+0x300>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	43db      	mvns	r3, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4013      	ands	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d003      	beq.n	8001600 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80015f8:	693a      	ldr	r2, [r7, #16]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001600:	4a1b      	ldr	r2, [pc, #108]	@ (8001670 <HAL_GPIO_Init+0x300>)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001606:	4b1a      	ldr	r3, [pc, #104]	@ (8001670 <HAL_GPIO_Init+0x300>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	43db      	mvns	r3, r3
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	4013      	ands	r3, r2
 8001614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d003      	beq.n	800162a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800162a:	4a11      	ldr	r2, [pc, #68]	@ (8001670 <HAL_GPIO_Init+0x300>)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa22 f303 	lsr.w	r3, r2, r3
 8001640:	2b00      	cmp	r3, #0
 8001642:	f47f ae9d 	bne.w	8001380 <HAL_GPIO_Init+0x10>
  }
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000
 800165c:	48000400 	.word	0x48000400
 8001660:	48000800 	.word	0x48000800
 8001664:	48000c00 	.word	0x48000c00
 8001668:	48001000 	.word	0x48001000
 800166c:	48001400 	.word	0x48001400
 8001670:	40010400 	.word	0x40010400

08001674 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691a      	ldr	r2, [r3, #16]
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800168c:	2301      	movs	r3, #1
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e001      	b.n	8001696 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
}
 8001698:	4618      	mov	r0, r3
 800169a:	3714      	adds	r7, #20
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	460b      	mov	r3, r1
 80016ae:	807b      	strh	r3, [r7, #2]
 80016b0:	4613      	mov	r3, r2
 80016b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b4:	787b      	ldrb	r3, [r7, #1]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ba:	887a      	ldrh	r2, [r7, #2]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016c0:	e002      	b.n	80016c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016c2:	887a      	ldrh	r2, [r7, #2]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016de:	4b08      	ldr	r3, [pc, #32]	@ (8001700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d006      	beq.n	80016f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80016ea:	4a05      	ldr	r2, [pc, #20]	@ (8001700 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f806 	bl	8001704 <HAL_GPIO_EXTI_Callback>
  }
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40010400 	.word	0x40010400

08001704 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
	...

0800171c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800171c:	b480      	push	{r7}
 800171e:	b085      	sub	sp, #20
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d141      	bne.n	80017ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800172a:	4b4b      	ldr	r3, [pc, #300]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001732:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001736:	d131      	bne.n	800179c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001738:	4b47      	ldr	r3, [pc, #284]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800173a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800173e:	4a46      	ldr	r2, [pc, #280]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001744:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	4b43      	ldr	r3, [pc, #268]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001750:	4a41      	ldr	r2, [pc, #260]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001752:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001756:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001758:	4b40      	ldr	r3, [pc, #256]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2232      	movs	r2, #50	@ 0x32
 800175e:	fb02 f303 	mul.w	r3, r2, r3
 8001762:	4a3f      	ldr	r2, [pc, #252]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001764:	fba2 2303 	umull	r2, r3, r2, r3
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	3301      	adds	r3, #1
 800176c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800176e:	e002      	b.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3b01      	subs	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001776:	4b38      	ldr	r3, [pc, #224]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001778:	695b      	ldr	r3, [r3, #20]
 800177a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800177e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001782:	d102      	bne.n	800178a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f2      	bne.n	8001770 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800178a:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001792:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001796:	d158      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e057      	b.n	800184c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800179c:	4b2e      	ldr	r3, [pc, #184]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80017ac:	e04d      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80017b4:	d141      	bne.n	800183a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80017b6:	4b28      	ldr	r3, [pc, #160]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80017be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017c2:	d131      	bne.n	8001828 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017ca:	4a23      	ldr	r2, [pc, #140]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017d4:	4b20      	ldr	r3, [pc, #128]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017e4:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2232      	movs	r2, #50	@ 0x32
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017fa:	e002      	b.n	8001802 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	3b01      	subs	r3, #1
 8001800:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001802:	4b15      	ldr	r3, [pc, #84]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800180a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800180e:	d102      	bne.n	8001816 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f2      	bne.n	80017fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800181e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001822:	d112      	bne.n	800184a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e011      	b.n	800184c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001828:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800182a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800182e:	4a0a      	ldr	r2, [pc, #40]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001834:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001838:	e007      	b.n	800184a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001842:	4a05      	ldr	r2, [pc, #20]	@ (8001858 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001844:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001848:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40007000 	.word	0x40007000
 800185c:	20000000 	.word	0x20000000
 8001860:	431bde83 	.word	0x431bde83

08001864 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001868:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800186e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001872:	6093      	str	r3, [r2, #8]
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40007000 	.word	0x40007000

08001884 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b088      	sub	sp, #32
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e2fe      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d075      	beq.n	800198e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a2:	4b97      	ldr	r3, [pc, #604]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f003 030c 	and.w	r3, r3, #12
 80018aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ac:	4b94      	ldr	r3, [pc, #592]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	f003 0303 	and.w	r3, r3, #3
 80018b4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d102      	bne.n	80018c2 <HAL_RCC_OscConfig+0x3e>
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d002      	beq.n	80018c8 <HAL_RCC_OscConfig+0x44>
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d10b      	bne.n	80018e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c8:	4b8d      	ldr	r3, [pc, #564]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d05b      	beq.n	800198c <HAL_RCC_OscConfig+0x108>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d157      	bne.n	800198c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e2d9      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e8:	d106      	bne.n	80018f8 <HAL_RCC_OscConfig+0x74>
 80018ea:	4b85      	ldr	r3, [pc, #532]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a84      	ldr	r2, [pc, #528]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e01d      	b.n	8001934 <HAL_RCC_OscConfig+0xb0>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001900:	d10c      	bne.n	800191c <HAL_RCC_OscConfig+0x98>
 8001902:	4b7f      	ldr	r3, [pc, #508]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a7e      	ldr	r2, [pc, #504]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001908:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b7c      	ldr	r3, [pc, #496]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a7b      	ldr	r2, [pc, #492]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001914:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e00b      	b.n	8001934 <HAL_RCC_OscConfig+0xb0>
 800191c:	4b78      	ldr	r3, [pc, #480]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a77      	ldr	r2, [pc, #476]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001922:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	4b75      	ldr	r3, [pc, #468]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a74      	ldr	r2, [pc, #464]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 800192e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001932:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d013      	beq.n	8001964 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fbda 	bl	80010f4 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001944:	f7ff fbd6 	bl	80010f4 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b64      	cmp	r3, #100	@ 0x64
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e29e      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001956:	4b6a      	ldr	r3, [pc, #424]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0xc0>
 8001962:	e014      	b.n	800198e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fbc6 	bl	80010f4 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800196c:	f7ff fbc2 	bl	80010f4 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b64      	cmp	r3, #100	@ 0x64
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e28a      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800197e:	4b60      	ldr	r3, [pc, #384]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0xe8>
 800198a:	e000      	b.n	800198e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d075      	beq.n	8001a86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800199a:	4b59      	ldr	r3, [pc, #356]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
 80019a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019a4:	4b56      	ldr	r3, [pc, #344]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	f003 0303 	and.w	r3, r3, #3
 80019ac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2b0c      	cmp	r3, #12
 80019b2:	d102      	bne.n	80019ba <HAL_RCC_OscConfig+0x136>
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d002      	beq.n	80019c0 <HAL_RCC_OscConfig+0x13c>
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d11f      	bne.n	8001a00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019c0:	4b4f      	ldr	r3, [pc, #316]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_OscConfig+0x154>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d101      	bne.n	80019d8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e25d      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d8:	4b49      	ldr	r3, [pc, #292]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	061b      	lsls	r3, r3, #24
 80019e6:	4946      	ldr	r1, [pc, #280]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019ec:	4b45      	ldr	r3, [pc, #276]	@ (8001b04 <HAL_RCC_OscConfig+0x280>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7ff fb33 	bl	800105c <HAL_InitTick>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d043      	beq.n	8001a84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e249      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d023      	beq.n	8001a50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b3d      	ldr	r3, [pc, #244]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a14:	f7ff fb6e 	bl	80010f4 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a1c:	f7ff fb6a 	bl	80010f4 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e232      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a2e:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d0f0      	beq.n	8001a1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	4b31      	ldr	r3, [pc, #196]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	061b      	lsls	r3, r3, #24
 8001a48:	492d      	ldr	r1, [pc, #180]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
 8001a4e:	e01a      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a50:	4b2b      	ldr	r3, [pc, #172]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a2a      	ldr	r2, [pc, #168]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fb4a 	bl	80010f4 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a64:	f7ff fb46 	bl	80010f4 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e20e      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x1e0>
 8001a82:	e000      	b.n	8001a86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0308 	and.w	r3, r3, #8
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d041      	beq.n	8001b16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d01c      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a9a:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa0:	4a17      	ldr	r2, [pc, #92]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001aa2:	f043 0301 	orr.w	r3, r3, #1
 8001aa6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f7ff fb23 	bl	80010f4 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab2:	f7ff fb1f 	bl	80010f4 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e1e7      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001ac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0ef      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x22e>
 8001ad2:	e020      	b.n	8001b16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001ad6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ada:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <HAL_RCC_OscConfig+0x27c>)
 8001adc:	f023 0301 	bic.w	r3, r3, #1
 8001ae0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae4:	f7ff fb06 	bl	80010f4 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001aea:	e00d      	b.n	8001b08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aec:	f7ff fb02 	bl	80010f4 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d906      	bls.n	8001b08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1ca      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b08:	4b8c      	ldr	r3, [pc, #560]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001b0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1ea      	bne.n	8001aec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0304 	and.w	r3, r3, #4
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 80a6 	beq.w	8001c70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b28:	4b84      	ldr	r3, [pc, #528]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_RCC_OscConfig+0x2b4>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_RCC_OscConfig+0x2b6>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00d      	beq.n	8001b5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b42:	4a7e      	ldr	r2, [pc, #504]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5a:	4b79      	ldr	r3, [pc, #484]	@ (8001d40 <HAL_RCC_OscConfig+0x4bc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d118      	bne.n	8001b98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b66:	4b76      	ldr	r3, [pc, #472]	@ (8001d40 <HAL_RCC_OscConfig+0x4bc>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a75      	ldr	r2, [pc, #468]	@ (8001d40 <HAL_RCC_OscConfig+0x4bc>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fabf 	bl	80010f4 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff fabb 	bl	80010f4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e183      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001d40 <HAL_RCC_OscConfig+0x4bc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d108      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x32e>
 8001ba0:	4b66      	ldr	r3, [pc, #408]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ba6:	4a65      	ldr	r2, [pc, #404]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bb0:	e024      	b.n	8001bfc <HAL_RCC_OscConfig+0x378>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d110      	bne.n	8001bdc <HAL_RCC_OscConfig+0x358>
 8001bba:	4b60      	ldr	r3, [pc, #384]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc0:	4a5e      	ldr	r2, [pc, #376]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001bc2:	f043 0304 	orr.w	r3, r3, #4
 8001bc6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bca:	4b5c      	ldr	r3, [pc, #368]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bd0:	4a5a      	ldr	r2, [pc, #360]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bda:	e00f      	b.n	8001bfc <HAL_RCC_OscConfig+0x378>
 8001bdc:	4b57      	ldr	r3, [pc, #348]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001be2:	4a56      	ldr	r2, [pc, #344]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bec:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf2:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001bf4:	f023 0304 	bic.w	r3, r3, #4
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d016      	beq.n	8001c32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff fa76 	bl	80010f4 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7ff fa72 	bl	80010f4 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e138      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c22:	4b46      	ldr	r3, [pc, #280]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0ed      	beq.n	8001c0c <HAL_RCC_OscConfig+0x388>
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c32:	f7ff fa5f 	bl	80010f4 <HAL_GetTick>
 8001c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c38:	e00a      	b.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3a:	f7ff fa5b 	bl	80010f4 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e121      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c50:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1ed      	bne.n	8001c3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c5e:	7ffb      	ldrb	r3, [r7, #31]
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c64:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001c66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c68:	4a34      	ldr	r2, [pc, #208]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001c6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0320 	and.w	r3, r3, #32
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d03c      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c84:	4b2d      	ldr	r3, [pc, #180]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff fa2e 	bl	80010f4 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c9c:	f7ff fa2a 	bl	80010f4 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0f2      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cae:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001cb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0ef      	beq.n	8001c9c <HAL_RCC_OscConfig+0x418>
 8001cbc:	e01b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001cc6:	f023 0301 	bic.w	r3, r3, #1
 8001cca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cce:	f7ff fa11 	bl	80010f4 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd6:	f7ff fa0d 	bl	80010f4 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0d5      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1ef      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80c9 	beq.w	8001e92 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 030c 	and.w	r3, r3, #12
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	f000 8083 	beq.w	8001e14 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d15e      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a08      	ldr	r2, [pc, #32]	@ (8001d3c <HAL_RCC_OscConfig+0x4b8>)
 8001d1c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001d20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d22:	f7ff f9e7 	bl	80010f4 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d28:	e00c      	b.n	8001d44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f9e3 	bl	80010f4 <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	d905      	bls.n	8001d44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e0ab      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d44:	4b55      	ldr	r3, [pc, #340]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ec      	bne.n	8001d2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d50:	4b52      	ldr	r3, [pc, #328]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001d52:	68da      	ldr	r2, [r3, #12]
 8001d54:	4b52      	ldr	r3, [pc, #328]	@ (8001ea0 <HAL_RCC_OscConfig+0x61c>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6a11      	ldr	r1, [r2, #32]
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d60:	3a01      	subs	r2, #1
 8001d62:	0112      	lsls	r2, r2, #4
 8001d64:	4311      	orrs	r1, r2
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d6a:	0212      	lsls	r2, r2, #8
 8001d6c:	4311      	orrs	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d72:	0852      	lsrs	r2, r2, #1
 8001d74:	3a01      	subs	r2, #1
 8001d76:	0552      	lsls	r2, r2, #21
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d7e:	0852      	lsrs	r2, r2, #1
 8001d80:	3a01      	subs	r2, #1
 8001d82:	0652      	lsls	r2, r2, #25
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d8a:	06d2      	lsls	r2, r2, #27
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	4943      	ldr	r1, [pc, #268]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d94:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a40      	ldr	r2, [pc, #256]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001d9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001da0:	4b3e      	ldr	r3, [pc, #248]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4a3d      	ldr	r2, [pc, #244]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001daa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff f9a2 	bl	80010f4 <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db4:	f7ff f99e 	bl	80010f4 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e066      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x530>
 8001dd2:	e05e      	b.n	8001e92 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd4:	4b31      	ldr	r3, [pc, #196]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a30      	ldr	r2, [pc, #192]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001dda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de0:	f7ff f988 	bl	80010f4 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff f984 	bl	80010f4 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e04c      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dfa:	4b28      	ldr	r3, [pc, #160]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001e06:	4b25      	ldr	r3, [pc, #148]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4924      	ldr	r1, [pc, #144]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001e0c:	4b25      	ldr	r3, [pc, #148]	@ (8001ea4 <HAL_RCC_OscConfig+0x620>)
 8001e0e:	4013      	ands	r3, r2
 8001e10:	60cb      	str	r3, [r1, #12]
 8001e12:	e03e      	b.n	8001e92 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	69db      	ldr	r3, [r3, #28]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e039      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001e20:	4b1e      	ldr	r3, [pc, #120]	@ (8001e9c <HAL_RCC_OscConfig+0x618>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	f003 0203 	and.w	r2, r3, #3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d12c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d123      	bne.n	8001e8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e50:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11b      	bne.n	8001e8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e60:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d113      	bne.n	8001e8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	085b      	lsrs	r3, r3, #1
 8001e72:	3b01      	subs	r3, #1
 8001e74:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d109      	bne.n	8001e8e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	3b01      	subs	r3, #1
 8001e88:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	d001      	beq.n	8001e92 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001e92:	2300      	movs	r3, #0
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3720      	adds	r7, #32
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	019f800c 	.word	0x019f800c
 8001ea4:	feeefffc 	.word	0xfeeefffc

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e11e      	b.n	80020fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec0:	4b91      	ldr	r3, [pc, #580]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d910      	bls.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ece:	4b8e      	ldr	r3, [pc, #568]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f023 020f 	bic.w	r2, r3, #15
 8001ed6:	498c      	ldr	r1, [pc, #560]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	4b8a      	ldr	r3, [pc, #552]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d001      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e106      	b.n	80020fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d073      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d129      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f04:	4b81      	ldr	r3, [pc, #516]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e0f4      	b.n	80020fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001f14:	f000 f99e 	bl	8002254 <RCC_GetSysClockFreqFromPLLSource>
 8001f18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4a7c      	ldr	r2, [pc, #496]	@ (8002110 <HAL_RCC_ClockConfig+0x268>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d93f      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f22:	4b7a      	ldr	r3, [pc, #488]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d033      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d12f      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f42:	4b72      	ldr	r3, [pc, #456]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f4a:	4a70      	ldr	r2, [pc, #448]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f52:	2380      	movs	r3, #128	@ 0x80
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	e024      	b.n	8001fa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d107      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f60:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e0c6      	b.n	80020fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f70:	4b66      	ldr	r3, [pc, #408]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0be      	b.n	80020fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f80:	f000 f8ce 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4a61      	ldr	r2, [pc, #388]	@ (8002110 <HAL_RCC_ClockConfig+0x268>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d909      	bls.n	8001fa2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f8e:	4b5f      	ldr	r3, [pc, #380]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f96:	4a5d      	ldr	r2, [pc, #372]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f9e:	2380      	movs	r3, #128	@ 0x80
 8001fa0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4957      	ldr	r1, [pc, #348]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb4:	f7ff f89e 	bl	80010f4 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7ff f89a 	bl	80010f4 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e095      	b.n	80020fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0302 	and.w	r3, r3, #2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d023      	beq.n	8002038 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ffc:	4b43      	ldr	r3, [pc, #268]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4a42      	ldr	r2, [pc, #264]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8002002:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002006:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0308 	and.w	r3, r3, #8
 8002010:	2b00      	cmp	r3, #0
 8002012:	d007      	beq.n	8002024 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002014:	4b3d      	ldr	r3, [pc, #244]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800201c:	4a3b      	ldr	r2, [pc, #236]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 800201e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002022:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002024:	4b39      	ldr	r3, [pc, #228]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	4936      	ldr	r1, [pc, #216]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
 8002036:	e008      	b.n	800204a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	2b80      	cmp	r3, #128	@ 0x80
 800203c:	d105      	bne.n	800204a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800203e:	4b33      	ldr	r3, [pc, #204]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	4a32      	ldr	r2, [pc, #200]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 8002044:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002048:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800204a:	4b2f      	ldr	r3, [pc, #188]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	429a      	cmp	r2, r3
 8002056:	d21d      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002058:	4b2b      	ldr	r3, [pc, #172]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f023 020f 	bic.w	r2, r3, #15
 8002060:	4929      	ldr	r1, [pc, #164]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	4313      	orrs	r3, r2
 8002066:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002068:	f7ff f844 	bl	80010f4 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f7ff f840 	bl	80010f4 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e03b      	b.n	80020fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b20      	ldr	r3, [pc, #128]	@ (8002108 <HAL_RCC_ClockConfig+0x260>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d1ed      	bne.n	8002070 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b1a      	ldr	r3, [pc, #104]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	4917      	ldr	r1, [pc, #92]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b13      	ldr	r3, [pc, #76]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	490f      	ldr	r1, [pc, #60]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020d2:	f000 f825 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 80020d6:	4602      	mov	r2, r0
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <HAL_RCC_ClockConfig+0x264>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 030f 	and.w	r3, r3, #15
 80020e2:	490c      	ldr	r1, [pc, #48]	@ (8002114 <HAL_RCC_ClockConfig+0x26c>)
 80020e4:	5ccb      	ldrb	r3, [r1, r3]
 80020e6:	f003 031f 	and.w	r3, r3, #31
 80020ea:	fa22 f303 	lsr.w	r3, r2, r3
 80020ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002118 <HAL_RCC_ClockConfig+0x270>)
 80020f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020f2:	4b0a      	ldr	r3, [pc, #40]	@ (800211c <HAL_RCC_ClockConfig+0x274>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe ffb0 	bl	800105c <HAL_InitTick>
 80020fc:	4603      	mov	r3, r0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40022000 	.word	0x40022000
 800210c:	40021000 	.word	0x40021000
 8002110:	04c4b400 	.word	0x04c4b400
 8002114:	08003f9c 	.word	0x08003f9c
 8002118:	20000000 	.word	0x20000000
 800211c:	20000004 	.word	0x20000004

08002120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002120:	b480      	push	{r7}
 8002122:	b087      	sub	sp, #28
 8002124:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002126:	4b2c      	ldr	r3, [pc, #176]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b04      	cmp	r3, #4
 8002130:	d102      	bne.n	8002138 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002132:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	e047      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002138:	4b27      	ldr	r3, [pc, #156]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f003 030c 	and.w	r3, r3, #12
 8002140:	2b08      	cmp	r3, #8
 8002142:	d102      	bne.n	800214a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002144:	4b26      	ldr	r3, [pc, #152]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002146:	613b      	str	r3, [r7, #16]
 8002148:	e03e      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b0c      	cmp	r3, #12
 8002154:	d136      	bne.n	80021c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002156:	4b20      	ldr	r3, [pc, #128]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002160:	4b1d      	ldr	r3, [pc, #116]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	3301      	adds	r3, #1
 800216c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d10c      	bne.n	800218e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002174:	4a1a      	ldr	r2, [pc, #104]	@ (80021e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	fbb2 f3f3 	udiv	r3, r2, r3
 800217c:	4a16      	ldr	r2, [pc, #88]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800217e:	68d2      	ldr	r2, [r2, #12]
 8002180:	0a12      	lsrs	r2, r2, #8
 8002182:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	617b      	str	r3, [r7, #20]
      break;
 800218c:	e00c      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800218e:	4a13      	ldr	r2, [pc, #76]	@ (80021dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	fbb2 f3f3 	udiv	r3, r2, r3
 8002196:	4a10      	ldr	r2, [pc, #64]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002198:	68d2      	ldr	r2, [r2, #12]
 800219a:	0a12      	lsrs	r2, r2, #8
 800219c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80021a0:	fb02 f303 	mul.w	r3, r2, r3
 80021a4:	617b      	str	r3, [r7, #20]
      break;
 80021a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021a8:	4b0b      	ldr	r3, [pc, #44]	@ (80021d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	0e5b      	lsrs	r3, r3, #25
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	3301      	adds	r3, #1
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	e001      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80021c8:	693b      	ldr	r3, [r7, #16]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	00f42400 	.word	0x00f42400
 80021e0:	016e3600 	.word	0x016e3600

080021e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021e8:	4b03      	ldr	r3, [pc, #12]	@ (80021f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	20000000 	.word	0x20000000

080021fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002200:	f7ff fff0 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002204:	4602      	mov	r2, r0
 8002206:	4b06      	ldr	r3, [pc, #24]	@ (8002220 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	0a1b      	lsrs	r3, r3, #8
 800220c:	f003 0307 	and.w	r3, r3, #7
 8002210:	4904      	ldr	r1, [pc, #16]	@ (8002224 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002212:	5ccb      	ldrb	r3, [r1, r3]
 8002214:	f003 031f 	and.w	r3, r3, #31
 8002218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800221c:	4618      	mov	r0, r3
 800221e:	bd80      	pop	{r7, pc}
 8002220:	40021000 	.word	0x40021000
 8002224:	08003fac 	.word	0x08003fac

08002228 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800222c:	f7ff ffda 	bl	80021e4 <HAL_RCC_GetHCLKFreq>
 8002230:	4602      	mov	r2, r0
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	0adb      	lsrs	r3, r3, #11
 8002238:	f003 0307 	and.w	r3, r3, #7
 800223c:	4904      	ldr	r1, [pc, #16]	@ (8002250 <HAL_RCC_GetPCLK2Freq+0x28>)
 800223e:	5ccb      	ldrb	r3, [r1, r3]
 8002240:	f003 031f 	and.w	r3, r3, #31
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08003fac 	.word	0x08003fac

08002254 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002264:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	3301      	adds	r3, #1
 8002270:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b03      	cmp	r3, #3
 8002276:	d10c      	bne.n	8002292 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002278:	4a17      	ldr	r2, [pc, #92]	@ (80022d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002280:	4a14      	ldr	r2, [pc, #80]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002282:	68d2      	ldr	r2, [r2, #12]
 8002284:	0a12      	lsrs	r2, r2, #8
 8002286:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	617b      	str	r3, [r7, #20]
    break;
 8002290:	e00c      	b.n	80022ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002292:	4a12      	ldr	r2, [pc, #72]	@ (80022dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	fbb2 f3f3 	udiv	r3, r2, r3
 800229a:	4a0e      	ldr	r2, [pc, #56]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800229c:	68d2      	ldr	r2, [r2, #12]
 800229e:	0a12      	lsrs	r2, r2, #8
 80022a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	617b      	str	r3, [r7, #20]
    break;
 80022aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022ac:	4b09      	ldr	r3, [pc, #36]	@ (80022d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	0e5b      	lsrs	r3, r3, #25
 80022b2:	f003 0303 	and.w	r3, r3, #3
 80022b6:	3301      	adds	r3, #1
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80022c6:	687b      	ldr	r3, [r7, #4]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40021000 	.word	0x40021000
 80022d8:	016e3600 	.word	0x016e3600
 80022dc:	00f42400 	.word	0x00f42400

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022ec:	2300      	movs	r3, #0
 80022ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8098 	beq.w	800242e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fe:	2300      	movs	r3, #0
 8002300:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002302:	4b43      	ldr	r3, [pc, #268]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10d      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800230e:	4b40      	ldr	r3, [pc, #256]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002312:	4a3f      	ldr	r2, [pc, #252]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002314:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002318:	6593      	str	r3, [r2, #88]	@ 0x58
 800231a:	4b3d      	ldr	r3, [pc, #244]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800231e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002326:	2301      	movs	r3, #1
 8002328:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800232a:	4b3a      	ldr	r3, [pc, #232]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a39      	ldr	r2, [pc, #228]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002334:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002336:	f7fe fedd 	bl	80010f4 <HAL_GetTick>
 800233a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800233c:	e009      	b.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7fe fed9 	bl	80010f4 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d902      	bls.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	74fb      	strb	r3, [r7, #19]
        break;
 8002350:	e005      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002352:	4b30      	ldr	r3, [pc, #192]	@ (8002414 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0ef      	beq.n	800233e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800235e:	7cfb      	ldrb	r3, [r7, #19]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d159      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002364:	4b2a      	ldr	r3, [pc, #168]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800236e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d01e      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	d019      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002380:	4b23      	ldr	r3, [pc, #140]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002382:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800238a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800238c:	4b20      	ldr	r3, [pc, #128]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800238e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002392:	4a1f      	ldr	r2, [pc, #124]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002394:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002398:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800239c:	4b1c      	ldr	r3, [pc, #112]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800239e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023ac:	4a18      	ldr	r2, [pc, #96]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d016      	beq.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023be:	f7fe fe99 	bl	80010f4 <HAL_GetTick>
 80023c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023c4:	e00b      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7fe fe95 	bl	80010f4 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d902      	bls.n	80023de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	74fb      	strb	r3, [r7, #19]
            break;
 80023dc:	e006      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023de:	4b0c      	ldr	r3, [pc, #48]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0ec      	beq.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023ec:	7cfb      	ldrb	r3, [r7, #19]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f2:	4b07      	ldr	r3, [pc, #28]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002400:	4903      	ldr	r1, [pc, #12]	@ (8002410 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002408:	e008      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800240a:	7cfb      	ldrb	r3, [r7, #19]
 800240c:	74bb      	strb	r3, [r7, #18]
 800240e:	e005      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002410:	40021000 	.word	0x40021000
 8002414:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800241c:	7c7b      	ldrb	r3, [r7, #17]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d105      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002422:	4ba7      	ldr	r3, [pc, #668]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002426:	4aa6      	ldr	r2, [pc, #664]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002428:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800242c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00a      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800243a:	4ba1      	ldr	r3, [pc, #644]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800243c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002440:	f023 0203 	bic.w	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	499d      	ldr	r1, [pc, #628]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800244a:	4313      	orrs	r3, r2
 800244c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0302 	and.w	r3, r3, #2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00a      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800245c:	4b98      	ldr	r3, [pc, #608]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800245e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002462:	f023 020c 	bic.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	4995      	ldr	r1, [pc, #596]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800247e:	4b90      	ldr	r3, [pc, #576]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002484:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	498c      	ldr	r1, [pc, #560]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024a0:	4b87      	ldr	r3, [pc, #540]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024a6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	4984      	ldr	r1, [pc, #528]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024c2:	4b7f      	ldr	r3, [pc, #508]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	497b      	ldr	r1, [pc, #492]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e4:	4b76      	ldr	r3, [pc, #472]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	4973      	ldr	r1, [pc, #460]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002506:	4b6e      	ldr	r3, [pc, #440]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800250c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	496a      	ldr	r1, [pc, #424]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002528:	4b65      	ldr	r3, [pc, #404]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	4962      	ldr	r1, [pc, #392]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800254a:	4b5d      	ldr	r3, [pc, #372]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002550:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002558:	4959      	ldr	r1, [pc, #356]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800256c:	4b54      	ldr	r3, [pc, #336]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800256e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002572:	f023 0203 	bic.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800257a:	4951      	ldr	r1, [pc, #324]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800258e:	4b4c      	ldr	r3, [pc, #304]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002594:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800259c:	4948      	ldr	r1, [pc, #288]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d015      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025b0:	4b43      	ldr	r3, [pc, #268]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4940      	ldr	r1, [pc, #256]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025ce:	d105      	bne.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d0:	4b3b      	ldr	r3, [pc, #236]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4a3a      	ldr	r2, [pc, #232]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025da:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d015      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025e8:	4b35      	ldr	r3, [pc, #212]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ee:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f6:	4932      	ldr	r1, [pc, #200]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002602:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002606:	d105      	bne.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002608:	4b2d      	ldr	r3, [pc, #180]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a2c      	ldr	r2, [pc, #176]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002612:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d015      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002620:	4b27      	ldr	r3, [pc, #156]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002626:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262e:	4924      	ldr	r1, [pc, #144]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800263e:	d105      	bne.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002640:	4b1f      	ldr	r3, [pc, #124]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	4a1e      	ldr	r2, [pc, #120]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800264a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d015      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002658:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002666:	4916      	ldr	r1, [pc, #88]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002668:	4313      	orrs	r3, r2
 800266a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002672:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002676:	d105      	bne.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002678:	4b11      	ldr	r3, [pc, #68]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002682:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d019      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002690:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002696:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269e:	4908      	ldr	r1, [pc, #32]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026ae:	d109      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026b0:	4b03      	ldr	r3, [pc, #12]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4a02      	ldr	r2, [pc, #8]	@ (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026ba:	60d3      	str	r3, [r2, #12]
 80026bc:	e002      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80026d0:	4b29      	ldr	r3, [pc, #164]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	4926      	ldr	r1, [pc, #152]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026ee:	d105      	bne.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026f0:	4b21      	ldr	r3, [pc, #132]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	4a20      	ldr	r2, [pc, #128]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80026f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d015      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002708:	4b1b      	ldr	r3, [pc, #108]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800270a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800270e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002716:	4918      	ldr	r1, [pc, #96]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002726:	d105      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002728:	4b13      	ldr	r3, [pc, #76]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	4a12      	ldr	r2, [pc, #72]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800272e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002732:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d015      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002740:	4b0d      	ldr	r3, [pc, #52]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002742:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002746:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800274e:	490a      	ldr	r1, [pc, #40]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800275a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800275e:	d105      	bne.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002760:	4b05      	ldr	r3, [pc, #20]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	4a04      	ldr	r2, [pc, #16]	@ (8002778 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002766:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800276a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800276c:	7cbb      	ldrb	r3, [r7, #18]
}
 800276e:	4618      	mov	r0, r3
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000

0800277c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e042      	b.n	8002814 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fe fb41 	bl	8000e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2224      	movs	r2, #36	@ 0x24
 80027aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fbb2 	bl	8002f30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f8b3 	bl	8002938 <UART_SetConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d101      	bne.n	80027dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e01b      	b.n	8002814 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 fc31 	bl	8003074 <UART_CheckIdleState>
 8002812:	4603      	mov	r3, r0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3708      	adds	r7, #8
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	@ 0x28
 8002820:	af02      	add	r7, sp, #8
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002832:	2b20      	cmp	r3, #32
 8002834:	d17b      	bne.n	800292e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d002      	beq.n	8002842 <HAL_UART_Transmit+0x26>
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d101      	bne.n	8002846 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e074      	b.n	8002930 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2200      	movs	r2, #0
 800284a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2221      	movs	r2, #33	@ 0x21
 8002852:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002856:	f7fe fc4d 	bl	80010f4 <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	88fa      	ldrh	r2, [r7, #6]
 8002860:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	88fa      	ldrh	r2, [r7, #6]
 8002868:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002874:	d108      	bne.n	8002888 <HAL_UART_Transmit+0x6c>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d104      	bne.n	8002888 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	e003      	b.n	8002890 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002890:	e030      	b.n	80028f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2200      	movs	r2, #0
 800289a:	2180      	movs	r1, #128	@ 0x80
 800289c:	68f8      	ldr	r0, [r7, #12]
 800289e:	f000 fc93 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2220      	movs	r2, #32
 80028ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e03d      	b.n	8002930 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10b      	bne.n	80028d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	3302      	adds	r3, #2
 80028ce:	61bb      	str	r3, [r7, #24]
 80028d0:	e007      	b.n	80028e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	781a      	ldrb	r2, [r3, #0]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	3301      	adds	r3, #1
 80028e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1c8      	bne.n	8002892 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	2200      	movs	r2, #0
 8002908:	2140      	movs	r1, #64	@ 0x40
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fc5c 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2220      	movs	r2, #32
 800291a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e006      	b.n	8002930 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2220      	movs	r2, #32
 8002926:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
  }
}
 8002930:	4618      	mov	r0, r3
 8002932:	3720      	adds	r7, #32
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b08c      	sub	sp, #48	@ 0x30
 800293e:	af00      	add	r7, sp, #0
 8002940:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	431a      	orrs	r2, r3
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	431a      	orrs	r2, r3
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	4313      	orrs	r3, r2
 800295e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	4baa      	ldr	r3, [pc, #680]	@ (8002c10 <UART_SetConfig+0x2d8>)
 8002968:	4013      	ands	r3, r2
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002970:	430b      	orrs	r3, r1
 8002972:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a9f      	ldr	r2, [pc, #636]	@ (8002c14 <UART_SetConfig+0x2dc>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d004      	beq.n	80029a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029a0:	4313      	orrs	r3, r2
 80029a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80029ae:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	6812      	ldr	r2, [r2, #0]
 80029b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029b8:	430b      	orrs	r3, r1
 80029ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	f023 010f 	bic.w	r1, r3, #15
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a90      	ldr	r2, [pc, #576]	@ (8002c18 <UART_SetConfig+0x2e0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d125      	bne.n	8002a28 <UART_SetConfig+0xf0>
 80029dc:	4b8f      	ldr	r3, [pc, #572]	@ (8002c1c <UART_SetConfig+0x2e4>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b03      	cmp	r3, #3
 80029e8:	d81a      	bhi.n	8002a20 <UART_SetConfig+0xe8>
 80029ea:	a201      	add	r2, pc, #4	@ (adr r2, 80029f0 <UART_SetConfig+0xb8>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a01 	.word	0x08002a01
 80029f4:	08002a11 	.word	0x08002a11
 80029f8:	08002a09 	.word	0x08002a09
 80029fc:	08002a19 	.word	0x08002a19
 8002a00:	2301      	movs	r3, #1
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a06:	e116      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a08:	2302      	movs	r3, #2
 8002a0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a0e:	e112      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a10:	2304      	movs	r3, #4
 8002a12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a16:	e10e      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a18:	2308      	movs	r3, #8
 8002a1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a1e:	e10a      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a20:	2310      	movs	r3, #16
 8002a22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a26:	e106      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a7c      	ldr	r2, [pc, #496]	@ (8002c20 <UART_SetConfig+0x2e8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d138      	bne.n	8002aa4 <UART_SetConfig+0x16c>
 8002a32:	4b7a      	ldr	r3, [pc, #488]	@ (8002c1c <UART_SetConfig+0x2e4>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a38:	f003 030c 	and.w	r3, r3, #12
 8002a3c:	2b0c      	cmp	r3, #12
 8002a3e:	d82d      	bhi.n	8002a9c <UART_SetConfig+0x164>
 8002a40:	a201      	add	r2, pc, #4	@ (adr r2, 8002a48 <UART_SetConfig+0x110>)
 8002a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a46:	bf00      	nop
 8002a48:	08002a7d 	.word	0x08002a7d
 8002a4c:	08002a9d 	.word	0x08002a9d
 8002a50:	08002a9d 	.word	0x08002a9d
 8002a54:	08002a9d 	.word	0x08002a9d
 8002a58:	08002a8d 	.word	0x08002a8d
 8002a5c:	08002a9d 	.word	0x08002a9d
 8002a60:	08002a9d 	.word	0x08002a9d
 8002a64:	08002a9d 	.word	0x08002a9d
 8002a68:	08002a85 	.word	0x08002a85
 8002a6c:	08002a9d 	.word	0x08002a9d
 8002a70:	08002a9d 	.word	0x08002a9d
 8002a74:	08002a9d 	.word	0x08002a9d
 8002a78:	08002a95 	.word	0x08002a95
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a82:	e0d8      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a84:	2302      	movs	r3, #2
 8002a86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a8a:	e0d4      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a8c:	2304      	movs	r3, #4
 8002a8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a92:	e0d0      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a94:	2308      	movs	r3, #8
 8002a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002a9a:	e0cc      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002a9c:	2310      	movs	r3, #16
 8002a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002aa2:	e0c8      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a5e      	ldr	r2, [pc, #376]	@ (8002c24 <UART_SetConfig+0x2ec>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d125      	bne.n	8002afa <UART_SetConfig+0x1c2>
 8002aae:	4b5b      	ldr	r3, [pc, #364]	@ (8002c1c <UART_SetConfig+0x2e4>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ab4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ab8:	2b30      	cmp	r3, #48	@ 0x30
 8002aba:	d016      	beq.n	8002aea <UART_SetConfig+0x1b2>
 8002abc:	2b30      	cmp	r3, #48	@ 0x30
 8002abe:	d818      	bhi.n	8002af2 <UART_SetConfig+0x1ba>
 8002ac0:	2b20      	cmp	r3, #32
 8002ac2:	d00a      	beq.n	8002ada <UART_SetConfig+0x1a2>
 8002ac4:	2b20      	cmp	r3, #32
 8002ac6:	d814      	bhi.n	8002af2 <UART_SetConfig+0x1ba>
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <UART_SetConfig+0x19a>
 8002acc:	2b10      	cmp	r3, #16
 8002ace:	d008      	beq.n	8002ae2 <UART_SetConfig+0x1aa>
 8002ad0:	e00f      	b.n	8002af2 <UART_SetConfig+0x1ba>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ad8:	e0ad      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002ada:	2302      	movs	r3, #2
 8002adc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae0:	e0a9      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ae8:	e0a5      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002aea:	2308      	movs	r3, #8
 8002aec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af0:	e0a1      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002af2:	2310      	movs	r3, #16
 8002af4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002af8:	e09d      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a4a      	ldr	r2, [pc, #296]	@ (8002c28 <UART_SetConfig+0x2f0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d125      	bne.n	8002b50 <UART_SetConfig+0x218>
 8002b04:	4b45      	ldr	r3, [pc, #276]	@ (8002c1c <UART_SetConfig+0x2e4>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b0a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b10:	d016      	beq.n	8002b40 <UART_SetConfig+0x208>
 8002b12:	2bc0      	cmp	r3, #192	@ 0xc0
 8002b14:	d818      	bhi.n	8002b48 <UART_SetConfig+0x210>
 8002b16:	2b80      	cmp	r3, #128	@ 0x80
 8002b18:	d00a      	beq.n	8002b30 <UART_SetConfig+0x1f8>
 8002b1a:	2b80      	cmp	r3, #128	@ 0x80
 8002b1c:	d814      	bhi.n	8002b48 <UART_SetConfig+0x210>
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <UART_SetConfig+0x1f0>
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d008      	beq.n	8002b38 <UART_SetConfig+0x200>
 8002b26:	e00f      	b.n	8002b48 <UART_SetConfig+0x210>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b2e:	e082      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002b30:	2302      	movs	r3, #2
 8002b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b36:	e07e      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b3e:	e07a      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002b40:	2308      	movs	r3, #8
 8002b42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b46:	e076      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002b48:	2310      	movs	r3, #16
 8002b4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b4e:	e072      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <UART_SetConfig+0x2f4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d12a      	bne.n	8002bb0 <UART_SetConfig+0x278>
 8002b5a:	4b30      	ldr	r3, [pc, #192]	@ (8002c1c <UART_SetConfig+0x2e4>)
 8002b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b64:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b68:	d01a      	beq.n	8002ba0 <UART_SetConfig+0x268>
 8002b6a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b6e:	d81b      	bhi.n	8002ba8 <UART_SetConfig+0x270>
 8002b70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b74:	d00c      	beq.n	8002b90 <UART_SetConfig+0x258>
 8002b76:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b7a:	d815      	bhi.n	8002ba8 <UART_SetConfig+0x270>
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d003      	beq.n	8002b88 <UART_SetConfig+0x250>
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b84:	d008      	beq.n	8002b98 <UART_SetConfig+0x260>
 8002b86:	e00f      	b.n	8002ba8 <UART_SetConfig+0x270>
 8002b88:	2300      	movs	r3, #0
 8002b8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b8e:	e052      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002b90:	2302      	movs	r3, #2
 8002b92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b96:	e04e      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002b98:	2304      	movs	r3, #4
 8002b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002b9e:	e04a      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002ba0:	2308      	movs	r3, #8
 8002ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ba6:	e046      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002ba8:	2310      	movs	r3, #16
 8002baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bae:	e042      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <UART_SetConfig+0x2dc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d13a      	bne.n	8002c30 <UART_SetConfig+0x2f8>
 8002bba:	4b18      	ldr	r3, [pc, #96]	@ (8002c1c <UART_SetConfig+0x2e4>)
 8002bbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002bc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bc8:	d01a      	beq.n	8002c00 <UART_SetConfig+0x2c8>
 8002bca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002bce:	d81b      	bhi.n	8002c08 <UART_SetConfig+0x2d0>
 8002bd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bd4:	d00c      	beq.n	8002bf0 <UART_SetConfig+0x2b8>
 8002bd6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002bda:	d815      	bhi.n	8002c08 <UART_SetConfig+0x2d0>
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <UART_SetConfig+0x2b0>
 8002be0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002be4:	d008      	beq.n	8002bf8 <UART_SetConfig+0x2c0>
 8002be6:	e00f      	b.n	8002c08 <UART_SetConfig+0x2d0>
 8002be8:	2300      	movs	r3, #0
 8002bea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bee:	e022      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bf6:	e01e      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002bfe:	e01a      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002c00:	2308      	movs	r3, #8
 8002c02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c06:	e016      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002c08:	2310      	movs	r3, #16
 8002c0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002c0e:	e012      	b.n	8002c36 <UART_SetConfig+0x2fe>
 8002c10:	cfff69f3 	.word	0xcfff69f3
 8002c14:	40008000 	.word	0x40008000
 8002c18:	40013800 	.word	0x40013800
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	40004400 	.word	0x40004400
 8002c24:	40004800 	.word	0x40004800
 8002c28:	40004c00 	.word	0x40004c00
 8002c2c:	40005000 	.word	0x40005000
 8002c30:	2310      	movs	r3, #16
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4aae      	ldr	r2, [pc, #696]	@ (8002ef4 <UART_SetConfig+0x5bc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	f040 8097 	bne.w	8002d70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c42:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d823      	bhi.n	8002c92 <UART_SetConfig+0x35a>
 8002c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c50 <UART_SetConfig+0x318>)
 8002c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c50:	08002c75 	.word	0x08002c75
 8002c54:	08002c93 	.word	0x08002c93
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002c93 	.word	0x08002c93
 8002c60:	08002c83 	.word	0x08002c83
 8002c64:	08002c93 	.word	0x08002c93
 8002c68:	08002c93 	.word	0x08002c93
 8002c6c:	08002c93 	.word	0x08002c93
 8002c70:	08002c8b 	.word	0x08002c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c74:	f7ff fac2 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002c78:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c7a:	e010      	b.n	8002c9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c7c:	4b9e      	ldr	r3, [pc, #632]	@ (8002ef8 <UART_SetConfig+0x5c0>)
 8002c7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c80:	e00d      	b.n	8002c9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c82:	f7ff fa4d 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002c86:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002c88:	e009      	b.n	8002c9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002c90:	e005      	b.n	8002c9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002c92:	2300      	movs	r3, #0
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002c9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	f000 8130 	beq.w	8002f06 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002caa:	4a94      	ldr	r2, [pc, #592]	@ (8002efc <UART_SetConfig+0x5c4>)
 8002cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d305      	bcc.n	8002cd6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d903      	bls.n	8002cde <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002cdc:	e113      	b.n	8002f06 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	60fa      	str	r2, [r7, #12]
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cea:	4a84      	ldr	r2, [pc, #528]	@ (8002efc <UART_SetConfig+0x5c4>)
 8002cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	603b      	str	r3, [r7, #0]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d00:	f7fd fae6 	bl	80002d0 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4610      	mov	r0, r2
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	020b      	lsls	r3, r1, #8
 8002d16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002d1a:	0202      	lsls	r2, r0, #8
 8002d1c:	6979      	ldr	r1, [r7, #20]
 8002d1e:	6849      	ldr	r1, [r1, #4]
 8002d20:	0849      	lsrs	r1, r1, #1
 8002d22:	2000      	movs	r0, #0
 8002d24:	460c      	mov	r4, r1
 8002d26:	4605      	mov	r5, r0
 8002d28:	eb12 0804 	adds.w	r8, r2, r4
 8002d2c:	eb43 0905 	adc.w	r9, r3, r5
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	469a      	mov	sl, r3
 8002d38:	4693      	mov	fp, r2
 8002d3a:	4652      	mov	r2, sl
 8002d3c:	465b      	mov	r3, fp
 8002d3e:	4640      	mov	r0, r8
 8002d40:	4649      	mov	r1, r9
 8002d42:	f7fd fac5 	bl	80002d0 <__aeabi_uldivmod>
 8002d46:	4602      	mov	r2, r0
 8002d48:	460b      	mov	r3, r1
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d54:	d308      	bcc.n	8002d68 <UART_SetConfig+0x430>
 8002d56:	6a3b      	ldr	r3, [r7, #32]
 8002d58:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d5c:	d204      	bcs.n	8002d68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a3a      	ldr	r2, [r7, #32]
 8002d64:	60da      	str	r2, [r3, #12]
 8002d66:	e0ce      	b.n	8002f06 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002d6e:	e0ca      	b.n	8002f06 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d78:	d166      	bne.n	8002e48 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002d7a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d827      	bhi.n	8002dd2 <UART_SetConfig+0x49a>
 8002d82:	a201      	add	r2, pc, #4	@ (adr r2, 8002d88 <UART_SetConfig+0x450>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002dad 	.word	0x08002dad
 8002d8c:	08002db5 	.word	0x08002db5
 8002d90:	08002dbd 	.word	0x08002dbd
 8002d94:	08002dd3 	.word	0x08002dd3
 8002d98:	08002dc3 	.word	0x08002dc3
 8002d9c:	08002dd3 	.word	0x08002dd3
 8002da0:	08002dd3 	.word	0x08002dd3
 8002da4:	08002dd3 	.word	0x08002dd3
 8002da8:	08002dcb 	.word	0x08002dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dac:	f7ff fa26 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002db0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002db2:	e014      	b.n	8002dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002db4:	f7ff fa38 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8002db8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dba:	e010      	b.n	8002dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dbc:	4b4e      	ldr	r3, [pc, #312]	@ (8002ef8 <UART_SetConfig+0x5c0>)
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dc0:	e00d      	b.n	8002dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dc2:	f7ff f9ad 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002dc6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002dc8:	e009      	b.n	8002dde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002dd0:	e005      	b.n	8002dde <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002ddc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8090 	beq.w	8002f06 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dea:	4a44      	ldr	r2, [pc, #272]	@ (8002efc <UART_SetConfig+0x5c4>)
 8002dec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002df0:	461a      	mov	r2, r3
 8002df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002df8:	005a      	lsls	r2, r3, #1
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	441a      	add	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d916      	bls.n	8002e40 <UART_SetConfig+0x508>
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e18:	d212      	bcs.n	8002e40 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	b29b      	uxth	r3, r3
 8002e1e:	f023 030f 	bic.w	r3, r3, #15
 8002e22:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	085b      	lsrs	r3, r3, #1
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	8bfb      	ldrh	r3, [r7, #30]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	8bfa      	ldrh	r2, [r7, #30]
 8002e3c:	60da      	str	r2, [r3, #12]
 8002e3e:	e062      	b.n	8002f06 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002e46:	e05e      	b.n	8002f06 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e48:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d828      	bhi.n	8002ea2 <UART_SetConfig+0x56a>
 8002e50:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <UART_SetConfig+0x520>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e7d 	.word	0x08002e7d
 8002e5c:	08002e85 	.word	0x08002e85
 8002e60:	08002e8d 	.word	0x08002e8d
 8002e64:	08002ea3 	.word	0x08002ea3
 8002e68:	08002e93 	.word	0x08002e93
 8002e6c:	08002ea3 	.word	0x08002ea3
 8002e70:	08002ea3 	.word	0x08002ea3
 8002e74:	08002ea3 	.word	0x08002ea3
 8002e78:	08002e9b 	.word	0x08002e9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e7c:	f7ff f9be 	bl	80021fc <HAL_RCC_GetPCLK1Freq>
 8002e80:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e82:	e014      	b.n	8002eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e84:	f7ff f9d0 	bl	8002228 <HAL_RCC_GetPCLK2Freq>
 8002e88:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e8a:	e010      	b.n	8002eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002ef8 <UART_SetConfig+0x5c0>)
 8002e8e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002e90:	e00d      	b.n	8002eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e92:	f7ff f945 	bl	8002120 <HAL_RCC_GetSysClockFreq>
 8002e96:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002e98:	e009      	b.n	8002eae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ea0:	e005      	b.n	8002eae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002eac:	bf00      	nop
    }

    if (pclk != 0U)
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d028      	beq.n	8002f06 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	4a10      	ldr	r2, [pc, #64]	@ (8002efc <UART_SetConfig+0x5c4>)
 8002eba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	441a      	add	r2, r3
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	2b0f      	cmp	r3, #15
 8002edc:	d910      	bls.n	8002f00 <UART_SetConfig+0x5c8>
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d20c      	bcs.n	8002f00 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60da      	str	r2, [r3, #12]
 8002ef0:	e009      	b.n	8002f06 <UART_SetConfig+0x5ce>
 8002ef2:	bf00      	nop
 8002ef4:	40008000 	.word	0x40008000
 8002ef8:	00f42400 	.word	0x00f42400
 8002efc:	08003fb4 	.word	0x08003fb4
      }
      else
      {
        ret = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002f22:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3730      	adds	r7, #48	@ 0x30
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002f30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00a      	beq.n	8002f5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00a      	beq.n	8002f7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f80:	f003 0302 	and.w	r3, r3, #2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00a      	beq.n	8002f9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00a      	beq.n	8002fc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00a      	beq.n	8002fe2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	430a      	orrs	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d01a      	beq.n	8003046 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800302e:	d10a      	bne.n	8003046 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00a      	beq.n	8003068 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
  }
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b098      	sub	sp, #96	@ 0x60
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003084:	f7fe f836 	bl	80010f4 <HAL_GetTick>
 8003088:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b08      	cmp	r3, #8
 8003096:	d12f      	bne.n	80030f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003098:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a0:	2200      	movs	r2, #0
 80030a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f88e 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d022      	beq.n	80030f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ba:	e853 3f00 	ldrex	r3, [r3]
 80030be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80030c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80030d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80030d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030d8:	e841 2300 	strex	r3, r2, [r1]
 80030dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80030de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1e6      	bne.n	80030b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e063      	b.n	80031c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d149      	bne.n	800319a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003106:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310e:	2200      	movs	r2, #0
 8003110:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f857 	bl	80031c8 <UART_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d03c      	beq.n	800319a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	e853 3f00 	ldrex	r3, [r3]
 800312c:	623b      	str	r3, [r7, #32]
   return(result);
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003134:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800313e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003140:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003142:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003146:	e841 2300 	strex	r3, r2, [r1]
 800314a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1e6      	bne.n	8003120 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3308      	adds	r3, #8
 8003158:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	e853 3f00 	ldrex	r3, [r3]
 8003160:	60fb      	str	r3, [r7, #12]
   return(result);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f023 0301 	bic.w	r3, r3, #1
 8003168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3308      	adds	r3, #8
 8003170:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003172:	61fa      	str	r2, [r7, #28]
 8003174:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	69b9      	ldr	r1, [r7, #24]
 8003178:	69fa      	ldr	r2, [r7, #28]
 800317a:	e841 2300 	strex	r3, r2, [r1]
 800317e:	617b      	str	r3, [r7, #20]
   return(result);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1e5      	bne.n	8003152 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e012      	b.n	80031c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2220      	movs	r2, #32
 80031a6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3758      	adds	r7, #88	@ 0x58
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	603b      	str	r3, [r7, #0]
 80031d4:	4613      	mov	r3, r2
 80031d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031d8:	e04f      	b.n	800327a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e0:	d04b      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e2:	f7fd ff87 	bl	80010f4 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d302      	bcc.n	80031f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e04e      	b.n	800329a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	d037      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0xb2>
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	2b80      	cmp	r3, #128	@ 0x80
 800320e:	d034      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2b40      	cmp	r3, #64	@ 0x40
 8003214:	d031      	beq.n	800327a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 0308 	and.w	r3, r3, #8
 8003220:	2b08      	cmp	r3, #8
 8003222:	d110      	bne.n	8003246 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2208      	movs	r2, #8
 800322a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 f838 	bl	80032a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2208      	movs	r2, #8
 8003236:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e029      	b.n	800329a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	69db      	ldr	r3, [r3, #28]
 800324c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003250:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003254:	d111      	bne.n	800327a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800325e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 f81e 	bl	80032a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2220      	movs	r2, #32
 800326a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e00f      	b.n	800329a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69da      	ldr	r2, [r3, #28]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	4013      	ands	r3, r2
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	429a      	cmp	r2, r3
 8003288:	bf0c      	ite	eq
 800328a:	2301      	moveq	r3, #1
 800328c:	2300      	movne	r3, #0
 800328e:	b2db      	uxtb	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	79fb      	ldrb	r3, [r7, #7]
 8003294:	429a      	cmp	r2, r3
 8003296:	d0a0      	beq.n	80031da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b095      	sub	sp, #84	@ 0x54
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032b2:	e853 3f00 	ldrex	r3, [r3]
 80032b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ca:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032d0:	e841 2300 	strex	r3, r2, [r1]
 80032d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80032d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1e6      	bne.n	80032aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	3308      	adds	r3, #8
 80032e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	e853 3f00 	ldrex	r3, [r3]
 80032ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f2:	f023 0301 	bic.w	r3, r3, #1
 80032f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3308      	adds	r3, #8
 80032fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003300:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003306:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003308:	e841 2300 	strex	r3, r2, [r1]
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1e3      	bne.n	80032dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d118      	bne.n	800334e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	e853 3f00 	ldrex	r3, [r3]
 8003328:	60bb      	str	r3, [r7, #8]
   return(result);
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f023 0310 	bic.w	r3, r3, #16
 8003330:	647b      	str	r3, [r7, #68]	@ 0x44
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800333a:	61bb      	str	r3, [r7, #24]
 800333c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	6979      	ldr	r1, [r7, #20]
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	613b      	str	r3, [r7, #16]
   return(result);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1e6      	bne.n	800331c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2220      	movs	r2, #32
 8003352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003362:	bf00      	nop
 8003364:	3754      	adds	r7, #84	@ 0x54
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800337c:	2b01      	cmp	r3, #1
 800337e:	d101      	bne.n	8003384 <HAL_UARTEx_DisableFifoMode+0x16>
 8003380:	2302      	movs	r3, #2
 8003382:	e027      	b.n	80033d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2224      	movs	r2, #36	@ 0x24
 8003390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80033b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e02d      	b.n	8003454 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2224      	movs	r2, #36	@ 0x24
 8003404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f84f 	bl	80034d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003470:	2302      	movs	r3, #2
 8003472:	e02d      	b.n	80034d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2224      	movs	r2, #36	@ 0x24
 8003480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0201 	bic.w	r2, r2, #1
 800349a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f811 	bl	80034d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2220      	movs	r2, #32
 80034c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d108      	bne.n	80034fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80034f8:	e031      	b.n	800355e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80034fa:	2308      	movs	r3, #8
 80034fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80034fe:	2308      	movs	r3, #8
 8003500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	0e5b      	lsrs	r3, r3, #25
 800350a:	b2db      	uxtb	r3, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	0f5b      	lsrs	r3, r3, #29
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003522:	7bbb      	ldrb	r3, [r7, #14]
 8003524:	7b3a      	ldrb	r2, [r7, #12]
 8003526:	4911      	ldr	r1, [pc, #68]	@ (800356c <UARTEx_SetNbDataToProcess+0x94>)
 8003528:	5c8a      	ldrb	r2, [r1, r2]
 800352a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800352e:	7b3a      	ldrb	r2, [r7, #12]
 8003530:	490f      	ldr	r1, [pc, #60]	@ (8003570 <UARTEx_SetNbDataToProcess+0x98>)
 8003532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003534:	fb93 f3f2 	sdiv	r3, r3, r2
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003540:	7bfb      	ldrb	r3, [r7, #15]
 8003542:	7b7a      	ldrb	r2, [r7, #13]
 8003544:	4909      	ldr	r1, [pc, #36]	@ (800356c <UARTEx_SetNbDataToProcess+0x94>)
 8003546:	5c8a      	ldrb	r2, [r1, r2]
 8003548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800354c:	7b7a      	ldrb	r2, [r7, #13]
 800354e:	4908      	ldr	r1, [pc, #32]	@ (8003570 <UARTEx_SetNbDataToProcess+0x98>)
 8003550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003552:	fb93 f3f2 	sdiv	r3, r3, r2
 8003556:	b29a      	uxth	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	08003fcc 	.word	0x08003fcc
 8003570:	08003fd4 	.word	0x08003fd4

08003574 <sniprintf>:
 8003574:	b40c      	push	{r2, r3}
 8003576:	b530      	push	{r4, r5, lr}
 8003578:	4b18      	ldr	r3, [pc, #96]	@ (80035dc <sniprintf+0x68>)
 800357a:	1e0c      	subs	r4, r1, #0
 800357c:	681d      	ldr	r5, [r3, #0]
 800357e:	b09d      	sub	sp, #116	@ 0x74
 8003580:	da08      	bge.n	8003594 <sniprintf+0x20>
 8003582:	238b      	movs	r3, #139	@ 0x8b
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	f04f 30ff 	mov.w	r0, #4294967295
 800358a:	b01d      	add	sp, #116	@ 0x74
 800358c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003590:	b002      	add	sp, #8
 8003592:	4770      	bx	lr
 8003594:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003598:	f8ad 3014 	strh.w	r3, [sp, #20]
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80035a2:	bf14      	ite	ne
 80035a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80035a8:	4623      	moveq	r3, r4
 80035aa:	9304      	str	r3, [sp, #16]
 80035ac:	9307      	str	r3, [sp, #28]
 80035ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035b2:	9002      	str	r0, [sp, #8]
 80035b4:	9006      	str	r0, [sp, #24]
 80035b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80035ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80035bc:	ab21      	add	r3, sp, #132	@ 0x84
 80035be:	a902      	add	r1, sp, #8
 80035c0:	4628      	mov	r0, r5
 80035c2:	9301      	str	r3, [sp, #4]
 80035c4:	f000 f994 	bl	80038f0 <_svfiprintf_r>
 80035c8:	1c43      	adds	r3, r0, #1
 80035ca:	bfbc      	itt	lt
 80035cc:	238b      	movlt	r3, #139	@ 0x8b
 80035ce:	602b      	strlt	r3, [r5, #0]
 80035d0:	2c00      	cmp	r4, #0
 80035d2:	d0da      	beq.n	800358a <sniprintf+0x16>
 80035d4:	9b02      	ldr	r3, [sp, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	701a      	strb	r2, [r3, #0]
 80035da:	e7d6      	b.n	800358a <sniprintf+0x16>
 80035dc:	2000000c 	.word	0x2000000c

080035e0 <memset>:
 80035e0:	4402      	add	r2, r0
 80035e2:	4603      	mov	r3, r0
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d100      	bne.n	80035ea <memset+0xa>
 80035e8:	4770      	bx	lr
 80035ea:	f803 1b01 	strb.w	r1, [r3], #1
 80035ee:	e7f9      	b.n	80035e4 <memset+0x4>

080035f0 <__errno>:
 80035f0:	4b01      	ldr	r3, [pc, #4]	@ (80035f8 <__errno+0x8>)
 80035f2:	6818      	ldr	r0, [r3, #0]
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	2000000c 	.word	0x2000000c

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003634 <__libc_init_array+0x38>)
 8003600:	4c0d      	ldr	r4, [pc, #52]	@ (8003638 <__libc_init_array+0x3c>)
 8003602:	1b64      	subs	r4, r4, r5
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	2600      	movs	r6, #0
 8003608:	42a6      	cmp	r6, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	4d0b      	ldr	r5, [pc, #44]	@ (800363c <__libc_init_array+0x40>)
 800360e:	4c0c      	ldr	r4, [pc, #48]	@ (8003640 <__libc_init_array+0x44>)
 8003610:	f000 fc92 	bl	8003f38 <_init>
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	2600      	movs	r6, #0
 800361a:	42a6      	cmp	r6, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f855 3b04 	ldr.w	r3, [r5], #4
 8003624:	4798      	blx	r3
 8003626:	3601      	adds	r6, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	f855 3b04 	ldr.w	r3, [r5], #4
 800362e:	4798      	blx	r3
 8003630:	3601      	adds	r6, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	08004018 	.word	0x08004018
 8003638:	08004018 	.word	0x08004018
 800363c:	08004018 	.word	0x08004018
 8003640:	0800401c 	.word	0x0800401c

08003644 <__retarget_lock_acquire_recursive>:
 8003644:	4770      	bx	lr

08003646 <__retarget_lock_release_recursive>:
 8003646:	4770      	bx	lr

08003648 <_free_r>:
 8003648:	b538      	push	{r3, r4, r5, lr}
 800364a:	4605      	mov	r5, r0
 800364c:	2900      	cmp	r1, #0
 800364e:	d041      	beq.n	80036d4 <_free_r+0x8c>
 8003650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003654:	1f0c      	subs	r4, r1, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfb8      	it	lt
 800365a:	18e4      	addlt	r4, r4, r3
 800365c:	f000 f8e0 	bl	8003820 <__malloc_lock>
 8003660:	4a1d      	ldr	r2, [pc, #116]	@ (80036d8 <_free_r+0x90>)
 8003662:	6813      	ldr	r3, [r2, #0]
 8003664:	b933      	cbnz	r3, 8003674 <_free_r+0x2c>
 8003666:	6063      	str	r3, [r4, #4]
 8003668:	6014      	str	r4, [r2, #0]
 800366a:	4628      	mov	r0, r5
 800366c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003670:	f000 b8dc 	b.w	800382c <__malloc_unlock>
 8003674:	42a3      	cmp	r3, r4
 8003676:	d908      	bls.n	800368a <_free_r+0x42>
 8003678:	6820      	ldr	r0, [r4, #0]
 800367a:	1821      	adds	r1, r4, r0
 800367c:	428b      	cmp	r3, r1
 800367e:	bf01      	itttt	eq
 8003680:	6819      	ldreq	r1, [r3, #0]
 8003682:	685b      	ldreq	r3, [r3, #4]
 8003684:	1809      	addeq	r1, r1, r0
 8003686:	6021      	streq	r1, [r4, #0]
 8003688:	e7ed      	b.n	8003666 <_free_r+0x1e>
 800368a:	461a      	mov	r2, r3
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	b10b      	cbz	r3, 8003694 <_free_r+0x4c>
 8003690:	42a3      	cmp	r3, r4
 8003692:	d9fa      	bls.n	800368a <_free_r+0x42>
 8003694:	6811      	ldr	r1, [r2, #0]
 8003696:	1850      	adds	r0, r2, r1
 8003698:	42a0      	cmp	r0, r4
 800369a:	d10b      	bne.n	80036b4 <_free_r+0x6c>
 800369c:	6820      	ldr	r0, [r4, #0]
 800369e:	4401      	add	r1, r0
 80036a0:	1850      	adds	r0, r2, r1
 80036a2:	4283      	cmp	r3, r0
 80036a4:	6011      	str	r1, [r2, #0]
 80036a6:	d1e0      	bne.n	800366a <_free_r+0x22>
 80036a8:	6818      	ldr	r0, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	6053      	str	r3, [r2, #4]
 80036ae:	4408      	add	r0, r1
 80036b0:	6010      	str	r0, [r2, #0]
 80036b2:	e7da      	b.n	800366a <_free_r+0x22>
 80036b4:	d902      	bls.n	80036bc <_free_r+0x74>
 80036b6:	230c      	movs	r3, #12
 80036b8:	602b      	str	r3, [r5, #0]
 80036ba:	e7d6      	b.n	800366a <_free_r+0x22>
 80036bc:	6820      	ldr	r0, [r4, #0]
 80036be:	1821      	adds	r1, r4, r0
 80036c0:	428b      	cmp	r3, r1
 80036c2:	bf04      	itt	eq
 80036c4:	6819      	ldreq	r1, [r3, #0]
 80036c6:	685b      	ldreq	r3, [r3, #4]
 80036c8:	6063      	str	r3, [r4, #4]
 80036ca:	bf04      	itt	eq
 80036cc:	1809      	addeq	r1, r1, r0
 80036ce:	6021      	streq	r1, [r4, #0]
 80036d0:	6054      	str	r4, [r2, #4]
 80036d2:	e7ca      	b.n	800366a <_free_r+0x22>
 80036d4:	bd38      	pop	{r3, r4, r5, pc}
 80036d6:	bf00      	nop
 80036d8:	200002a0 	.word	0x200002a0

080036dc <sbrk_aligned>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	4e0f      	ldr	r6, [pc, #60]	@ (800371c <sbrk_aligned+0x40>)
 80036e0:	460c      	mov	r4, r1
 80036e2:	6831      	ldr	r1, [r6, #0]
 80036e4:	4605      	mov	r5, r0
 80036e6:	b911      	cbnz	r1, 80036ee <sbrk_aligned+0x12>
 80036e8:	f000 fba4 	bl	8003e34 <_sbrk_r>
 80036ec:	6030      	str	r0, [r6, #0]
 80036ee:	4621      	mov	r1, r4
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 fb9f 	bl	8003e34 <_sbrk_r>
 80036f6:	1c43      	adds	r3, r0, #1
 80036f8:	d103      	bne.n	8003702 <sbrk_aligned+0x26>
 80036fa:	f04f 34ff 	mov.w	r4, #4294967295
 80036fe:	4620      	mov	r0, r4
 8003700:	bd70      	pop	{r4, r5, r6, pc}
 8003702:	1cc4      	adds	r4, r0, #3
 8003704:	f024 0403 	bic.w	r4, r4, #3
 8003708:	42a0      	cmp	r0, r4
 800370a:	d0f8      	beq.n	80036fe <sbrk_aligned+0x22>
 800370c:	1a21      	subs	r1, r4, r0
 800370e:	4628      	mov	r0, r5
 8003710:	f000 fb90 	bl	8003e34 <_sbrk_r>
 8003714:	3001      	adds	r0, #1
 8003716:	d1f2      	bne.n	80036fe <sbrk_aligned+0x22>
 8003718:	e7ef      	b.n	80036fa <sbrk_aligned+0x1e>
 800371a:	bf00      	nop
 800371c:	2000029c 	.word	0x2000029c

08003720 <_malloc_r>:
 8003720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003724:	1ccd      	adds	r5, r1, #3
 8003726:	f025 0503 	bic.w	r5, r5, #3
 800372a:	3508      	adds	r5, #8
 800372c:	2d0c      	cmp	r5, #12
 800372e:	bf38      	it	cc
 8003730:	250c      	movcc	r5, #12
 8003732:	2d00      	cmp	r5, #0
 8003734:	4606      	mov	r6, r0
 8003736:	db01      	blt.n	800373c <_malloc_r+0x1c>
 8003738:	42a9      	cmp	r1, r5
 800373a:	d904      	bls.n	8003746 <_malloc_r+0x26>
 800373c:	230c      	movs	r3, #12
 800373e:	6033      	str	r3, [r6, #0]
 8003740:	2000      	movs	r0, #0
 8003742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003746:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800381c <_malloc_r+0xfc>
 800374a:	f000 f869 	bl	8003820 <__malloc_lock>
 800374e:	f8d8 3000 	ldr.w	r3, [r8]
 8003752:	461c      	mov	r4, r3
 8003754:	bb44      	cbnz	r4, 80037a8 <_malloc_r+0x88>
 8003756:	4629      	mov	r1, r5
 8003758:	4630      	mov	r0, r6
 800375a:	f7ff ffbf 	bl	80036dc <sbrk_aligned>
 800375e:	1c43      	adds	r3, r0, #1
 8003760:	4604      	mov	r4, r0
 8003762:	d158      	bne.n	8003816 <_malloc_r+0xf6>
 8003764:	f8d8 4000 	ldr.w	r4, [r8]
 8003768:	4627      	mov	r7, r4
 800376a:	2f00      	cmp	r7, #0
 800376c:	d143      	bne.n	80037f6 <_malloc_r+0xd6>
 800376e:	2c00      	cmp	r4, #0
 8003770:	d04b      	beq.n	800380a <_malloc_r+0xea>
 8003772:	6823      	ldr	r3, [r4, #0]
 8003774:	4639      	mov	r1, r7
 8003776:	4630      	mov	r0, r6
 8003778:	eb04 0903 	add.w	r9, r4, r3
 800377c:	f000 fb5a 	bl	8003e34 <_sbrk_r>
 8003780:	4581      	cmp	r9, r0
 8003782:	d142      	bne.n	800380a <_malloc_r+0xea>
 8003784:	6821      	ldr	r1, [r4, #0]
 8003786:	1a6d      	subs	r5, r5, r1
 8003788:	4629      	mov	r1, r5
 800378a:	4630      	mov	r0, r6
 800378c:	f7ff ffa6 	bl	80036dc <sbrk_aligned>
 8003790:	3001      	adds	r0, #1
 8003792:	d03a      	beq.n	800380a <_malloc_r+0xea>
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	442b      	add	r3, r5
 8003798:	6023      	str	r3, [r4, #0]
 800379a:	f8d8 3000 	ldr.w	r3, [r8]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	bb62      	cbnz	r2, 80037fc <_malloc_r+0xdc>
 80037a2:	f8c8 7000 	str.w	r7, [r8]
 80037a6:	e00f      	b.n	80037c8 <_malloc_r+0xa8>
 80037a8:	6822      	ldr	r2, [r4, #0]
 80037aa:	1b52      	subs	r2, r2, r5
 80037ac:	d420      	bmi.n	80037f0 <_malloc_r+0xd0>
 80037ae:	2a0b      	cmp	r2, #11
 80037b0:	d917      	bls.n	80037e2 <_malloc_r+0xc2>
 80037b2:	1961      	adds	r1, r4, r5
 80037b4:	42a3      	cmp	r3, r4
 80037b6:	6025      	str	r5, [r4, #0]
 80037b8:	bf18      	it	ne
 80037ba:	6059      	strne	r1, [r3, #4]
 80037bc:	6863      	ldr	r3, [r4, #4]
 80037be:	bf08      	it	eq
 80037c0:	f8c8 1000 	streq.w	r1, [r8]
 80037c4:	5162      	str	r2, [r4, r5]
 80037c6:	604b      	str	r3, [r1, #4]
 80037c8:	4630      	mov	r0, r6
 80037ca:	f000 f82f 	bl	800382c <__malloc_unlock>
 80037ce:	f104 000b 	add.w	r0, r4, #11
 80037d2:	1d23      	adds	r3, r4, #4
 80037d4:	f020 0007 	bic.w	r0, r0, #7
 80037d8:	1ac2      	subs	r2, r0, r3
 80037da:	bf1c      	itt	ne
 80037dc:	1a1b      	subne	r3, r3, r0
 80037de:	50a3      	strne	r3, [r4, r2]
 80037e0:	e7af      	b.n	8003742 <_malloc_r+0x22>
 80037e2:	6862      	ldr	r2, [r4, #4]
 80037e4:	42a3      	cmp	r3, r4
 80037e6:	bf0c      	ite	eq
 80037e8:	f8c8 2000 	streq.w	r2, [r8]
 80037ec:	605a      	strne	r2, [r3, #4]
 80037ee:	e7eb      	b.n	80037c8 <_malloc_r+0xa8>
 80037f0:	4623      	mov	r3, r4
 80037f2:	6864      	ldr	r4, [r4, #4]
 80037f4:	e7ae      	b.n	8003754 <_malloc_r+0x34>
 80037f6:	463c      	mov	r4, r7
 80037f8:	687f      	ldr	r7, [r7, #4]
 80037fa:	e7b6      	b.n	800376a <_malloc_r+0x4a>
 80037fc:	461a      	mov	r2, r3
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	42a3      	cmp	r3, r4
 8003802:	d1fb      	bne.n	80037fc <_malloc_r+0xdc>
 8003804:	2300      	movs	r3, #0
 8003806:	6053      	str	r3, [r2, #4]
 8003808:	e7de      	b.n	80037c8 <_malloc_r+0xa8>
 800380a:	230c      	movs	r3, #12
 800380c:	6033      	str	r3, [r6, #0]
 800380e:	4630      	mov	r0, r6
 8003810:	f000 f80c 	bl	800382c <__malloc_unlock>
 8003814:	e794      	b.n	8003740 <_malloc_r+0x20>
 8003816:	6005      	str	r5, [r0, #0]
 8003818:	e7d6      	b.n	80037c8 <_malloc_r+0xa8>
 800381a:	bf00      	nop
 800381c:	200002a0 	.word	0x200002a0

08003820 <__malloc_lock>:
 8003820:	4801      	ldr	r0, [pc, #4]	@ (8003828 <__malloc_lock+0x8>)
 8003822:	f7ff bf0f 	b.w	8003644 <__retarget_lock_acquire_recursive>
 8003826:	bf00      	nop
 8003828:	20000298 	.word	0x20000298

0800382c <__malloc_unlock>:
 800382c:	4801      	ldr	r0, [pc, #4]	@ (8003834 <__malloc_unlock+0x8>)
 800382e:	f7ff bf0a 	b.w	8003646 <__retarget_lock_release_recursive>
 8003832:	bf00      	nop
 8003834:	20000298 	.word	0x20000298

08003838 <__ssputs_r>:
 8003838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800383c:	688e      	ldr	r6, [r1, #8]
 800383e:	461f      	mov	r7, r3
 8003840:	42be      	cmp	r6, r7
 8003842:	680b      	ldr	r3, [r1, #0]
 8003844:	4682      	mov	sl, r0
 8003846:	460c      	mov	r4, r1
 8003848:	4690      	mov	r8, r2
 800384a:	d82d      	bhi.n	80038a8 <__ssputs_r+0x70>
 800384c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003850:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003854:	d026      	beq.n	80038a4 <__ssputs_r+0x6c>
 8003856:	6965      	ldr	r5, [r4, #20]
 8003858:	6909      	ldr	r1, [r1, #16]
 800385a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800385e:	eba3 0901 	sub.w	r9, r3, r1
 8003862:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003866:	1c7b      	adds	r3, r7, #1
 8003868:	444b      	add	r3, r9
 800386a:	106d      	asrs	r5, r5, #1
 800386c:	429d      	cmp	r5, r3
 800386e:	bf38      	it	cc
 8003870:	461d      	movcc	r5, r3
 8003872:	0553      	lsls	r3, r2, #21
 8003874:	d527      	bpl.n	80038c6 <__ssputs_r+0x8e>
 8003876:	4629      	mov	r1, r5
 8003878:	f7ff ff52 	bl	8003720 <_malloc_r>
 800387c:	4606      	mov	r6, r0
 800387e:	b360      	cbz	r0, 80038da <__ssputs_r+0xa2>
 8003880:	6921      	ldr	r1, [r4, #16]
 8003882:	464a      	mov	r2, r9
 8003884:	f000 fae6 	bl	8003e54 <memcpy>
 8003888:	89a3      	ldrh	r3, [r4, #12]
 800388a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800388e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003892:	81a3      	strh	r3, [r4, #12]
 8003894:	6126      	str	r6, [r4, #16]
 8003896:	6165      	str	r5, [r4, #20]
 8003898:	444e      	add	r6, r9
 800389a:	eba5 0509 	sub.w	r5, r5, r9
 800389e:	6026      	str	r6, [r4, #0]
 80038a0:	60a5      	str	r5, [r4, #8]
 80038a2:	463e      	mov	r6, r7
 80038a4:	42be      	cmp	r6, r7
 80038a6:	d900      	bls.n	80038aa <__ssputs_r+0x72>
 80038a8:	463e      	mov	r6, r7
 80038aa:	6820      	ldr	r0, [r4, #0]
 80038ac:	4632      	mov	r2, r6
 80038ae:	4641      	mov	r1, r8
 80038b0:	f000 faa6 	bl	8003e00 <memmove>
 80038b4:	68a3      	ldr	r3, [r4, #8]
 80038b6:	1b9b      	subs	r3, r3, r6
 80038b8:	60a3      	str	r3, [r4, #8]
 80038ba:	6823      	ldr	r3, [r4, #0]
 80038bc:	4433      	add	r3, r6
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	2000      	movs	r0, #0
 80038c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c6:	462a      	mov	r2, r5
 80038c8:	f000 fad2 	bl	8003e70 <_realloc_r>
 80038cc:	4606      	mov	r6, r0
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d1e0      	bne.n	8003894 <__ssputs_r+0x5c>
 80038d2:	6921      	ldr	r1, [r4, #16]
 80038d4:	4650      	mov	r0, sl
 80038d6:	f7ff feb7 	bl	8003648 <_free_r>
 80038da:	230c      	movs	r3, #12
 80038dc:	f8ca 3000 	str.w	r3, [sl]
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038e6:	81a3      	strh	r3, [r4, #12]
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
 80038ec:	e7e9      	b.n	80038c2 <__ssputs_r+0x8a>
	...

080038f0 <_svfiprintf_r>:
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	4698      	mov	r8, r3
 80038f6:	898b      	ldrh	r3, [r1, #12]
 80038f8:	061b      	lsls	r3, r3, #24
 80038fa:	b09d      	sub	sp, #116	@ 0x74
 80038fc:	4607      	mov	r7, r0
 80038fe:	460d      	mov	r5, r1
 8003900:	4614      	mov	r4, r2
 8003902:	d510      	bpl.n	8003926 <_svfiprintf_r+0x36>
 8003904:	690b      	ldr	r3, [r1, #16]
 8003906:	b973      	cbnz	r3, 8003926 <_svfiprintf_r+0x36>
 8003908:	2140      	movs	r1, #64	@ 0x40
 800390a:	f7ff ff09 	bl	8003720 <_malloc_r>
 800390e:	6028      	str	r0, [r5, #0]
 8003910:	6128      	str	r0, [r5, #16]
 8003912:	b930      	cbnz	r0, 8003922 <_svfiprintf_r+0x32>
 8003914:	230c      	movs	r3, #12
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	f04f 30ff 	mov.w	r0, #4294967295
 800391c:	b01d      	add	sp, #116	@ 0x74
 800391e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003922:	2340      	movs	r3, #64	@ 0x40
 8003924:	616b      	str	r3, [r5, #20]
 8003926:	2300      	movs	r3, #0
 8003928:	9309      	str	r3, [sp, #36]	@ 0x24
 800392a:	2320      	movs	r3, #32
 800392c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003930:	f8cd 800c 	str.w	r8, [sp, #12]
 8003934:	2330      	movs	r3, #48	@ 0x30
 8003936:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003ad4 <_svfiprintf_r+0x1e4>
 800393a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800393e:	f04f 0901 	mov.w	r9, #1
 8003942:	4623      	mov	r3, r4
 8003944:	469a      	mov	sl, r3
 8003946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800394a:	b10a      	cbz	r2, 8003950 <_svfiprintf_r+0x60>
 800394c:	2a25      	cmp	r2, #37	@ 0x25
 800394e:	d1f9      	bne.n	8003944 <_svfiprintf_r+0x54>
 8003950:	ebba 0b04 	subs.w	fp, sl, r4
 8003954:	d00b      	beq.n	800396e <_svfiprintf_r+0x7e>
 8003956:	465b      	mov	r3, fp
 8003958:	4622      	mov	r2, r4
 800395a:	4629      	mov	r1, r5
 800395c:	4638      	mov	r0, r7
 800395e:	f7ff ff6b 	bl	8003838 <__ssputs_r>
 8003962:	3001      	adds	r0, #1
 8003964:	f000 80a7 	beq.w	8003ab6 <_svfiprintf_r+0x1c6>
 8003968:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800396a:	445a      	add	r2, fp
 800396c:	9209      	str	r2, [sp, #36]	@ 0x24
 800396e:	f89a 3000 	ldrb.w	r3, [sl]
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 809f 	beq.w	8003ab6 <_svfiprintf_r+0x1c6>
 8003978:	2300      	movs	r3, #0
 800397a:	f04f 32ff 	mov.w	r2, #4294967295
 800397e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003982:	f10a 0a01 	add.w	sl, sl, #1
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	9307      	str	r3, [sp, #28]
 800398a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800398e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003990:	4654      	mov	r4, sl
 8003992:	2205      	movs	r2, #5
 8003994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003998:	484e      	ldr	r0, [pc, #312]	@ (8003ad4 <_svfiprintf_r+0x1e4>)
 800399a:	f7fc fc49 	bl	8000230 <memchr>
 800399e:	9a04      	ldr	r2, [sp, #16]
 80039a0:	b9d8      	cbnz	r0, 80039da <_svfiprintf_r+0xea>
 80039a2:	06d0      	lsls	r0, r2, #27
 80039a4:	bf44      	itt	mi
 80039a6:	2320      	movmi	r3, #32
 80039a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039ac:	0711      	lsls	r1, r2, #28
 80039ae:	bf44      	itt	mi
 80039b0:	232b      	movmi	r3, #43	@ 0x2b
 80039b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80039b6:	f89a 3000 	ldrb.w	r3, [sl]
 80039ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80039bc:	d015      	beq.n	80039ea <_svfiprintf_r+0xfa>
 80039be:	9a07      	ldr	r2, [sp, #28]
 80039c0:	4654      	mov	r4, sl
 80039c2:	2000      	movs	r0, #0
 80039c4:	f04f 0c0a 	mov.w	ip, #10
 80039c8:	4621      	mov	r1, r4
 80039ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039ce:	3b30      	subs	r3, #48	@ 0x30
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	d94b      	bls.n	8003a6c <_svfiprintf_r+0x17c>
 80039d4:	b1b0      	cbz	r0, 8003a04 <_svfiprintf_r+0x114>
 80039d6:	9207      	str	r2, [sp, #28]
 80039d8:	e014      	b.n	8003a04 <_svfiprintf_r+0x114>
 80039da:	eba0 0308 	sub.w	r3, r0, r8
 80039de:	fa09 f303 	lsl.w	r3, r9, r3
 80039e2:	4313      	orrs	r3, r2
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	46a2      	mov	sl, r4
 80039e8:	e7d2      	b.n	8003990 <_svfiprintf_r+0xa0>
 80039ea:	9b03      	ldr	r3, [sp, #12]
 80039ec:	1d19      	adds	r1, r3, #4
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	9103      	str	r1, [sp, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	bfbb      	ittet	lt
 80039f6:	425b      	neglt	r3, r3
 80039f8:	f042 0202 	orrlt.w	r2, r2, #2
 80039fc:	9307      	strge	r3, [sp, #28]
 80039fe:	9307      	strlt	r3, [sp, #28]
 8003a00:	bfb8      	it	lt
 8003a02:	9204      	strlt	r2, [sp, #16]
 8003a04:	7823      	ldrb	r3, [r4, #0]
 8003a06:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a08:	d10a      	bne.n	8003a20 <_svfiprintf_r+0x130>
 8003a0a:	7863      	ldrb	r3, [r4, #1]
 8003a0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a0e:	d132      	bne.n	8003a76 <_svfiprintf_r+0x186>
 8003a10:	9b03      	ldr	r3, [sp, #12]
 8003a12:	1d1a      	adds	r2, r3, #4
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	9203      	str	r2, [sp, #12]
 8003a18:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a1c:	3402      	adds	r4, #2
 8003a1e:	9305      	str	r3, [sp, #20]
 8003a20:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ae4 <_svfiprintf_r+0x1f4>
 8003a24:	7821      	ldrb	r1, [r4, #0]
 8003a26:	2203      	movs	r2, #3
 8003a28:	4650      	mov	r0, sl
 8003a2a:	f7fc fc01 	bl	8000230 <memchr>
 8003a2e:	b138      	cbz	r0, 8003a40 <_svfiprintf_r+0x150>
 8003a30:	9b04      	ldr	r3, [sp, #16]
 8003a32:	eba0 000a 	sub.w	r0, r0, sl
 8003a36:	2240      	movs	r2, #64	@ 0x40
 8003a38:	4082      	lsls	r2, r0
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	3401      	adds	r4, #1
 8003a3e:	9304      	str	r3, [sp, #16]
 8003a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a44:	4824      	ldr	r0, [pc, #144]	@ (8003ad8 <_svfiprintf_r+0x1e8>)
 8003a46:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003a4a:	2206      	movs	r2, #6
 8003a4c:	f7fc fbf0 	bl	8000230 <memchr>
 8003a50:	2800      	cmp	r0, #0
 8003a52:	d036      	beq.n	8003ac2 <_svfiprintf_r+0x1d2>
 8003a54:	4b21      	ldr	r3, [pc, #132]	@ (8003adc <_svfiprintf_r+0x1ec>)
 8003a56:	bb1b      	cbnz	r3, 8003aa0 <_svfiprintf_r+0x1b0>
 8003a58:	9b03      	ldr	r3, [sp, #12]
 8003a5a:	3307      	adds	r3, #7
 8003a5c:	f023 0307 	bic.w	r3, r3, #7
 8003a60:	3308      	adds	r3, #8
 8003a62:	9303      	str	r3, [sp, #12]
 8003a64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003a66:	4433      	add	r3, r6
 8003a68:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a6a:	e76a      	b.n	8003942 <_svfiprintf_r+0x52>
 8003a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a70:	460c      	mov	r4, r1
 8003a72:	2001      	movs	r0, #1
 8003a74:	e7a8      	b.n	80039c8 <_svfiprintf_r+0xd8>
 8003a76:	2300      	movs	r3, #0
 8003a78:	3401      	adds	r4, #1
 8003a7a:	9305      	str	r3, [sp, #20]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	f04f 0c0a 	mov.w	ip, #10
 8003a82:	4620      	mov	r0, r4
 8003a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a88:	3a30      	subs	r2, #48	@ 0x30
 8003a8a:	2a09      	cmp	r2, #9
 8003a8c:	d903      	bls.n	8003a96 <_svfiprintf_r+0x1a6>
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0c6      	beq.n	8003a20 <_svfiprintf_r+0x130>
 8003a92:	9105      	str	r1, [sp, #20]
 8003a94:	e7c4      	b.n	8003a20 <_svfiprintf_r+0x130>
 8003a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e7f0      	b.n	8003a82 <_svfiprintf_r+0x192>
 8003aa0:	ab03      	add	r3, sp, #12
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	462a      	mov	r2, r5
 8003aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <_svfiprintf_r+0x1f0>)
 8003aa8:	a904      	add	r1, sp, #16
 8003aaa:	4638      	mov	r0, r7
 8003aac:	f3af 8000 	nop.w
 8003ab0:	1c42      	adds	r2, r0, #1
 8003ab2:	4606      	mov	r6, r0
 8003ab4:	d1d6      	bne.n	8003a64 <_svfiprintf_r+0x174>
 8003ab6:	89ab      	ldrh	r3, [r5, #12]
 8003ab8:	065b      	lsls	r3, r3, #25
 8003aba:	f53f af2d 	bmi.w	8003918 <_svfiprintf_r+0x28>
 8003abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ac0:	e72c      	b.n	800391c <_svfiprintf_r+0x2c>
 8003ac2:	ab03      	add	r3, sp, #12
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	462a      	mov	r2, r5
 8003ac8:	4b05      	ldr	r3, [pc, #20]	@ (8003ae0 <_svfiprintf_r+0x1f0>)
 8003aca:	a904      	add	r1, sp, #16
 8003acc:	4638      	mov	r0, r7
 8003ace:	f000 f879 	bl	8003bc4 <_printf_i>
 8003ad2:	e7ed      	b.n	8003ab0 <_svfiprintf_r+0x1c0>
 8003ad4:	08003fdc 	.word	0x08003fdc
 8003ad8:	08003fe6 	.word	0x08003fe6
 8003adc:	00000000 	.word	0x00000000
 8003ae0:	08003839 	.word	0x08003839
 8003ae4:	08003fe2 	.word	0x08003fe2

08003ae8 <_printf_common>:
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003aec:	4616      	mov	r6, r2
 8003aee:	4698      	mov	r8, r3
 8003af0:	688a      	ldr	r2, [r1, #8]
 8003af2:	690b      	ldr	r3, [r1, #16]
 8003af4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003af8:	4293      	cmp	r3, r2
 8003afa:	bfb8      	it	lt
 8003afc:	4613      	movlt	r3, r2
 8003afe:	6033      	str	r3, [r6, #0]
 8003b00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b04:	4607      	mov	r7, r0
 8003b06:	460c      	mov	r4, r1
 8003b08:	b10a      	cbz	r2, 8003b0e <_printf_common+0x26>
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	6033      	str	r3, [r6, #0]
 8003b0e:	6823      	ldr	r3, [r4, #0]
 8003b10:	0699      	lsls	r1, r3, #26
 8003b12:	bf42      	ittt	mi
 8003b14:	6833      	ldrmi	r3, [r6, #0]
 8003b16:	3302      	addmi	r3, #2
 8003b18:	6033      	strmi	r3, [r6, #0]
 8003b1a:	6825      	ldr	r5, [r4, #0]
 8003b1c:	f015 0506 	ands.w	r5, r5, #6
 8003b20:	d106      	bne.n	8003b30 <_printf_common+0x48>
 8003b22:	f104 0a19 	add.w	sl, r4, #25
 8003b26:	68e3      	ldr	r3, [r4, #12]
 8003b28:	6832      	ldr	r2, [r6, #0]
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	42ab      	cmp	r3, r5
 8003b2e:	dc26      	bgt.n	8003b7e <_printf_common+0x96>
 8003b30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b34:	6822      	ldr	r2, [r4, #0]
 8003b36:	3b00      	subs	r3, #0
 8003b38:	bf18      	it	ne
 8003b3a:	2301      	movne	r3, #1
 8003b3c:	0692      	lsls	r2, r2, #26
 8003b3e:	d42b      	bmi.n	8003b98 <_printf_common+0xb0>
 8003b40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003b44:	4641      	mov	r1, r8
 8003b46:	4638      	mov	r0, r7
 8003b48:	47c8      	blx	r9
 8003b4a:	3001      	adds	r0, #1
 8003b4c:	d01e      	beq.n	8003b8c <_printf_common+0xa4>
 8003b4e:	6823      	ldr	r3, [r4, #0]
 8003b50:	6922      	ldr	r2, [r4, #16]
 8003b52:	f003 0306 	and.w	r3, r3, #6
 8003b56:	2b04      	cmp	r3, #4
 8003b58:	bf02      	ittt	eq
 8003b5a:	68e5      	ldreq	r5, [r4, #12]
 8003b5c:	6833      	ldreq	r3, [r6, #0]
 8003b5e:	1aed      	subeq	r5, r5, r3
 8003b60:	68a3      	ldr	r3, [r4, #8]
 8003b62:	bf0c      	ite	eq
 8003b64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b68:	2500      	movne	r5, #0
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	bfc4      	itt	gt
 8003b6e:	1a9b      	subgt	r3, r3, r2
 8003b70:	18ed      	addgt	r5, r5, r3
 8003b72:	2600      	movs	r6, #0
 8003b74:	341a      	adds	r4, #26
 8003b76:	42b5      	cmp	r5, r6
 8003b78:	d11a      	bne.n	8003bb0 <_printf_common+0xc8>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	e008      	b.n	8003b90 <_printf_common+0xa8>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	4652      	mov	r2, sl
 8003b82:	4641      	mov	r1, r8
 8003b84:	4638      	mov	r0, r7
 8003b86:	47c8      	blx	r9
 8003b88:	3001      	adds	r0, #1
 8003b8a:	d103      	bne.n	8003b94 <_printf_common+0xac>
 8003b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b94:	3501      	adds	r5, #1
 8003b96:	e7c6      	b.n	8003b26 <_printf_common+0x3e>
 8003b98:	18e1      	adds	r1, r4, r3
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	2030      	movs	r0, #48	@ 0x30
 8003b9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ba2:	4422      	add	r2, r4
 8003ba4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ba8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003bac:	3302      	adds	r3, #2
 8003bae:	e7c7      	b.n	8003b40 <_printf_common+0x58>
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	4622      	mov	r2, r4
 8003bb4:	4641      	mov	r1, r8
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	47c8      	blx	r9
 8003bba:	3001      	adds	r0, #1
 8003bbc:	d0e6      	beq.n	8003b8c <_printf_common+0xa4>
 8003bbe:	3601      	adds	r6, #1
 8003bc0:	e7d9      	b.n	8003b76 <_printf_common+0x8e>
	...

08003bc4 <_printf_i>:
 8003bc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	7e0f      	ldrb	r7, [r1, #24]
 8003bca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003bcc:	2f78      	cmp	r7, #120	@ 0x78
 8003bce:	4691      	mov	r9, r2
 8003bd0:	4680      	mov	r8, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	469a      	mov	sl, r3
 8003bd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003bda:	d807      	bhi.n	8003bec <_printf_i+0x28>
 8003bdc:	2f62      	cmp	r7, #98	@ 0x62
 8003bde:	d80a      	bhi.n	8003bf6 <_printf_i+0x32>
 8003be0:	2f00      	cmp	r7, #0
 8003be2:	f000 80d1 	beq.w	8003d88 <_printf_i+0x1c4>
 8003be6:	2f58      	cmp	r7, #88	@ 0x58
 8003be8:	f000 80b8 	beq.w	8003d5c <_printf_i+0x198>
 8003bec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003bf0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003bf4:	e03a      	b.n	8003c6c <_printf_i+0xa8>
 8003bf6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003bfa:	2b15      	cmp	r3, #21
 8003bfc:	d8f6      	bhi.n	8003bec <_printf_i+0x28>
 8003bfe:	a101      	add	r1, pc, #4	@ (adr r1, 8003c04 <_printf_i+0x40>)
 8003c00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	08003c71 	.word	0x08003c71
 8003c0c:	08003bed 	.word	0x08003bed
 8003c10:	08003bed 	.word	0x08003bed
 8003c14:	08003bed 	.word	0x08003bed
 8003c18:	08003bed 	.word	0x08003bed
 8003c1c:	08003c71 	.word	0x08003c71
 8003c20:	08003bed 	.word	0x08003bed
 8003c24:	08003bed 	.word	0x08003bed
 8003c28:	08003bed 	.word	0x08003bed
 8003c2c:	08003bed 	.word	0x08003bed
 8003c30:	08003d6f 	.word	0x08003d6f
 8003c34:	08003c9b 	.word	0x08003c9b
 8003c38:	08003d29 	.word	0x08003d29
 8003c3c:	08003bed 	.word	0x08003bed
 8003c40:	08003bed 	.word	0x08003bed
 8003c44:	08003d91 	.word	0x08003d91
 8003c48:	08003bed 	.word	0x08003bed
 8003c4c:	08003c9b 	.word	0x08003c9b
 8003c50:	08003bed 	.word	0x08003bed
 8003c54:	08003bed 	.word	0x08003bed
 8003c58:	08003d31 	.word	0x08003d31
 8003c5c:	6833      	ldr	r3, [r6, #0]
 8003c5e:	1d1a      	adds	r2, r3, #4
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	6032      	str	r2, [r6, #0]
 8003c64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e09c      	b.n	8003daa <_printf_i+0x1e6>
 8003c70:	6833      	ldr	r3, [r6, #0]
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	1d19      	adds	r1, r3, #4
 8003c76:	6031      	str	r1, [r6, #0]
 8003c78:	0606      	lsls	r6, r0, #24
 8003c7a:	d501      	bpl.n	8003c80 <_printf_i+0xbc>
 8003c7c:	681d      	ldr	r5, [r3, #0]
 8003c7e:	e003      	b.n	8003c88 <_printf_i+0xc4>
 8003c80:	0645      	lsls	r5, r0, #25
 8003c82:	d5fb      	bpl.n	8003c7c <_printf_i+0xb8>
 8003c84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	da03      	bge.n	8003c94 <_printf_i+0xd0>
 8003c8c:	232d      	movs	r3, #45	@ 0x2d
 8003c8e:	426d      	negs	r5, r5
 8003c90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c94:	4858      	ldr	r0, [pc, #352]	@ (8003df8 <_printf_i+0x234>)
 8003c96:	230a      	movs	r3, #10
 8003c98:	e011      	b.n	8003cbe <_printf_i+0xfa>
 8003c9a:	6821      	ldr	r1, [r4, #0]
 8003c9c:	6833      	ldr	r3, [r6, #0]
 8003c9e:	0608      	lsls	r0, r1, #24
 8003ca0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ca4:	d402      	bmi.n	8003cac <_printf_i+0xe8>
 8003ca6:	0649      	lsls	r1, r1, #25
 8003ca8:	bf48      	it	mi
 8003caa:	b2ad      	uxthmi	r5, r5
 8003cac:	2f6f      	cmp	r7, #111	@ 0x6f
 8003cae:	4852      	ldr	r0, [pc, #328]	@ (8003df8 <_printf_i+0x234>)
 8003cb0:	6033      	str	r3, [r6, #0]
 8003cb2:	bf14      	ite	ne
 8003cb4:	230a      	movne	r3, #10
 8003cb6:	2308      	moveq	r3, #8
 8003cb8:	2100      	movs	r1, #0
 8003cba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003cbe:	6866      	ldr	r6, [r4, #4]
 8003cc0:	60a6      	str	r6, [r4, #8]
 8003cc2:	2e00      	cmp	r6, #0
 8003cc4:	db05      	blt.n	8003cd2 <_printf_i+0x10e>
 8003cc6:	6821      	ldr	r1, [r4, #0]
 8003cc8:	432e      	orrs	r6, r5
 8003cca:	f021 0104 	bic.w	r1, r1, #4
 8003cce:	6021      	str	r1, [r4, #0]
 8003cd0:	d04b      	beq.n	8003d6a <_printf_i+0x1a6>
 8003cd2:	4616      	mov	r6, r2
 8003cd4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003cd8:	fb03 5711 	mls	r7, r3, r1, r5
 8003cdc:	5dc7      	ldrb	r7, [r0, r7]
 8003cde:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ce2:	462f      	mov	r7, r5
 8003ce4:	42bb      	cmp	r3, r7
 8003ce6:	460d      	mov	r5, r1
 8003ce8:	d9f4      	bls.n	8003cd4 <_printf_i+0x110>
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d10b      	bne.n	8003d06 <_printf_i+0x142>
 8003cee:	6823      	ldr	r3, [r4, #0]
 8003cf0:	07df      	lsls	r7, r3, #31
 8003cf2:	d508      	bpl.n	8003d06 <_printf_i+0x142>
 8003cf4:	6923      	ldr	r3, [r4, #16]
 8003cf6:	6861      	ldr	r1, [r4, #4]
 8003cf8:	4299      	cmp	r1, r3
 8003cfa:	bfde      	ittt	le
 8003cfc:	2330      	movle	r3, #48	@ 0x30
 8003cfe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d06:	1b92      	subs	r2, r2, r6
 8003d08:	6122      	str	r2, [r4, #16]
 8003d0a:	f8cd a000 	str.w	sl, [sp]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	aa03      	add	r2, sp, #12
 8003d12:	4621      	mov	r1, r4
 8003d14:	4640      	mov	r0, r8
 8003d16:	f7ff fee7 	bl	8003ae8 <_printf_common>
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	d14a      	bne.n	8003db4 <_printf_i+0x1f0>
 8003d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d22:	b004      	add	sp, #16
 8003d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	f043 0320 	orr.w	r3, r3, #32
 8003d2e:	6023      	str	r3, [r4, #0]
 8003d30:	4832      	ldr	r0, [pc, #200]	@ (8003dfc <_printf_i+0x238>)
 8003d32:	2778      	movs	r7, #120	@ 0x78
 8003d34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	6831      	ldr	r1, [r6, #0]
 8003d3c:	061f      	lsls	r7, r3, #24
 8003d3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003d42:	d402      	bmi.n	8003d4a <_printf_i+0x186>
 8003d44:	065f      	lsls	r7, r3, #25
 8003d46:	bf48      	it	mi
 8003d48:	b2ad      	uxthmi	r5, r5
 8003d4a:	6031      	str	r1, [r6, #0]
 8003d4c:	07d9      	lsls	r1, r3, #31
 8003d4e:	bf44      	itt	mi
 8003d50:	f043 0320 	orrmi.w	r3, r3, #32
 8003d54:	6023      	strmi	r3, [r4, #0]
 8003d56:	b11d      	cbz	r5, 8003d60 <_printf_i+0x19c>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	e7ad      	b.n	8003cb8 <_printf_i+0xf4>
 8003d5c:	4826      	ldr	r0, [pc, #152]	@ (8003df8 <_printf_i+0x234>)
 8003d5e:	e7e9      	b.n	8003d34 <_printf_i+0x170>
 8003d60:	6823      	ldr	r3, [r4, #0]
 8003d62:	f023 0320 	bic.w	r3, r3, #32
 8003d66:	6023      	str	r3, [r4, #0]
 8003d68:	e7f6      	b.n	8003d58 <_printf_i+0x194>
 8003d6a:	4616      	mov	r6, r2
 8003d6c:	e7bd      	b.n	8003cea <_printf_i+0x126>
 8003d6e:	6833      	ldr	r3, [r6, #0]
 8003d70:	6825      	ldr	r5, [r4, #0]
 8003d72:	6961      	ldr	r1, [r4, #20]
 8003d74:	1d18      	adds	r0, r3, #4
 8003d76:	6030      	str	r0, [r6, #0]
 8003d78:	062e      	lsls	r6, r5, #24
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	d501      	bpl.n	8003d82 <_printf_i+0x1be>
 8003d7e:	6019      	str	r1, [r3, #0]
 8003d80:	e002      	b.n	8003d88 <_printf_i+0x1c4>
 8003d82:	0668      	lsls	r0, r5, #25
 8003d84:	d5fb      	bpl.n	8003d7e <_printf_i+0x1ba>
 8003d86:	8019      	strh	r1, [r3, #0]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6123      	str	r3, [r4, #16]
 8003d8c:	4616      	mov	r6, r2
 8003d8e:	e7bc      	b.n	8003d0a <_printf_i+0x146>
 8003d90:	6833      	ldr	r3, [r6, #0]
 8003d92:	1d1a      	adds	r2, r3, #4
 8003d94:	6032      	str	r2, [r6, #0]
 8003d96:	681e      	ldr	r6, [r3, #0]
 8003d98:	6862      	ldr	r2, [r4, #4]
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f7fc fa47 	bl	8000230 <memchr>
 8003da2:	b108      	cbz	r0, 8003da8 <_printf_i+0x1e4>
 8003da4:	1b80      	subs	r0, r0, r6
 8003da6:	6060      	str	r0, [r4, #4]
 8003da8:	6863      	ldr	r3, [r4, #4]
 8003daa:	6123      	str	r3, [r4, #16]
 8003dac:	2300      	movs	r3, #0
 8003dae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003db2:	e7aa      	b.n	8003d0a <_printf_i+0x146>
 8003db4:	6923      	ldr	r3, [r4, #16]
 8003db6:	4632      	mov	r2, r6
 8003db8:	4649      	mov	r1, r9
 8003dba:	4640      	mov	r0, r8
 8003dbc:	47d0      	blx	sl
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d0ad      	beq.n	8003d1e <_printf_i+0x15a>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	079b      	lsls	r3, r3, #30
 8003dc6:	d413      	bmi.n	8003df0 <_printf_i+0x22c>
 8003dc8:	68e0      	ldr	r0, [r4, #12]
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	4298      	cmp	r0, r3
 8003dce:	bfb8      	it	lt
 8003dd0:	4618      	movlt	r0, r3
 8003dd2:	e7a6      	b.n	8003d22 <_printf_i+0x15e>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	4649      	mov	r1, r9
 8003dda:	4640      	mov	r0, r8
 8003ddc:	47d0      	blx	sl
 8003dde:	3001      	adds	r0, #1
 8003de0:	d09d      	beq.n	8003d1e <_printf_i+0x15a>
 8003de2:	3501      	adds	r5, #1
 8003de4:	68e3      	ldr	r3, [r4, #12]
 8003de6:	9903      	ldr	r1, [sp, #12]
 8003de8:	1a5b      	subs	r3, r3, r1
 8003dea:	42ab      	cmp	r3, r5
 8003dec:	dcf2      	bgt.n	8003dd4 <_printf_i+0x210>
 8003dee:	e7eb      	b.n	8003dc8 <_printf_i+0x204>
 8003df0:	2500      	movs	r5, #0
 8003df2:	f104 0619 	add.w	r6, r4, #25
 8003df6:	e7f5      	b.n	8003de4 <_printf_i+0x220>
 8003df8:	08003fed 	.word	0x08003fed
 8003dfc:	08003ffe 	.word	0x08003ffe

08003e00 <memmove>:
 8003e00:	4288      	cmp	r0, r1
 8003e02:	b510      	push	{r4, lr}
 8003e04:	eb01 0402 	add.w	r4, r1, r2
 8003e08:	d902      	bls.n	8003e10 <memmove+0x10>
 8003e0a:	4284      	cmp	r4, r0
 8003e0c:	4623      	mov	r3, r4
 8003e0e:	d807      	bhi.n	8003e20 <memmove+0x20>
 8003e10:	1e43      	subs	r3, r0, #1
 8003e12:	42a1      	cmp	r1, r4
 8003e14:	d008      	beq.n	8003e28 <memmove+0x28>
 8003e16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e1e:	e7f8      	b.n	8003e12 <memmove+0x12>
 8003e20:	4402      	add	r2, r0
 8003e22:	4601      	mov	r1, r0
 8003e24:	428a      	cmp	r2, r1
 8003e26:	d100      	bne.n	8003e2a <memmove+0x2a>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e32:	e7f7      	b.n	8003e24 <memmove+0x24>

08003e34 <_sbrk_r>:
 8003e34:	b538      	push	{r3, r4, r5, lr}
 8003e36:	4d06      	ldr	r5, [pc, #24]	@ (8003e50 <_sbrk_r+0x1c>)
 8003e38:	2300      	movs	r3, #0
 8003e3a:	4604      	mov	r4, r0
 8003e3c:	4608      	mov	r0, r1
 8003e3e:	602b      	str	r3, [r5, #0]
 8003e40:	f7fd f882 	bl	8000f48 <_sbrk>
 8003e44:	1c43      	adds	r3, r0, #1
 8003e46:	d102      	bne.n	8003e4e <_sbrk_r+0x1a>
 8003e48:	682b      	ldr	r3, [r5, #0]
 8003e4a:	b103      	cbz	r3, 8003e4e <_sbrk_r+0x1a>
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	bd38      	pop	{r3, r4, r5, pc}
 8003e50:	20000294 	.word	0x20000294

08003e54 <memcpy>:
 8003e54:	440a      	add	r2, r1
 8003e56:	4291      	cmp	r1, r2
 8003e58:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e5c:	d100      	bne.n	8003e60 <memcpy+0xc>
 8003e5e:	4770      	bx	lr
 8003e60:	b510      	push	{r4, lr}
 8003e62:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e66:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e6a:	4291      	cmp	r1, r2
 8003e6c:	d1f9      	bne.n	8003e62 <memcpy+0xe>
 8003e6e:	bd10      	pop	{r4, pc}

08003e70 <_realloc_r>:
 8003e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e74:	4607      	mov	r7, r0
 8003e76:	4614      	mov	r4, r2
 8003e78:	460d      	mov	r5, r1
 8003e7a:	b921      	cbnz	r1, 8003e86 <_realloc_r+0x16>
 8003e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e80:	4611      	mov	r1, r2
 8003e82:	f7ff bc4d 	b.w	8003720 <_malloc_r>
 8003e86:	b92a      	cbnz	r2, 8003e94 <_realloc_r+0x24>
 8003e88:	f7ff fbde 	bl	8003648 <_free_r>
 8003e8c:	4625      	mov	r5, r4
 8003e8e:	4628      	mov	r0, r5
 8003e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e94:	f000 f81a 	bl	8003ecc <_malloc_usable_size_r>
 8003e98:	4284      	cmp	r4, r0
 8003e9a:	4606      	mov	r6, r0
 8003e9c:	d802      	bhi.n	8003ea4 <_realloc_r+0x34>
 8003e9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003ea2:	d8f4      	bhi.n	8003e8e <_realloc_r+0x1e>
 8003ea4:	4621      	mov	r1, r4
 8003ea6:	4638      	mov	r0, r7
 8003ea8:	f7ff fc3a 	bl	8003720 <_malloc_r>
 8003eac:	4680      	mov	r8, r0
 8003eae:	b908      	cbnz	r0, 8003eb4 <_realloc_r+0x44>
 8003eb0:	4645      	mov	r5, r8
 8003eb2:	e7ec      	b.n	8003e8e <_realloc_r+0x1e>
 8003eb4:	42b4      	cmp	r4, r6
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	bf28      	it	cs
 8003ebc:	4632      	movcs	r2, r6
 8003ebe:	f7ff ffc9 	bl	8003e54 <memcpy>
 8003ec2:	4629      	mov	r1, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff fbbf 	bl	8003648 <_free_r>
 8003eca:	e7f1      	b.n	8003eb0 <_realloc_r+0x40>

08003ecc <_malloc_usable_size_r>:
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f18      	subs	r0, r3, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfbc      	itt	lt
 8003ed6:	580b      	ldrlt	r3, [r1, r0]
 8003ed8:	18c0      	addlt	r0, r0, r3
 8003eda:	4770      	bx	lr

08003edc <lroundf>:
 8003edc:	ee10 1a10 	vmov	r1, s0
 8003ee0:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8003ee4:	2900      	cmp	r1, #0
 8003ee6:	f1a3 027f 	sub.w	r2, r3, #127	@ 0x7f
 8003eea:	bfac      	ite	ge
 8003eec:	2001      	movge	r0, #1
 8003eee:	f04f 30ff 	movlt.w	r0, #4294967295
 8003ef2:	2a1e      	cmp	r2, #30
 8003ef4:	dc1a      	bgt.n	8003f2c <lroundf+0x50>
 8003ef6:	2a00      	cmp	r2, #0
 8003ef8:	da03      	bge.n	8003f02 <lroundf+0x26>
 8003efa:	3201      	adds	r2, #1
 8003efc:	bf18      	it	ne
 8003efe:	2000      	movne	r0, #0
 8003f00:	4770      	bx	lr
 8003f02:	2a16      	cmp	r2, #22
 8003f04:	bfd8      	it	le
 8003f06:	f44f 0380 	movle.w	r3, #4194304	@ 0x400000
 8003f0a:	f3c1 0116 	ubfx	r1, r1, #0, #23
 8003f0e:	bfd8      	it	le
 8003f10:	4113      	asrle	r3, r2
 8003f12:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8003f16:	bfcd      	iteet	gt
 8003f18:	3b96      	subgt	r3, #150	@ 0x96
 8003f1a:	185b      	addle	r3, r3, r1
 8003f1c:	f1c2 0217 	rsble	r2, r2, #23
 8003f20:	fa01 f303 	lslgt.w	r3, r1, r3
 8003f24:	bfd8      	it	le
 8003f26:	40d3      	lsrle	r3, r2
 8003f28:	4358      	muls	r0, r3
 8003f2a:	4770      	bx	lr
 8003f2c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8003f30:	ee17 0a90 	vmov	r0, s15
 8003f34:	4770      	bx	lr
	...

08003f38 <_init>:
 8003f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3a:	bf00      	nop
 8003f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3e:	bc08      	pop	{r3}
 8003f40:	469e      	mov	lr, r3
 8003f42:	4770      	bx	lr

08003f44 <_fini>:
 8003f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f46:	bf00      	nop
 8003f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4a:	bc08      	pop	{r3}
 8003f4c:	469e      	mov	lr, r3
 8003f4e:	4770      	bx	lr
