
loadcell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004858  08004858  00005858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004918  08004918  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004918  08004918  00005918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004920  08004920  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004920  08004920  00005920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004924  08004924  00005924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004928  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  2000005c  08004984  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08004984  00006280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbdf  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001db7  00000000  00000000  00012c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a18  00000000  00000000  00014a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b7  00000000  00000000  00015440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fc0  00000000  00000000  00015bf7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6a1  00000000  00000000  0003abb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9a90  00000000  00000000  00047258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00130ce8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f44  00000000  00000000  00130d2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  00133c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000005c 	.word	0x2000005c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004840 	.word	0x08004840

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000060 	.word	0x20000060
 800021c:	08004840 	.word	0x08004840

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2f>:
 8000abc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ac4:	bf24      	itt	cs
 8000ac6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ace:	d90d      	bls.n	8000aec <__aeabi_d2f+0x30>
 8000ad0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ad4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000adc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae4:	bf08      	it	eq
 8000ae6:	f020 0001 	biceq.w	r0, r0, #1
 8000aea:	4770      	bx	lr
 8000aec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af0:	d121      	bne.n	8000b36 <__aeabi_d2f+0x7a>
 8000af2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000af6:	bfbc      	itt	lt
 8000af8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000afc:	4770      	bxlt	lr
 8000afe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b06:	f1c2 0218 	rsb	r2, r2, #24
 8000b0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b12:	fa20 f002 	lsr.w	r0, r0, r2
 8000b16:	bf18      	it	ne
 8000b18:	f040 0001 	orrne.w	r0, r0, #1
 8000b1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b28:	ea40 000c 	orr.w	r0, r0, ip
 8000b2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b34:	e7cc      	b.n	8000ad0 <__aeabi_d2f+0x14>
 8000b36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3a:	d107      	bne.n	8000b4c <__aeabi_d2f+0x90>
 8000b3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b40:	bf1e      	ittt	ne
 8000b42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b4a:	4770      	bxne	lr
 8000b4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_uldivmod>:
 8000b5c:	b953      	cbnz	r3, 8000b74 <__aeabi_uldivmod+0x18>
 8000b5e:	b94a      	cbnz	r2, 8000b74 <__aeabi_uldivmod+0x18>
 8000b60:	2900      	cmp	r1, #0
 8000b62:	bf08      	it	eq
 8000b64:	2800      	cmpeq	r0, #0
 8000b66:	bf1c      	itt	ne
 8000b68:	f04f 31ff 	movne.w	r1, #4294967295
 8000b6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b70:	f000 b988 	b.w	8000e84 <__aeabi_idiv0>
 8000b74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b7c:	f000 f806 	bl	8000b8c <__udivmoddi4>
 8000b80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b88:	b004      	add	sp, #16
 8000b8a:	4770      	bx	lr

08000b8c <__udivmoddi4>:
 8000b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b90:	9d08      	ldr	r5, [sp, #32]
 8000b92:	468e      	mov	lr, r1
 8000b94:	4604      	mov	r4, r0
 8000b96:	4688      	mov	r8, r1
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d14a      	bne.n	8000c32 <__udivmoddi4+0xa6>
 8000b9c:	428a      	cmp	r2, r1
 8000b9e:	4617      	mov	r7, r2
 8000ba0:	d962      	bls.n	8000c68 <__udivmoddi4+0xdc>
 8000ba2:	fab2 f682 	clz	r6, r2
 8000ba6:	b14e      	cbz	r6, 8000bbc <__udivmoddi4+0x30>
 8000ba8:	f1c6 0320 	rsb	r3, r6, #32
 8000bac:	fa01 f806 	lsl.w	r8, r1, r6
 8000bb0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb4:	40b7      	lsls	r7, r6
 8000bb6:	ea43 0808 	orr.w	r8, r3, r8
 8000bba:	40b4      	lsls	r4, r6
 8000bbc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc0:	fa1f fc87 	uxth.w	ip, r7
 8000bc4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc8:	0c23      	lsrs	r3, r4, #16
 8000bca:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bce:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bd2:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d909      	bls.n	8000bee <__udivmoddi4+0x62>
 8000bda:	18fb      	adds	r3, r7, r3
 8000bdc:	f101 30ff 	add.w	r0, r1, #4294967295
 8000be0:	f080 80ea 	bcs.w	8000db8 <__udivmoddi4+0x22c>
 8000be4:	429a      	cmp	r2, r3
 8000be6:	f240 80e7 	bls.w	8000db8 <__udivmoddi4+0x22c>
 8000bea:	3902      	subs	r1, #2
 8000bec:	443b      	add	r3, r7
 8000bee:	1a9a      	subs	r2, r3, r2
 8000bf0:	b2a3      	uxth	r3, r4
 8000bf2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c02:	459c      	cmp	ip, r3
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0x8e>
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c0c:	f080 80d6 	bcs.w	8000dbc <__udivmoddi4+0x230>
 8000c10:	459c      	cmp	ip, r3
 8000c12:	f240 80d3 	bls.w	8000dbc <__udivmoddi4+0x230>
 8000c16:	443b      	add	r3, r7
 8000c18:	3802      	subs	r0, #2
 8000c1a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1e:	eba3 030c 	sub.w	r3, r3, ip
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa2>
 8000c26:	40f3      	lsrs	r3, r6
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xb6>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb0>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x14c>
 8000c4a:	4573      	cmp	r3, lr
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xc8>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 8105 	bhi.w	8000e5e <__udivmoddi4+0x2d2>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4690      	mov	r8, r2
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	d0e5      	beq.n	8000c2e <__udivmoddi4+0xa2>
 8000c62:	e9c5 4800 	strd	r4, r8, [r5]
 8000c66:	e7e2      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	f000 8090 	beq.w	8000d8e <__udivmoddi4+0x202>
 8000c6e:	fab2 f682 	clz	r6, r2
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	f040 80a4 	bne.w	8000dc0 <__udivmoddi4+0x234>
 8000c78:	1a8a      	subs	r2, r1, r2
 8000c7a:	0c03      	lsrs	r3, r0, #16
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	b280      	uxth	r0, r0
 8000c82:	b2bc      	uxth	r4, r7
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c8a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c92:	fb04 f20c 	mul.w	r2, r4, ip
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d907      	bls.n	8000caa <__udivmoddi4+0x11e>
 8000c9a:	18fb      	adds	r3, r7, r3
 8000c9c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ca0:	d202      	bcs.n	8000ca8 <__udivmoddi4+0x11c>
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	f200 80e0 	bhi.w	8000e68 <__udivmoddi4+0x2dc>
 8000ca8:	46c4      	mov	ip, r8
 8000caa:	1a9b      	subs	r3, r3, r2
 8000cac:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cb0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb8:	fb02 f404 	mul.w	r4, r2, r4
 8000cbc:	429c      	cmp	r4, r3
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x144>
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x142>
 8000cc8:	429c      	cmp	r4, r3
 8000cca:	f200 80ca 	bhi.w	8000e62 <__udivmoddi4+0x2d6>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x98>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cec:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cf0:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf4:	4323      	orrs	r3, r4
 8000cf6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cfa:	fa1f fc87 	uxth.w	ip, r7
 8000cfe:	fbbe f0f9 	udiv	r0, lr, r9
 8000d02:	0c1c      	lsrs	r4, r3, #16
 8000d04:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d08:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d0c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x1a0>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1e:	f080 809c 	bcs.w	8000e5a <__udivmoddi4+0x2ce>
 8000d22:	45a6      	cmp	lr, r4
 8000d24:	f240 8099 	bls.w	8000e5a <__udivmoddi4+0x2ce>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	443c      	add	r4, r7
 8000d2c:	eba4 040e 	sub.w	r4, r4, lr
 8000d30:	fa1f fe83 	uxth.w	lr, r3
 8000d34:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d38:	fb09 4413 	mls	r4, r9, r3, r4
 8000d3c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d40:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d44:	45a4      	cmp	ip, r4
 8000d46:	d908      	bls.n	8000d5a <__udivmoddi4+0x1ce>
 8000d48:	193c      	adds	r4, r7, r4
 8000d4a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4e:	f080 8082 	bcs.w	8000e56 <__udivmoddi4+0x2ca>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d97f      	bls.n	8000e56 <__udivmoddi4+0x2ca>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5e:	eba4 040c 	sub.w	r4, r4, ip
 8000d62:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d66:	4564      	cmp	r4, ip
 8000d68:	4673      	mov	r3, lr
 8000d6a:	46e1      	mov	r9, ip
 8000d6c:	d362      	bcc.n	8000e34 <__udivmoddi4+0x2a8>
 8000d6e:	d05f      	beq.n	8000e30 <__udivmoddi4+0x2a4>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x1fe>
 8000d72:	ebb8 0203 	subs.w	r2, r8, r3
 8000d76:	eb64 0409 	sbc.w	r4, r4, r9
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d82:	431e      	orrs	r6, r3
 8000d84:	40cc      	lsrs	r4, r1
 8000d86:	e9c5 6400 	strd	r6, r4, [r5]
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	e74f      	b.n	8000c2e <__udivmoddi4+0xa2>
 8000d8e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d92:	0c01      	lsrs	r1, r0, #16
 8000d94:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d98:	b280      	uxth	r0, r0
 8000d9a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4638      	mov	r0, r7
 8000da2:	463c      	mov	r4, r7
 8000da4:	46b8      	mov	r8, r7
 8000da6:	46be      	mov	lr, r7
 8000da8:	2620      	movs	r6, #32
 8000daa:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dae:	eba2 0208 	sub.w	r2, r2, r8
 8000db2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db6:	e766      	b.n	8000c86 <__udivmoddi4+0xfa>
 8000db8:	4601      	mov	r1, r0
 8000dba:	e718      	b.n	8000bee <__udivmoddi4+0x62>
 8000dbc:	4610      	mov	r0, r2
 8000dbe:	e72c      	b.n	8000c1a <__udivmoddi4+0x8e>
 8000dc0:	f1c6 0220 	rsb	r2, r6, #32
 8000dc4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc8:	40b7      	lsls	r7, r6
 8000dca:	40b1      	lsls	r1, r6
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd4:	430a      	orrs	r2, r1
 8000dd6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dda:	b2bc      	uxth	r4, r7
 8000ddc:	fb0e 3318 	mls	r3, lr, r8, r3
 8000de0:	0c11      	lsrs	r1, r2, #16
 8000de2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de6:	fb08 f904 	mul.w	r9, r8, r4
 8000dea:	40b0      	lsls	r0, r6
 8000dec:	4589      	cmp	r9, r1
 8000dee:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000df2:	b280      	uxth	r0, r0
 8000df4:	d93e      	bls.n	8000e74 <__udivmoddi4+0x2e8>
 8000df6:	1879      	adds	r1, r7, r1
 8000df8:	f108 3cff 	add.w	ip, r8, #4294967295
 8000dfc:	d201      	bcs.n	8000e02 <__udivmoddi4+0x276>
 8000dfe:	4589      	cmp	r9, r1
 8000e00:	d81f      	bhi.n	8000e42 <__udivmoddi4+0x2b6>
 8000e02:	eba1 0109 	sub.w	r1, r1, r9
 8000e06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e0a:	fb09 f804 	mul.w	r8, r9, r4
 8000e0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e12:	b292      	uxth	r2, r2
 8000e14:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e18:	4542      	cmp	r2, r8
 8000e1a:	d229      	bcs.n	8000e70 <__udivmoddi4+0x2e4>
 8000e1c:	18ba      	adds	r2, r7, r2
 8000e1e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e22:	d2c4      	bcs.n	8000dae <__udivmoddi4+0x222>
 8000e24:	4542      	cmp	r2, r8
 8000e26:	d2c2      	bcs.n	8000dae <__udivmoddi4+0x222>
 8000e28:	f1a9 0102 	sub.w	r1, r9, #2
 8000e2c:	443a      	add	r2, r7
 8000e2e:	e7be      	b.n	8000dae <__udivmoddi4+0x222>
 8000e30:	45f0      	cmp	r8, lr
 8000e32:	d29d      	bcs.n	8000d70 <__udivmoddi4+0x1e4>
 8000e34:	ebbe 0302 	subs.w	r3, lr, r2
 8000e38:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e3c:	3801      	subs	r0, #1
 8000e3e:	46e1      	mov	r9, ip
 8000e40:	e796      	b.n	8000d70 <__udivmoddi4+0x1e4>
 8000e42:	eba7 0909 	sub.w	r9, r7, r9
 8000e46:	4449      	add	r1, r9
 8000e48:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e4c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e50:	fb09 f804 	mul.w	r8, r9, r4
 8000e54:	e7db      	b.n	8000e0e <__udivmoddi4+0x282>
 8000e56:	4673      	mov	r3, lr
 8000e58:	e77f      	b.n	8000d5a <__udivmoddi4+0x1ce>
 8000e5a:	4650      	mov	r0, sl
 8000e5c:	e766      	b.n	8000d2c <__udivmoddi4+0x1a0>
 8000e5e:	4608      	mov	r0, r1
 8000e60:	e6fd      	b.n	8000c5e <__udivmoddi4+0xd2>
 8000e62:	443b      	add	r3, r7
 8000e64:	3a02      	subs	r2, #2
 8000e66:	e733      	b.n	8000cd0 <__udivmoddi4+0x144>
 8000e68:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e6c:	443b      	add	r3, r7
 8000e6e:	e71c      	b.n	8000caa <__udivmoddi4+0x11e>
 8000e70:	4649      	mov	r1, r9
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x222>
 8000e74:	eba1 0109 	sub.w	r1, r1, r9
 8000e78:	46c4      	mov	ip, r8
 8000e7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7e:	fb09 f804 	mul.w	r8, r9, r4
 8000e82:	e7c4      	b.n	8000e0e <__udivmoddi4+0x282>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <hx711_init>:
 */

#include <HX711.h>


void hx711_init(hx711_t *hx711, GPIO_TypeDef *clk_gpio, uint16_t clk_pin, GPIO_TypeDef *dat_gpio, uint16_t dat_pin){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	4613      	mov	r3, r2
 8000e96:	80fb      	strh	r3, [r7, #6]
  hx711->clk_gpio = clk_gpio;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	601a      	str	r2, [r3, #0]
  hx711->clk_pin = clk_pin;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	88fa      	ldrh	r2, [r7, #6]
 8000ea2:	811a      	strh	r2, [r3, #8]
  hx711->dat_gpio = dat_gpio;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	683a      	ldr	r2, [r7, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
  hx711->dat_pin = dat_pin;
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000eae:	815a      	strh	r2, [r3, #10]

  GPIO_InitTypeDef  gpio = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	623b      	str	r3, [r7, #32]
  gpio.Pin = clk_pin;
 8000ecc:	88fb      	ldrh	r3, [r7, #6]
 8000ece:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(clk_gpio, &gpio);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	68b8      	ldr	r0, [r7, #8]
 8000ed8:	f000 feda 	bl	8001c90 <HAL_GPIO_Init>
  gpio.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
  gpio.Pull = GPIO_PULLUP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  gpio.Pin = dat_pin;
 8000ee8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8000eea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(dat_gpio, &gpio);
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	6838      	ldr	r0, [r7, #0]
 8000ef4:	f000 fecc 	bl	8001c90 <HAL_GPIO_Init>

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <set_scale>:


void set_scale(hx711_t *hx711, float Ascale, float Bscale){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f0c:	edc7 0a01 	vstr	s1, [r7, #4]
  // Set the scale. To calibrate the cell, run the program with a scale of 1, call the tare function and then the get_units function. 
  // Divide the obtained weight by the real weight. The result is the parameter to pass to scale
	hx711->Ascale = Ascale;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	611a      	str	r2, [r3, #16]
	hx711->Bscale = Bscale;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	61da      	str	r2, [r3, #28]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <set_gain>:

//#############################################################################################
void set_gain(hx711_t *hx711, uint8_t Again, uint8_t Bgain){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
 8000f34:	4613      	mov	r3, r2
 8000f36:	70bb      	strb	r3, [r7, #2]
	switch (Again) {
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b40      	cmp	r3, #64	@ 0x40
 8000f3c:	d005      	beq.n	8000f4a <set_gain+0x22>
 8000f3e:	2b80      	cmp	r3, #128	@ 0x80
 8000f40:	d107      	bne.n	8000f52 <set_gain+0x2a>
			case 128:		// channel A, gain factor 128
				hx711->Again = 1;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	751a      	strb	r2, [r3, #20]
				break;
 8000f48:	e003      	b.n	8000f52 <set_gain+0x2a>
			case 64:		// channel A, gain factor 64
				hx711->Again = 3;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	751a      	strb	r2, [r3, #20]
				break;
 8000f50:	bf00      	nop
		}
	hx711->Bgain = 2;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2202      	movs	r2, #2
 8000f56:	f883 2020 	strb.w	r2, [r3, #32]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <set_offset>:

//#############################################################################################
void set_offset(hx711_t *hx711, long offset, uint8_t channel){
 8000f66:	b480      	push	{r7}
 8000f68:	b085      	sub	sp, #20
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	60f8      	str	r0, [r7, #12]
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71fb      	strb	r3, [r7, #7]
	if(channel == CHANNEL_A) hx711->Aoffset = offset;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d103      	bne.n	8000f82 <set_offset+0x1c>
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	60da      	str	r2, [r3, #12]
	else hx711->Boffset = offset;
}
 8000f80:	e002      	b.n	8000f88 <set_offset+0x22>
	else hx711->Boffset = offset;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	68ba      	ldr	r2, [r7, #8]
 8000f86:	619a      	str	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <shiftIn>:

//############################################################################################
uint8_t shiftIn(hx711_t *hx711, uint8_t bitOrder) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	70fb      	strb	r3, [r7, #3]
    uint8_t value = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	73fb      	strb	r3, [r7, #15]
    uint8_t i;

    for(i = 0; i < 8; ++i) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73bb      	strb	r3, [r7, #14]
 8000fa8:	e03e      	b.n	8001028 <shiftIn+0x94>
    	HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6818      	ldr	r0, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	891b      	ldrh	r3, [r3, #8]
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f001 f805 	bl	8001fc4 <HAL_GPIO_WritePin>
        if(bitOrder == 0)
 8000fba:	78fb      	ldrb	r3, [r7, #3]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d113      	bne.n	8000fe8 <shiftIn+0x54>
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << i;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	895b      	ldrh	r3, [r3, #10]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4610      	mov	r0, r2
 8000fcc:	f000 ffe2 	bl	8001f94 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	7bbb      	ldrb	r3, [r7, #14]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	b25a      	sxtb	r2, r3
 8000fdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	b25b      	sxtb	r3, r3
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	e014      	b.n	8001012 <shiftIn+0x7e>
        else
            value |= HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) << (7 - i);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	895b      	ldrh	r3, [r3, #10]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4610      	mov	r0, r2
 8000ff4:	f000 ffce 	bl	8001f94 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	f1c3 0307 	rsb	r3, r3, #7
 8001002:	fa02 f303 	lsl.w	r3, r2, r3
 8001006:	b25a      	sxtb	r2, r3
 8001008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100c:	4313      	orrs	r3, r2
 800100e:	b25b      	sxtb	r3, r3
 8001010:	73fb      	strb	r3, [r7, #15]
        HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	891b      	ldrh	r3, [r3, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	4619      	mov	r1, r3
 800101e:	f000 ffd1 	bl	8001fc4 <HAL_GPIO_WritePin>
    for(i = 0; i < 8; ++i) {
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	3301      	adds	r3, #1
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d9bd      	bls.n	8000faa <shiftIn+0x16>
    }
    return value;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <is_ready>:

//############################################################################################
bool is_ready(hx711_t *hx711) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(hx711->dat_gpio, hx711->dat_pin) == GPIO_PIN_RESET){
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	895b      	ldrh	r3, [r3, #10]
 8001048:	4619      	mov	r1, r3
 800104a:	4610      	mov	r0, r2
 800104c:	f000 ffa2 	bl	8001f94 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <is_ready+0x22>
		return 1;
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <is_ready+0x24>
	}
	return 0;
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <wait_ready>:

//############################################################################################
void wait_ready(hx711_t *hx711) {
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	// Wait for the chip to become ready.
	while (!is_ready(hx711)) {
 800106c:	e002      	b.n	8001074 <wait_ready+0x10>
		HAL_Delay(0);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 fcdc 	bl	8001a2c <HAL_Delay>
	while (!is_ready(hx711)) {
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff ffdf 	bl	8001038 <is_ready>
 800107a:	4603      	mov	r3, r0
 800107c:	f083 0301 	eor.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b00      	cmp	r3, #0
 8001084:	d1f3      	bne.n	800106e <wait_ready+0xa>
	}
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <read>:

//############################################################################################
long read(hx711_t *hx711, uint8_t channel){
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	wait_ready(hx711);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ffe1 	bl	8001064 <wait_ready>
	unsigned long value = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
	uint8_t data[3] = { 0 };
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	2100      	movs	r1, #0
 80010ac:	460a      	mov	r2, r1
 80010ae:	801a      	strh	r2, [r3, #0]
 80010b0:	460a      	mov	r2, r1
 80010b2:	709a      	strb	r2, [r3, #2]
	uint8_t filler = 0x00;
 80010b4:	2300      	movs	r3, #0
 80010b6:	75fb      	strb	r3, [r7, #23]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b8:	b672      	cpsid	i
}
 80010ba:	bf00      	nop

	noInterrupts();

	data[2] = shiftIn(hx711, 1);
 80010bc:	2101      	movs	r1, #1
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff68 	bl	8000f94 <shiftIn>
 80010c4:	4603      	mov	r3, r0
 80010c6:	72bb      	strb	r3, [r7, #10]
	data[1] = shiftIn(hx711, 1);
 80010c8:	2101      	movs	r1, #1
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff ff62 	bl	8000f94 <shiftIn>
 80010d0:	4603      	mov	r3, r0
 80010d2:	727b      	strb	r3, [r7, #9]
	data[0] = shiftIn(hx711, 1);
 80010d4:	2101      	movs	r1, #1
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff ff5c 	bl	8000f94 <shiftIn>
 80010dc:	4603      	mov	r3, r0
 80010de:	723b      	strb	r3, [r7, #8]

	uint8_t gain = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	75bb      	strb	r3, [r7, #22]
	if(channel == 0) gain = hx711->Again;
 80010e4:	78fb      	ldrb	r3, [r7, #3]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d103      	bne.n	80010f2 <read+0x62>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	7d1b      	ldrb	r3, [r3, #20]
 80010ee:	75bb      	strb	r3, [r7, #22]
 80010f0:	e003      	b.n	80010fa <read+0x6a>
	else gain = hx711->Bgain;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f8:	75bb      	strb	r3, [r7, #22]

	for (unsigned int i = 0; i < gain; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	613b      	str	r3, [r7, #16]
 80010fe:	e012      	b.n	8001126 <read+0x96>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, SET);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6818      	ldr	r0, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	891b      	ldrh	r3, [r3, #8]
 8001108:	2201      	movs	r2, #1
 800110a:	4619      	mov	r1, r3
 800110c:	f000 ff5a 	bl	8001fc4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(hx711->clk_gpio, hx711->clk_pin, RESET);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6818      	ldr	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	891b      	ldrh	r3, [r3, #8]
 8001118:	2200      	movs	r2, #0
 800111a:	4619      	mov	r1, r3
 800111c:	f000 ff52 	bl	8001fc4 <HAL_GPIO_WritePin>
	for (unsigned int i = 0; i < gain; i++) {
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	3301      	adds	r3, #1
 8001124:	613b      	str	r3, [r7, #16]
 8001126:	7dbb      	ldrb	r3, [r7, #22]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3e8      	bcc.n	8001100 <read+0x70>
  __ASM volatile ("cpsie i" : : : "memory");
 800112e:	b662      	cpsie	i
}
 8001130:	bf00      	nop
	}

	interrupts();

	// Replicate the most significant bit to pad out a 32-bit signed integer
	if (data[2] & 0x80) {
 8001132:	7abb      	ldrb	r3, [r7, #10]
 8001134:	b25b      	sxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	da02      	bge.n	8001140 <read+0xb0>
		filler = 0xFF;
 800113a:	23ff      	movs	r3, #255	@ 0xff
 800113c:	75fb      	strb	r3, [r7, #23]
 800113e:	e001      	b.n	8001144 <read+0xb4>
	} else {
		filler = 0x00;
 8001140:	2300      	movs	r3, #0
 8001142:	75fb      	strb	r3, [r7, #23]
	}

	// Construct a 32-bit signed integer
	value = ( (unsigned long)(filler) << 24
 8001144:	7dfb      	ldrb	r3, [r7, #23]
 8001146:	061a      	lsls	r2, r3, #24
			| (unsigned long)(data[2]) << 16
 8001148:	7abb      	ldrb	r3, [r7, #10]
 800114a:	041b      	lsls	r3, r3, #16
 800114c:	431a      	orrs	r2, r3
			| (unsigned long)(data[1]) << 8
 800114e:	7a7b      	ldrb	r3, [r7, #9]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	4313      	orrs	r3, r2
			| (unsigned long)(data[0]) );
 8001154:	7a3a      	ldrb	r2, [r7, #8]
	value = ( (unsigned long)(filler) << 24
 8001156:	4313      	orrs	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]

	return (long)(value);
 800115a:	68fb      	ldr	r3, [r7, #12]
}
 800115c:	4618      	mov	r0, r3
 800115e:	3718      	adds	r7, #24
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <read_average>:

//############################################################################################
long read_average(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
 8001170:	4613      	mov	r3, r2
 8001172:	70bb      	strb	r3, [r7, #2]
	long sum = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	60fb      	str	r3, [r7, #12]
	for (int8_t i = 0; i < times; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	72fb      	strb	r3, [r7, #11]
 800117c:	e011      	b.n	80011a2 <read_average+0x3e>
		sum += read(hx711, channel);
 800117e:	78bb      	ldrb	r3, [r7, #2]
 8001180:	4619      	mov	r1, r3
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ff84 	bl	8001090 <read>
 8001188:	4602      	mov	r2, r0
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4413      	add	r3, r2
 800118e:	60fb      	str	r3, [r7, #12]
		HAL_Delay(0);
 8001190:	2000      	movs	r0, #0
 8001192:	f000 fc4b 	bl	8001a2c <HAL_Delay>
	for (int8_t i = 0; i < times; i++) {
 8001196:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800119a:	b2db      	uxtb	r3, r3
 800119c:	3301      	adds	r3, #1
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	72fb      	strb	r3, [r7, #11]
 80011a2:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80011a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbe7      	blt.n	800117e <read_average+0x1a>
	}
	return sum / times;
 80011ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	fb92 f3f3 	sdiv	r3, r2, r3
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <get_value>:

//############################################################################################
double get_value(hx711_t *hx711, int8_t times, uint8_t channel) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
 80011cc:	4613      	mov	r3, r2
 80011ce:	70bb      	strb	r3, [r7, #2]
	long offset = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) offset = hx711->Aoffset;
 80011d4:	78bb      	ldrb	r3, [r7, #2]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d103      	bne.n	80011e2 <get_value+0x22>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	e002      	b.n	80011e8 <get_value+0x28>
	else offset = hx711->Boffset;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	60fb      	str	r3, [r7, #12]
	return read_average(hx711, times, channel) - offset;
 80011e8:	78ba      	ldrb	r2, [r7, #2]
 80011ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011ee:	4619      	mov	r1, r3
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ffb7 	bl	8001164 <read_average>
 80011f6:	4602      	mov	r2, r0
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b9 	bl	8000574 <__aeabi_i2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	ec43 2b17 	vmov	d7, r2, r3
}
 800120a:	eeb0 0a47 	vmov.f32	s0, s14
 800120e:	eef0 0a67 	vmov.f32	s1, s15
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <tare>:

//############################################################################################
void tare(hx711_t *hx711, uint8_t times, uint8_t channel) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
 8001224:	4613      	mov	r3, r2
 8001226:	70bb      	strb	r3, [r7, #2]
	read(hx711, channel); // Change channel
 8001228:	78bb      	ldrb	r3, [r7, #2]
 800122a:	4619      	mov	r1, r3
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff2f 	bl	8001090 <read>
	double sum = read_average(hx711, times, channel);
 8001232:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001236:	78ba      	ldrb	r2, [r7, #2]
 8001238:	4619      	mov	r1, r3
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff ff92 	bl	8001164 <read_average>
 8001240:	4603      	mov	r3, r0
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f996 	bl	8000574 <__aeabi_i2d>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	set_offset(hx711, sum, channel);
 8001250:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001254:	f7ff fc0a 	bl	8000a6c <__aeabi_d2iz>
 8001258:	4601      	mov	r1, r0
 800125a:	78bb      	ldrb	r3, [r7, #2]
 800125c:	461a      	mov	r2, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fe81 	bl	8000f66 <set_offset>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <tare_all>:

//############################################################################################
void tare_all(hx711_t *hx711, uint8_t times) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	tare(hx711, times, CHANNEL_A);
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2200      	movs	r2, #0
 800127c:	4619      	mov	r1, r3
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff ffca 	bl	8001218 <tare>
	tare(hx711, times, CHANNEL_B);
 8001284:	78fb      	ldrb	r3, [r7, #3]
 8001286:	2201      	movs	r2, #1
 8001288:	4619      	mov	r1, r3
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffc4 	bl	8001218 <tare>
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <get_weight>:

//############################################################################################
float get_weight(hx711_t *hx711, int8_t times, uint8_t channel) {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	460b      	mov	r3, r1
 80012a2:	70fb      	strb	r3, [r7, #3]
 80012a4:	4613      	mov	r3, r2
 80012a6:	70bb      	strb	r3, [r7, #2]
  // Read load cell
	read(hx711, channel);
 80012a8:	78bb      	ldrb	r3, [r7, #2]
 80012aa:	4619      	mov	r1, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff feef 	bl	8001090 <read>
	float scale = 0;
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
	if(channel == CHANNEL_A) scale = hx711->Ascale;
 80012b8:	78bb      	ldrb	r3, [r7, #2]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <get_weight+0x2e>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e002      	b.n	80012cc <get_weight+0x34>
	else scale = hx711->Bscale;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	60fb      	str	r3, [r7, #12]
	return get_value(hx711, times, channel) / scale;
 80012cc:	78ba      	ldrb	r2, [r7, #2]
 80012ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80012d2:	4619      	mov	r1, r3
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f7ff ff73 	bl	80011c0 <get_value>
 80012da:	ec55 4b10 	vmov	r4, r5, d0
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f7ff f95a 	bl	8000598 <__aeabi_f2d>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4620      	mov	r0, r4
 80012ea:	4629      	mov	r1, r5
 80012ec:	f7ff fad6 	bl	800089c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fbe0 	bl	8000abc <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	ee07 3a90 	vmov	s15, r3
}
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	3710      	adds	r7, #16
 8001308:	46bd      	mov	sp, r7
 800130a:	bdb0      	pop	{r4, r5, r7, pc}

0800130c <init_weight>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init_weight(hx711_t *hx711){
 800130c:	b580      	push	{r7, lr}
 800130e:	b0a4      	sub	sp, #144	@ 0x90
 8001310:	af02      	add	r7, sp, #8
 8001312:	6078      	str	r0, [r7, #4]
    char buffer[128];

    sprintf(buffer,"HX711 initialization\r\n");
 8001314:	f107 0308 	add.w	r3, r7, #8
 8001318:	4921      	ldr	r1, [pc, #132]	@ (80013a0 <init_weight+0x94>)
 800131a:	4618      	mov	r0, r3
 800131c:	f002 fdf0 	bl	8003f00 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4618      	mov	r0, r3
 8001326:	f7fe ff7b 	bl	8000220 <strlen>
 800132a:	4603      	mov	r3, r0
 800132c:	b29a      	uxth	r2, r3
 800132e:	f107 0108 	add.w	r1, r7, #8
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	481b      	ldr	r0, [pc, #108]	@ (80013a4 <init_weight+0x98>)
 8001338:	f001 ff00 	bl	800313c <HAL_UART_Transmit>

    /* Initialize the hx711 sensor on PA1=DOUT, PA0=SCK */
    hx711_init(hx711, GPIOA, GPIO_PIN_0, GPIOA, GPIO_PIN_1);
 800133c:	2302      	movs	r3, #2
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001344:	2201      	movs	r2, #1
 8001346:	f04f 4190 	mov.w	r1, #1207959552	@ 0x48000000
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fd9c 	bl	8000e88 <hx711_init>

    /* Configure gain for channel A (128) and B (32) */
    set_gain(hx711, 128, 32);
 8001350:	2220      	movs	r2, #32
 8001352:	2180      	movs	r1, #128	@ 0x80
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff fde7 	bl	8000f28 <set_gain>

    /* Set HX711 scaling factors (you must calibrate these) */
    set_scale(hx711, 107.f, 1.0f);
 800135a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800135e:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 80013a8 <init_weight+0x9c>
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fdcc 	bl	8000f00 <set_scale>

    /* Tare both channels with 10 readings */
    tare_all(hx711, 10);
 8001368:	210a      	movs	r1, #10
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff7e 	bl	800126c <tare_all>

    sprintf(buffer,"HX711 module has been initialized\r\n");
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	490d      	ldr	r1, [pc, #52]	@ (80013ac <init_weight+0xa0>)
 8001376:	4618      	mov	r0, r3
 8001378:	f002 fdc2 	bl	8003f00 <siprintf>
    HAL_UART_Transmit(&hlpuart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800137c:	f107 0308 	add.w	r3, r7, #8
 8001380:	4618      	mov	r0, r3
 8001382:	f7fe ff4d 	bl	8000220 <strlen>
 8001386:	4603      	mov	r3, r0
 8001388:	b29a      	uxth	r2, r3
 800138a:	f107 0108 	add.w	r1, r7, #8
 800138e:	f04f 33ff 	mov.w	r3, #4294967295
 8001392:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <init_weight+0x98>)
 8001394:	f001 fed2 	bl	800313c <HAL_UART_Transmit>
}
 8001398:	bf00      	nop
 800139a:	3788      	adds	r7, #136	@ 0x88
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	08004858 	.word	0x08004858
 80013a4:	20000078 	.word	0x20000078
 80013a8:	42d60000 	.word	0x42d60000
 80013ac:	08004870 	.word	0x08004870

080013b0 <measure_weight>:

float measure_weight(hx711_t hx711, hx711_t hx711b){
 80013b0:	b084      	sub	sp, #16
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	f107 0c10 	add.w	ip, r7, #16
 80013bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    long weightA = get_weight(&hx711, 1, CHANNEL_A);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2101      	movs	r1, #1
 80013c4:	f107 0010 	add.w	r0, r7, #16
 80013c8:	f7ff ff66 	bl	8001298 <get_weight>
 80013cc:	eef0 7a40 	vmov.f32	s15, s0
 80013d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d4:	ee17 3a90 	vmov	r3, s15
 80013d8:	607b      	str	r3, [r7, #4]
    if (weightA < 0) weightA = abs(weightA);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	da04      	bge.n	80013ea <measure_weight+0x3a>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	bfb8      	it	lt
 80013e6:	425b      	neglt	r3, r3
 80013e8:	607b      	str	r3, [r7, #4]

    long weightB = get_weight(&hx711b, 1, CHANNEL_B);
 80013ea:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013ee:	2201      	movs	r2, #1
 80013f0:	2101      	movs	r1, #1
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff ff50 	bl	8001298 <get_weight>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001400:	ee17 3a90 	vmov	r3, s15
 8001404:	603b      	str	r3, [r7, #0]
    if (weightB < 0) weightB = 0;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	da01      	bge.n	8001410 <measure_weight+0x60>
 800140c:	2300      	movs	r3, #0
 800140e:	603b      	str	r3, [r7, #0]

    return (float)weightA;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	ee07 3a90 	vmov	s15, r3
 8001416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800141a:	eeb0 0a67 	vmov.f32	s0, s15
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001426:	b004      	add	sp, #16
 8001428:	4770      	bx	lr
	...

0800142c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800142c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142e:	b0a3      	sub	sp, #140	@ 0x8c
 8001430:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001432:	f000 fa8a 	bl	800194a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001436:	f000 f83d 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143a:	f000 f8d1 	bl	80015e0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800143e:	f000 f885 	bl	800154c <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  init_weight(&scale);
 8001442:	4819      	ldr	r0, [pc, #100]	@ (80014a8 <main+0x7c>)
 8001444:	f7ff ff62 	bl	800130c <init_weight>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Check if HX711 is ready to read
	  float w = measure_weight(scale, scale);
 8001448:	4e17      	ldr	r6, [pc, #92]	@ (80014a8 <main+0x7c>)
 800144a:	4b17      	ldr	r3, [pc, #92]	@ (80014a8 <main+0x7c>)
 800144c:	ac05      	add	r4, sp, #20
 800144e:	461d      	mov	r5, r3
 8001450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	6023      	str	r3, [r4, #0]
 800145c:	466d      	mov	r5, sp
 800145e:	f106 0410 	add.w	r4, r6, #16
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	602b      	str	r3, [r5, #0]
 800146a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800146e:	f7ff ff9f 	bl	80013b0 <measure_weight>
 8001472:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	        char msg[64];
	        long grams = (long)w;                  // drop fractional part
 8001476:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 3a90 	vmov	r3, s15
 8001482:	64bb      	str	r3, [r7, #72]	@ 0x48
	        int len   = snprintf(msg, sizeof(msg),
 8001484:	1d38      	adds	r0, r7, #4
 8001486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001488:	4a08      	ldr	r2, [pc, #32]	@ (80014ac <main+0x80>)
 800148a:	2140      	movs	r1, #64	@ 0x40
 800148c:	f002 fd02 	bl	8003e94 <sniprintf>
 8001490:	6478      	str	r0, [r7, #68]	@ 0x44
	                             "Weight: %ld g\r\n", grams);
	        HAL_UART_Transmit(&hlpuart1,
 8001492:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001494:	b29a      	uxth	r2, r3
 8001496:	1d39      	adds	r1, r7, #4
 8001498:	f04f 33ff 	mov.w	r3, #4294967295
 800149c:	4804      	ldr	r0, [pc, #16]	@ (80014b0 <main+0x84>)
 800149e:	f001 fe4d 	bl	800313c <HAL_UART_Transmit>
  {
 80014a2:	bf00      	nop
 80014a4:	e7d0      	b.n	8001448 <main+0x1c>
 80014a6:	bf00      	nop
 80014a8:	2000010c 	.word	0x2000010c
 80014ac:	08004894 	.word	0x08004894
 80014b0:	20000078 	.word	0x20000078

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	@ 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	2238      	movs	r2, #56	@ 0x38
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 fd3e 	bl	8003f44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
 80014d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 fdb0 	bl	800203c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014dc:	2302      	movs	r3, #2
 80014de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014e6:	2340      	movs	r3, #64	@ 0x40
 80014e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ea:	2302      	movs	r3, #2
 80014ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014ee:	2302      	movs	r3, #2
 80014f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014f2:	2304      	movs	r3, #4
 80014f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014f6:	2355      	movs	r3, #85	@ 0x55
 80014f8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014fe:	2302      	movs	r3, #2
 8001500:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001502:	2302      	movs	r3, #2
 8001504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 0318 	add.w	r3, r7, #24
 800150a:	4618      	mov	r0, r3
 800150c:	f000 fe4a 	bl	80021a4 <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001516:	f000 f8ed 	bl	80016f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2303      	movs	r3, #3
 8001520:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800152e:	1d3b      	adds	r3, r7, #4
 8001530:	2104      	movs	r1, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f948 	bl	80027c8 <HAL_RCC_ClockConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800153e:	f000 f8d9 	bl	80016f4 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	@ 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001550:	4b21      	ldr	r3, [pc, #132]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001552:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <MX_LPUART1_UART_Init+0x90>)
 8001554:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 230400;
 8001556:	4b20      	ldr	r3, [pc, #128]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001558:	f44f 3261 	mov.w	r2, #230400	@ 0x38400
 800155c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b1e      	ldr	r3, [pc, #120]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800156a:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b19      	ldr	r3, [pc, #100]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800157c:	4b16      	ldr	r3, [pc, #88]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 800157e:	2200      	movs	r2, #0
 8001580:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001584:	2200      	movs	r2, #0
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 800158a:	2200      	movs	r2, #0
 800158c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800158e:	4812      	ldr	r0, [pc, #72]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 8001590:	f001 fd84 	bl	800309c <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 f8ab 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800159e:	2100      	movs	r1, #0
 80015a0:	480d      	ldr	r0, [pc, #52]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 80015a2:	f002 fbad 	bl	8003d00 <HAL_UARTEx_SetTxFifoThreshold>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80015ac:	f000 f8a2 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	4809      	ldr	r0, [pc, #36]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 80015b4:	f002 fbe2 	bl	8003d7c <HAL_UARTEx_SetRxFifoThreshold>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80015be:	f000 f899 	bl	80016f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_LPUART1_UART_Init+0x8c>)
 80015c4:	f002 fb63 	bl	8003c8e <HAL_UARTEx_DisableFifoMode>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80015ce:	f000 f891 	bl	80016f4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000078 	.word	0x20000078
 80015dc:	40008000 	.word	0x40008000

080015e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
 80015f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f6:	4b3d      	ldr	r3, [pc, #244]	@ (80016ec <MX_GPIO_Init+0x10c>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015fa:	4a3c      	ldr	r2, [pc, #240]	@ (80016ec <MX_GPIO_Init+0x10c>)
 80015fc:	f043 0304 	orr.w	r3, r3, #4
 8001600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001602:	4b3a      	ldr	r3, [pc, #232]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800160e:	4b37      	ldr	r3, [pc, #220]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001612:	4a36      	ldr	r2, [pc, #216]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001614:	f043 0320 	orr.w	r3, r3, #32
 8001618:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800161a:	4b34      	ldr	r3, [pc, #208]	@ (80016ec <MX_GPIO_Init+0x10c>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800161e:	f003 0320 	and.w	r3, r3, #32
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001626:	4b31      	ldr	r3, [pc, #196]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800162a:	4a30      	ldr	r2, [pc, #192]	@ (80016ec <MX_GPIO_Init+0x10c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001632:	4b2e      	ldr	r3, [pc, #184]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	4b2b      	ldr	r3, [pc, #172]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001642:	4a2a      	ldr	r2, [pc, #168]	@ (80016ec <MX_GPIO_Init+0x10c>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800164a:	4b28      	ldr	r3, [pc, #160]	@ (80016ec <MX_GPIO_Init+0x10c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|LD2_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2121      	movs	r1, #33	@ 0x21
 800165a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800165e:	f000 fcb1 	bl	8001fc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001662:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001668:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	481d      	ldr	r0, [pc, #116]	@ (80016f0 <MX_GPIO_Init+0x110>)
 800167a:	f000 fb09 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800167e:	2301      	movs	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001698:	f000 fafa 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800169c:	2302      	movs	r3, #2
 800169e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016b2:	f000 faed 	bl	8001c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80016b6:	2320      	movs	r3, #32
 80016b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0314 	add.w	r3, r7, #20
 80016ca:	4619      	mov	r1, r3
 80016cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016d0:	f000 fade 	bl	8001c90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016d4:	2200      	movs	r2, #0
 80016d6:	2100      	movs	r1, #0
 80016d8:	2028      	movs	r0, #40	@ 0x28
 80016da:	f000 faa4 	bl	8001c26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016de:	2028      	movs	r0, #40	@ 0x28
 80016e0:	f000 fabb 	bl	8001c5a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016e4:	bf00      	nop
 80016e6:	3728      	adds	r7, #40	@ 0x28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000800 	.word	0x48000800

080016f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80016f8:	b672      	cpsid	i
}
 80016fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016fc:	bf00      	nop
 80016fe:	e7fd      	b.n	80016fc <Error_Handler+0x8>

08001700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_MspInit+0x44>)
 8001708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_MspInit+0x44>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6613      	str	r3, [r2, #96]	@ 0x60
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_MspInit+0x44>)
 8001714:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_MspInit+0x44>)
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001722:	4a08      	ldr	r2, [pc, #32]	@ (8001744 <HAL_MspInit+0x44>)
 8001724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001728:	6593      	str	r3, [r2, #88]	@ 0x58
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <HAL_MspInit+0x44>)
 800172c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800172e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001736:	f000 fd25 	bl	8002184 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40021000 	.word	0x40021000

08001748 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b09e      	sub	sp, #120	@ 0x78
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	2254      	movs	r2, #84	@ 0x54
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f002 fbeb 	bl	8003f44 <memset>
  if(huart->Instance==LPUART1)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a1f      	ldr	r2, [pc, #124]	@ (80017f0 <HAL_UART_MspInit+0xa8>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d136      	bne.n	80017e6 <HAL_UART_MspInit+0x9e>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001778:	2320      	movs	r3, #32
 800177a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001780:	f107 0310 	add.w	r3, r7, #16
 8001784:	4618      	mov	r0, r3
 8001786:	f001 fa3b 	bl	8002c00 <HAL_RCCEx_PeriphCLKConfig>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001790:	f7ff ffb0 	bl	80016f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001794:	4b17      	ldr	r3, [pc, #92]	@ (80017f4 <HAL_UART_MspInit+0xac>)
 8001796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001798:	4a16      	ldr	r2, [pc, #88]	@ (80017f4 <HAL_UART_MspInit+0xac>)
 800179a:	f043 0301 	orr.w	r3, r3, #1
 800179e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80017a0:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <HAL_UART_MspInit+0xac>)
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ac:	4b11      	ldr	r3, [pc, #68]	@ (80017f4 <HAL_UART_MspInit+0xac>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b0:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <HAL_UART_MspInit+0xac>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_UART_MspInit+0xac>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80017c4:	230c      	movs	r3, #12
 80017c6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	2302      	movs	r3, #2
 80017ca:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80017d4:	230c      	movs	r3, #12
 80017d6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80017dc:	4619      	mov	r1, r3
 80017de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017e2:	f000 fa55 	bl	8001c90 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 80017e6:	bf00      	nop
 80017e8:	3778      	adds	r7, #120	@ 0x78
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40008000 	.word	0x40008000
 80017f4:	40021000 	.word	0x40021000

080017f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <NMI_Handler+0x4>

08001800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	bf00      	nop
 800180e:	e7fd      	b.n	800180c <MemManage_Handler+0x4>

08001810 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <UsageFault_Handler+0x4>

08001820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr

0800184a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184e:	f000 f8cf 	bl	80019f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}

08001856 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800185a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800185e:	f000 fbc9 	bl	8001ff4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001870:	4a14      	ldr	r2, [pc, #80]	@ (80018c4 <_sbrk+0x5c>)
 8001872:	4b15      	ldr	r3, [pc, #84]	@ (80018c8 <_sbrk+0x60>)
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800187c:	4b13      	ldr	r3, [pc, #76]	@ (80018cc <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001884:	4b11      	ldr	r3, [pc, #68]	@ (80018cc <_sbrk+0x64>)
 8001886:	4a12      	ldr	r2, [pc, #72]	@ (80018d0 <_sbrk+0x68>)
 8001888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188a:	4b10      	ldr	r3, [pc, #64]	@ (80018cc <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	429a      	cmp	r2, r3
 8001896:	d207      	bcs.n	80018a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001898:	f002 fb5c 	bl	8003f54 <__errno>
 800189c:	4603      	mov	r3, r0
 800189e:	220c      	movs	r2, #12
 80018a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e009      	b.n	80018bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <_sbrk+0x64>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ae:	4b07      	ldr	r3, [pc, #28]	@ (80018cc <_sbrk+0x64>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	4a05      	ldr	r2, [pc, #20]	@ (80018cc <_sbrk+0x64>)
 80018b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ba:	68fb      	ldr	r3, [r7, #12]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3718      	adds	r7, #24
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20020000 	.word	0x20020000
 80018c8:	00000400 	.word	0x00000400
 80018cc:	20000130 	.word	0x20000130
 80018d0:	20000280 	.word	0x20000280

080018d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018d8:	4b06      	ldr	r3, [pc, #24]	@ (80018f4 <SystemInit+0x20>)
 80018da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018de:	4a05      	ldr	r2, [pc, #20]	@ (80018f4 <SystemInit+0x20>)
 80018e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018f8:	480d      	ldr	r0, [pc, #52]	@ (8001930 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018fa:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018fc:	f7ff ffea 	bl	80018d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480c      	ldr	r0, [pc, #48]	@ (8001934 <LoopForever+0x6>)
  ldr r1, =_edata
 8001902:	490d      	ldr	r1, [pc, #52]	@ (8001938 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001904:	4a0d      	ldr	r2, [pc, #52]	@ (800193c <LoopForever+0xe>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001918:	4c0a      	ldr	r4, [pc, #40]	@ (8001944 <LoopForever+0x16>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001926:	f002 fb1b 	bl	8003f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800192a:	f7ff fd7f 	bl	800142c <main>

0800192e <LoopForever>:

LoopForever:
    b LoopForever
 800192e:	e7fe      	b.n	800192e <LoopForever>
  ldr   r0, =_estack
 8001930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800193c:	08004928 	.word	0x08004928
  ldr r2, =_sbss
 8001940:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001944:	20000280 	.word	0x20000280

08001948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_2_IRQHandler>

0800194a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001950:	2300      	movs	r3, #0
 8001952:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001954:	2003      	movs	r0, #3
 8001956:	f000 f95b 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f80e 	bl	800197c <HAL_InitTick>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	71fb      	strb	r3, [r7, #7]
 800196a:	e001      	b.n	8001970 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800196c:	f7ff fec8 	bl	8001700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001970:	79fb      	ldrb	r3, [r7, #7]

}
 8001972:	4618      	mov	r0, r3
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001984:	2300      	movs	r3, #0
 8001986:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_InitTick+0x68>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d022      	beq.n	80019d6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001990:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <HAL_InitTick+0x6c>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <HAL_InitTick+0x68>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800199c:	fbb1 f3f3 	udiv	r3, r1, r3
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f000 f966 	bl	8001c76 <HAL_SYSTICK_Config>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d10f      	bne.n	80019d0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	d809      	bhi.n	80019ca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b6:	2200      	movs	r2, #0
 80019b8:	6879      	ldr	r1, [r7, #4]
 80019ba:	f04f 30ff 	mov.w	r0, #4294967295
 80019be:	f000 f932 	bl	8001c26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019c2:	4a0a      	ldr	r2, [pc, #40]	@ (80019ec <HAL_InitTick+0x70>)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e007      	b.n	80019da <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	73fb      	strb	r3, [r7, #15]
 80019ce:	e004      	b.n	80019da <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	73fb      	strb	r3, [r7, #15]
 80019d4:	e001      	b.n	80019da <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019da:	7bfb      	ldrb	r3, [r7, #15]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000008 	.word	0x20000008
 80019e8:	20000000 	.word	0x20000000
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f4:	4b05      	ldr	r3, [pc, #20]	@ (8001a0c <HAL_IncTick+0x1c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b05      	ldr	r3, [pc, #20]	@ (8001a10 <HAL_IncTick+0x20>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	4a03      	ldr	r2, [pc, #12]	@ (8001a0c <HAL_IncTick+0x1c>)
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	20000134 	.word	0x20000134
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return uwTick;
 8001a18:	4b03      	ldr	r3, [pc, #12]	@ (8001a28 <HAL_GetTick+0x14>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	20000134 	.word	0x20000134

08001a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a34:	f7ff ffee 	bl	8001a14 <HAL_GetTick>
 8001a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d004      	beq.n	8001a50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <HAL_Delay+0x40>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a50:	bf00      	nop
 8001a52:	f7ff ffdf 	bl	8001a14 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d8f7      	bhi.n	8001a52 <HAL_Delay+0x26>
  {
  }
}
 8001a62:	bf00      	nop
 8001a64:	bf00      	nop
 8001a66:	3710      	adds	r7, #16
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	20000008 	.word	0x20000008

08001a70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a80:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a86:	68ba      	ldr	r2, [r7, #8]
 8001a88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001aa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa2:	4a04      	ldr	r2, [pc, #16]	@ (8001ab4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	60d3      	str	r3, [r2, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001abc:	4b04      	ldr	r3, [pc, #16]	@ (8001ad0 <__NVIC_GetPriorityGrouping+0x18>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	0a1b      	lsrs	r3, r3, #8
 8001ac2:	f003 0307 	and.w	r3, r3, #7
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	db0b      	blt.n	8001afe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	f003 021f 	and.w	r2, r3, #31
 8001aec:	4907      	ldr	r1, [pc, #28]	@ (8001b0c <__NVIC_EnableIRQ+0x38>)
 8001aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af2:	095b      	lsrs	r3, r3, #5
 8001af4:	2001      	movs	r0, #1
 8001af6:	fa00 f202 	lsl.w	r2, r0, r2
 8001afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	@ (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	@ (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff29 	bl	8001a70 <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff40 	bl	8001ab8 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff90 	bl	8001b64 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5f 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff33 	bl	8001ad4 <__NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff ffa4 	bl	8001bcc <SysTick_Config>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
	...

08001c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b087      	sub	sp, #28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c9e:	e15a      	b.n	8001f56 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cac:	4013      	ands	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 814c 	beq.w	8001f50 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d005      	beq.n	8001cd0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d130      	bne.n	8001d32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	693a      	ldr	r2, [r7, #16]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	68da      	ldr	r2, [r3, #12]
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d06:	2201      	movs	r2, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	4013      	ands	r3, r2
 8001d14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	091b      	lsrs	r3, r3, #4
 8001d1c:	f003 0201 	and.w	r2, r3, #1
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d017      	beq.n	8001d6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4013      	ands	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d123      	bne.n	8001dc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	08da      	lsrs	r2, r3, #3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3208      	adds	r2, #8
 8001d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	220f      	movs	r2, #15
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	691a      	ldr	r2, [r3, #16]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	08da      	lsrs	r2, r3, #3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3208      	adds	r2, #8
 8001dbc:	6939      	ldr	r1, [r7, #16]
 8001dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f003 0203 	and.w	r2, r3, #3
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 80a6 	beq.w	8001f50 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e04:	4b5b      	ldr	r3, [pc, #364]	@ (8001f74 <HAL_GPIO_Init+0x2e4>)
 8001e06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e08:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <HAL_GPIO_Init+0x2e4>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e10:	4b58      	ldr	r3, [pc, #352]	@ (8001f74 <HAL_GPIO_Init+0x2e4>)
 8001e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1c:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	220f      	movs	r2, #15
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e46:	d01f      	beq.n	8001e88 <HAL_GPIO_Init+0x1f8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a4c      	ldr	r2, [pc, #304]	@ (8001f7c <HAL_GPIO_Init+0x2ec>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d019      	beq.n	8001e84 <HAL_GPIO_Init+0x1f4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a4b      	ldr	r2, [pc, #300]	@ (8001f80 <HAL_GPIO_Init+0x2f0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_GPIO_Init+0x1f0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a4a      	ldr	r2, [pc, #296]	@ (8001f84 <HAL_GPIO_Init+0x2f4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <HAL_GPIO_Init+0x1ec>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a49      	ldr	r2, [pc, #292]	@ (8001f88 <HAL_GPIO_Init+0x2f8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <HAL_GPIO_Init+0x1e8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a48      	ldr	r2, [pc, #288]	@ (8001f8c <HAL_GPIO_Init+0x2fc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_GPIO_Init+0x1e4>
 8001e70:	2305      	movs	r3, #5
 8001e72:	e00a      	b.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e74:	2306      	movs	r3, #6
 8001e76:	e008      	b.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e78:	2304      	movs	r3, #4
 8001e7a:	e006      	b.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e004      	b.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e002      	b.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e84:	2301      	movs	r3, #1
 8001e86:	e000      	b.n	8001e8a <HAL_GPIO_Init+0x1fa>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	f002 0203 	and.w	r2, r2, #3
 8001e90:	0092      	lsls	r2, r2, #2
 8001e92:	4093      	lsls	r3, r2
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e9a:	4937      	ldr	r1, [pc, #220]	@ (8001f78 <HAL_GPIO_Init+0x2e8>)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	089b      	lsrs	r3, r3, #2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	693a      	ldr	r2, [r7, #16]
 8001ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ea8:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ecc:	4a30      	ldr	r2, [pc, #192]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ed2:	4b2f      	ldr	r3, [pc, #188]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ef6:	4a26      	ldr	r2, [pc, #152]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001efc:	4b24      	ldr	r3, [pc, #144]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f20:	4a1b      	ldr	r2, [pc, #108]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f26:	4b1a      	ldr	r3, [pc, #104]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	4013      	ands	r3, r2
 8001f34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f42:	693a      	ldr	r2, [r7, #16]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f4a:	4a11      	ldr	r2, [pc, #68]	@ (8001f90 <HAL_GPIO_Init+0x300>)
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	f47f ae9d 	bne.w	8001ca0 <HAL_GPIO_Init+0x10>
  }
}
 8001f66:	bf00      	nop
 8001f68:	bf00      	nop
 8001f6a:	371c      	adds	r7, #28
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010000 	.word	0x40010000
 8001f7c:	48000400 	.word	0x48000400
 8001f80:	48000800 	.word	0x48000800
 8001f84:	48000c00 	.word	0x48000c00
 8001f88:	48001000 	.word	0x48001000
 8001f8c:	48001400 	.word	0x48001400
 8001f90:	40010400 	.word	0x40010400

08001f94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	887b      	ldrh	r3, [r7, #2]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d002      	beq.n	8001fb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e001      	b.n	8001fb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fd4:	787b      	ldrb	r3, [r7, #1]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001fda:	887a      	ldrh	r2, [r7, #2]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001fe0:	e002      	b.n	8001fe8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001fe2:	887a      	ldrh	r2, [r7, #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002000:	695a      	ldr	r2, [r3, #20]
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800200a:	4a05      	ldr	r2, [pc, #20]	@ (8002020 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800200c:	88fb      	ldrh	r3, [r7, #6]
 800200e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002010:	88fb      	ldrh	r3, [r7, #6]
 8002012:	4618      	mov	r0, r3
 8002014:	f000 f806 	bl	8002024 <HAL_GPIO_EXTI_Callback>
  }
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40010400 	.word	0x40010400

08002024 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	4603      	mov	r3, r0
 800202c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
	...

0800203c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d141      	bne.n	80020ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800204a:	4b4b      	ldr	r3, [pc, #300]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002056:	d131      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002058:	4b47      	ldr	r3, [pc, #284]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800205e:	4a46      	ldr	r2, [pc, #280]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002064:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002068:	4b43      	ldr	r3, [pc, #268]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002070:	4a41      	ldr	r2, [pc, #260]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002072:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002076:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002078:	4b40      	ldr	r3, [pc, #256]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2232      	movs	r2, #50	@ 0x32
 800207e:	fb02 f303 	mul.w	r3, r2, r3
 8002082:	4a3f      	ldr	r2, [pc, #252]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002084:	fba2 2303 	umull	r2, r3, r2, r3
 8002088:	0c9b      	lsrs	r3, r3, #18
 800208a:	3301      	adds	r3, #1
 800208c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800208e:	e002      	b.n	8002096 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	3b01      	subs	r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002096:	4b38      	ldr	r3, [pc, #224]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020a2:	d102      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d1f2      	bne.n	8002090 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020aa:	4b33      	ldr	r3, [pc, #204]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020b6:	d158      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e057      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80020c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80020cc:	e04d      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80020d4:	d141      	bne.n	800215a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020d6:	4b28      	ldr	r3, [pc, #160]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020e2:	d131      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e4:	4b24      	ldr	r3, [pc, #144]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80020ea:	4a23      	ldr	r2, [pc, #140]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020f4:	4b20      	ldr	r3, [pc, #128]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80020fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002102:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002104:	4b1d      	ldr	r3, [pc, #116]	@ (800217c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2232      	movs	r2, #50	@ 0x32
 800210a:	fb02 f303 	mul.w	r3, r2, r3
 800210e:	4a1c      	ldr	r2, [pc, #112]	@ (8002180 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9b      	lsrs	r3, r3, #18
 8002116:	3301      	adds	r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800211a:	e002      	b.n	8002122 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3b01      	subs	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002122:	4b15      	ldr	r3, [pc, #84]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800212e:	d102      	bne.n	8002136 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f2      	bne.n	800211c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800213e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002142:	d112      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e011      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002148:	4b0b      	ldr	r3, [pc, #44]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800214a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002154:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002158:	e007      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800215a:	4b07      	ldr	r3, [pc, #28]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002162:	4a05      	ldr	r2, [pc, #20]	@ (8002178 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002168:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	40007000 	.word	0x40007000
 800217c:	20000000 	.word	0x20000000
 8002180:	431bde83 	.word	0x431bde83

08002184 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002188:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800218e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002192:	6093      	str	r3, [r2, #8]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40007000 	.word	0x40007000

080021a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e2fe      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d075      	beq.n	80022ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c2:	4b97      	ldr	r3, [pc, #604]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021cc:	4b94      	ldr	r3, [pc, #592]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	2b0c      	cmp	r3, #12
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_OscConfig+0x3e>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d002      	beq.n	80021e8 <HAL_RCC_OscConfig+0x44>
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b08      	cmp	r3, #8
 80021e6:	d10b      	bne.n	8002200 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021e8:	4b8d      	ldr	r3, [pc, #564]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d05b      	beq.n	80022ac <HAL_RCC_OscConfig+0x108>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d157      	bne.n	80022ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e2d9      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002208:	d106      	bne.n	8002218 <HAL_RCC_OscConfig+0x74>
 800220a:	4b85      	ldr	r3, [pc, #532]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a84      	ldr	r2, [pc, #528]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0x98>
 8002222:	4b7f      	ldr	r3, [pc, #508]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a7e      	ldr	r2, [pc, #504]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b7c      	ldr	r3, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a7b      	ldr	r2, [pc, #492]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xb0>
 800223c:	4b78      	ldr	r3, [pc, #480]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a77      	ldr	r2, [pc, #476]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b75      	ldr	r3, [pc, #468]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a74      	ldr	r2, [pc, #464]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff fbda 	bl	8001a14 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff fbd6 	bl	8001a14 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e29e      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	4b6a      	ldr	r3, [pc, #424]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xc0>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff fbc6 	bl	8001a14 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff fbc2 	bl	8001a14 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e28a      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	4b60      	ldr	r3, [pc, #384]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0xe8>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d075      	beq.n	80023a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ba:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022c4:	4b56      	ldr	r3, [pc, #344]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	2b0c      	cmp	r3, #12
 80022d2:	d102      	bne.n	80022da <HAL_RCC_OscConfig+0x136>
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_OscConfig+0x13c>
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d11f      	bne.n	8002320 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d005      	beq.n	80022f8 <HAL_RCC_OscConfig+0x154>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e25d      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f8:	4b49      	ldr	r3, [pc, #292]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	061b      	lsls	r3, r3, #24
 8002306:	4946      	ldr	r1, [pc, #280]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800230c:	4b45      	ldr	r3, [pc, #276]	@ (8002424 <HAL_RCC_OscConfig+0x280>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fb33 	bl	800197c <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d043      	beq.n	80023a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e249      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d023      	beq.n	8002370 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002328:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a3c      	ldr	r2, [pc, #240]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800232e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7ff fb6e 	bl	8001a14 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233c:	f7ff fb6a 	bl	8001a14 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e232      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234e:	4b34      	ldr	r3, [pc, #208]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002356:	2b00      	cmp	r3, #0
 8002358:	d0f0      	beq.n	800233c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800235a:	4b31      	ldr	r3, [pc, #196]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	061b      	lsls	r3, r3, #24
 8002368:	492d      	ldr	r1, [pc, #180]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 800236a:	4313      	orrs	r3, r2
 800236c:	604b      	str	r3, [r1, #4]
 800236e:	e01a      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002370:	4b2b      	ldr	r3, [pc, #172]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a2a      	ldr	r2, [pc, #168]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002376:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800237a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7ff fb4a 	bl	8001a14 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002384:	f7ff fb46 	bl	8001a14 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e20e      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x1e0>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d041      	beq.n	8002436 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d01c      	beq.n	80023f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ba:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023c0:	4a17      	ldr	r2, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7ff fb23 	bl	8001a14 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d2:	f7ff fb1f 	bl	8001a14 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e1e7      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ef      	beq.n	80023d2 <HAL_RCC_OscConfig+0x22e>
 80023f2:	e020      	b.n	8002436 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f4:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023fa:	4a09      	ldr	r2, [pc, #36]	@ (8002420 <HAL_RCC_OscConfig+0x27c>)
 80023fc:	f023 0301 	bic.w	r3, r3, #1
 8002400:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff fb06 	bl	8001a14 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800240a:	e00d      	b.n	8002428 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fb02 	bl	8001a14 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d906      	bls.n	8002428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1ca      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002428:	4b8c      	ldr	r3, [pc, #560]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800242a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1ea      	bne.n	800240c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0304 	and.w	r3, r3, #4
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80a6 	beq.w	8002590 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002444:	2300      	movs	r3, #0
 8002446:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002448:	4b84      	ldr	r3, [pc, #528]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800244a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800244c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_RCC_OscConfig+0x2b4>
 8002454:	2301      	movs	r3, #1
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x2b6>
 8002458:	2300      	movs	r3, #0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00d      	beq.n	800247a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b7f      	ldr	r3, [pc, #508]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	4a7e      	ldr	r2, [pc, #504]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	6593      	str	r3, [r2, #88]	@ 0x58
 800246a:	4b7c      	ldr	r3, [pc, #496]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247a:	4b79      	ldr	r3, [pc, #484]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002482:	2b00      	cmp	r3, #0
 8002484:	d118      	bne.n	80024b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002486:	4b76      	ldr	r3, [pc, #472]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 800248c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002492:	f7ff fabf 	bl	8001a14 <HAL_GetTick>
 8002496:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002498:	e008      	b.n	80024ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249a:	f7ff fabb 	bl	8001a14 <HAL_GetTick>
 800249e:	4602      	mov	r2, r0
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	1ad3      	subs	r3, r2, r3
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e183      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002660 <HAL_RCC_OscConfig+0x4bc>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d0f0      	beq.n	800249a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_RCC_OscConfig+0x32e>
 80024c0:	4b66      	ldr	r3, [pc, #408]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024c6:	4a65      	ldr	r2, [pc, #404]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024d0:	e024      	b.n	800251c <HAL_RCC_OscConfig+0x378>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2b05      	cmp	r3, #5
 80024d8:	d110      	bne.n	80024fc <HAL_RCC_OscConfig+0x358>
 80024da:	4b60      	ldr	r3, [pc, #384]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024e0:	4a5e      	ldr	r2, [pc, #376]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024e2:	f043 0304 	orr.w	r3, r3, #4
 80024e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024ea:	4b5c      	ldr	r3, [pc, #368]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f0:	4a5a      	ldr	r2, [pc, #360]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80024fa:	e00f      	b.n	800251c <HAL_RCC_OscConfig+0x378>
 80024fc:	4b57      	ldr	r3, [pc, #348]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	4a56      	ldr	r2, [pc, #344]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002504:	f023 0301 	bic.w	r3, r3, #1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800250c:	4b53      	ldr	r3, [pc, #332]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002512:	4a52      	ldr	r2, [pc, #328]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d016      	beq.n	8002552 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002524:	f7ff fa76 	bl	8001a14 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800252a:	e00a      	b.n	8002542 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252c:	f7ff fa72 	bl	8001a14 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e138      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002542:	4b46      	ldr	r3, [pc, #280]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0ed      	beq.n	800252c <HAL_RCC_OscConfig+0x388>
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002552:	f7ff fa5f 	bl	8001a14 <HAL_GetTick>
 8002556:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002558:	e00a      	b.n	8002570 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255a:	f7ff fa5b 	bl	8001a14 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002568:	4293      	cmp	r3, r2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e121      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002570:	4b3a      	ldr	r3, [pc, #232]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1ed      	bne.n	800255a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800257e:	7ffb      	ldrb	r3, [r7, #31]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d105      	bne.n	8002590 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002584:	4b35      	ldr	r3, [pc, #212]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	4a34      	ldr	r2, [pc, #208]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800258a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0320 	and.w	r3, r3, #32
 8002598:	2b00      	cmp	r3, #0
 800259a:	d03c      	beq.n	8002616 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d01c      	beq.n	80025de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025a4:	4b2d      	ldr	r3, [pc, #180]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025aa:	4a2c      	ldr	r2, [pc, #176]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b4:	f7ff fa2e 	bl	8001a14 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025bc:	f7ff fa2a 	bl	8001a14 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e0f2      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ce:	4b23      	ldr	r3, [pc, #140]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d0ef      	beq.n	80025bc <HAL_RCC_OscConfig+0x418>
 80025dc:	e01b      	b.n	8002616 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025de:	4b1f      	ldr	r3, [pc, #124]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e4:	4a1d      	ldr	r2, [pc, #116]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff fa11 	bl	8001a14 <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80025f4:	e008      	b.n	8002608 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f6:	f7ff fa0d 	bl	8001a14 <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d901      	bls.n	8002608 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e0d5      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	4b14      	ldr	r3, [pc, #80]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800260a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1ef      	bne.n	80025f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80c9 	beq.w	80027b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002620:	4b0e      	ldr	r3, [pc, #56]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b0c      	cmp	r3, #12
 800262a:	f000 8083 	beq.w	8002734 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d15e      	bne.n	80026f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002636:	4b09      	ldr	r3, [pc, #36]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a08      	ldr	r2, [pc, #32]	@ (800265c <HAL_RCC_OscConfig+0x4b8>)
 800263c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002642:	f7ff f9e7 	bl	8001a14 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002648:	e00c      	b.n	8002664 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264a:	f7ff f9e3 	bl	8001a14 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	2b02      	cmp	r3, #2
 8002656:	d905      	bls.n	8002664 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002658:	2303      	movs	r3, #3
 800265a:	e0ab      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
 800265c:	40021000 	.word	0x40021000
 8002660:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002664:	4b55      	ldr	r3, [pc, #340]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1ec      	bne.n	800264a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002670:	4b52      	ldr	r3, [pc, #328]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4b52      	ldr	r3, [pc, #328]	@ (80027c0 <HAL_RCC_OscConfig+0x61c>)
 8002676:	4013      	ands	r3, r2
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	6a11      	ldr	r1, [r2, #32]
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002680:	3a01      	subs	r2, #1
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	4311      	orrs	r1, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800268a:	0212      	lsls	r2, r2, #8
 800268c:	4311      	orrs	r1, r2
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002692:	0852      	lsrs	r2, r2, #1
 8002694:	3a01      	subs	r2, #1
 8002696:	0552      	lsls	r2, r2, #21
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800269e:	0852      	lsrs	r2, r2, #1
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0652      	lsls	r2, r2, #25
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80026aa:	06d2      	lsls	r2, r2, #27
 80026ac:	430a      	orrs	r2, r1
 80026ae:	4943      	ldr	r1, [pc, #268]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a40      	ldr	r2, [pc, #256]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026c0:	4b3e      	ldr	r3, [pc, #248]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a3d      	ldr	r2, [pc, #244]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7ff f9a2 	bl	8001a14 <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d4:	f7ff f99e 	bl	8001a14 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e066      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e6:	4b35      	ldr	r3, [pc, #212]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x530>
 80026f2:	e05e      	b.n	80027b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026f4:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a30      	ldr	r2, [pc, #192]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 80026fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002700:	f7ff f988 	bl	8001a14 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002708:	f7ff f984 	bl	8001a14 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b02      	cmp	r3, #2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e04c      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800271a:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002726:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002728:	68da      	ldr	r2, [r3, #12]
 800272a:	4924      	ldr	r1, [pc, #144]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 800272c:	4b25      	ldr	r3, [pc, #148]	@ (80027c4 <HAL_RCC_OscConfig+0x620>)
 800272e:	4013      	ands	r3, r2
 8002730:	60cb      	str	r3, [r1, #12]
 8002732:	e03e      	b.n	80027b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69db      	ldr	r3, [r3, #28]
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e039      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002740:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <HAL_RCC_OscConfig+0x618>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	429a      	cmp	r2, r3
 8002752:	d12c      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	3b01      	subs	r3, #1
 8002760:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d123      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d11b      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002780:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d113      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002790:	085b      	lsrs	r3, r3, #1
 8002792:	3b01      	subs	r3, #1
 8002794:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d109      	bne.n	80027ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	3b01      	subs	r3, #1
 80027a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d001      	beq.n	80027b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80027b2:	2300      	movs	r3, #0
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40021000 	.word	0x40021000
 80027c0:	019f800c 	.word	0x019f800c
 80027c4:	feeefffc 	.word	0xfeeefffc

080027c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e11e      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027e0:	4b91      	ldr	r3, [pc, #580]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 030f 	and.w	r3, r3, #15
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d910      	bls.n	8002810 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ee:	4b8e      	ldr	r3, [pc, #568]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 020f 	bic.w	r2, r3, #15
 80027f6:	498c      	ldr	r1, [pc, #560]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	4313      	orrs	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b8a      	ldr	r3, [pc, #552]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e106      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0301 	and.w	r3, r3, #1
 8002818:	2b00      	cmp	r3, #0
 800281a:	d073      	beq.n	8002904 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b03      	cmp	r3, #3
 8002822:	d129      	bne.n	8002878 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002824:	4b81      	ldr	r3, [pc, #516]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0f4      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002834:	f000 f99e 	bl	8002b74 <RCC_GetSysClockFreqFromPLLSource>
 8002838:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	4a7c      	ldr	r2, [pc, #496]	@ (8002a30 <HAL_RCC_ClockConfig+0x268>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d93f      	bls.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002842:	4b7a      	ldr	r3, [pc, #488]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002856:	2b00      	cmp	r3, #0
 8002858:	d033      	beq.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800285e:	2b00      	cmp	r3, #0
 8002860:	d12f      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002862:	4b72      	ldr	r3, [pc, #456]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800286a:	4a70      	ldr	r2, [pc, #448]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 800286c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002870:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002872:	2380      	movs	r3, #128	@ 0x80
 8002874:	617b      	str	r3, [r7, #20]
 8002876:	e024      	b.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b02      	cmp	r3, #2
 800287e:	d107      	bne.n	8002890 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002880:	4b6a      	ldr	r3, [pc, #424]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e0c6      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002890:	4b66      	ldr	r3, [pc, #408]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e0be      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028a0:	f000 f8ce 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4a61      	ldr	r2, [pc, #388]	@ (8002a30 <HAL_RCC_ClockConfig+0x268>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d909      	bls.n	80028c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ae:	4b5f      	ldr	r3, [pc, #380]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028b6:	4a5d      	ldr	r2, [pc, #372]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80028bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028be:	2380      	movs	r3, #128	@ 0x80
 80028c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028c2:	4b5a      	ldr	r3, [pc, #360]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f023 0203 	bic.w	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	4957      	ldr	r1, [pc, #348]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028d4:	f7ff f89e 	bl	8001a14 <HAL_GetTick>
 80028d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028da:	e00a      	b.n	80028f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028dc:	f7ff f89a 	bl	8001a14 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e095      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f2:	4b4e      	ldr	r3, [pc, #312]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 020c 	and.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	429a      	cmp	r2, r3
 8002902:	d1eb      	bne.n	80028dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d023      	beq.n	8002958 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	2b00      	cmp	r3, #0
 800291a:	d005      	beq.n	8002928 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800291c:	4b43      	ldr	r3, [pc, #268]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	4a42      	ldr	r2, [pc, #264]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002926:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002934:	4b3d      	ldr	r3, [pc, #244]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800293c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 800293e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002942:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002944:	4b39      	ldr	r3, [pc, #228]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	4936      	ldr	r1, [pc, #216]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
 8002956:	e008      	b.n	800296a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2b80      	cmp	r3, #128	@ 0x80
 800295c:	d105      	bne.n	800296a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800295e:	4b33      	ldr	r3, [pc, #204]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	4a32      	ldr	r2, [pc, #200]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 8002964:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002968:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800296a:	4b2f      	ldr	r3, [pc, #188]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d21d      	bcs.n	80029b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002978:	4b2b      	ldr	r3, [pc, #172]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f023 020f 	bic.w	r2, r3, #15
 8002980:	4929      	ldr	r1, [pc, #164]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002988:	f7ff f844 	bl	8001a14 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7ff f840 	bl	8001a14 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e03b      	b.n	8002a1e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <HAL_RCC_ClockConfig+0x260>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1ed      	bne.n	8002990 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0304 	and.w	r3, r3, #4
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c0:	4b1a      	ldr	r3, [pc, #104]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4917      	ldr	r1, [pc, #92]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0308 	and.w	r3, r3, #8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d009      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029de:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	490f      	ldr	r1, [pc, #60]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f2:	f000 f825 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029f6:	4602      	mov	r2, r0
 80029f8:	4b0c      	ldr	r3, [pc, #48]	@ (8002a2c <HAL_RCC_ClockConfig+0x264>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	091b      	lsrs	r3, r3, #4
 80029fe:	f003 030f 	and.w	r3, r3, #15
 8002a02:	490c      	ldr	r1, [pc, #48]	@ (8002a34 <HAL_RCC_ClockConfig+0x26c>)
 8002a04:	5ccb      	ldrb	r3, [r1, r3]
 8002a06:	f003 031f 	and.w	r3, r3, #31
 8002a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a38 <HAL_RCC_ClockConfig+0x270>)
 8002a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a12:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <HAL_RCC_ClockConfig+0x274>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fe ffb0 	bl	800197c <HAL_InitTick>
 8002a1c:	4603      	mov	r3, r0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40022000 	.word	0x40022000
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	04c4b400 	.word	0x04c4b400
 8002a34:	080048a4 	.word	0x080048a4
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	20000004 	.word	0x20000004

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a46:	4b2c      	ldr	r3, [pc, #176]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a52:	4b2a      	ldr	r3, [pc, #168]	@ (8002afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a54:	613b      	str	r3, [r7, #16]
 8002a56:	e047      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a58:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d102      	bne.n	8002a6a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a64:	4b26      	ldr	r3, [pc, #152]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a66:	613b      	str	r3, [r7, #16]
 8002a68:	e03e      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a6a:	4b23      	ldr	r3, [pc, #140]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d136      	bne.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a76:	4b20      	ldr	r3, [pc, #128]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	091b      	lsrs	r3, r3, #4
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d10c      	bne.n	8002aae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a94:	4a1a      	ldr	r2, [pc, #104]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	4a16      	ldr	r2, [pc, #88]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a9e:	68d2      	ldr	r2, [r2, #12]
 8002aa0:	0a12      	lsrs	r2, r2, #8
 8002aa2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002aa6:	fb02 f303 	mul.w	r3, r2, r3
 8002aaa:	617b      	str	r3, [r7, #20]
      break;
 8002aac:	e00c      	b.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aae:	4a13      	ldr	r2, [pc, #76]	@ (8002afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab6:	4a10      	ldr	r2, [pc, #64]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	0a12      	lsrs	r2, r2, #8
 8002abc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ac0:	fb02 f303 	mul.w	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
      break;
 8002ac6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0e5b      	lsrs	r3, r3, #25
 8002ace:	f003 0303 	and.w	r3, r3, #3
 8002ad2:	3301      	adds	r3, #1
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002ad8:	697a      	ldr	r2, [r7, #20]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae0:	613b      	str	r3, [r7, #16]
 8002ae2:	e001      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002ae8:	693b      	ldr	r3, [r7, #16]
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	40021000 	.word	0x40021000
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	016e3600 	.word	0x016e3600

08002b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b03      	ldr	r3, [pc, #12]	@ (8002b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	20000000 	.word	0x20000000

08002b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b20:	f7ff fff0 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b24:	4602      	mov	r2, r0
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	0a1b      	lsrs	r3, r3, #8
 8002b2c:	f003 0307 	and.w	r3, r3, #7
 8002b30:	4904      	ldr	r1, [pc, #16]	@ (8002b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b32:	5ccb      	ldrb	r3, [r1, r3]
 8002b34:	f003 031f 	and.w	r3, r3, #31
 8002b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	40021000 	.word	0x40021000
 8002b44:	080048b4 	.word	0x080048b4

08002b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b4c:	f7ff ffda 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b50:	4602      	mov	r2, r0
 8002b52:	4b06      	ldr	r3, [pc, #24]	@ (8002b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	0adb      	lsrs	r3, r3, #11
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	4904      	ldr	r1, [pc, #16]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b5e:	5ccb      	ldrb	r3, [r1, r3]
 8002b60:	f003 031f 	and.w	r3, r3, #31
 8002b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	080048b4 	.word	0x080048b4

08002b74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b087      	sub	sp, #28
 8002b78:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b84:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	091b      	lsrs	r3, r3, #4
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	3301      	adds	r3, #1
 8002b90:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	2b03      	cmp	r3, #3
 8002b96:	d10c      	bne.n	8002bb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b98:	4a17      	ldr	r2, [pc, #92]	@ (8002bf8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba0:	4a14      	ldr	r2, [pc, #80]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba2:	68d2      	ldr	r2, [r2, #12]
 8002ba4:	0a12      	lsrs	r2, r2, #8
 8002ba6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002baa:	fb02 f303 	mul.w	r3, r2, r3
 8002bae:	617b      	str	r3, [r7, #20]
    break;
 8002bb0:	e00c      	b.n	8002bcc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb2:	4a12      	ldr	r2, [pc, #72]	@ (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4a0e      	ldr	r2, [pc, #56]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	0a12      	lsrs	r2, r2, #8
 8002bc0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	617b      	str	r3, [r7, #20]
    break;
 8002bca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bcc:	4b09      	ldr	r3, [pc, #36]	@ (8002bf4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0e5b      	lsrs	r3, r3, #25
 8002bd2:	f003 0303 	and.w	r3, r3, #3
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002be6:	687b      	ldr	r3, [r7, #4]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	016e3600 	.word	0x016e3600
 8002bfc:	00f42400 	.word	0x00f42400

08002c00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b086      	sub	sp, #24
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c08:	2300      	movs	r3, #0
 8002c0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 8098 	beq.w	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c22:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10d      	bne.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c2e:	4b40      	ldr	r3, [pc, #256]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	4a3f      	ldr	r2, [pc, #252]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c42:	60bb      	str	r3, [r7, #8]
 8002c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c46:	2301      	movs	r3, #1
 8002c48:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a39      	ldr	r2, [pc, #228]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c56:	f7fe fedd 	bl	8001a14 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c5c:	e009      	b.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c5e:	f7fe fed9 	bl	8001a14 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d902      	bls.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	74fb      	strb	r3, [r7, #19]
        break;
 8002c70:	e005      	b.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c72:	4b30      	ldr	r3, [pc, #192]	@ (8002d34 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d0ef      	beq.n	8002c5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c7e:	7cfb      	ldrb	r3, [r7, #19]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d159      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c84:	4b2a      	ldr	r3, [pc, #168]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c8e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01e      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d019      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ca0:	4b23      	ldr	r3, [pc, #140]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002caa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002cac:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ccc:	4a18      	ldr	r2, [pc, #96]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d016      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7fe fe99 	bl	8001a14 <HAL_GetTick>
 8002ce2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ce4:	e00b      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ce6:	f7fe fe95 	bl	8001a14 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d902      	bls.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	74fb      	strb	r3, [r7, #19]
            break;
 8002cfc:	e006      	b.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ec      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d10b      	bne.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d12:	4b07      	ldr	r3, [pc, #28]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d20:	4903      	ldr	r1, [pc, #12]	@ (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002d28:	e008      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d2a:	7cfb      	ldrb	r3, [r7, #19]
 8002d2c:	74bb      	strb	r3, [r7, #18]
 8002d2e:	e005      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7cfb      	ldrb	r3, [r7, #19]
 8002d3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d3c:	7c7b      	ldrb	r3, [r7, #17]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d105      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d42:	4ba7      	ldr	r3, [pc, #668]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	4aa6      	ldr	r2, [pc, #664]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d00a      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d5a:	4ba1      	ldr	r3, [pc, #644]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d60:	f023 0203 	bic.w	r2, r3, #3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	499d      	ldr	r1, [pc, #628]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00a      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d7c:	4b98      	ldr	r3, [pc, #608]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	f023 020c 	bic.w	r2, r3, #12
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4995      	ldr	r1, [pc, #596]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d00a      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d9e:	4b90      	ldr	r3, [pc, #576]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	498c      	ldr	r1, [pc, #560]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00a      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dc0:	4b87      	ldr	r3, [pc, #540]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	4984      	ldr	r1, [pc, #528]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002de2:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	497b      	ldr	r1, [pc, #492]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0320 	and.w	r3, r3, #32
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00a      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e04:	4b76      	ldr	r3, [pc, #472]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	4973      	ldr	r1, [pc, #460]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e26:	4b6e      	ldr	r3, [pc, #440]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e2c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	496a      	ldr	r1, [pc, #424]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e48:	4b65      	ldr	r3, [pc, #404]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e4e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4962      	ldr	r1, [pc, #392]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	4959      	ldr	r1, [pc, #356]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e8c:	4b54      	ldr	r3, [pc, #336]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e92:	f023 0203 	bic.w	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	4951      	ldr	r1, [pc, #324]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002eae:	4b4c      	ldr	r3, [pc, #304]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	4948      	ldr	r1, [pc, #288]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ed0:	4b43      	ldr	r3, [pc, #268]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4940      	ldr	r1, [pc, #256]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002eee:	d105      	bne.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ef0:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002efa:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d015      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f08:	4b35      	ldr	r3, [pc, #212]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f0e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f16:	4932      	ldr	r1, [pc, #200]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f22:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f26:	d105      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f28:	4b2d      	ldr	r3, [pc, #180]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f32:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d015      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f40:	4b27      	ldr	r3, [pc, #156]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f46:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f4e:	4924      	ldr	r1, [pc, #144]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f5a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f5e:	d105      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f60:	4b1f      	ldr	r3, [pc, #124]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f66:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d015      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f78:	4b19      	ldr	r3, [pc, #100]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f86:	4916      	ldr	r1, [pc, #88]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f96:	d105      	bne.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f98:	4b11      	ldr	r3, [pc, #68]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	4a10      	ldr	r2, [pc, #64]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d019      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fb6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fbe:	4908      	ldr	r1, [pc, #32]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002fce:	d109      	bne.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd0:	4b03      	ldr	r3, [pc, #12]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a02      	ldr	r2, [pc, #8]	@ (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002fd6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fda:	60d3      	str	r3, [r2, #12]
 8002fdc:	e002      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002fde:	bf00      	nop
 8002fe0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ff0:	4b29      	ldr	r3, [pc, #164]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ff6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ffe:	4926      	ldr	r1, [pc, #152]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800300e:	d105      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003010:	4b21      	ldr	r3, [pc, #132]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	4a20      	ldr	r2, [pc, #128]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003016:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800301a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d015      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003028:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800302a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800302e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003036:	4918      	ldr	r1, [pc, #96]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003038:	4313      	orrs	r3, r2
 800303a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003046:	d105      	bne.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003048:	4b13      	ldr	r3, [pc, #76]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	4a12      	ldr	r2, [pc, #72]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800304e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003052:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d015      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003060:	4b0d      	ldr	r3, [pc, #52]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003062:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003066:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306e:	490a      	ldr	r1, [pc, #40]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800307a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800307e:	d105      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003080:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4a04      	ldr	r2, [pc, #16]	@ (8003098 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800308a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800308c:	7cbb      	ldrb	r3, [r7, #18]
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40021000 	.word	0x40021000

0800309c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e042      	b.n	8003134 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d106      	bne.n	80030c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7fe fb41 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2224      	movs	r2, #36	@ 0x24
 80030ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0201 	bic.w	r2, r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fbb2 	bl	8003850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 f8b3 	bl	8003258 <UART_SetConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d101      	bne.n	80030fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e01b      	b.n	8003134 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800310a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	689a      	ldr	r2, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800311a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 fc31 	bl	8003994 <UART_CheckIdleState>
 8003132:	4603      	mov	r3, r0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	@ 0x28
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003152:	2b20      	cmp	r3, #32
 8003154:	d17b      	bne.n	800324e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d002      	beq.n	8003162 <HAL_UART_Transmit+0x26>
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e074      	b.n	8003250 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2221      	movs	r2, #33	@ 0x21
 8003172:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003176:	f7fe fc4d 	bl	8001a14 <HAL_GetTick>
 800317a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	88fa      	ldrh	r2, [r7, #6]
 8003180:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003194:	d108      	bne.n	80031a8 <HAL_UART_Transmit+0x6c>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d104      	bne.n	80031a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800319e:	2300      	movs	r3, #0
 80031a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	61bb      	str	r3, [r7, #24]
 80031a6:	e003      	b.n	80031b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80031b0:	e030      	b.n	8003214 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	2200      	movs	r2, #0
 80031ba:	2180      	movs	r1, #128	@ 0x80
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fc93 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d005      	beq.n	80031d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e03d      	b.n	8003250 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10b      	bne.n	80031f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	461a      	mov	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	3302      	adds	r3, #2
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e007      	b.n	8003202 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	781a      	ldrb	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	3301      	adds	r3, #1
 8003200:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800321a:	b29b      	uxth	r3, r3
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1c8      	bne.n	80031b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2200      	movs	r2, #0
 8003228:	2140      	movs	r1, #64	@ 0x40
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 fc5c 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2220      	movs	r2, #32
 800323a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e006      	b.n	8003250 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2220      	movs	r2, #32
 8003246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3720      	adds	r7, #32
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800325c:	b08c      	sub	sp, #48	@ 0x30
 800325e:	af00      	add	r7, sp, #0
 8003260:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	431a      	orrs	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	431a      	orrs	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	4313      	orrs	r3, r2
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	4baa      	ldr	r3, [pc, #680]	@ (8003530 <UART_SetConfig+0x2d8>)
 8003288:	4013      	ands	r3, r2
 800328a:	697a      	ldr	r2, [r7, #20]
 800328c:	6812      	ldr	r2, [r2, #0]
 800328e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003290:	430b      	orrs	r3, r1
 8003292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a9f      	ldr	r2, [pc, #636]	@ (8003534 <UART_SetConfig+0x2dc>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d004      	beq.n	80032c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	6a1b      	ldr	r3, [r3, #32]
 80032be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032c0:	4313      	orrs	r3, r2
 80032c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80032ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032d8:	430b      	orrs	r3, r1
 80032da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	f023 010f 	bic.w	r1, r3, #15
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a90      	ldr	r2, [pc, #576]	@ (8003538 <UART_SetConfig+0x2e0>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d125      	bne.n	8003348 <UART_SetConfig+0xf0>
 80032fc:	4b8f      	ldr	r3, [pc, #572]	@ (800353c <UART_SetConfig+0x2e4>)
 80032fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b03      	cmp	r3, #3
 8003308:	d81a      	bhi.n	8003340 <UART_SetConfig+0xe8>
 800330a:	a201      	add	r2, pc, #4	@ (adr r2, 8003310 <UART_SetConfig+0xb8>)
 800330c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003310:	08003321 	.word	0x08003321
 8003314:	08003331 	.word	0x08003331
 8003318:	08003329 	.word	0x08003329
 800331c:	08003339 	.word	0x08003339
 8003320:	2301      	movs	r3, #1
 8003322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003326:	e116      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003328:	2302      	movs	r3, #2
 800332a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800332e:	e112      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003330:	2304      	movs	r3, #4
 8003332:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003336:	e10e      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003338:	2308      	movs	r3, #8
 800333a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800333e:	e10a      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003340:	2310      	movs	r3, #16
 8003342:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003346:	e106      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a7c      	ldr	r2, [pc, #496]	@ (8003540 <UART_SetConfig+0x2e8>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d138      	bne.n	80033c4 <UART_SetConfig+0x16c>
 8003352:	4b7a      	ldr	r3, [pc, #488]	@ (800353c <UART_SetConfig+0x2e4>)
 8003354:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003358:	f003 030c 	and.w	r3, r3, #12
 800335c:	2b0c      	cmp	r3, #12
 800335e:	d82d      	bhi.n	80033bc <UART_SetConfig+0x164>
 8003360:	a201      	add	r2, pc, #4	@ (adr r2, 8003368 <UART_SetConfig+0x110>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	0800339d 	.word	0x0800339d
 800336c:	080033bd 	.word	0x080033bd
 8003370:	080033bd 	.word	0x080033bd
 8003374:	080033bd 	.word	0x080033bd
 8003378:	080033ad 	.word	0x080033ad
 800337c:	080033bd 	.word	0x080033bd
 8003380:	080033bd 	.word	0x080033bd
 8003384:	080033bd 	.word	0x080033bd
 8003388:	080033a5 	.word	0x080033a5
 800338c:	080033bd 	.word	0x080033bd
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033bd 	.word	0x080033bd
 8003398:	080033b5 	.word	0x080033b5
 800339c:	2300      	movs	r3, #0
 800339e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033a2:	e0d8      	b.n	8003556 <UART_SetConfig+0x2fe>
 80033a4:	2302      	movs	r3, #2
 80033a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033aa:	e0d4      	b.n	8003556 <UART_SetConfig+0x2fe>
 80033ac:	2304      	movs	r3, #4
 80033ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033b2:	e0d0      	b.n	8003556 <UART_SetConfig+0x2fe>
 80033b4:	2308      	movs	r3, #8
 80033b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ba:	e0cc      	b.n	8003556 <UART_SetConfig+0x2fe>
 80033bc:	2310      	movs	r3, #16
 80033be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033c2:	e0c8      	b.n	8003556 <UART_SetConfig+0x2fe>
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003544 <UART_SetConfig+0x2ec>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d125      	bne.n	800341a <UART_SetConfig+0x1c2>
 80033ce:	4b5b      	ldr	r3, [pc, #364]	@ (800353c <UART_SetConfig+0x2e4>)
 80033d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80033d8:	2b30      	cmp	r3, #48	@ 0x30
 80033da:	d016      	beq.n	800340a <UART_SetConfig+0x1b2>
 80033dc:	2b30      	cmp	r3, #48	@ 0x30
 80033de:	d818      	bhi.n	8003412 <UART_SetConfig+0x1ba>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d00a      	beq.n	80033fa <UART_SetConfig+0x1a2>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d814      	bhi.n	8003412 <UART_SetConfig+0x1ba>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <UART_SetConfig+0x19a>
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d008      	beq.n	8003402 <UART_SetConfig+0x1aa>
 80033f0:	e00f      	b.n	8003412 <UART_SetConfig+0x1ba>
 80033f2:	2300      	movs	r3, #0
 80033f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033f8:	e0ad      	b.n	8003556 <UART_SetConfig+0x2fe>
 80033fa:	2302      	movs	r3, #2
 80033fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003400:	e0a9      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003402:	2304      	movs	r3, #4
 8003404:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003408:	e0a5      	b.n	8003556 <UART_SetConfig+0x2fe>
 800340a:	2308      	movs	r3, #8
 800340c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003410:	e0a1      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003412:	2310      	movs	r3, #16
 8003414:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003418:	e09d      	b.n	8003556 <UART_SetConfig+0x2fe>
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a4a      	ldr	r2, [pc, #296]	@ (8003548 <UART_SetConfig+0x2f0>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d125      	bne.n	8003470 <UART_SetConfig+0x218>
 8003424:	4b45      	ldr	r3, [pc, #276]	@ (800353c <UART_SetConfig+0x2e4>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800342e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003430:	d016      	beq.n	8003460 <UART_SetConfig+0x208>
 8003432:	2bc0      	cmp	r3, #192	@ 0xc0
 8003434:	d818      	bhi.n	8003468 <UART_SetConfig+0x210>
 8003436:	2b80      	cmp	r3, #128	@ 0x80
 8003438:	d00a      	beq.n	8003450 <UART_SetConfig+0x1f8>
 800343a:	2b80      	cmp	r3, #128	@ 0x80
 800343c:	d814      	bhi.n	8003468 <UART_SetConfig+0x210>
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <UART_SetConfig+0x1f0>
 8003442:	2b40      	cmp	r3, #64	@ 0x40
 8003444:	d008      	beq.n	8003458 <UART_SetConfig+0x200>
 8003446:	e00f      	b.n	8003468 <UART_SetConfig+0x210>
 8003448:	2300      	movs	r3, #0
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800344e:	e082      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003450:	2302      	movs	r3, #2
 8003452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003456:	e07e      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003458:	2304      	movs	r3, #4
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800345e:	e07a      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003460:	2308      	movs	r3, #8
 8003462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003466:	e076      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003468:	2310      	movs	r3, #16
 800346a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800346e:	e072      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a35      	ldr	r2, [pc, #212]	@ (800354c <UART_SetConfig+0x2f4>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d12a      	bne.n	80034d0 <UART_SetConfig+0x278>
 800347a:	4b30      	ldr	r3, [pc, #192]	@ (800353c <UART_SetConfig+0x2e4>)
 800347c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003480:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003488:	d01a      	beq.n	80034c0 <UART_SetConfig+0x268>
 800348a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800348e:	d81b      	bhi.n	80034c8 <UART_SetConfig+0x270>
 8003490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003494:	d00c      	beq.n	80034b0 <UART_SetConfig+0x258>
 8003496:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800349a:	d815      	bhi.n	80034c8 <UART_SetConfig+0x270>
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <UART_SetConfig+0x250>
 80034a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034a4:	d008      	beq.n	80034b8 <UART_SetConfig+0x260>
 80034a6:	e00f      	b.n	80034c8 <UART_SetConfig+0x270>
 80034a8:	2300      	movs	r3, #0
 80034aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ae:	e052      	b.n	8003556 <UART_SetConfig+0x2fe>
 80034b0:	2302      	movs	r3, #2
 80034b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034b6:	e04e      	b.n	8003556 <UART_SetConfig+0x2fe>
 80034b8:	2304      	movs	r3, #4
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034be:	e04a      	b.n	8003556 <UART_SetConfig+0x2fe>
 80034c0:	2308      	movs	r3, #8
 80034c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034c6:	e046      	b.n	8003556 <UART_SetConfig+0x2fe>
 80034c8:	2310      	movs	r3, #16
 80034ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80034ce:	e042      	b.n	8003556 <UART_SetConfig+0x2fe>
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a17      	ldr	r2, [pc, #92]	@ (8003534 <UART_SetConfig+0x2dc>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d13a      	bne.n	8003550 <UART_SetConfig+0x2f8>
 80034da:	4b18      	ldr	r3, [pc, #96]	@ (800353c <UART_SetConfig+0x2e4>)
 80034dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80034e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034e8:	d01a      	beq.n	8003520 <UART_SetConfig+0x2c8>
 80034ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80034ee:	d81b      	bhi.n	8003528 <UART_SetConfig+0x2d0>
 80034f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034f4:	d00c      	beq.n	8003510 <UART_SetConfig+0x2b8>
 80034f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034fa:	d815      	bhi.n	8003528 <UART_SetConfig+0x2d0>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <UART_SetConfig+0x2b0>
 8003500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003504:	d008      	beq.n	8003518 <UART_SetConfig+0x2c0>
 8003506:	e00f      	b.n	8003528 <UART_SetConfig+0x2d0>
 8003508:	2300      	movs	r3, #0
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800350e:	e022      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003510:	2302      	movs	r3, #2
 8003512:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003516:	e01e      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003518:	2304      	movs	r3, #4
 800351a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800351e:	e01a      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003520:	2308      	movs	r3, #8
 8003522:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003526:	e016      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003528:	2310      	movs	r3, #16
 800352a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800352e:	e012      	b.n	8003556 <UART_SetConfig+0x2fe>
 8003530:	cfff69f3 	.word	0xcfff69f3
 8003534:	40008000 	.word	0x40008000
 8003538:	40013800 	.word	0x40013800
 800353c:	40021000 	.word	0x40021000
 8003540:	40004400 	.word	0x40004400
 8003544:	40004800 	.word	0x40004800
 8003548:	40004c00 	.word	0x40004c00
 800354c:	40005000 	.word	0x40005000
 8003550:	2310      	movs	r3, #16
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4aae      	ldr	r2, [pc, #696]	@ (8003814 <UART_SetConfig+0x5bc>)
 800355c:	4293      	cmp	r3, r2
 800355e:	f040 8097 	bne.w	8003690 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003562:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003566:	2b08      	cmp	r3, #8
 8003568:	d823      	bhi.n	80035b2 <UART_SetConfig+0x35a>
 800356a:	a201      	add	r2, pc, #4	@ (adr r2, 8003570 <UART_SetConfig+0x318>)
 800356c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003570:	08003595 	.word	0x08003595
 8003574:	080035b3 	.word	0x080035b3
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035b3 	.word	0x080035b3
 8003580:	080035a3 	.word	0x080035a3
 8003584:	080035b3 	.word	0x080035b3
 8003588:	080035b3 	.word	0x080035b3
 800358c:	080035b3 	.word	0x080035b3
 8003590:	080035ab 	.word	0x080035ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003594:	f7ff fac2 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 8003598:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800359a:	e010      	b.n	80035be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800359c:	4b9e      	ldr	r3, [pc, #632]	@ (8003818 <UART_SetConfig+0x5c0>)
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035a0:	e00d      	b.n	80035be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035a2:	f7ff fa4d 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80035a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80035a8:	e009      	b.n	80035be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80035b0:	e005      	b.n	80035be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80035b2:	2300      	movs	r3, #0
 80035b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80035bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8130 	beq.w	8003826 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	4a94      	ldr	r2, [pc, #592]	@ (800381c <UART_SetConfig+0x5c4>)
 80035cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035d0:	461a      	mov	r2, r3
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d305      	bcc.n	80035f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d903      	bls.n	80035fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035fc:	e113      	b.n	8003826 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	2200      	movs	r2, #0
 8003602:	60bb      	str	r3, [r7, #8]
 8003604:	60fa      	str	r2, [r7, #12]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	4a84      	ldr	r2, [pc, #528]	@ (800381c <UART_SetConfig+0x5c4>)
 800360c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003610:	b29b      	uxth	r3, r3
 8003612:	2200      	movs	r2, #0
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	607a      	str	r2, [r7, #4]
 8003618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800361c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003620:	f7fd fa9c 	bl	8000b5c <__aeabi_uldivmod>
 8003624:	4602      	mov	r2, r0
 8003626:	460b      	mov	r3, r1
 8003628:	4610      	mov	r0, r2
 800362a:	4619      	mov	r1, r3
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	020b      	lsls	r3, r1, #8
 8003636:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800363a:	0202      	lsls	r2, r0, #8
 800363c:	6979      	ldr	r1, [r7, #20]
 800363e:	6849      	ldr	r1, [r1, #4]
 8003640:	0849      	lsrs	r1, r1, #1
 8003642:	2000      	movs	r0, #0
 8003644:	460c      	mov	r4, r1
 8003646:	4605      	mov	r5, r0
 8003648:	eb12 0804 	adds.w	r8, r2, r4
 800364c:	eb43 0905 	adc.w	r9, r3, r5
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	469a      	mov	sl, r3
 8003658:	4693      	mov	fp, r2
 800365a:	4652      	mov	r2, sl
 800365c:	465b      	mov	r3, fp
 800365e:	4640      	mov	r0, r8
 8003660:	4649      	mov	r1, r9
 8003662:	f7fd fa7b 	bl	8000b5c <__aeabi_uldivmod>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4613      	mov	r3, r2
 800366c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003674:	d308      	bcc.n	8003688 <UART_SetConfig+0x430>
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800367c:	d204      	bcs.n	8003688 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6a3a      	ldr	r2, [r7, #32]
 8003684:	60da      	str	r2, [r3, #12]
 8003686:	e0ce      	b.n	8003826 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800368e:	e0ca      	b.n	8003826 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003698:	d166      	bne.n	8003768 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800369a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d827      	bhi.n	80036f2 <UART_SetConfig+0x49a>
 80036a2:	a201      	add	r2, pc, #4	@ (adr r2, 80036a8 <UART_SetConfig+0x450>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036cd 	.word	0x080036cd
 80036ac:	080036d5 	.word	0x080036d5
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036f3 	.word	0x080036f3
 80036b8:	080036e3 	.word	0x080036e3
 80036bc:	080036f3 	.word	0x080036f3
 80036c0:	080036f3 	.word	0x080036f3
 80036c4:	080036f3 	.word	0x080036f3
 80036c8:	080036eb 	.word	0x080036eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036cc:	f7ff fa26 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80036d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036d2:	e014      	b.n	80036fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d4:	f7ff fa38 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 80036d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036da:	e010      	b.n	80036fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036dc:	4b4e      	ldr	r3, [pc, #312]	@ (8003818 <UART_SetConfig+0x5c0>)
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036e0:	e00d      	b.n	80036fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e2:	f7ff f9ad 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80036e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036e8:	e009      	b.n	80036fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036f0:	e005      	b.n	80036fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80036fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8090 	beq.w	8003826 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	4a44      	ldr	r2, [pc, #272]	@ (800381c <UART_SetConfig+0x5c4>)
 800370c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003710:	461a      	mov	r2, r3
 8003712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003714:	fbb3 f3f2 	udiv	r3, r3, r2
 8003718:	005a      	lsls	r2, r3, #1
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	441a      	add	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	fbb2 f3f3 	udiv	r3, r2, r3
 800372a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	2b0f      	cmp	r3, #15
 8003730:	d916      	bls.n	8003760 <UART_SetConfig+0x508>
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003738:	d212      	bcs.n	8003760 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800373a:	6a3b      	ldr	r3, [r7, #32]
 800373c:	b29b      	uxth	r3, r3
 800373e:	f023 030f 	bic.w	r3, r3, #15
 8003742:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	b29b      	uxth	r3, r3
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	b29a      	uxth	r2, r3
 8003750:	8bfb      	ldrh	r3, [r7, #30]
 8003752:	4313      	orrs	r3, r2
 8003754:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	8bfa      	ldrh	r2, [r7, #30]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e062      	b.n	8003826 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003766:	e05e      	b.n	8003826 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003768:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800376c:	2b08      	cmp	r3, #8
 800376e:	d828      	bhi.n	80037c2 <UART_SetConfig+0x56a>
 8003770:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <UART_SetConfig+0x520>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	0800379d 	.word	0x0800379d
 800377c:	080037a5 	.word	0x080037a5
 8003780:	080037ad 	.word	0x080037ad
 8003784:	080037c3 	.word	0x080037c3
 8003788:	080037b3 	.word	0x080037b3
 800378c:	080037c3 	.word	0x080037c3
 8003790:	080037c3 	.word	0x080037c3
 8003794:	080037c3 	.word	0x080037c3
 8003798:	080037bb 	.word	0x080037bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800379c:	f7ff f9be 	bl	8002b1c <HAL_RCC_GetPCLK1Freq>
 80037a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037a2:	e014      	b.n	80037ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037a4:	f7ff f9d0 	bl	8002b48 <HAL_RCC_GetPCLK2Freq>
 80037a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037aa:	e010      	b.n	80037ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003818 <UART_SetConfig+0x5c0>)
 80037ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037b0:	e00d      	b.n	80037ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037b2:	f7ff f945 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80037b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80037b8:	e009      	b.n	80037ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80037c0:	e005      	b.n	80037ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80037cc:	bf00      	nop
    }

    if (pclk != 0U)
 80037ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d028      	beq.n	8003826 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	4a10      	ldr	r2, [pc, #64]	@ (800381c <UART_SetConfig+0x5c4>)
 80037da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037de:	461a      	mov	r2, r3
 80037e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	441a      	add	r2, r3
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	2b0f      	cmp	r3, #15
 80037fc:	d910      	bls.n	8003820 <UART_SetConfig+0x5c8>
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003804:	d20c      	bcs.n	8003820 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	b29a      	uxth	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
 8003810:	e009      	b.n	8003826 <UART_SetConfig+0x5ce>
 8003812:	bf00      	nop
 8003814:	40008000 	.word	0x40008000
 8003818:	00f42400 	.word	0x00f42400
 800381c:	080048bc 	.word	0x080048bc
      }
      else
      {
        ret = HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2201      	movs	r2, #1
 800382a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2201      	movs	r2, #1
 8003832:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2200      	movs	r2, #0
 8003840:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003842:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003846:	4618      	mov	r0, r3
 8003848:	3730      	adds	r7, #48	@ 0x30
 800384a:	46bd      	mov	sp, r7
 800384c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00a      	beq.n	800389c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	430a      	orrs	r2, r1
 800389a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00a      	beq.n	80038be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00a      	beq.n	80038e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	430a      	orrs	r2, r1
 80038de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e4:	f003 0310 	and.w	r3, r3, #16
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d00a      	beq.n	8003902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003906:	f003 0320 	and.w	r3, r3, #32
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01a      	beq.n	8003966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800394a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800394e:	d10a      	bne.n	8003966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800396a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	605a      	str	r2, [r3, #4]
  }
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b098      	sub	sp, #96	@ 0x60
 8003998:	af02      	add	r7, sp, #8
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80039a4:	f7fe f836 	bl	8001a14 <HAL_GetTick>
 80039a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b08      	cmp	r3, #8
 80039b6:	d12f      	bne.n	8003a18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039c0:	2200      	movs	r2, #0
 80039c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f88e 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d022      	beq.n	8003a18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039da:	e853 3f00 	ldrex	r3, [r3]
 80039de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80039e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80039e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039f8:	e841 2300 	strex	r3, r2, [r1]
 80039fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1e6      	bne.n	80039d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a14:	2303      	movs	r3, #3
 8003a16:	e063      	b.n	8003ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0304 	and.w	r3, r3, #4
 8003a22:	2b04      	cmp	r3, #4
 8003a24:	d149      	bne.n	8003aba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f857 	bl	8003ae8 <UART_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d03c      	beq.n	8003aba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e6      	bne.n	8003a40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3308      	adds	r3, #8
 8003a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a92:	61fa      	str	r2, [r7, #28]
 8003a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	69b9      	ldr	r1, [r7, #24]
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2220      	movs	r2, #32
 8003aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e012      	b.n	8003ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ade:	2300      	movs	r3, #0
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3758      	adds	r7, #88	@ 0x58
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	4613      	mov	r3, r2
 8003af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af8:	e04f      	b.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b00:	d04b      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b02:	f7fd ff87 	bl	8001a14 <HAL_GetTick>
 8003b06:	4602      	mov	r2, r0
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d302      	bcc.n	8003b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d101      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	e04e      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d037      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b80      	cmp	r3, #128	@ 0x80
 8003b2e:	d034      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b40      	cmp	r3, #64	@ 0x40
 8003b34:	d031      	beq.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d110      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2208      	movs	r2, #8
 8003b4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 f838 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2208      	movs	r2, #8
 8003b56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e029      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69db      	ldr	r3, [r3, #28]
 8003b6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b74:	d111      	bne.n	8003b9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003b7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 f81e 	bl	8003bc2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e00f      	b.n	8003bba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69da      	ldr	r2, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68ba      	ldr	r2, [r7, #8]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	79fb      	ldrb	r3, [r7, #7]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d0a0      	beq.n	8003afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b095      	sub	sp, #84	@ 0x54
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bd2:	e853 3f00 	ldrex	r3, [r3]
 8003bd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	461a      	mov	r2, r3
 8003be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003bee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003bf0:	e841 2300 	strex	r3, r2, [r1]
 8003bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1e6      	bne.n	8003bca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3308      	adds	r3, #8
 8003c02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	e853 3f00 	ldrex	r3, [r3]
 8003c0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c12:	f023 0301 	bic.w	r3, r3, #1
 8003c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c28:	e841 2300 	strex	r3, r2, [r1]
 8003c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1e3      	bne.n	8003bfc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d118      	bne.n	8003c6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	e853 3f00 	ldrex	r3, [r3]
 8003c48:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5e:	6979      	ldr	r1, [r7, #20]
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	e841 2300 	strex	r3, r2, [r1]
 8003c66:	613b      	str	r3, [r7, #16]
   return(result);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1e6      	bne.n	8003c3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c82:	bf00      	nop
 8003c84:	3754      	adds	r7, #84	@ 0x54
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b085      	sub	sp, #20
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UARTEx_DisableFifoMode+0x16>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e027      	b.n	8003cf4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2224      	movs	r2, #36	@ 0x24
 8003cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003cd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3714      	adds	r7, #20
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e02d      	b.n	8003d74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2224      	movs	r2, #36	@ 0x24
 8003d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f022 0201 	bic.w	r2, r2, #1
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	683a      	ldr	r2, [r7, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f84f 	bl	8003df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2220      	movs	r2, #32
 8003d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d101      	bne.n	8003d94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d90:	2302      	movs	r3, #2
 8003d92:	e02d      	b.n	8003df0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	@ 0x24
 8003da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0201 	bic.w	r2, r2, #1
 8003dba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	683a      	ldr	r2, [r7, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f811 	bl	8003df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3710      	adds	r7, #16
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d108      	bne.n	8003e1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003e18:	e031      	b.n	8003e7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003e1e:	2308      	movs	r3, #8
 8003e20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	0e5b      	lsrs	r3, r3, #25
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	f003 0307 	and.w	r3, r3, #7
 8003e30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	0f5b      	lsrs	r3, r3, #29
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	f003 0307 	and.w	r3, r3, #7
 8003e40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	7b3a      	ldrb	r2, [r7, #12]
 8003e46:	4911      	ldr	r1, [pc, #68]	@ (8003e8c <UARTEx_SetNbDataToProcess+0x94>)
 8003e48:	5c8a      	ldrb	r2, [r1, r2]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e4e:	7b3a      	ldrb	r2, [r7, #12]
 8003e50:	490f      	ldr	r1, [pc, #60]	@ (8003e90 <UARTEx_SetNbDataToProcess+0x98>)
 8003e52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e54:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	7b7a      	ldrb	r2, [r7, #13]
 8003e64:	4909      	ldr	r1, [pc, #36]	@ (8003e8c <UARTEx_SetNbDataToProcess+0x94>)
 8003e66:	5c8a      	ldrb	r2, [r1, r2]
 8003e68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e6c:	7b7a      	ldrb	r2, [r7, #13]
 8003e6e:	4908      	ldr	r1, [pc, #32]	@ (8003e90 <UARTEx_SetNbDataToProcess+0x98>)
 8003e70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e72:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	080048d4 	.word	0x080048d4
 8003e90:	080048dc 	.word	0x080048dc

08003e94 <sniprintf>:
 8003e94:	b40c      	push	{r2, r3}
 8003e96:	b530      	push	{r4, r5, lr}
 8003e98:	4b18      	ldr	r3, [pc, #96]	@ (8003efc <sniprintf+0x68>)
 8003e9a:	1e0c      	subs	r4, r1, #0
 8003e9c:	681d      	ldr	r5, [r3, #0]
 8003e9e:	b09d      	sub	sp, #116	@ 0x74
 8003ea0:	da08      	bge.n	8003eb4 <sniprintf+0x20>
 8003ea2:	238b      	movs	r3, #139	@ 0x8b
 8003ea4:	602b      	str	r3, [r5, #0]
 8003ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8003eaa:	b01d      	add	sp, #116	@ 0x74
 8003eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb0:	b002      	add	sp, #8
 8003eb2:	4770      	bx	lr
 8003eb4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003eb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003ebc:	f04f 0300 	mov.w	r3, #0
 8003ec0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003ec2:	bf14      	ite	ne
 8003ec4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003ec8:	4623      	moveq	r3, r4
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	9307      	str	r3, [sp, #28]
 8003ece:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ed2:	9002      	str	r0, [sp, #8]
 8003ed4:	9006      	str	r0, [sp, #24]
 8003ed6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003eda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003edc:	ab21      	add	r3, sp, #132	@ 0x84
 8003ede:	a902      	add	r1, sp, #8
 8003ee0:	4628      	mov	r0, r5
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	f000 f9b6 	bl	8004254 <_svfiprintf_r>
 8003ee8:	1c43      	adds	r3, r0, #1
 8003eea:	bfbc      	itt	lt
 8003eec:	238b      	movlt	r3, #139	@ 0x8b
 8003eee:	602b      	strlt	r3, [r5, #0]
 8003ef0:	2c00      	cmp	r4, #0
 8003ef2:	d0da      	beq.n	8003eaa <sniprintf+0x16>
 8003ef4:	9b02      	ldr	r3, [sp, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	e7d6      	b.n	8003eaa <sniprintf+0x16>
 8003efc:	2000000c 	.word	0x2000000c

08003f00 <siprintf>:
 8003f00:	b40e      	push	{r1, r2, r3}
 8003f02:	b510      	push	{r4, lr}
 8003f04:	b09d      	sub	sp, #116	@ 0x74
 8003f06:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003f08:	9002      	str	r0, [sp, #8]
 8003f0a:	9006      	str	r0, [sp, #24]
 8003f0c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003f10:	480a      	ldr	r0, [pc, #40]	@ (8003f3c <siprintf+0x3c>)
 8003f12:	9107      	str	r1, [sp, #28]
 8003f14:	9104      	str	r1, [sp, #16]
 8003f16:	490a      	ldr	r1, [pc, #40]	@ (8003f40 <siprintf+0x40>)
 8003f18:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f1c:	9105      	str	r1, [sp, #20]
 8003f1e:	2400      	movs	r4, #0
 8003f20:	a902      	add	r1, sp, #8
 8003f22:	6800      	ldr	r0, [r0, #0]
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003f28:	f000 f994 	bl	8004254 <_svfiprintf_r>
 8003f2c:	9b02      	ldr	r3, [sp, #8]
 8003f2e:	701c      	strb	r4, [r3, #0]
 8003f30:	b01d      	add	sp, #116	@ 0x74
 8003f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f36:	b003      	add	sp, #12
 8003f38:	4770      	bx	lr
 8003f3a:	bf00      	nop
 8003f3c:	2000000c 	.word	0x2000000c
 8003f40:	ffff0208 	.word	0xffff0208

08003f44 <memset>:
 8003f44:	4402      	add	r2, r0
 8003f46:	4603      	mov	r3, r0
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d100      	bne.n	8003f4e <memset+0xa>
 8003f4c:	4770      	bx	lr
 8003f4e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f52:	e7f9      	b.n	8003f48 <memset+0x4>

08003f54 <__errno>:
 8003f54:	4b01      	ldr	r3, [pc, #4]	@ (8003f5c <__errno+0x8>)
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	2000000c 	.word	0x2000000c

08003f60 <__libc_init_array>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4d0d      	ldr	r5, [pc, #52]	@ (8003f98 <__libc_init_array+0x38>)
 8003f64:	4c0d      	ldr	r4, [pc, #52]	@ (8003f9c <__libc_init_array+0x3c>)
 8003f66:	1b64      	subs	r4, r4, r5
 8003f68:	10a4      	asrs	r4, r4, #2
 8003f6a:	2600      	movs	r6, #0
 8003f6c:	42a6      	cmp	r6, r4
 8003f6e:	d109      	bne.n	8003f84 <__libc_init_array+0x24>
 8003f70:	4d0b      	ldr	r5, [pc, #44]	@ (8003fa0 <__libc_init_array+0x40>)
 8003f72:	4c0c      	ldr	r4, [pc, #48]	@ (8003fa4 <__libc_init_array+0x44>)
 8003f74:	f000 fc64 	bl	8004840 <_init>
 8003f78:	1b64      	subs	r4, r4, r5
 8003f7a:	10a4      	asrs	r4, r4, #2
 8003f7c:	2600      	movs	r6, #0
 8003f7e:	42a6      	cmp	r6, r4
 8003f80:	d105      	bne.n	8003f8e <__libc_init_array+0x2e>
 8003f82:	bd70      	pop	{r4, r5, r6, pc}
 8003f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f88:	4798      	blx	r3
 8003f8a:	3601      	adds	r6, #1
 8003f8c:	e7ee      	b.n	8003f6c <__libc_init_array+0xc>
 8003f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f92:	4798      	blx	r3
 8003f94:	3601      	adds	r6, #1
 8003f96:	e7f2      	b.n	8003f7e <__libc_init_array+0x1e>
 8003f98:	08004920 	.word	0x08004920
 8003f9c:	08004920 	.word	0x08004920
 8003fa0:	08004920 	.word	0x08004920
 8003fa4:	08004924 	.word	0x08004924

08003fa8 <__retarget_lock_acquire_recursive>:
 8003fa8:	4770      	bx	lr

08003faa <__retarget_lock_release_recursive>:
 8003faa:	4770      	bx	lr

08003fac <_free_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4605      	mov	r5, r0
 8003fb0:	2900      	cmp	r1, #0
 8003fb2:	d041      	beq.n	8004038 <_free_r+0x8c>
 8003fb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fb8:	1f0c      	subs	r4, r1, #4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bfb8      	it	lt
 8003fbe:	18e4      	addlt	r4, r4, r3
 8003fc0:	f000 f8e0 	bl	8004184 <__malloc_lock>
 8003fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800403c <_free_r+0x90>)
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	b933      	cbnz	r3, 8003fd8 <_free_r+0x2c>
 8003fca:	6063      	str	r3, [r4, #4]
 8003fcc:	6014      	str	r4, [r2, #0]
 8003fce:	4628      	mov	r0, r5
 8003fd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fd4:	f000 b8dc 	b.w	8004190 <__malloc_unlock>
 8003fd8:	42a3      	cmp	r3, r4
 8003fda:	d908      	bls.n	8003fee <_free_r+0x42>
 8003fdc:	6820      	ldr	r0, [r4, #0]
 8003fde:	1821      	adds	r1, r4, r0
 8003fe0:	428b      	cmp	r3, r1
 8003fe2:	bf01      	itttt	eq
 8003fe4:	6819      	ldreq	r1, [r3, #0]
 8003fe6:	685b      	ldreq	r3, [r3, #4]
 8003fe8:	1809      	addeq	r1, r1, r0
 8003fea:	6021      	streq	r1, [r4, #0]
 8003fec:	e7ed      	b.n	8003fca <_free_r+0x1e>
 8003fee:	461a      	mov	r2, r3
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	b10b      	cbz	r3, 8003ff8 <_free_r+0x4c>
 8003ff4:	42a3      	cmp	r3, r4
 8003ff6:	d9fa      	bls.n	8003fee <_free_r+0x42>
 8003ff8:	6811      	ldr	r1, [r2, #0]
 8003ffa:	1850      	adds	r0, r2, r1
 8003ffc:	42a0      	cmp	r0, r4
 8003ffe:	d10b      	bne.n	8004018 <_free_r+0x6c>
 8004000:	6820      	ldr	r0, [r4, #0]
 8004002:	4401      	add	r1, r0
 8004004:	1850      	adds	r0, r2, r1
 8004006:	4283      	cmp	r3, r0
 8004008:	6011      	str	r1, [r2, #0]
 800400a:	d1e0      	bne.n	8003fce <_free_r+0x22>
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	6053      	str	r3, [r2, #4]
 8004012:	4408      	add	r0, r1
 8004014:	6010      	str	r0, [r2, #0]
 8004016:	e7da      	b.n	8003fce <_free_r+0x22>
 8004018:	d902      	bls.n	8004020 <_free_r+0x74>
 800401a:	230c      	movs	r3, #12
 800401c:	602b      	str	r3, [r5, #0]
 800401e:	e7d6      	b.n	8003fce <_free_r+0x22>
 8004020:	6820      	ldr	r0, [r4, #0]
 8004022:	1821      	adds	r1, r4, r0
 8004024:	428b      	cmp	r3, r1
 8004026:	bf04      	itt	eq
 8004028:	6819      	ldreq	r1, [r3, #0]
 800402a:	685b      	ldreq	r3, [r3, #4]
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	bf04      	itt	eq
 8004030:	1809      	addeq	r1, r1, r0
 8004032:	6021      	streq	r1, [r4, #0]
 8004034:	6054      	str	r4, [r2, #4]
 8004036:	e7ca      	b.n	8003fce <_free_r+0x22>
 8004038:	bd38      	pop	{r3, r4, r5, pc}
 800403a:	bf00      	nop
 800403c:	2000027c 	.word	0x2000027c

08004040 <sbrk_aligned>:
 8004040:	b570      	push	{r4, r5, r6, lr}
 8004042:	4e0f      	ldr	r6, [pc, #60]	@ (8004080 <sbrk_aligned+0x40>)
 8004044:	460c      	mov	r4, r1
 8004046:	6831      	ldr	r1, [r6, #0]
 8004048:	4605      	mov	r5, r0
 800404a:	b911      	cbnz	r1, 8004052 <sbrk_aligned+0x12>
 800404c:	f000 fba4 	bl	8004798 <_sbrk_r>
 8004050:	6030      	str	r0, [r6, #0]
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 fb9f 	bl	8004798 <_sbrk_r>
 800405a:	1c43      	adds	r3, r0, #1
 800405c:	d103      	bne.n	8004066 <sbrk_aligned+0x26>
 800405e:	f04f 34ff 	mov.w	r4, #4294967295
 8004062:	4620      	mov	r0, r4
 8004064:	bd70      	pop	{r4, r5, r6, pc}
 8004066:	1cc4      	adds	r4, r0, #3
 8004068:	f024 0403 	bic.w	r4, r4, #3
 800406c:	42a0      	cmp	r0, r4
 800406e:	d0f8      	beq.n	8004062 <sbrk_aligned+0x22>
 8004070:	1a21      	subs	r1, r4, r0
 8004072:	4628      	mov	r0, r5
 8004074:	f000 fb90 	bl	8004798 <_sbrk_r>
 8004078:	3001      	adds	r0, #1
 800407a:	d1f2      	bne.n	8004062 <sbrk_aligned+0x22>
 800407c:	e7ef      	b.n	800405e <sbrk_aligned+0x1e>
 800407e:	bf00      	nop
 8004080:	20000278 	.word	0x20000278

08004084 <_malloc_r>:
 8004084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004088:	1ccd      	adds	r5, r1, #3
 800408a:	f025 0503 	bic.w	r5, r5, #3
 800408e:	3508      	adds	r5, #8
 8004090:	2d0c      	cmp	r5, #12
 8004092:	bf38      	it	cc
 8004094:	250c      	movcc	r5, #12
 8004096:	2d00      	cmp	r5, #0
 8004098:	4606      	mov	r6, r0
 800409a:	db01      	blt.n	80040a0 <_malloc_r+0x1c>
 800409c:	42a9      	cmp	r1, r5
 800409e:	d904      	bls.n	80040aa <_malloc_r+0x26>
 80040a0:	230c      	movs	r3, #12
 80040a2:	6033      	str	r3, [r6, #0]
 80040a4:	2000      	movs	r0, #0
 80040a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004180 <_malloc_r+0xfc>
 80040ae:	f000 f869 	bl	8004184 <__malloc_lock>
 80040b2:	f8d8 3000 	ldr.w	r3, [r8]
 80040b6:	461c      	mov	r4, r3
 80040b8:	bb44      	cbnz	r4, 800410c <_malloc_r+0x88>
 80040ba:	4629      	mov	r1, r5
 80040bc:	4630      	mov	r0, r6
 80040be:	f7ff ffbf 	bl	8004040 <sbrk_aligned>
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	4604      	mov	r4, r0
 80040c6:	d158      	bne.n	800417a <_malloc_r+0xf6>
 80040c8:	f8d8 4000 	ldr.w	r4, [r8]
 80040cc:	4627      	mov	r7, r4
 80040ce:	2f00      	cmp	r7, #0
 80040d0:	d143      	bne.n	800415a <_malloc_r+0xd6>
 80040d2:	2c00      	cmp	r4, #0
 80040d4:	d04b      	beq.n	800416e <_malloc_r+0xea>
 80040d6:	6823      	ldr	r3, [r4, #0]
 80040d8:	4639      	mov	r1, r7
 80040da:	4630      	mov	r0, r6
 80040dc:	eb04 0903 	add.w	r9, r4, r3
 80040e0:	f000 fb5a 	bl	8004798 <_sbrk_r>
 80040e4:	4581      	cmp	r9, r0
 80040e6:	d142      	bne.n	800416e <_malloc_r+0xea>
 80040e8:	6821      	ldr	r1, [r4, #0]
 80040ea:	1a6d      	subs	r5, r5, r1
 80040ec:	4629      	mov	r1, r5
 80040ee:	4630      	mov	r0, r6
 80040f0:	f7ff ffa6 	bl	8004040 <sbrk_aligned>
 80040f4:	3001      	adds	r0, #1
 80040f6:	d03a      	beq.n	800416e <_malloc_r+0xea>
 80040f8:	6823      	ldr	r3, [r4, #0]
 80040fa:	442b      	add	r3, r5
 80040fc:	6023      	str	r3, [r4, #0]
 80040fe:	f8d8 3000 	ldr.w	r3, [r8]
 8004102:	685a      	ldr	r2, [r3, #4]
 8004104:	bb62      	cbnz	r2, 8004160 <_malloc_r+0xdc>
 8004106:	f8c8 7000 	str.w	r7, [r8]
 800410a:	e00f      	b.n	800412c <_malloc_r+0xa8>
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	1b52      	subs	r2, r2, r5
 8004110:	d420      	bmi.n	8004154 <_malloc_r+0xd0>
 8004112:	2a0b      	cmp	r2, #11
 8004114:	d917      	bls.n	8004146 <_malloc_r+0xc2>
 8004116:	1961      	adds	r1, r4, r5
 8004118:	42a3      	cmp	r3, r4
 800411a:	6025      	str	r5, [r4, #0]
 800411c:	bf18      	it	ne
 800411e:	6059      	strne	r1, [r3, #4]
 8004120:	6863      	ldr	r3, [r4, #4]
 8004122:	bf08      	it	eq
 8004124:	f8c8 1000 	streq.w	r1, [r8]
 8004128:	5162      	str	r2, [r4, r5]
 800412a:	604b      	str	r3, [r1, #4]
 800412c:	4630      	mov	r0, r6
 800412e:	f000 f82f 	bl	8004190 <__malloc_unlock>
 8004132:	f104 000b 	add.w	r0, r4, #11
 8004136:	1d23      	adds	r3, r4, #4
 8004138:	f020 0007 	bic.w	r0, r0, #7
 800413c:	1ac2      	subs	r2, r0, r3
 800413e:	bf1c      	itt	ne
 8004140:	1a1b      	subne	r3, r3, r0
 8004142:	50a3      	strne	r3, [r4, r2]
 8004144:	e7af      	b.n	80040a6 <_malloc_r+0x22>
 8004146:	6862      	ldr	r2, [r4, #4]
 8004148:	42a3      	cmp	r3, r4
 800414a:	bf0c      	ite	eq
 800414c:	f8c8 2000 	streq.w	r2, [r8]
 8004150:	605a      	strne	r2, [r3, #4]
 8004152:	e7eb      	b.n	800412c <_malloc_r+0xa8>
 8004154:	4623      	mov	r3, r4
 8004156:	6864      	ldr	r4, [r4, #4]
 8004158:	e7ae      	b.n	80040b8 <_malloc_r+0x34>
 800415a:	463c      	mov	r4, r7
 800415c:	687f      	ldr	r7, [r7, #4]
 800415e:	e7b6      	b.n	80040ce <_malloc_r+0x4a>
 8004160:	461a      	mov	r2, r3
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	42a3      	cmp	r3, r4
 8004166:	d1fb      	bne.n	8004160 <_malloc_r+0xdc>
 8004168:	2300      	movs	r3, #0
 800416a:	6053      	str	r3, [r2, #4]
 800416c:	e7de      	b.n	800412c <_malloc_r+0xa8>
 800416e:	230c      	movs	r3, #12
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	4630      	mov	r0, r6
 8004174:	f000 f80c 	bl	8004190 <__malloc_unlock>
 8004178:	e794      	b.n	80040a4 <_malloc_r+0x20>
 800417a:	6005      	str	r5, [r0, #0]
 800417c:	e7d6      	b.n	800412c <_malloc_r+0xa8>
 800417e:	bf00      	nop
 8004180:	2000027c 	.word	0x2000027c

08004184 <__malloc_lock>:
 8004184:	4801      	ldr	r0, [pc, #4]	@ (800418c <__malloc_lock+0x8>)
 8004186:	f7ff bf0f 	b.w	8003fa8 <__retarget_lock_acquire_recursive>
 800418a:	bf00      	nop
 800418c:	20000274 	.word	0x20000274

08004190 <__malloc_unlock>:
 8004190:	4801      	ldr	r0, [pc, #4]	@ (8004198 <__malloc_unlock+0x8>)
 8004192:	f7ff bf0a 	b.w	8003faa <__retarget_lock_release_recursive>
 8004196:	bf00      	nop
 8004198:	20000274 	.word	0x20000274

0800419c <__ssputs_r>:
 800419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041a0:	688e      	ldr	r6, [r1, #8]
 80041a2:	461f      	mov	r7, r3
 80041a4:	42be      	cmp	r6, r7
 80041a6:	680b      	ldr	r3, [r1, #0]
 80041a8:	4682      	mov	sl, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	4690      	mov	r8, r2
 80041ae:	d82d      	bhi.n	800420c <__ssputs_r+0x70>
 80041b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80041b8:	d026      	beq.n	8004208 <__ssputs_r+0x6c>
 80041ba:	6965      	ldr	r5, [r4, #20]
 80041bc:	6909      	ldr	r1, [r1, #16]
 80041be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041c2:	eba3 0901 	sub.w	r9, r3, r1
 80041c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ca:	1c7b      	adds	r3, r7, #1
 80041cc:	444b      	add	r3, r9
 80041ce:	106d      	asrs	r5, r5, #1
 80041d0:	429d      	cmp	r5, r3
 80041d2:	bf38      	it	cc
 80041d4:	461d      	movcc	r5, r3
 80041d6:	0553      	lsls	r3, r2, #21
 80041d8:	d527      	bpl.n	800422a <__ssputs_r+0x8e>
 80041da:	4629      	mov	r1, r5
 80041dc:	f7ff ff52 	bl	8004084 <_malloc_r>
 80041e0:	4606      	mov	r6, r0
 80041e2:	b360      	cbz	r0, 800423e <__ssputs_r+0xa2>
 80041e4:	6921      	ldr	r1, [r4, #16]
 80041e6:	464a      	mov	r2, r9
 80041e8:	f000 fae6 	bl	80047b8 <memcpy>
 80041ec:	89a3      	ldrh	r3, [r4, #12]
 80041ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80041f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041f6:	81a3      	strh	r3, [r4, #12]
 80041f8:	6126      	str	r6, [r4, #16]
 80041fa:	6165      	str	r5, [r4, #20]
 80041fc:	444e      	add	r6, r9
 80041fe:	eba5 0509 	sub.w	r5, r5, r9
 8004202:	6026      	str	r6, [r4, #0]
 8004204:	60a5      	str	r5, [r4, #8]
 8004206:	463e      	mov	r6, r7
 8004208:	42be      	cmp	r6, r7
 800420a:	d900      	bls.n	800420e <__ssputs_r+0x72>
 800420c:	463e      	mov	r6, r7
 800420e:	6820      	ldr	r0, [r4, #0]
 8004210:	4632      	mov	r2, r6
 8004212:	4641      	mov	r1, r8
 8004214:	f000 faa6 	bl	8004764 <memmove>
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	1b9b      	subs	r3, r3, r6
 800421c:	60a3      	str	r3, [r4, #8]
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	4433      	add	r3, r6
 8004222:	6023      	str	r3, [r4, #0]
 8004224:	2000      	movs	r0, #0
 8004226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800422a:	462a      	mov	r2, r5
 800422c:	f000 fad2 	bl	80047d4 <_realloc_r>
 8004230:	4606      	mov	r6, r0
 8004232:	2800      	cmp	r0, #0
 8004234:	d1e0      	bne.n	80041f8 <__ssputs_r+0x5c>
 8004236:	6921      	ldr	r1, [r4, #16]
 8004238:	4650      	mov	r0, sl
 800423a:	f7ff feb7 	bl	8003fac <_free_r>
 800423e:	230c      	movs	r3, #12
 8004240:	f8ca 3000 	str.w	r3, [sl]
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800424a:	81a3      	strh	r3, [r4, #12]
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	e7e9      	b.n	8004226 <__ssputs_r+0x8a>
	...

08004254 <_svfiprintf_r>:
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	4698      	mov	r8, r3
 800425a:	898b      	ldrh	r3, [r1, #12]
 800425c:	061b      	lsls	r3, r3, #24
 800425e:	b09d      	sub	sp, #116	@ 0x74
 8004260:	4607      	mov	r7, r0
 8004262:	460d      	mov	r5, r1
 8004264:	4614      	mov	r4, r2
 8004266:	d510      	bpl.n	800428a <_svfiprintf_r+0x36>
 8004268:	690b      	ldr	r3, [r1, #16]
 800426a:	b973      	cbnz	r3, 800428a <_svfiprintf_r+0x36>
 800426c:	2140      	movs	r1, #64	@ 0x40
 800426e:	f7ff ff09 	bl	8004084 <_malloc_r>
 8004272:	6028      	str	r0, [r5, #0]
 8004274:	6128      	str	r0, [r5, #16]
 8004276:	b930      	cbnz	r0, 8004286 <_svfiprintf_r+0x32>
 8004278:	230c      	movs	r3, #12
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	f04f 30ff 	mov.w	r0, #4294967295
 8004280:	b01d      	add	sp, #116	@ 0x74
 8004282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004286:	2340      	movs	r3, #64	@ 0x40
 8004288:	616b      	str	r3, [r5, #20]
 800428a:	2300      	movs	r3, #0
 800428c:	9309      	str	r3, [sp, #36]	@ 0x24
 800428e:	2320      	movs	r3, #32
 8004290:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004294:	f8cd 800c 	str.w	r8, [sp, #12]
 8004298:	2330      	movs	r3, #48	@ 0x30
 800429a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004438 <_svfiprintf_r+0x1e4>
 800429e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042a2:	f04f 0901 	mov.w	r9, #1
 80042a6:	4623      	mov	r3, r4
 80042a8:	469a      	mov	sl, r3
 80042aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042ae:	b10a      	cbz	r2, 80042b4 <_svfiprintf_r+0x60>
 80042b0:	2a25      	cmp	r2, #37	@ 0x25
 80042b2:	d1f9      	bne.n	80042a8 <_svfiprintf_r+0x54>
 80042b4:	ebba 0b04 	subs.w	fp, sl, r4
 80042b8:	d00b      	beq.n	80042d2 <_svfiprintf_r+0x7e>
 80042ba:	465b      	mov	r3, fp
 80042bc:	4622      	mov	r2, r4
 80042be:	4629      	mov	r1, r5
 80042c0:	4638      	mov	r0, r7
 80042c2:	f7ff ff6b 	bl	800419c <__ssputs_r>
 80042c6:	3001      	adds	r0, #1
 80042c8:	f000 80a7 	beq.w	800441a <_svfiprintf_r+0x1c6>
 80042cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80042ce:	445a      	add	r2, fp
 80042d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80042d2:	f89a 3000 	ldrb.w	r3, [sl]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 809f 	beq.w	800441a <_svfiprintf_r+0x1c6>
 80042dc:	2300      	movs	r3, #0
 80042de:	f04f 32ff 	mov.w	r2, #4294967295
 80042e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042e6:	f10a 0a01 	add.w	sl, sl, #1
 80042ea:	9304      	str	r3, [sp, #16]
 80042ec:	9307      	str	r3, [sp, #28]
 80042ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80042f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80042f4:	4654      	mov	r4, sl
 80042f6:	2205      	movs	r2, #5
 80042f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042fc:	484e      	ldr	r0, [pc, #312]	@ (8004438 <_svfiprintf_r+0x1e4>)
 80042fe:	f7fb ff97 	bl	8000230 <memchr>
 8004302:	9a04      	ldr	r2, [sp, #16]
 8004304:	b9d8      	cbnz	r0, 800433e <_svfiprintf_r+0xea>
 8004306:	06d0      	lsls	r0, r2, #27
 8004308:	bf44      	itt	mi
 800430a:	2320      	movmi	r3, #32
 800430c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004310:	0711      	lsls	r1, r2, #28
 8004312:	bf44      	itt	mi
 8004314:	232b      	movmi	r3, #43	@ 0x2b
 8004316:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800431a:	f89a 3000 	ldrb.w	r3, [sl]
 800431e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004320:	d015      	beq.n	800434e <_svfiprintf_r+0xfa>
 8004322:	9a07      	ldr	r2, [sp, #28]
 8004324:	4654      	mov	r4, sl
 8004326:	2000      	movs	r0, #0
 8004328:	f04f 0c0a 	mov.w	ip, #10
 800432c:	4621      	mov	r1, r4
 800432e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004332:	3b30      	subs	r3, #48	@ 0x30
 8004334:	2b09      	cmp	r3, #9
 8004336:	d94b      	bls.n	80043d0 <_svfiprintf_r+0x17c>
 8004338:	b1b0      	cbz	r0, 8004368 <_svfiprintf_r+0x114>
 800433a:	9207      	str	r2, [sp, #28]
 800433c:	e014      	b.n	8004368 <_svfiprintf_r+0x114>
 800433e:	eba0 0308 	sub.w	r3, r0, r8
 8004342:	fa09 f303 	lsl.w	r3, r9, r3
 8004346:	4313      	orrs	r3, r2
 8004348:	9304      	str	r3, [sp, #16]
 800434a:	46a2      	mov	sl, r4
 800434c:	e7d2      	b.n	80042f4 <_svfiprintf_r+0xa0>
 800434e:	9b03      	ldr	r3, [sp, #12]
 8004350:	1d19      	adds	r1, r3, #4
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	9103      	str	r1, [sp, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	bfbb      	ittet	lt
 800435a:	425b      	neglt	r3, r3
 800435c:	f042 0202 	orrlt.w	r2, r2, #2
 8004360:	9307      	strge	r3, [sp, #28]
 8004362:	9307      	strlt	r3, [sp, #28]
 8004364:	bfb8      	it	lt
 8004366:	9204      	strlt	r2, [sp, #16]
 8004368:	7823      	ldrb	r3, [r4, #0]
 800436a:	2b2e      	cmp	r3, #46	@ 0x2e
 800436c:	d10a      	bne.n	8004384 <_svfiprintf_r+0x130>
 800436e:	7863      	ldrb	r3, [r4, #1]
 8004370:	2b2a      	cmp	r3, #42	@ 0x2a
 8004372:	d132      	bne.n	80043da <_svfiprintf_r+0x186>
 8004374:	9b03      	ldr	r3, [sp, #12]
 8004376:	1d1a      	adds	r2, r3, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	9203      	str	r2, [sp, #12]
 800437c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004380:	3402      	adds	r4, #2
 8004382:	9305      	str	r3, [sp, #20]
 8004384:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004448 <_svfiprintf_r+0x1f4>
 8004388:	7821      	ldrb	r1, [r4, #0]
 800438a:	2203      	movs	r2, #3
 800438c:	4650      	mov	r0, sl
 800438e:	f7fb ff4f 	bl	8000230 <memchr>
 8004392:	b138      	cbz	r0, 80043a4 <_svfiprintf_r+0x150>
 8004394:	9b04      	ldr	r3, [sp, #16]
 8004396:	eba0 000a 	sub.w	r0, r0, sl
 800439a:	2240      	movs	r2, #64	@ 0x40
 800439c:	4082      	lsls	r2, r0
 800439e:	4313      	orrs	r3, r2
 80043a0:	3401      	adds	r4, #1
 80043a2:	9304      	str	r3, [sp, #16]
 80043a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043a8:	4824      	ldr	r0, [pc, #144]	@ (800443c <_svfiprintf_r+0x1e8>)
 80043aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043ae:	2206      	movs	r2, #6
 80043b0:	f7fb ff3e 	bl	8000230 <memchr>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d036      	beq.n	8004426 <_svfiprintf_r+0x1d2>
 80043b8:	4b21      	ldr	r3, [pc, #132]	@ (8004440 <_svfiprintf_r+0x1ec>)
 80043ba:	bb1b      	cbnz	r3, 8004404 <_svfiprintf_r+0x1b0>
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	3307      	adds	r3, #7
 80043c0:	f023 0307 	bic.w	r3, r3, #7
 80043c4:	3308      	adds	r3, #8
 80043c6:	9303      	str	r3, [sp, #12]
 80043c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80043ca:	4433      	add	r3, r6
 80043cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80043ce:	e76a      	b.n	80042a6 <_svfiprintf_r+0x52>
 80043d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80043d4:	460c      	mov	r4, r1
 80043d6:	2001      	movs	r0, #1
 80043d8:	e7a8      	b.n	800432c <_svfiprintf_r+0xd8>
 80043da:	2300      	movs	r3, #0
 80043dc:	3401      	adds	r4, #1
 80043de:	9305      	str	r3, [sp, #20]
 80043e0:	4619      	mov	r1, r3
 80043e2:	f04f 0c0a 	mov.w	ip, #10
 80043e6:	4620      	mov	r0, r4
 80043e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80043ec:	3a30      	subs	r2, #48	@ 0x30
 80043ee:	2a09      	cmp	r2, #9
 80043f0:	d903      	bls.n	80043fa <_svfiprintf_r+0x1a6>
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d0c6      	beq.n	8004384 <_svfiprintf_r+0x130>
 80043f6:	9105      	str	r1, [sp, #20]
 80043f8:	e7c4      	b.n	8004384 <_svfiprintf_r+0x130>
 80043fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80043fe:	4604      	mov	r4, r0
 8004400:	2301      	movs	r3, #1
 8004402:	e7f0      	b.n	80043e6 <_svfiprintf_r+0x192>
 8004404:	ab03      	add	r3, sp, #12
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	462a      	mov	r2, r5
 800440a:	4b0e      	ldr	r3, [pc, #56]	@ (8004444 <_svfiprintf_r+0x1f0>)
 800440c:	a904      	add	r1, sp, #16
 800440e:	4638      	mov	r0, r7
 8004410:	f3af 8000 	nop.w
 8004414:	1c42      	adds	r2, r0, #1
 8004416:	4606      	mov	r6, r0
 8004418:	d1d6      	bne.n	80043c8 <_svfiprintf_r+0x174>
 800441a:	89ab      	ldrh	r3, [r5, #12]
 800441c:	065b      	lsls	r3, r3, #25
 800441e:	f53f af2d 	bmi.w	800427c <_svfiprintf_r+0x28>
 8004422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004424:	e72c      	b.n	8004280 <_svfiprintf_r+0x2c>
 8004426:	ab03      	add	r3, sp, #12
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	462a      	mov	r2, r5
 800442c:	4b05      	ldr	r3, [pc, #20]	@ (8004444 <_svfiprintf_r+0x1f0>)
 800442e:	a904      	add	r1, sp, #16
 8004430:	4638      	mov	r0, r7
 8004432:	f000 f879 	bl	8004528 <_printf_i>
 8004436:	e7ed      	b.n	8004414 <_svfiprintf_r+0x1c0>
 8004438:	080048e4 	.word	0x080048e4
 800443c:	080048ee 	.word	0x080048ee
 8004440:	00000000 	.word	0x00000000
 8004444:	0800419d 	.word	0x0800419d
 8004448:	080048ea 	.word	0x080048ea

0800444c <_printf_common>:
 800444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004450:	4616      	mov	r6, r2
 8004452:	4698      	mov	r8, r3
 8004454:	688a      	ldr	r2, [r1, #8]
 8004456:	690b      	ldr	r3, [r1, #16]
 8004458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800445c:	4293      	cmp	r3, r2
 800445e:	bfb8      	it	lt
 8004460:	4613      	movlt	r3, r2
 8004462:	6033      	str	r3, [r6, #0]
 8004464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004468:	4607      	mov	r7, r0
 800446a:	460c      	mov	r4, r1
 800446c:	b10a      	cbz	r2, 8004472 <_printf_common+0x26>
 800446e:	3301      	adds	r3, #1
 8004470:	6033      	str	r3, [r6, #0]
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	0699      	lsls	r1, r3, #26
 8004476:	bf42      	ittt	mi
 8004478:	6833      	ldrmi	r3, [r6, #0]
 800447a:	3302      	addmi	r3, #2
 800447c:	6033      	strmi	r3, [r6, #0]
 800447e:	6825      	ldr	r5, [r4, #0]
 8004480:	f015 0506 	ands.w	r5, r5, #6
 8004484:	d106      	bne.n	8004494 <_printf_common+0x48>
 8004486:	f104 0a19 	add.w	sl, r4, #25
 800448a:	68e3      	ldr	r3, [r4, #12]
 800448c:	6832      	ldr	r2, [r6, #0]
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	42ab      	cmp	r3, r5
 8004492:	dc26      	bgt.n	80044e2 <_printf_common+0x96>
 8004494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004498:	6822      	ldr	r2, [r4, #0]
 800449a:	3b00      	subs	r3, #0
 800449c:	bf18      	it	ne
 800449e:	2301      	movne	r3, #1
 80044a0:	0692      	lsls	r2, r2, #26
 80044a2:	d42b      	bmi.n	80044fc <_printf_common+0xb0>
 80044a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044a8:	4641      	mov	r1, r8
 80044aa:	4638      	mov	r0, r7
 80044ac:	47c8      	blx	r9
 80044ae:	3001      	adds	r0, #1
 80044b0:	d01e      	beq.n	80044f0 <_printf_common+0xa4>
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	6922      	ldr	r2, [r4, #16]
 80044b6:	f003 0306 	and.w	r3, r3, #6
 80044ba:	2b04      	cmp	r3, #4
 80044bc:	bf02      	ittt	eq
 80044be:	68e5      	ldreq	r5, [r4, #12]
 80044c0:	6833      	ldreq	r3, [r6, #0]
 80044c2:	1aed      	subeq	r5, r5, r3
 80044c4:	68a3      	ldr	r3, [r4, #8]
 80044c6:	bf0c      	ite	eq
 80044c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044cc:	2500      	movne	r5, #0
 80044ce:	4293      	cmp	r3, r2
 80044d0:	bfc4      	itt	gt
 80044d2:	1a9b      	subgt	r3, r3, r2
 80044d4:	18ed      	addgt	r5, r5, r3
 80044d6:	2600      	movs	r6, #0
 80044d8:	341a      	adds	r4, #26
 80044da:	42b5      	cmp	r5, r6
 80044dc:	d11a      	bne.n	8004514 <_printf_common+0xc8>
 80044de:	2000      	movs	r0, #0
 80044e0:	e008      	b.n	80044f4 <_printf_common+0xa8>
 80044e2:	2301      	movs	r3, #1
 80044e4:	4652      	mov	r2, sl
 80044e6:	4641      	mov	r1, r8
 80044e8:	4638      	mov	r0, r7
 80044ea:	47c8      	blx	r9
 80044ec:	3001      	adds	r0, #1
 80044ee:	d103      	bne.n	80044f8 <_printf_common+0xac>
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044f8:	3501      	adds	r5, #1
 80044fa:	e7c6      	b.n	800448a <_printf_common+0x3e>
 80044fc:	18e1      	adds	r1, r4, r3
 80044fe:	1c5a      	adds	r2, r3, #1
 8004500:	2030      	movs	r0, #48	@ 0x30
 8004502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004506:	4422      	add	r2, r4
 8004508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800450c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004510:	3302      	adds	r3, #2
 8004512:	e7c7      	b.n	80044a4 <_printf_common+0x58>
 8004514:	2301      	movs	r3, #1
 8004516:	4622      	mov	r2, r4
 8004518:	4641      	mov	r1, r8
 800451a:	4638      	mov	r0, r7
 800451c:	47c8      	blx	r9
 800451e:	3001      	adds	r0, #1
 8004520:	d0e6      	beq.n	80044f0 <_printf_common+0xa4>
 8004522:	3601      	adds	r6, #1
 8004524:	e7d9      	b.n	80044da <_printf_common+0x8e>
	...

08004528 <_printf_i>:
 8004528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800452c:	7e0f      	ldrb	r7, [r1, #24]
 800452e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004530:	2f78      	cmp	r7, #120	@ 0x78
 8004532:	4691      	mov	r9, r2
 8004534:	4680      	mov	r8, r0
 8004536:	460c      	mov	r4, r1
 8004538:	469a      	mov	sl, r3
 800453a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800453e:	d807      	bhi.n	8004550 <_printf_i+0x28>
 8004540:	2f62      	cmp	r7, #98	@ 0x62
 8004542:	d80a      	bhi.n	800455a <_printf_i+0x32>
 8004544:	2f00      	cmp	r7, #0
 8004546:	f000 80d1 	beq.w	80046ec <_printf_i+0x1c4>
 800454a:	2f58      	cmp	r7, #88	@ 0x58
 800454c:	f000 80b8 	beq.w	80046c0 <_printf_i+0x198>
 8004550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004558:	e03a      	b.n	80045d0 <_printf_i+0xa8>
 800455a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800455e:	2b15      	cmp	r3, #21
 8004560:	d8f6      	bhi.n	8004550 <_printf_i+0x28>
 8004562:	a101      	add	r1, pc, #4	@ (adr r1, 8004568 <_printf_i+0x40>)
 8004564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004568:	080045c1 	.word	0x080045c1
 800456c:	080045d5 	.word	0x080045d5
 8004570:	08004551 	.word	0x08004551
 8004574:	08004551 	.word	0x08004551
 8004578:	08004551 	.word	0x08004551
 800457c:	08004551 	.word	0x08004551
 8004580:	080045d5 	.word	0x080045d5
 8004584:	08004551 	.word	0x08004551
 8004588:	08004551 	.word	0x08004551
 800458c:	08004551 	.word	0x08004551
 8004590:	08004551 	.word	0x08004551
 8004594:	080046d3 	.word	0x080046d3
 8004598:	080045ff 	.word	0x080045ff
 800459c:	0800468d 	.word	0x0800468d
 80045a0:	08004551 	.word	0x08004551
 80045a4:	08004551 	.word	0x08004551
 80045a8:	080046f5 	.word	0x080046f5
 80045ac:	08004551 	.word	0x08004551
 80045b0:	080045ff 	.word	0x080045ff
 80045b4:	08004551 	.word	0x08004551
 80045b8:	08004551 	.word	0x08004551
 80045bc:	08004695 	.word	0x08004695
 80045c0:	6833      	ldr	r3, [r6, #0]
 80045c2:	1d1a      	adds	r2, r3, #4
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6032      	str	r2, [r6, #0]
 80045c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045d0:	2301      	movs	r3, #1
 80045d2:	e09c      	b.n	800470e <_printf_i+0x1e6>
 80045d4:	6833      	ldr	r3, [r6, #0]
 80045d6:	6820      	ldr	r0, [r4, #0]
 80045d8:	1d19      	adds	r1, r3, #4
 80045da:	6031      	str	r1, [r6, #0]
 80045dc:	0606      	lsls	r6, r0, #24
 80045de:	d501      	bpl.n	80045e4 <_printf_i+0xbc>
 80045e0:	681d      	ldr	r5, [r3, #0]
 80045e2:	e003      	b.n	80045ec <_printf_i+0xc4>
 80045e4:	0645      	lsls	r5, r0, #25
 80045e6:	d5fb      	bpl.n	80045e0 <_printf_i+0xb8>
 80045e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	da03      	bge.n	80045f8 <_printf_i+0xd0>
 80045f0:	232d      	movs	r3, #45	@ 0x2d
 80045f2:	426d      	negs	r5, r5
 80045f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045f8:	4858      	ldr	r0, [pc, #352]	@ (800475c <_printf_i+0x234>)
 80045fa:	230a      	movs	r3, #10
 80045fc:	e011      	b.n	8004622 <_printf_i+0xfa>
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	6833      	ldr	r3, [r6, #0]
 8004602:	0608      	lsls	r0, r1, #24
 8004604:	f853 5b04 	ldr.w	r5, [r3], #4
 8004608:	d402      	bmi.n	8004610 <_printf_i+0xe8>
 800460a:	0649      	lsls	r1, r1, #25
 800460c:	bf48      	it	mi
 800460e:	b2ad      	uxthmi	r5, r5
 8004610:	2f6f      	cmp	r7, #111	@ 0x6f
 8004612:	4852      	ldr	r0, [pc, #328]	@ (800475c <_printf_i+0x234>)
 8004614:	6033      	str	r3, [r6, #0]
 8004616:	bf14      	ite	ne
 8004618:	230a      	movne	r3, #10
 800461a:	2308      	moveq	r3, #8
 800461c:	2100      	movs	r1, #0
 800461e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004622:	6866      	ldr	r6, [r4, #4]
 8004624:	60a6      	str	r6, [r4, #8]
 8004626:	2e00      	cmp	r6, #0
 8004628:	db05      	blt.n	8004636 <_printf_i+0x10e>
 800462a:	6821      	ldr	r1, [r4, #0]
 800462c:	432e      	orrs	r6, r5
 800462e:	f021 0104 	bic.w	r1, r1, #4
 8004632:	6021      	str	r1, [r4, #0]
 8004634:	d04b      	beq.n	80046ce <_printf_i+0x1a6>
 8004636:	4616      	mov	r6, r2
 8004638:	fbb5 f1f3 	udiv	r1, r5, r3
 800463c:	fb03 5711 	mls	r7, r3, r1, r5
 8004640:	5dc7      	ldrb	r7, [r0, r7]
 8004642:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004646:	462f      	mov	r7, r5
 8004648:	42bb      	cmp	r3, r7
 800464a:	460d      	mov	r5, r1
 800464c:	d9f4      	bls.n	8004638 <_printf_i+0x110>
 800464e:	2b08      	cmp	r3, #8
 8004650:	d10b      	bne.n	800466a <_printf_i+0x142>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	07df      	lsls	r7, r3, #31
 8004656:	d508      	bpl.n	800466a <_printf_i+0x142>
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	6861      	ldr	r1, [r4, #4]
 800465c:	4299      	cmp	r1, r3
 800465e:	bfde      	ittt	le
 8004660:	2330      	movle	r3, #48	@ 0x30
 8004662:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004666:	f106 36ff 	addle.w	r6, r6, #4294967295
 800466a:	1b92      	subs	r2, r2, r6
 800466c:	6122      	str	r2, [r4, #16]
 800466e:	f8cd a000 	str.w	sl, [sp]
 8004672:	464b      	mov	r3, r9
 8004674:	aa03      	add	r2, sp, #12
 8004676:	4621      	mov	r1, r4
 8004678:	4640      	mov	r0, r8
 800467a:	f7ff fee7 	bl	800444c <_printf_common>
 800467e:	3001      	adds	r0, #1
 8004680:	d14a      	bne.n	8004718 <_printf_i+0x1f0>
 8004682:	f04f 30ff 	mov.w	r0, #4294967295
 8004686:	b004      	add	sp, #16
 8004688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f043 0320 	orr.w	r3, r3, #32
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	4832      	ldr	r0, [pc, #200]	@ (8004760 <_printf_i+0x238>)
 8004696:	2778      	movs	r7, #120	@ 0x78
 8004698:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	6831      	ldr	r1, [r6, #0]
 80046a0:	061f      	lsls	r7, r3, #24
 80046a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80046a6:	d402      	bmi.n	80046ae <_printf_i+0x186>
 80046a8:	065f      	lsls	r7, r3, #25
 80046aa:	bf48      	it	mi
 80046ac:	b2ad      	uxthmi	r5, r5
 80046ae:	6031      	str	r1, [r6, #0]
 80046b0:	07d9      	lsls	r1, r3, #31
 80046b2:	bf44      	itt	mi
 80046b4:	f043 0320 	orrmi.w	r3, r3, #32
 80046b8:	6023      	strmi	r3, [r4, #0]
 80046ba:	b11d      	cbz	r5, 80046c4 <_printf_i+0x19c>
 80046bc:	2310      	movs	r3, #16
 80046be:	e7ad      	b.n	800461c <_printf_i+0xf4>
 80046c0:	4826      	ldr	r0, [pc, #152]	@ (800475c <_printf_i+0x234>)
 80046c2:	e7e9      	b.n	8004698 <_printf_i+0x170>
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	f023 0320 	bic.w	r3, r3, #32
 80046ca:	6023      	str	r3, [r4, #0]
 80046cc:	e7f6      	b.n	80046bc <_printf_i+0x194>
 80046ce:	4616      	mov	r6, r2
 80046d0:	e7bd      	b.n	800464e <_printf_i+0x126>
 80046d2:	6833      	ldr	r3, [r6, #0]
 80046d4:	6825      	ldr	r5, [r4, #0]
 80046d6:	6961      	ldr	r1, [r4, #20]
 80046d8:	1d18      	adds	r0, r3, #4
 80046da:	6030      	str	r0, [r6, #0]
 80046dc:	062e      	lsls	r6, r5, #24
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	d501      	bpl.n	80046e6 <_printf_i+0x1be>
 80046e2:	6019      	str	r1, [r3, #0]
 80046e4:	e002      	b.n	80046ec <_printf_i+0x1c4>
 80046e6:	0668      	lsls	r0, r5, #25
 80046e8:	d5fb      	bpl.n	80046e2 <_printf_i+0x1ba>
 80046ea:	8019      	strh	r1, [r3, #0]
 80046ec:	2300      	movs	r3, #0
 80046ee:	6123      	str	r3, [r4, #16]
 80046f0:	4616      	mov	r6, r2
 80046f2:	e7bc      	b.n	800466e <_printf_i+0x146>
 80046f4:	6833      	ldr	r3, [r6, #0]
 80046f6:	1d1a      	adds	r2, r3, #4
 80046f8:	6032      	str	r2, [r6, #0]
 80046fa:	681e      	ldr	r6, [r3, #0]
 80046fc:	6862      	ldr	r2, [r4, #4]
 80046fe:	2100      	movs	r1, #0
 8004700:	4630      	mov	r0, r6
 8004702:	f7fb fd95 	bl	8000230 <memchr>
 8004706:	b108      	cbz	r0, 800470c <_printf_i+0x1e4>
 8004708:	1b80      	subs	r0, r0, r6
 800470a:	6060      	str	r0, [r4, #4]
 800470c:	6863      	ldr	r3, [r4, #4]
 800470e:	6123      	str	r3, [r4, #16]
 8004710:	2300      	movs	r3, #0
 8004712:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004716:	e7aa      	b.n	800466e <_printf_i+0x146>
 8004718:	6923      	ldr	r3, [r4, #16]
 800471a:	4632      	mov	r2, r6
 800471c:	4649      	mov	r1, r9
 800471e:	4640      	mov	r0, r8
 8004720:	47d0      	blx	sl
 8004722:	3001      	adds	r0, #1
 8004724:	d0ad      	beq.n	8004682 <_printf_i+0x15a>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	079b      	lsls	r3, r3, #30
 800472a:	d413      	bmi.n	8004754 <_printf_i+0x22c>
 800472c:	68e0      	ldr	r0, [r4, #12]
 800472e:	9b03      	ldr	r3, [sp, #12]
 8004730:	4298      	cmp	r0, r3
 8004732:	bfb8      	it	lt
 8004734:	4618      	movlt	r0, r3
 8004736:	e7a6      	b.n	8004686 <_printf_i+0x15e>
 8004738:	2301      	movs	r3, #1
 800473a:	4632      	mov	r2, r6
 800473c:	4649      	mov	r1, r9
 800473e:	4640      	mov	r0, r8
 8004740:	47d0      	blx	sl
 8004742:	3001      	adds	r0, #1
 8004744:	d09d      	beq.n	8004682 <_printf_i+0x15a>
 8004746:	3501      	adds	r5, #1
 8004748:	68e3      	ldr	r3, [r4, #12]
 800474a:	9903      	ldr	r1, [sp, #12]
 800474c:	1a5b      	subs	r3, r3, r1
 800474e:	42ab      	cmp	r3, r5
 8004750:	dcf2      	bgt.n	8004738 <_printf_i+0x210>
 8004752:	e7eb      	b.n	800472c <_printf_i+0x204>
 8004754:	2500      	movs	r5, #0
 8004756:	f104 0619 	add.w	r6, r4, #25
 800475a:	e7f5      	b.n	8004748 <_printf_i+0x220>
 800475c:	080048f5 	.word	0x080048f5
 8004760:	08004906 	.word	0x08004906

08004764 <memmove>:
 8004764:	4288      	cmp	r0, r1
 8004766:	b510      	push	{r4, lr}
 8004768:	eb01 0402 	add.w	r4, r1, r2
 800476c:	d902      	bls.n	8004774 <memmove+0x10>
 800476e:	4284      	cmp	r4, r0
 8004770:	4623      	mov	r3, r4
 8004772:	d807      	bhi.n	8004784 <memmove+0x20>
 8004774:	1e43      	subs	r3, r0, #1
 8004776:	42a1      	cmp	r1, r4
 8004778:	d008      	beq.n	800478c <memmove+0x28>
 800477a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800477e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004782:	e7f8      	b.n	8004776 <memmove+0x12>
 8004784:	4402      	add	r2, r0
 8004786:	4601      	mov	r1, r0
 8004788:	428a      	cmp	r2, r1
 800478a:	d100      	bne.n	800478e <memmove+0x2a>
 800478c:	bd10      	pop	{r4, pc}
 800478e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004796:	e7f7      	b.n	8004788 <memmove+0x24>

08004798 <_sbrk_r>:
 8004798:	b538      	push	{r3, r4, r5, lr}
 800479a:	4d06      	ldr	r5, [pc, #24]	@ (80047b4 <_sbrk_r+0x1c>)
 800479c:	2300      	movs	r3, #0
 800479e:	4604      	mov	r4, r0
 80047a0:	4608      	mov	r0, r1
 80047a2:	602b      	str	r3, [r5, #0]
 80047a4:	f7fd f860 	bl	8001868 <_sbrk>
 80047a8:	1c43      	adds	r3, r0, #1
 80047aa:	d102      	bne.n	80047b2 <_sbrk_r+0x1a>
 80047ac:	682b      	ldr	r3, [r5, #0]
 80047ae:	b103      	cbz	r3, 80047b2 <_sbrk_r+0x1a>
 80047b0:	6023      	str	r3, [r4, #0]
 80047b2:	bd38      	pop	{r3, r4, r5, pc}
 80047b4:	20000270 	.word	0x20000270

080047b8 <memcpy>:
 80047b8:	440a      	add	r2, r1
 80047ba:	4291      	cmp	r1, r2
 80047bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80047c0:	d100      	bne.n	80047c4 <memcpy+0xc>
 80047c2:	4770      	bx	lr
 80047c4:	b510      	push	{r4, lr}
 80047c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ce:	4291      	cmp	r1, r2
 80047d0:	d1f9      	bne.n	80047c6 <memcpy+0xe>
 80047d2:	bd10      	pop	{r4, pc}

080047d4 <_realloc_r>:
 80047d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d8:	4607      	mov	r7, r0
 80047da:	4614      	mov	r4, r2
 80047dc:	460d      	mov	r5, r1
 80047de:	b921      	cbnz	r1, 80047ea <_realloc_r+0x16>
 80047e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047e4:	4611      	mov	r1, r2
 80047e6:	f7ff bc4d 	b.w	8004084 <_malloc_r>
 80047ea:	b92a      	cbnz	r2, 80047f8 <_realloc_r+0x24>
 80047ec:	f7ff fbde 	bl	8003fac <_free_r>
 80047f0:	4625      	mov	r5, r4
 80047f2:	4628      	mov	r0, r5
 80047f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047f8:	f000 f81a 	bl	8004830 <_malloc_usable_size_r>
 80047fc:	4284      	cmp	r4, r0
 80047fe:	4606      	mov	r6, r0
 8004800:	d802      	bhi.n	8004808 <_realloc_r+0x34>
 8004802:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004806:	d8f4      	bhi.n	80047f2 <_realloc_r+0x1e>
 8004808:	4621      	mov	r1, r4
 800480a:	4638      	mov	r0, r7
 800480c:	f7ff fc3a 	bl	8004084 <_malloc_r>
 8004810:	4680      	mov	r8, r0
 8004812:	b908      	cbnz	r0, 8004818 <_realloc_r+0x44>
 8004814:	4645      	mov	r5, r8
 8004816:	e7ec      	b.n	80047f2 <_realloc_r+0x1e>
 8004818:	42b4      	cmp	r4, r6
 800481a:	4622      	mov	r2, r4
 800481c:	4629      	mov	r1, r5
 800481e:	bf28      	it	cs
 8004820:	4632      	movcs	r2, r6
 8004822:	f7ff ffc9 	bl	80047b8 <memcpy>
 8004826:	4629      	mov	r1, r5
 8004828:	4638      	mov	r0, r7
 800482a:	f7ff fbbf 	bl	8003fac <_free_r>
 800482e:	e7f1      	b.n	8004814 <_realloc_r+0x40>

08004830 <_malloc_usable_size_r>:
 8004830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004834:	1f18      	subs	r0, r3, #4
 8004836:	2b00      	cmp	r3, #0
 8004838:	bfbc      	itt	lt
 800483a:	580b      	ldrlt	r3, [r1, r0]
 800483c:	18c0      	addlt	r0, r0, r3
 800483e:	4770      	bx	lr

08004840 <_init>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr

0800484c <_fini>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr
