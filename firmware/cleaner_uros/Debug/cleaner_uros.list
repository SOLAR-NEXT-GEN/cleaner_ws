
cleaner_uros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b1c8  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e38  0801b3a8  0801b3a8  0001c3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c1e0  0801c1e0  0001e2e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0801c1e0  0801c1e0  0001d1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c1e8  0801c1e8  0001e2e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801c1e8  0801c1e8  0001d1e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801c1f0  0801c1f0  0001d1f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  0801c1f4  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000af20  200002e0  0801c4d4  0001e2e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b200  0801c4d4  0001f200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001e2e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029a8f  00000000  00000000  0001e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a90  00000000  00000000  00047d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f60  00000000  00000000  0004d830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001835  00000000  00000000  0004f790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e3f3  00000000  00000000  00050fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028076  00000000  00000000  0007f3b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001164a0  00000000  00000000  000a742e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001bd8ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009170  00000000  00000000  001bd944  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  001c6ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002e0 	.word	0x200002e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801b390 	.word	0x0801b390

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002e4 	.word	0x200002e4
 800021c:	0801b390 	.word	0x0801b390

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_d2uiz>:
 8000a8c:	004a      	lsls	r2, r1, #1
 8000a8e:	d211      	bcs.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a94:	d211      	bcs.n	8000aba <__aeabi_d2uiz+0x2e>
 8000a96:	d50d      	bpl.n	8000ab4 <__aeabi_d2uiz+0x28>
 8000a98:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d40e      	bmi.n	8000ac0 <__aeabi_d2uiz+0x34>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d102      	bne.n	8000ac6 <__aeabi_d2uiz+0x3a>
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac4:	4770      	bx	lr
 8000ac6:	f04f 0000 	mov.w	r0, #0
 8000aca:	4770      	bx	lr

08000acc <__aeabi_ldivmod>:
 8000acc:	b97b      	cbnz	r3, 8000aee <__aeabi_ldivmod+0x22>
 8000ace:	b972      	cbnz	r2, 8000aee <__aeabi_ldivmod+0x22>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bfbe      	ittt	lt
 8000ad4:	2000      	movlt	r0, #0
 8000ad6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ada:	e006      	blt.n	8000aea <__aeabi_ldivmod+0x1e>
 8000adc:	bf08      	it	eq
 8000ade:	2800      	cmpeq	r0, #0
 8000ae0:	bf1c      	itt	ne
 8000ae2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ae6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aea:	f000 b9d3 	b.w	8000e94 <__aeabi_idiv0>
 8000aee:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000af6:	2900      	cmp	r1, #0
 8000af8:	db09      	blt.n	8000b0e <__aeabi_ldivmod+0x42>
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db1a      	blt.n	8000b34 <__aeabi_ldivmod+0x68>
 8000afe:	f000 f84d 	bl	8000b9c <__udivmoddi4>
 8000b02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0a:	b004      	add	sp, #16
 8000b0c:	4770      	bx	lr
 8000b0e:	4240      	negs	r0, r0
 8000b10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	db1b      	blt.n	8000b50 <__aeabi_ldivmod+0x84>
 8000b18:	f000 f840 	bl	8000b9c <__udivmoddi4>
 8000b1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b24:	b004      	add	sp, #16
 8000b26:	4240      	negs	r0, r0
 8000b28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2c:	4252      	negs	r2, r2
 8000b2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b32:	4770      	bx	lr
 8000b34:	4252      	negs	r2, r2
 8000b36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b3a:	f000 f82f 	bl	8000b9c <__udivmoddi4>
 8000b3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b46:	b004      	add	sp, #16
 8000b48:	4240      	negs	r0, r0
 8000b4a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b4e:	4770      	bx	lr
 8000b50:	4252      	negs	r2, r2
 8000b52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b56:	f000 f821 	bl	8000b9c <__udivmoddi4>
 8000b5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b62:	b004      	add	sp, #16
 8000b64:	4252      	negs	r2, r2
 8000b66:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b988 	b.w	8000e94 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	468e      	mov	lr, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	4688      	mov	r8, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4617      	mov	r7, r2
 8000bb0:	d962      	bls.n	8000c78 <__udivmoddi4+0xdc>
 8000bb2:	fab2 f682 	clz	r6, r2
 8000bb6:	b14e      	cbz	r6, 8000bcc <__udivmoddi4+0x30>
 8000bb8:	f1c6 0320 	rsb	r3, r6, #32
 8000bbc:	fa01 f806 	lsl.w	r8, r1, r6
 8000bc0:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc4:	40b7      	lsls	r7, r6
 8000bc6:	ea43 0808 	orr.w	r8, r3, r8
 8000bca:	40b4      	lsls	r4, r6
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f fc87 	uxth.w	ip, r7
 8000bd4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bd8:	0c23      	lsrs	r3, r4, #16
 8000bda:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bde:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000be2:	fb01 f20c 	mul.w	r2, r1, ip
 8000be6:	429a      	cmp	r2, r3
 8000be8:	d909      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000bf0:	f080 80ea 	bcs.w	8000dc8 <__udivmoddi4+0x22c>
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	f240 80e7 	bls.w	8000dc8 <__udivmoddi4+0x22c>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	443b      	add	r3, r7
 8000bfe:	1a9a      	subs	r2, r3, r2
 8000c00:	b2a3      	uxth	r3, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c12:	459c      	cmp	ip, r3
 8000c14:	d909      	bls.n	8000c2a <__udivmoddi4+0x8e>
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c1c:	f080 80d6 	bcs.w	8000dcc <__udivmoddi4+0x230>
 8000c20:	459c      	cmp	ip, r3
 8000c22:	f240 80d3 	bls.w	8000dcc <__udivmoddi4+0x230>
 8000c26:	443b      	add	r3, r7
 8000c28:	3802      	subs	r0, #2
 8000c2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c2e:	eba3 030c 	sub.w	r3, r3, ip
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11d      	cbz	r5, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40f3      	lsrs	r3, r6
 8000c38:	2200      	movs	r2, #0
 8000c3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d905      	bls.n	8000c52 <__udivmoddi4+0xb6>
 8000c46:	b10d      	cbz	r5, 8000c4c <__udivmoddi4+0xb0>
 8000c48:	e9c5 0100 	strd	r0, r1, [r5]
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	e7f5      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c52:	fab3 f183 	clz	r1, r3
 8000c56:	2900      	cmp	r1, #0
 8000c58:	d146      	bne.n	8000ce8 <__udivmoddi4+0x14c>
 8000c5a:	4573      	cmp	r3, lr
 8000c5c:	d302      	bcc.n	8000c64 <__udivmoddi4+0xc8>
 8000c5e:	4282      	cmp	r2, r0
 8000c60:	f200 8105 	bhi.w	8000e6e <__udivmoddi4+0x2d2>
 8000c64:	1a84      	subs	r4, r0, r2
 8000c66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c6a:	2001      	movs	r0, #1
 8000c6c:	4690      	mov	r8, r2
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	d0e5      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c72:	e9c5 4800 	strd	r4, r8, [r5]
 8000c76:	e7e2      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f000 8090 	beq.w	8000d9e <__udivmoddi4+0x202>
 8000c7e:	fab2 f682 	clz	r6, r2
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f040 80a4 	bne.w	8000dd0 <__udivmoddi4+0x234>
 8000c88:	1a8a      	subs	r2, r1, r2
 8000c8a:	0c03      	lsrs	r3, r0, #16
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	b280      	uxth	r0, r0
 8000c92:	b2bc      	uxth	r4, r7
 8000c94:	2101      	movs	r1, #1
 8000c96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ca2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d907      	bls.n	8000cba <__udivmoddi4+0x11e>
 8000caa:	18fb      	adds	r3, r7, r3
 8000cac:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cb0:	d202      	bcs.n	8000cb8 <__udivmoddi4+0x11c>
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	f200 80e0 	bhi.w	8000e78 <__udivmoddi4+0x2dc>
 8000cb8:	46c4      	mov	ip, r8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cc8:	fb02 f404 	mul.w	r4, r2, r4
 8000ccc:	429c      	cmp	r4, r3
 8000cce:	d907      	bls.n	8000ce0 <__udivmoddi4+0x144>
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x142>
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	f200 80ca 	bhi.w	8000e72 <__udivmoddi4+0x2d6>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	1b1b      	subs	r3, r3, r4
 8000ce2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ce6:	e7a5      	b.n	8000c34 <__udivmoddi4+0x98>
 8000ce8:	f1c1 0620 	rsb	r6, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf2:	431f      	orrs	r7, r3
 8000cf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000cf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000cfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d04:	4323      	orrs	r3, r4
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	fa1f fc87 	uxth.w	ip, r7
 8000d0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000d12:	0c1c      	lsrs	r4, r3, #16
 8000d14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d909      	bls.n	8000d3c <__udivmoddi4+0x1a0>
 8000d28:	193c      	adds	r4, r7, r4
 8000d2a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d2e:	f080 809c 	bcs.w	8000e6a <__udivmoddi4+0x2ce>
 8000d32:	45a6      	cmp	lr, r4
 8000d34:	f240 8099 	bls.w	8000e6a <__udivmoddi4+0x2ce>
 8000d38:	3802      	subs	r0, #2
 8000d3a:	443c      	add	r4, r7
 8000d3c:	eba4 040e 	sub.w	r4, r4, lr
 8000d40:	fa1f fe83 	uxth.w	lr, r3
 8000d44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d48:	fb09 4413 	mls	r4, r9, r3, r4
 8000d4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d54:	45a4      	cmp	ip, r4
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1ce>
 8000d58:	193c      	adds	r4, r7, r4
 8000d5a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d5e:	f080 8082 	bcs.w	8000e66 <__udivmoddi4+0x2ca>
 8000d62:	45a4      	cmp	ip, r4
 8000d64:	d97f      	bls.n	8000e66 <__udivmoddi4+0x2ca>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	443c      	add	r4, r7
 8000d6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d76:	4564      	cmp	r4, ip
 8000d78:	4673      	mov	r3, lr
 8000d7a:	46e1      	mov	r9, ip
 8000d7c:	d362      	bcc.n	8000e44 <__udivmoddi4+0x2a8>
 8000d7e:	d05f      	beq.n	8000e40 <__udivmoddi4+0x2a4>
 8000d80:	b15d      	cbz	r5, 8000d9a <__udivmoddi4+0x1fe>
 8000d82:	ebb8 0203 	subs.w	r2, r8, r3
 8000d86:	eb64 0409 	sbc.w	r4, r4, r9
 8000d8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	431e      	orrs	r6, r3
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e74f      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000d9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000da2:	0c01      	lsrs	r1, r0, #16
 8000da4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000da8:	b280      	uxth	r0, r0
 8000daa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dae:	463b      	mov	r3, r7
 8000db0:	4638      	mov	r0, r7
 8000db2:	463c      	mov	r4, r7
 8000db4:	46b8      	mov	r8, r7
 8000db6:	46be      	mov	lr, r7
 8000db8:	2620      	movs	r6, #32
 8000dba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dbe:	eba2 0208 	sub.w	r2, r2, r8
 8000dc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dc6:	e766      	b.n	8000c96 <__udivmoddi4+0xfa>
 8000dc8:	4601      	mov	r1, r0
 8000dca:	e718      	b.n	8000bfe <__udivmoddi4+0x62>
 8000dcc:	4610      	mov	r0, r2
 8000dce:	e72c      	b.n	8000c2a <__udivmoddi4+0x8e>
 8000dd0:	f1c6 0220 	rsb	r2, r6, #32
 8000dd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000dd8:	40b7      	lsls	r7, r6
 8000dda:	40b1      	lsls	r1, r6
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dea:	b2bc      	uxth	r4, r7
 8000dec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df6:	fb08 f904 	mul.w	r9, r8, r4
 8000dfa:	40b0      	lsls	r0, r6
 8000dfc:	4589      	cmp	r9, r1
 8000dfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e02:	b280      	uxth	r0, r0
 8000e04:	d93e      	bls.n	8000e84 <__udivmoddi4+0x2e8>
 8000e06:	1879      	adds	r1, r7, r1
 8000e08:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e0c:	d201      	bcs.n	8000e12 <__udivmoddi4+0x276>
 8000e0e:	4589      	cmp	r9, r1
 8000e10:	d81f      	bhi.n	8000e52 <__udivmoddi4+0x2b6>
 8000e12:	eba1 0109 	sub.w	r1, r1, r9
 8000e16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e1a:	fb09 f804 	mul.w	r8, r9, r4
 8000e1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e22:	b292      	uxth	r2, r2
 8000e24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e28:	4542      	cmp	r2, r8
 8000e2a:	d229      	bcs.n	8000e80 <__udivmoddi4+0x2e4>
 8000e2c:	18ba      	adds	r2, r7, r2
 8000e2e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e32:	d2c4      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e34:	4542      	cmp	r2, r8
 8000e36:	d2c2      	bcs.n	8000dbe <__udivmoddi4+0x222>
 8000e38:	f1a9 0102 	sub.w	r1, r9, #2
 8000e3c:	443a      	add	r2, r7
 8000e3e:	e7be      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e40:	45f0      	cmp	r8, lr
 8000e42:	d29d      	bcs.n	8000d80 <__udivmoddi4+0x1e4>
 8000e44:	ebbe 0302 	subs.w	r3, lr, r2
 8000e48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	46e1      	mov	r9, ip
 8000e50:	e796      	b.n	8000d80 <__udivmoddi4+0x1e4>
 8000e52:	eba7 0909 	sub.w	r9, r7, r9
 8000e56:	4449      	add	r1, r9
 8000e58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e60:	fb09 f804 	mul.w	r8, r9, r4
 8000e64:	e7db      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e66:	4673      	mov	r3, lr
 8000e68:	e77f      	b.n	8000d6a <__udivmoddi4+0x1ce>
 8000e6a:	4650      	mov	r0, sl
 8000e6c:	e766      	b.n	8000d3c <__udivmoddi4+0x1a0>
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e6fd      	b.n	8000c6e <__udivmoddi4+0xd2>
 8000e72:	443b      	add	r3, r7
 8000e74:	3a02      	subs	r2, #2
 8000e76:	e733      	b.n	8000ce0 <__udivmoddi4+0x144>
 8000e78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e7c:	443b      	add	r3, r7
 8000e7e:	e71c      	b.n	8000cba <__udivmoddi4+0x11e>
 8000e80:	4649      	mov	r1, r9
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x222>
 8000e84:	eba1 0109 	sub.w	r1, r1, r9
 8000e88:	46c4      	mov	ip, r8
 8000e8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e8e:	fb09 f804 	mul.w	r8, r9, r4
 8000e92:	e7c4      	b.n	8000e1e <__udivmoddi4+0x282>

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <PID_CONTROLLER_Init>:
  if (_u > _upper_limit) return _upper_limit;
  else if (_u < _lower_limit) return _lower_limit;
  return (int32_t)_u;
}

void PID_CONTROLLER_Init(PID_CONTROLLER *controller, float _Kp, float _Ki, float _Kd, float _u_max) {
 8000e98:	b480      	push	{r7}
 8000e9a:	b087      	sub	sp, #28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6178      	str	r0, [r7, #20]
 8000ea0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000ea4:	edc7 0a03 	vstr	s1, [r7, #12]
 8000ea8:	ed87 1a02 	vstr	s2, [r7, #8]
 8000eac:	edc7 1a01 	vstr	s3, [r7, #4]
  controller->Kp = _Kp;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	601a      	str	r2, [r3, #0]
  controller->Ki = _Ki;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	605a      	str	r2, [r3, #4]
  controller->Kd = _Kd;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	609a      	str	r2, [r3, #8]
  controller->u_max = _u_max;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	60da      	str	r2, [r3, #12]
  controller->ek_1 = 0;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  controller->ek_2 = 0;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]
  controller->u = 0;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]
}
 8000ee0:	bf00      	nop
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <MDXX_GPIO_init>:
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
	mdxx->mode = 0;
}

void MDXX_GPIO_init(MDXX *mdxx, TIM_HandleTypeDef *htimp, uint16_t timp_chx,
		GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	603b      	str	r3, [r7, #0]
 8000ef8:	4613      	mov	r3, r2
 8000efa:	80fb      	strh	r3, [r7, #6]
	mdxx->htimp = htimp;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	609a      	str	r2, [r3, #8]
	mdxx->timp_chx = timp_chx;
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	88fa      	ldrh	r2, [r7, #6]
 8000f06:	819a      	strh	r2, [r3, #12]
	PWM_init(&(mdxx->pwm), htimp, timp_chx);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	3328      	adds	r3, #40	@ 0x28
 8000f0c:	88fa      	ldrh	r2, [r7, #6]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f8e9 	bl	80010e8 <PWM_init>
	mdxx->GPIOx = GPIOx;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	645a      	str	r2, [r3, #68]	@ 0x44
	mdxx->GPIO_Pin = GPIO_Pin;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	8b3a      	ldrh	r2, [r7, #24]
 8000f20:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
	mdxx->mode = 1;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f883 204a 	strb.w	r2, [r3, #74]	@ 0x4a
}
 8000f2c:	bf00      	nop
 8000f2e:	3710      	adds	r7, #16
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <MDXX_set_range>:
			mdxx->cmd = fabs(duty);
		}
	}
}

void MDXX_set_range(MDXX *mdxx, float freq, float duty) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f40:	edc7 0a01 	vstr	s1, [r7, #4]
	if (mdxx->mode == 0) {
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d15f      	bne.n	800100e <MDXX_set_range+0xda>
		if (duty == 0) {
 8000f4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f5a:	d115      	bne.n	8000f88 <MDXX_set_range+0x54>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	3310      	adds	r3, #16
 8000f60:	eddf 0a5f 	vldr	s1, [pc, #380]	@ 80010e0 <MDXX_set_range+0x1ac>
 8000f64:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f8e1 	bl	8001130 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3328      	adds	r3, #40	@ 0x28
 8000f72:	eddf 0a5b 	vldr	s1, [pc, #364]	@ 80010e0 <MDXX_set_range+0x1ac>
 8000f76:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 f8d8 	bl	8001130 <PWM_write_range>
			mdxx->cmd = 0;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	2200      	movs	r2, #0
 8000f84:	641a      	str	r2, [r3, #64]	@ 0x40
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
			mdxx->cmd = fabs(duty);
		}
	}
}
 8000f86:	e0a6      	b.n	80010d6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8000f88:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f8c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f94:	dd1a      	ble.n	8000fcc <MDXX_set_range+0x98>
			PWM_write_range(&(mdxx->dir), freq, 0);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3310      	adds	r3, #16
 8000f9a:	eddf 0a51 	vldr	s1, [pc, #324]	@ 80010e0 <MDXX_set_range+0x1ac>
 8000f9e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f8c4 	bl	8001130 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	3328      	adds	r3, #40	@ 0x28
 8000fac:	edd7 0a01 	vldr	s1, [r7, #4]
 8000fb0:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f000 f8bb 	bl	8001130 <PWM_write_range>
			mdxx->cmd = duty;
 8000fba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fc2:	ee17 2a90 	vmov	r2, s15
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000fca:	e084      	b.n	80010d6 <MDXX_set_range+0x1a2>
			PWM_write_range(&(mdxx->dir), freq, 100);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3310      	adds	r3, #16
 8000fd0:	eddf 0a44 	vldr	s1, [pc, #272]	@ 80010e4 <MDXX_set_range+0x1b0>
 8000fd4:	ed97 0a02 	vldr	s0, [r7, #8]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 f8a9 	bl	8001130 <PWM_write_range>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3328      	adds	r3, #40	@ 0x28
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	eef0 7ae7 	vabs.f32	s15, s15
 8000fea:	eef0 0a67 	vmov.f32	s1, s15
 8000fee:	ed97 0a02 	vldr	s0, [r7, #8]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f89c 	bl	8001130 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 8000ff8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ffc:	eef0 7ae7 	vabs.f32	s15, s15
 8001000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001004:	ee17 2a90 	vmov	r2, s15
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800100c:	e063      	b.n	80010d6 <MDXX_set_range+0x1a2>
	} else if (mdxx->mode == 1) {
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 8001014:	2b01      	cmp	r3, #1
 8001016:	d15e      	bne.n	80010d6 <MDXX_set_range+0x1a2>
		if (duty == 0) {
 8001018:	edd7 7a01 	vldr	s15, [r7, #4]
 800101c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	d115      	bne.n	8001052 <MDXX_set_range+0x11e>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8001030:	2200      	movs	r2, #0
 8001032:	4619      	mov	r1, r3
 8001034:	f002 fd4a 	bl	8003acc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, 0);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3328      	adds	r3, #40	@ 0x28
 800103c:	eddf 0a28 	vldr	s1, [pc, #160]	@ 80010e0 <MDXX_set_range+0x1ac>
 8001040:	ed97 0a02 	vldr	s0, [r7, #8]
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f873 	bl	8001130 <PWM_write_range>
			mdxx->cmd = 0;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2200      	movs	r2, #0
 800104e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001050:	e041      	b.n	80010d6 <MDXX_set_range+0x1a2>
		} else if (duty > 0) {
 8001052:	edd7 7a01 	vldr	s15, [r7, #4]
 8001056:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	dd1a      	ble.n	8001096 <MDXX_set_range+0x162>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 0);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800106a:	2200      	movs	r2, #0
 800106c:	4619      	mov	r1, r3
 800106e:	f002 fd2d 	bl	8003acc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, duty);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	3328      	adds	r3, #40	@ 0x28
 8001076:	edd7 0a01 	vldr	s1, [r7, #4]
 800107a:	ed97 0a02 	vldr	s0, [r7, #8]
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f856 	bl	8001130 <PWM_write_range>
			mdxx->cmd = duty;
 8001084:	edd7 7a01 	vldr	s15, [r7, #4]
 8001088:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800108c:	ee17 2a90 	vmov	r2, s15
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001094:	e01f      	b.n	80010d6 <MDXX_set_range+0x1a2>
			HAL_GPIO_WritePin(mdxx->GPIOx, mdxx->GPIO_Pin, 1);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80010a0:	2201      	movs	r2, #1
 80010a2:	4619      	mov	r1, r3
 80010a4:	f002 fd12 	bl	8003acc <HAL_GPIO_WritePin>
			PWM_write_range(&(mdxx->pwm), freq, fabs(duty));
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3328      	adds	r3, #40	@ 0x28
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	eef0 7ae7 	vabs.f32	s15, s15
 80010b4:	eef0 0a67 	vmov.f32	s1, s15
 80010b8:	ed97 0a02 	vldr	s0, [r7, #8]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 f837 	bl	8001130 <PWM_write_range>
			mdxx->cmd = fabs(duty);
 80010c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c6:	eef0 7ae7 	vabs.f32	s15, s15
 80010ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010ce:	ee17 2a90 	vmov	r2, s15
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010d6:	bf00      	nop
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	00000000 	.word	0x00000000
 80010e4:	42c80000 	.word	0x42c80000

080010e8 <PWM_init>:
 *      Author: beamk
 */

#include "PWM.h"

void PWM_init(PWM* pwm, TIM_HandleTypeDef* htimx, uint16_t tim_chx){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	4613      	mov	r3, r2
 80010f4:	80fb      	strh	r3, [r7, #6]
	pwm->CPU_FREQ = 170e6;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4a0b      	ldr	r2, [pc, #44]	@ (8001128 <PWM_init+0x40>)
 80010fa:	611a      	str	r2, [r3, #16]
	pwm->htimx = htimx;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	601a      	str	r2, [r3, #0]
	pwm->tim_chx = tim_chx;
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	88fa      	ldrh	r2, [r7, #6]
 8001106:	809a      	strh	r2, [r3, #4]
	pwm->OC = 0;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	2200      	movs	r2, #0
 800110c:	615a      	str	r2, [r3, #20]
	HAL_TIM_Base_Start(htimx);
 800110e:	68b8      	ldr	r0, [r7, #8]
 8001110:	f005 feec 	bl	8006eec <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(htimx, tim_chx);
 8001114:	88fb      	ldrh	r3, [r7, #6]
 8001116:	4619      	mov	r1, r3
 8001118:	68b8      	ldr	r0, [r7, #8]
 800111a:	f006 f827 	bl	800716c <HAL_TIM_PWM_Start>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	0a21fe80 	.word	0x0a21fe80
 800112c:	00000000 	.word	0x00000000

08001130 <PWM_write_range>:
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}

void PWM_write_range(PWM* pwm, float freq, float duty){
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	ed87 0a02 	vstr	s0, [r7, #8]
 800113c:	edc7 0a01 	vstr	s1, [r7, #4]
    if (freq == 0) {
 8001140:	edd7 7a02 	vldr	s15, [r7, #8]
 8001144:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	d137      	bne.n	80011be <PWM_write_range+0x8e>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	889b      	ldrh	r3, [r3, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d105      	bne.n	8001162 <PWM_write_range+0x32>
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2200      	movs	r2, #0
 800115e:	635a      	str	r2, [r3, #52]	@ 0x34
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
    }
}
 8001160:	e0e1      	b.n	8001326 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, 0);
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	889b      	ldrh	r3, [r3, #4]
 8001166:	2b04      	cmp	r3, #4
 8001168:	d105      	bne.n	8001176 <PWM_write_range+0x46>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	2300      	movs	r3, #0
 8001172:	6393      	str	r3, [r2, #56]	@ 0x38
 8001174:	e0d7      	b.n	8001326 <PWM_write_range+0x1f6>
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	889b      	ldrh	r3, [r3, #4]
 800117a:	2b08      	cmp	r3, #8
 800117c:	d105      	bne.n	800118a <PWM_write_range+0x5a>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001188:	e0cd      	b.n	8001326 <PWM_write_range+0x1f6>
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	889b      	ldrh	r3, [r3, #4]
 800118e:	2b0c      	cmp	r3, #12
 8001190:	d105      	bne.n	800119e <PWM_write_range+0x6e>
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	2300      	movs	r3, #0
 800119a:	6413      	str	r3, [r2, #64]	@ 0x40
 800119c:	e0c3      	b.n	8001326 <PWM_write_range+0x1f6>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	889b      	ldrh	r3, [r3, #4]
 80011a2:	2b10      	cmp	r3, #16
 80011a4:	d105      	bne.n	80011b2 <PWM_write_range+0x82>
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	2300      	movs	r3, #0
 80011ae:	6493      	str	r3, [r2, #72]	@ 0x48
 80011b0:	e0b9      	b.n	8001326 <PWM_write_range+0x1f6>
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80011bc:	e0b3      	b.n	8001326 <PWM_write_range+0x1f6>
    	pwm->period_cyc = (uint32_t) (pwm->CPU_FREQ / freq);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80011ca:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80011d6:	ee17 2a90 	vmov	r2, s15
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	609a      	str	r2, [r3, #8]
    	pwm->prescaler = (uint16_t) ((pwm->period_cyc + 65535 - 1) / 65535) - 1; // Subtracting 1 since prescaler is zero-based
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 80011e6:	33fe      	adds	r3, #254	@ 0xfe
 80011e8:	4a53      	ldr	r2, [pc, #332]	@ (8001338 <PWM_write_range+0x208>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0bdb      	lsrs	r3, r3, #15
 80011f0:	b29b      	uxth	r3, r3
 80011f2:	3b01      	subs	r3, #1
 80011f4:	b29a      	uxth	r2, r3
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	819a      	strh	r2, [r3, #12]
    	pwm->overflow = (uint16_t) ((pwm->CPU_FREQ / (float)(pwm->prescaler + 1) / freq) - 1);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	691b      	ldr	r3, [r3, #16]
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	899b      	ldrh	r3, [r3, #12]
 800120a:	3301      	adds	r3, #1
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001214:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001218:	ed97 7a02 	vldr	s14, [r7, #8]
 800121c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001220:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001224:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001228:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122c:	ee17 3a90 	vmov	r3, s15
 8001230:	b29a      	uxth	r2, r3
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	81da      	strh	r2, [r3, #14]
    	pwm->OC = (uint16_t) (pwm->overflow * fabs(duty) / 65535.0);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	89db      	ldrh	r3, [r3, #14]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f9aa 	bl	8000594 <__aeabi_i2d>
 8001240:	4604      	mov	r4, r0
 8001242:	460d      	mov	r5, r1
 8001244:	edd7 7a01 	vldr	s15, [r7, #4]
 8001248:	eef0 7ae7 	vabs.f32	s15, s15
 800124c:	ee17 0a90 	vmov	r0, s15
 8001250:	f7ff f9b2 	bl	80005b8 <__aeabi_f2d>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4620      	mov	r0, r4
 800125a:	4629      	mov	r1, r5
 800125c:	f7ff fa04 	bl	8000668 <__aeabi_dmul>
 8001260:	4602      	mov	r2, r0
 8001262:	460b      	mov	r3, r1
 8001264:	4610      	mov	r0, r2
 8001266:	4619      	mov	r1, r3
 8001268:	a331      	add	r3, pc, #196	@ (adr r3, 8001330 <PWM_write_range+0x200>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff fb25 	bl	80008bc <__aeabi_ddiv>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fc07 	bl	8000a8c <__aeabi_d2uiz>
 800127e:	4603      	mov	r3, r0
 8001280:	b29b      	uxth	r3, r3
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	615a      	str	r2, [r3, #20]
        __HAL_TIM_SET_PRESCALER(pwm->htimx, pwm->prescaler);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	899a      	ldrh	r2, [r3, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	629a      	str	r2, [r3, #40]	@ 0x28
        __HAL_TIM_SET_AUTORELOAD(pwm->htimx, pwm->overflow);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	89da      	ldrh	r2, [r3, #14]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	89da      	ldrh	r2, [r3, #14]
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60da      	str	r2, [r3, #12]
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	889b      	ldrh	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d106      	bne.n	80012c0 <PWM_write_range+0x190>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	6952      	ldr	r2, [r2, #20]
 80012bc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012be:	e032      	b.n	8001326 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d106      	bne.n	80012d6 <PWM_write_range+0x1a6>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	695b      	ldr	r3, [r3, #20]
 80012d2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80012d4:	e027      	b.n	8001326 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	889b      	ldrh	r3, [r3, #4]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d106      	bne.n	80012ec <PWM_write_range+0x1bc>
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80012ea:	e01c      	b.n	8001326 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	889b      	ldrh	r3, [r3, #4]
 80012f0:	2b0c      	cmp	r3, #12
 80012f2:	d106      	bne.n	8001302 <PWM_write_range+0x1d2>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001300:	e011      	b.n	8001326 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	889b      	ldrh	r3, [r3, #4]
 8001306:	2b10      	cmp	r3, #16
 8001308:	d106      	bne.n	8001318 <PWM_write_range+0x1e8>
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001316:	e006      	b.n	8001326 <PWM_write_range+0x1f6>
        __HAL_TIM_SET_COMPARE(pwm->htimx, pwm->tim_chx, pwm->OC);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 8001324:	e7ff      	b.n	8001326 <PWM_write_range+0x1f6>
 8001326:	bf00      	nop
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bdb0      	pop	{r4, r5, r7, pc}
 800132e:	bf00      	nop
 8001330:	00000000 	.word	0x00000000
 8001334:	40efffe0 	.word	0x40efffe0
 8001338:	80008001 	.word	0x80008001

0800133c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <MX_FREERTOS_Init+0x18>)
 8001342:	2100      	movs	r1, #0
 8001344:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_FREERTOS_Init+0x1c>)
 8001346:	f008 ffb3 	bl	800a2b0 <osThreadNew>
 800134a:	4603      	mov	r3, r0
 800134c:	4a03      	ldr	r2, [pc, #12]	@ (800135c <MX_FREERTOS_Init+0x20>)
 800134e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0801b440 	.word	0x0801b440
 8001358:	08001ea5 	.word	0x08001ea5
 800135c:	200002fc 	.word	0x200002fc

08001360 <cleaner_begin>:
MDXX motor4;

PID_CONTROLLER pid1;
PID_CONTROLLER pid2;

void cleaner_begin() {
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af02      	add	r7, sp, #8
	MDXX_GPIO_init(&motor1, MOTOR1_TIM, MOTOR1_TIM_CH, MOTOR1_GPIOx, MOTOR1_GPIO_Pin);
 8001366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001370:	2204      	movs	r2, #4
 8001372:	491c      	ldr	r1, [pc, #112]	@ (80013e4 <cleaner_begin+0x84>)
 8001374:	481c      	ldr	r0, [pc, #112]	@ (80013e8 <cleaner_begin+0x88>)
 8001376:	f7ff fdb9 	bl	8000eec <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor2, MOTOR2_TIM, MOTOR2_TIM_CH, MOTOR2_GPIOx, MOTOR2_GPIO_Pin);
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8001382:	2200      	movs	r2, #0
 8001384:	4917      	ldr	r1, [pc, #92]	@ (80013e4 <cleaner_begin+0x84>)
 8001386:	4819      	ldr	r0, [pc, #100]	@ (80013ec <cleaner_begin+0x8c>)
 8001388:	f7ff fdb0 	bl	8000eec <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor3, MOTOR3_TIM, MOTOR3_TIM_CH, MOTOR3_GPIOx, MOTOR3_GPIO_Pin);
 800138c:	2302      	movs	r3, #2
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	4b17      	ldr	r3, [pc, #92]	@ (80013f0 <cleaner_begin+0x90>)
 8001392:	220c      	movs	r2, #12
 8001394:	4913      	ldr	r1, [pc, #76]	@ (80013e4 <cleaner_begin+0x84>)
 8001396:	4817      	ldr	r0, [pc, #92]	@ (80013f4 <cleaner_begin+0x94>)
 8001398:	f7ff fda8 	bl	8000eec <MDXX_GPIO_init>
	MDXX_GPIO_init(&motor4, MOTOR3_TIM, MOTOR3_TIM_CH, MOTOR3_GPIOx, MOTOR3_GPIO_Pin);
 800139c:	2302      	movs	r3, #2
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	4b13      	ldr	r3, [pc, #76]	@ (80013f0 <cleaner_begin+0x90>)
 80013a2:	220c      	movs	r2, #12
 80013a4:	490f      	ldr	r1, [pc, #60]	@ (80013e4 <cleaner_begin+0x84>)
 80013a6:	4814      	ldr	r0, [pc, #80]	@ (80013f8 <cleaner_begin+0x98>)
 80013a8:	f7ff fda0 	bl	8000eec <MDXX_GPIO_init>

	PID_CONTROLLER_Init(&pid1, 10000, 500, 0, 65535);
 80013ac:	eddf 1a13 	vldr	s3, [pc, #76]	@ 80013fc <cleaner_begin+0x9c>
 80013b0:	ed9f 1a13 	vldr	s2, [pc, #76]	@ 8001400 <cleaner_begin+0xa0>
 80013b4:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8001404 <cleaner_begin+0xa4>
 80013b8:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8001408 <cleaner_begin+0xa8>
 80013bc:	4813      	ldr	r0, [pc, #76]	@ (800140c <cleaner_begin+0xac>)
 80013be:	f7ff fd6b 	bl	8000e98 <PID_CONTROLLER_Init>
	PID_CONTROLLER_Init(&pid2, 10000, 500, 0, 65535);
 80013c2:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 80013fc <cleaner_begin+0x9c>
 80013c6:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8001400 <cleaner_begin+0xa0>
 80013ca:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001404 <cleaner_begin+0xa4>
 80013ce:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8001408 <cleaner_begin+0xa8>
 80013d2:	480f      	ldr	r0, [pc, #60]	@ (8001410 <cleaner_begin+0xb0>)
 80013d4:	f7ff fd60 	bl	8000e98 <PID_CONTROLLER_Init>

	HAL_TIM_Base_Start_IT(CONTROL_TIM);
 80013d8:	480e      	ldr	r0, [pc, #56]	@ (8001414 <cleaner_begin+0xb4>)
 80013da:	f005 fdf7 	bl	8006fcc <HAL_TIM_Base_Start_IT>
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20004ab0 	.word	0x20004ab0
 80013e8:	2000323c 	.word	0x2000323c
 80013ec:	20003288 	.word	0x20003288
 80013f0:	48000800 	.word	0x48000800
 80013f4:	200032d4 	.word	0x200032d4
 80013f8:	20003320 	.word	0x20003320
 80013fc:	477fff00 	.word	0x477fff00
 8001400:	00000000 	.word	0x00000000
 8001404:	43fa0000 	.word	0x43fa0000
 8001408:	461c4000 	.word	0x461c4000
 800140c:	2000336c 	.word	0x2000336c
 8001410:	20003398 	.word	0x20003398
 8001414:	20004a64 	.word	0x20004a64

08001418 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	@ 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001424:	f00a f818 	bl	800b458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001428:	4b5a      	ldr	r3, [pc, #360]	@ (8001594 <pvPortMallocMicroROS+0x17c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8001430:	f000 f986 	bl	8001740 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001434:	4b58      	ldr	r3, [pc, #352]	@ (8001598 <pvPortMallocMicroROS+0x180>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4013      	ands	r3, r2
 800143c:	2b00      	cmp	r3, #0
 800143e:	f040 8090 	bne.w	8001562 <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d01e      	beq.n	8001486 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001448:	2208      	movs	r2, #8
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	2b00      	cmp	r3, #0
 8001458:	d015      	beq.n	8001486 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f023 0307 	bic.w	r3, r3, #7
 8001460:	3308      	adds	r3, #8
 8001462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	2b00      	cmp	r3, #0
 800146c:	d00b      	beq.n	8001486 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800146e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001472:	f383 8811 	msr	BASEPRI, r3
 8001476:	f3bf 8f6f 	isb	sy
 800147a:	f3bf 8f4f 	dsb	sy
 800147e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001480:	bf00      	nop
 8001482:	bf00      	nop
 8001484:	e7fd      	b.n	8001482 <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d06a      	beq.n	8001562 <pvPortMallocMicroROS+0x14a>
 800148c:	4b43      	ldr	r3, [pc, #268]	@ (800159c <pvPortMallocMicroROS+0x184>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	d865      	bhi.n	8001562 <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001496:	4b42      	ldr	r3, [pc, #264]	@ (80015a0 <pvPortMallocMicroROS+0x188>)
 8001498:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800149a:	4b41      	ldr	r3, [pc, #260]	@ (80015a0 <pvPortMallocMicroROS+0x188>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014a0:	e004      	b.n	80014ac <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80014a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80014ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d903      	bls.n	80014be <pvPortMallocMicroROS+0xa6>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d1f1      	bne.n	80014a2 <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80014be:	4b35      	ldr	r3, [pc, #212]	@ (8001594 <pvPortMallocMicroROS+0x17c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d04c      	beq.n	8001562 <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2208      	movs	r2, #8
 80014ce:	4413      	add	r3, r2
 80014d0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80014d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1ad2      	subs	r2, r2, r3
 80014e2:	2308      	movs	r3, #8
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d920      	bls.n	800152c <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80014ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 80014fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001500:	f383 8811 	msr	BASEPRI, r3
 8001504:	f3bf 8f6f 	isb	sy
 8001508:	f3bf 8f4f 	dsb	sy
 800150c:	613b      	str	r3, [r7, #16]
}
 800150e:	bf00      	nop
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	1ad2      	subs	r2, r2, r3
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001526:	69b8      	ldr	r0, [r7, #24]
 8001528:	f000 f96c 	bl	8001804 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <pvPortMallocMicroROS+0x184>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	4a19      	ldr	r2, [pc, #100]	@ (800159c <pvPortMallocMicroROS+0x184>)
 8001538:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <pvPortMallocMicroROS+0x184>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <pvPortMallocMicroROS+0x18c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d203      	bcs.n	800154e <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <pvPortMallocMicroROS+0x184>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a16      	ldr	r2, [pc, #88]	@ (80015a4 <pvPortMallocMicroROS+0x18c>)
 800154c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800154e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001550:	685a      	ldr	r2, [r3, #4]
 8001552:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <pvPortMallocMicroROS+0x180>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	431a      	orrs	r2, r3
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800155c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001562:	f009 ff87 	bl	800b474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	2b00      	cmp	r3, #0
 800156e:	d00b      	beq.n	8001588 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8001570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001574:	f383 8811 	msr	BASEPRI, r3
 8001578:	f3bf 8f6f 	isb	sy
 800157c:	f3bf 8f4f 	dsb	sy
 8001580:	60fb      	str	r3, [r7, #12]
}
 8001582:	bf00      	nop
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8001588:	69fb      	ldr	r3, [r7, #28]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3728      	adds	r7, #40	@ 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20003fcc 	.word	0x20003fcc
 8001598:	20003fd8 	.word	0x20003fd8
 800159c:	20003fd0 	.word	0x20003fd0
 80015a0:	20003fc4 	.word	0x20003fc4
 80015a4:	20003fd4 	.word	0x20003fd4

080015a8 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d04a      	beq.n	8001650 <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80015ba:	2308      	movs	r3, #8
 80015bc:	425b      	negs	r3, r3
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4413      	add	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <vPortFreeMicroROS+0xb0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d10b      	bne.n	80015ee <vPortFreeMicroROS+0x46>
	__asm volatile
 80015d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015da:	f383 8811 	msr	BASEPRI, r3
 80015de:	f3bf 8f6f 	isb	sy
 80015e2:	f3bf 8f4f 	dsb	sy
 80015e6:	60fb      	str	r3, [r7, #12]
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	e7fd      	b.n	80015ea <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d00b      	beq.n	800160e <vPortFreeMicroROS+0x66>
	__asm volatile
 80015f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015fa:	f383 8811 	msr	BASEPRI, r3
 80015fe:	f3bf 8f6f 	isb	sy
 8001602:	f3bf 8f4f 	dsb	sy
 8001606:	60bb      	str	r3, [r7, #8]
}
 8001608:	bf00      	nop
 800160a:	bf00      	nop
 800160c:	e7fd      	b.n	800160a <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	4b11      	ldr	r3, [pc, #68]	@ (8001658 <vPortFreeMicroROS+0xb0>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d019      	beq.n	8001650 <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d115      	bne.n	8001650 <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4b0b      	ldr	r3, [pc, #44]	@ (8001658 <vPortFreeMicroROS+0xb0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001634:	f009 ff10 	bl	800b458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	4b07      	ldr	r3, [pc, #28]	@ (800165c <vPortFreeMicroROS+0xb4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4413      	add	r3, r2
 8001642:	4a06      	ldr	r2, [pc, #24]	@ (800165c <vPortFreeMicroROS+0xb4>)
 8001644:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001646:	6938      	ldr	r0, [r7, #16]
 8001648:	f000 f8dc 	bl	8001804 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800164c:	f009 ff12 	bl	800b474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001650:	bf00      	nop
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20003fd8 	.word	0x20003fd8
 800165c:	20003fd0 	.word	0x20003fd0

08001660 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8001660:	b480      	push	{r7}
 8001662:	b087      	sub	sp, #28
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 800166c:	2308      	movs	r3, #8
 800166e:	425b      	negs	r3, r3
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <getBlockSize+0x38>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	43db      	mvns	r3, r3
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

	return count;
 8001688:	68fb      	ldr	r3, [r7, #12]
}
 800168a:	4618      	mov	r0, r3
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20003fd8 	.word	0x20003fd8

0800169c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80016a6:	f009 fed7 	bl	800b458 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80016aa:	6838      	ldr	r0, [r7, #0]
 80016ac:	f7ff feb4 	bl	8001418 <pvPortMallocMicroROS>
 80016b0:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d017      	beq.n	80016e8 <pvPortReallocMicroROS+0x4c>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d014      	beq.n	80016e8 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff ffce 	bl	8001660 <getBlockSize>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2208      	movs	r2, #8
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d201      	bcs.n	80016d8 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	68b8      	ldr	r0, [r7, #8]
 80016de:	f019 f818 	bl	801a712 <memcpy>

		vPortFreeMicroROS(pv);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff60 	bl	80015a8 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 80016e8:	f009 fec4 	bl	800b474 <xTaskResumeAll>

	return newmem;
 80016ec:	68bb      	ldr	r3, [r7, #8]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	6078      	str	r0, [r7, #4]
 80016fe:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001700:	f009 feaa 	bl	800b458 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800170e:	6978      	ldr	r0, [r7, #20]
 8001710:	f7ff fe82 	bl	8001418 <pvPortMallocMicroROS>
 8001714:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	613b      	str	r3, [r7, #16]

  	while(count--)
 800171a:	e004      	b.n	8001726 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1c5a      	adds	r2, r3, #1
 8001720:	613a      	str	r2, [r7, #16]
 8001722:	2200      	movs	r2, #0
 8001724:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	1e5a      	subs	r2, r3, #1
 800172a:	617a      	str	r2, [r7, #20]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f5      	bne.n	800171c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001730:	f009 fea0 	bl	800b474 <xTaskResumeAll>
  	return mem;
 8001734:	68fb      	ldr	r3, [r7, #12]
}
 8001736:	4618      	mov	r0, r3
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001746:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800174a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800174c:	4b27      	ldr	r3, [pc, #156]	@ (80017ec <prvHeapInit+0xac>)
 800174e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00c      	beq.n	8001774 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	3307      	adds	r3, #7
 800175e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	f023 0307 	bic.w	r3, r3, #7
 8001766:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	4a1f      	ldr	r2, [pc, #124]	@ (80017ec <prvHeapInit+0xac>)
 8001770:	4413      	add	r3, r2
 8001772:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001778:	4a1d      	ldr	r2, [pc, #116]	@ (80017f0 <prvHeapInit+0xb0>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800177e:	4b1c      	ldr	r3, [pc, #112]	@ (80017f0 <prvHeapInit+0xb0>)
 8001780:	2200      	movs	r2, #0
 8001782:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800178c:	2208      	movs	r2, #8
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	1a9b      	subs	r3, r3, r2
 8001792:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f023 0307 	bic.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4a15      	ldr	r2, [pc, #84]	@ (80017f4 <prvHeapInit+0xb4>)
 80017a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80017a2:	4b14      	ldr	r3, [pc, #80]	@ (80017f4 <prvHeapInit+0xb4>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2200      	movs	r2, #0
 80017a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80017aa:	4b12      	ldr	r3, [pc, #72]	@ (80017f4 <prvHeapInit+0xb4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	1ad2      	subs	r2, r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	@ (80017f4 <prvHeapInit+0xb4>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a0a      	ldr	r2, [pc, #40]	@ (80017f8 <prvHeapInit+0xb8>)
 80017ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	4a09      	ldr	r2, [pc, #36]	@ (80017fc <prvHeapInit+0xbc>)
 80017d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <prvHeapInit+0xc0>)
 80017da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80017de:	601a      	str	r2, [r3, #0]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	200033c4 	.word	0x200033c4
 80017f0:	20003fc4 	.word	0x20003fc4
 80017f4:	20003fcc 	.word	0x20003fcc
 80017f8:	20003fd4 	.word	0x20003fd4
 80017fc:	20003fd0 	.word	0x20003fd0
 8001800:	20003fd8 	.word	0x20003fd8

08001804 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800180c:	4b28      	ldr	r3, [pc, #160]	@ (80018b0 <prvInsertBlockIntoFreeList+0xac>)
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e002      	b.n	8001818 <prvInsertBlockIntoFreeList+0x14>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	d8f7      	bhi.n	8001812 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	4413      	add	r3, r2
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	429a      	cmp	r2, r3
 8001832:	d108      	bne.n	8001846 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	441a      	add	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	441a      	add	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d118      	bne.n	800188c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d00d      	beq.n	8001882 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	441a      	add	r2, r3
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e008      	b.n	8001894 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001882:	4b0c      	ldr	r3, [pc, #48]	@ (80018b4 <prvInsertBlockIntoFreeList+0xb0>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	e003      	b.n	8001894 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	429a      	cmp	r2, r3
 800189a:	d002      	beq.n	80018a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80018a2:	bf00      	nop
 80018a4:	3714      	adds	r7, #20
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20003fc4 	.word	0x20003fc4
 80018b4:	20003fcc 	.word	0x20003fcc

080018b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80018be:	4b1e      	ldr	r3, [pc, #120]	@ (8001938 <MX_DMA_Init+0x80>)
 80018c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001938 <MX_DMA_Init+0x80>)
 80018c4:	f043 0304 	orr.w	r3, r3, #4
 80018c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80018ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001938 <MX_DMA_Init+0x80>)
 80018cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018ce:	f003 0304 	and.w	r3, r3, #4
 80018d2:	607b      	str	r3, [r7, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d6:	4b18      	ldr	r3, [pc, #96]	@ (8001938 <MX_DMA_Init+0x80>)
 80018d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018da:	4a17      	ldr	r2, [pc, #92]	@ (8001938 <MX_DMA_Init+0x80>)
 80018dc:	f043 0301 	orr.w	r3, r3, #1
 80018e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80018e2:	4b15      	ldr	r3, [pc, #84]	@ (8001938 <MX_DMA_Init+0x80>)
 80018e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e6:	f003 0301 	and.w	r3, r3, #1
 80018ea:	603b      	str	r3, [r7, #0]
 80018ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2105      	movs	r1, #5
 80018f2:	200b      	movs	r0, #11
 80018f4:	f001 fbf4 	bl	80030e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80018f8:	200b      	movs	r0, #11
 80018fa:	f001 fc0b 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80018fe:	2200      	movs	r2, #0
 8001900:	2105      	movs	r1, #5
 8001902:	200c      	movs	r0, #12
 8001904:	f001 fbec 	bl	80030e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001908:	200c      	movs	r0, #12
 800190a:	f001 fc03 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800190e:	2200      	movs	r2, #0
 8001910:	2105      	movs	r1, #5
 8001912:	200d      	movs	r0, #13
 8001914:	f001 fbe4 	bl	80030e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001918:	200d      	movs	r0, #13
 800191a:	f001 fbfb 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	200e      	movs	r0, #14
 8001924:	f001 fbdc 	bl	80030e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001928:	200e      	movs	r0, #14
 800192a:	f001 fbf3 	bl	8003114 <HAL_NVIC_EnableIRQ>

}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000

0800193c <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800194a:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 800194c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001950:	4904      	ldr	r1, [pc, #16]	@ (8001964 <cubemx_transport_open+0x28>)
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f006 ff0a 	bl	800876c <HAL_UART_Receive_DMA>
    return true;
 8001958:	2301      	movs	r3, #1
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20003fdc 	.word	0x20003fdc

08001968 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001976:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001978:	68f8      	ldr	r0, [r7, #12]
 800197a:	f006 ff43 	bl	8008804 <HAL_UART_DMAStop>
    return true;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800199c:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019a4:	2b20      	cmp	r3, #32
 80019a6:	d11b      	bne.n	80019e0 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	68b9      	ldr	r1, [r7, #8]
 80019b0:	6978      	ldr	r0, [r7, #20]
 80019b2:	f006 fe5b 	bl	800866c <HAL_UART_Transmit_DMA>
 80019b6:	4603      	mov	r3, r0
 80019b8:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019ba:	e002      	b.n	80019c2 <cubemx_transport_write+0x3a>
            osDelay(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f008 fd09 	bl	800a3d4 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80019c2:	7cfb      	ldrb	r3, [r7, #19]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d104      	bne.n	80019d2 <cubemx_transport_write+0x4a>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d1f4      	bne.n	80019bc <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80019d2:	7cfb      	ldrb	r3, [r7, #19]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <cubemx_transport_write+0x54>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	e002      	b.n	80019e2 <cubemx_transport_write+0x5a>
 80019dc:	2300      	movs	r3, #0
 80019de:	e000      	b.n	80019e2 <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80019e0:	2300      	movs	r3, #0
    }
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b088      	sub	sp, #32
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
 80019f8:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001a00:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a06:	b672      	cpsid	i
}
 8001a08:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001a18:	4a1b      	ldr	r2, [pc, #108]	@ (8001a88 <cubemx_transport_read+0x9c>)
 8001a1a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a1c:	b662      	cpsie	i
}
 8001a1e:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	3301      	adds	r3, #1
 8001a24:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f008 fcd4 	bl	800a3d4 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001a2c:	4b17      	ldr	r3, [pc, #92]	@ (8001a8c <cubemx_transport_read+0xa0>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	4b15      	ldr	r3, [pc, #84]	@ (8001a88 <cubemx_transport_read+0x9c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d103      	bne.n	8001a40 <cubemx_transport_read+0x54>
 8001a38:	69fa      	ldr	r2, [r7, #28]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbe2      	blt.n	8001a06 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a44:	e011      	b.n	8001a6a <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8001a46:	4b11      	ldr	r3, [pc, #68]	@ (8001a8c <cubemx_transport_read+0xa0>)
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	440b      	add	r3, r1
 8001a50:	490f      	ldr	r1, [pc, #60]	@ (8001a90 <cubemx_transport_read+0xa4>)
 8001a52:	5c8a      	ldrb	r2, [r1, r2]
 8001a54:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001a56:	4b0d      	ldr	r3, [pc, #52]	@ (8001a8c <cubemx_transport_read+0xa0>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001a60:	4a0a      	ldr	r2, [pc, #40]	@ (8001a8c <cubemx_transport_read+0xa0>)
 8001a62:	6013      	str	r3, [r2, #0]
        wrote++;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	3301      	adds	r3, #1
 8001a68:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001a6a:	4b08      	ldr	r3, [pc, #32]	@ (8001a8c <cubemx_transport_read+0xa0>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <cubemx_transport_read+0x9c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d003      	beq.n	8001a7e <cubemx_transport_read+0x92>
 8001a76:	69ba      	ldr	r2, [r7, #24]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d3e3      	bcc.n	8001a46 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 8001a7e:	69bb      	ldr	r3, [r7, #24]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3720      	adds	r7, #32
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200047e0 	.word	0x200047e0
 8001a8c:	200047dc 	.word	0x200047dc
 8001a90:	20003fdc 	.word	0x20003fdc

08001a94 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b08a      	sub	sp, #40	@ 0x28
 8001a98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9a:	f107 0314 	add.w	r3, r7, #20
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aae:	4a39      	ldr	r2, [pc, #228]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001ab0:	f043 0304 	orr.w	r3, r3, #4
 8001ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ab6:	4b37      	ldr	r3, [pc, #220]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aba:	f003 0304 	and.w	r3, r3, #4
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac2:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	4a33      	ldr	r2, [pc, #204]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001ac8:	f043 0320 	orr.w	r3, r3, #32
 8001acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ace:	4b31      	ldr	r3, [pc, #196]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	4b2e      	ldr	r3, [pc, #184]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ade:	4a2d      	ldr	r2, [pc, #180]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001ae0:	f043 0301 	orr.w	r3, r3, #1
 8001ae4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae6:	4b2b      	ldr	r3, [pc, #172]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001ae8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af2:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af6:	4a27      	ldr	r2, [pc, #156]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001afe:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <MX_GPIO_Init+0x100>)
 8001b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2102      	movs	r1, #2
 8001b0e:	4822      	ldr	r0, [pc, #136]	@ (8001b98 <MX_GPIO_Init+0x104>)
 8001b10:	f001 ffdc 	bl	8003acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_7|GPIO_PIN_10, GPIO_PIN_RESET);
 8001b14:	2200      	movs	r2, #0
 8001b16:	f44f 6194 	mov.w	r1, #1184	@ 0x4a0
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b1e:	f001 ffd5 	bl	8003acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4817      	ldr	r0, [pc, #92]	@ (8001b98 <MX_GPIO_Init+0x104>)
 8001b3a:	f001 fe45 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4810      	ldr	r0, [pc, #64]	@ (8001b98 <MX_GPIO_Init+0x104>)
 8001b56:	f001 fe37 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA7 PA10 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_7|GPIO_PIN_10;
 8001b5a:	f44f 6394 	mov.w	r3, #1184	@ 0x4a0
 8001b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b76:	f001 fe27 	bl	80037c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	2028      	movs	r0, #40	@ 0x28
 8001b80:	f001 faae 	bl	80030e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b84:	2028      	movs	r0, #40	@ 0x28
 8001b86:	f001 fac5 	bl	8003114 <HAL_NVIC_EnableIRQ>

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	48000800 	.word	0x48000800

08001b9c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <MX_I2C1_Init+0x78>)
 8001ba4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 8001ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001ba8:	4a1b      	ldr	r2, [pc, #108]	@ (8001c18 <MX_I2C1_Init+0x7c>)
 8001baa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001bac:	4b18      	ldr	r3, [pc, #96]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001bbe:	4b14      	ldr	r3, [pc, #80]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001bc4:	4b12      	ldr	r3, [pc, #72]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001bca:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001bd6:	480e      	ldr	r0, [pc, #56]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bd8:	f001 ffb3 	bl	8003b42 <HAL_I2C_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001be2:	f000 fb81 	bl	80022e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001be6:	2100      	movs	r1, #0
 8001be8:	4809      	ldr	r0, [pc, #36]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bea:	f004 f82d 	bl	8005c48 <HAL_I2CEx_ConfigAnalogFilter>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001bf4:	f000 fb78 	bl	80022e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	4805      	ldr	r0, [pc, #20]	@ (8001c10 <MX_I2C1_Init+0x74>)
 8001bfc:	f004 f86f 	bl	8005cde <HAL_I2CEx_ConfigDigitalFilter>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f000 fb6f 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c0a:	bf00      	nop
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	200047e4 	.word	0x200047e4
 8001c14:	40005400 	.word	0x40005400
 8001c18:	40b285c2 	.word	0x40b285c2

08001c1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b09e      	sub	sp, #120	@ 0x78
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2254      	movs	r2, #84	@ 0x54
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f018 fc9f 	bl	801a580 <memset>
  if(i2cHandle->Instance==I2C1)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a50      	ldr	r2, [pc, #320]	@ (8001d88 <HAL_I2C_MspInit+0x16c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	f040 8099 	bne.w	8001d80 <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c4e:	2340      	movs	r3, #64	@ 0x40
 8001c50:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c52:	2300      	movs	r3, #0
 8001c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f004 fea0 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001c66:	f000 fb3f 	bl	80022e8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	4b48      	ldr	r3, [pc, #288]	@ (8001d8c <HAL_I2C_MspInit+0x170>)
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	4a47      	ldr	r2, [pc, #284]	@ (8001d8c <HAL_I2C_MspInit+0x170>)
 8001c70:	f043 0302 	orr.w	r3, r3, #2
 8001c74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c76:	4b45      	ldr	r3, [pc, #276]	@ (8001d8c <HAL_I2C_MspInit+0x170>)
 8001c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c82:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c88:	2312      	movs	r3, #18
 8001c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c94:	2304      	movs	r3, #4
 8001c96:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c98:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	483c      	ldr	r0, [pc, #240]	@ (8001d90 <HAL_I2C_MspInit+0x174>)
 8001ca0:	f001 fd92 	bl	80037c8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ca4:	4b39      	ldr	r3, [pc, #228]	@ (8001d8c <HAL_I2C_MspInit+0x170>)
 8001ca6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca8:	4a38      	ldr	r2, [pc, #224]	@ (8001d8c <HAL_I2C_MspInit+0x170>)
 8001caa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cb0:	4b36      	ldr	r3, [pc, #216]	@ (8001d8c <HAL_I2C_MspInit+0x170>)
 8001cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8001cbc:	4b35      	ldr	r3, [pc, #212]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cbe:	4a36      	ldr	r2, [pc, #216]	@ (8001d98 <HAL_I2C_MspInit+0x17c>)
 8001cc0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8001cc2:	4b34      	ldr	r3, [pc, #208]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cc8:	4b32      	ldr	r3, [pc, #200]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cce:	4b31      	ldr	r3, [pc, #196]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cd6:	2280      	movs	r2, #128	@ 0x80
 8001cd8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cda:	4b2e      	ldr	r3, [pc, #184]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cec:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001cf2:	4828      	ldr	r0, [pc, #160]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001cf4:	f001 fa1c 	bl	8003130 <HAL_DMA_Init>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 8001cfe:	f000 faf3 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a23      	ldr	r2, [pc, #140]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001d06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d08:	4a22      	ldr	r2, [pc, #136]	@ (8001d94 <HAL_I2C_MspInit+0x178>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel4;
 8001d0e:	4b23      	ldr	r3, [pc, #140]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d10:	4a23      	ldr	r2, [pc, #140]	@ (8001da0 <HAL_I2C_MspInit+0x184>)
 8001d12:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001d14:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d16:	2211      	movs	r2, #17
 8001d18:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d1a:	4b20      	ldr	r3, [pc, #128]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d1c:	2210      	movs	r2, #16
 8001d1e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d20:	4b1e      	ldr	r3, [pc, #120]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d26:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d28:	2280      	movs	r2, #128	@ 0x80
 8001d2a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d32:	4b1a      	ldr	r3, [pc, #104]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d38:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3e:	4b17      	ldr	r3, [pc, #92]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d44:	4815      	ldr	r0, [pc, #84]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d46:	f001 f9f3 	bl	8003130 <HAL_DMA_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 8001d50:	f000 faca 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a11      	ldr	r2, [pc, #68]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d58:	639a      	str	r2, [r3, #56]	@ 0x38
 8001d5a:	4a10      	ldr	r2, [pc, #64]	@ (8001d9c <HAL_I2C_MspInit+0x180>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	2105      	movs	r1, #5
 8001d64:	201f      	movs	r0, #31
 8001d66:	f001 f9bb 	bl	80030e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d6a:	201f      	movs	r0, #31
 8001d6c:	f001 f9d2 	bl	8003114 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2105      	movs	r1, #5
 8001d74:	2020      	movs	r0, #32
 8001d76:	f001 f9b3 	bl	80030e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d7a:	2020      	movs	r0, #32
 8001d7c:	f001 f9ca 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001d80:	bf00      	nop
 8001d82:	3778      	adds	r7, #120	@ 0x78
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40005400 	.word	0x40005400
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	48000400 	.word	0x48000400
 8001d94:	20004838 	.word	0x20004838
 8001d98:	40020030 	.word	0x40020030
 8001d9c:	20004898 	.word	0x20004898
 8001da0:	40020044 	.word	0x40020044

08001da4 <timer_callback>:
void pump_water();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d061      	beq.n	8001e7a <timer_callback+0xd6>
		// Sync micro-ROS session
		rmw_uros_sync_session(timeout_ms);
 8001db6:	230a      	movs	r3, #10
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00c ffe7 	bl	800ed8c <rmw_uros_sync_session>

		// brush encoder
		L_encoder = read_encoder_data(0b01000000, 1);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	2040      	movs	r0, #64	@ 0x40
 8001dc2:	f000 f9fd 	bl	80021c0 <read_encoder_data>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <timer_callback+0xe0>)
 8001dcc:	801a      	strh	r2, [r3, #0]
		R_encoder = read_encoder_data(0b01000010, 1);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	2042      	movs	r0, #66	@ 0x42
 8001dd2:	f000 f9f5 	bl	80021c0 <read_encoder_data>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b2b      	ldr	r3, [pc, #172]	@ (8001e88 <timer_callback+0xe4>)
 8001ddc:	801a      	strh	r2, [r3, #0]
//		}
//		else if (cmd_mode == 1) {
//			BrushUpDownAuto();
//		}

		if (cmd_spin == 1) {
 8001dde:	4b2b      	ldr	r3, [pc, #172]	@ (8001e8c <timer_callback+0xe8>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <timer_callback+0x46>
			spin_brush();
 8001de6:	f000 fa5b 	bl	80022a0 <spin_brush>
		}

		// Prepare and publish multi-array message with motor data
		if (pub_msg.data.data != NULL) {
 8001dea:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <timer_callback+0xec>)
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d043      	beq.n	8001e7a <timer_callback+0xd6>
			pub_msg.data.data[0] = L_encoder;
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <timer_callback+0xe0>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	4a26      	ldr	r2, [pc, #152]	@ (8001e90 <timer_callback+0xec>)
 8001df8:	6914      	ldr	r4, [r2, #16]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fbba 	bl	8000574 <__aeabi_ui2d>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[1] = R_encoder;
 8001e08:	4b1f      	ldr	r3, [pc, #124]	@ (8001e88 <timer_callback+0xe4>)
 8001e0a:	881a      	ldrh	r2, [r3, #0]
 8001e0c:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <timer_callback+0xec>)
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	f103 0408 	add.w	r4, r3, #8
 8001e14:	4610      	mov	r0, r2
 8001e16:	f7fe fbad 	bl	8000574 <__aeabi_ui2d>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[2] = loadcell;
 8001e22:	4b1c      	ldr	r3, [pc, #112]	@ (8001e94 <timer_callback+0xf0>)
 8001e24:	781a      	ldrb	r2, [r3, #0]
 8001e26:	4b1a      	ldr	r3, [pc, #104]	@ (8001e90 <timer_callback+0xec>)
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f103 0410 	add.w	r4, r3, #16
 8001e2e:	4610      	mov	r0, r2
 8001e30:	f7fe fba0 	bl	8000574 <__aeabi_ui2d>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[3] = U_proximity;
 8001e3c:	4b16      	ldr	r3, [pc, #88]	@ (8001e98 <timer_callback+0xf4>)
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b13      	ldr	r3, [pc, #76]	@ (8001e90 <timer_callback+0xec>)
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	f103 0418 	add.w	r4, r3, #24
 8001e48:	4610      	mov	r0, r2
 8001e4a:	f7fe fb93 	bl	8000574 <__aeabi_ui2d>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	e9c4 2300 	strd	r2, r3, [r4]
			pub_msg.data.data[4] = D_proximity;
 8001e56:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <timer_callback+0xf8>)
 8001e58:	781a      	ldrb	r2, [r3, #0]
 8001e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e90 <timer_callback+0xec>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f103 0420 	add.w	r4, r3, #32
 8001e62:	4610      	mov	r0, r2
 8001e64:	f7fe fb86 	bl	8000574 <__aeabi_ui2d>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	e9c4 2300 	strd	r2, r3, [r4]

			// Publish the multi-array message
			RCLSOFTCHECK(rcl_publish(&publisher, &pub_msg, NULL));
 8001e70:	2200      	movs	r2, #0
 8001e72:	4907      	ldr	r1, [pc, #28]	@ (8001e90 <timer_callback+0xec>)
 8001e74:	480a      	ldr	r0, [pc, #40]	@ (8001ea0 <timer_callback+0xfc>)
 8001e76:	f00b f947 	bl	800d108 <rcl_publish>
//		rcl_publish(&R_encoder_pub, &R_encoder_msg, NULL);

		// Reinitialize watchdog timer
//		HAL_IWDG_Init(&hiwdg);
	}
}
 8001e7a:	bf00      	nop
 8001e7c:	3714      	adds	r7, #20
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd90      	pop	{r4, r7, pc}
 8001e82:	bf00      	nop
 8001e84:	200049fe 	.word	0x200049fe
 8001e88:	20004a00 	.word	0x20004a00
 8001e8c:	200049fc 	.word	0x200049fc
 8001e90:	200049e0 	.word	0x200049e0
 8001e94:	20004a02 	.word	0x20004a02
 8001e98:	20004a03 	.word	0x20004a03
 8001e9c:	20004a04 	.word	0x20004a04
 8001ea0:	200049dc 	.word	0x200049dc

08001ea4 <StartDefaultTask>:
	cmd_mode = msg->data.data[4];
	cmd_L_encoder = msg->data.data[5];
	cmd_R_encoder = msg->data.data[6];
}

void StartDefaultTask(void *argument) {
 8001ea4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ea8:	b0b2      	sub	sp, #200	@ 0xc8
 8001eaa:	af02      	add	r7, sp, #8
 8001eac:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
 8001eb0:	4b60      	ldr	r3, [pc, #384]	@ (8002034 <StartDefaultTask+0x190>)
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	4b60      	ldr	r3, [pc, #384]	@ (8002038 <StartDefaultTask+0x194>)
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	4b60      	ldr	r3, [pc, #384]	@ (800203c <StartDefaultTask+0x198>)
 8001eba:	4a61      	ldr	r2, [pc, #388]	@ (8002040 <StartDefaultTask+0x19c>)
 8001ebc:	4961      	ldr	r1, [pc, #388]	@ (8002044 <StartDefaultTask+0x1a0>)
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f00c f942 	bl	800e148 <rmw_uros_set_custom_transport>
	true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
 8001ec4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f00c f859 	bl	800df80 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001ece:	4b5e      	ldr	r3, [pc, #376]	@ (8002048 <StartDefaultTask+0x1a4>)
 8001ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <StartDefaultTask+0x1a8>)
 8001ed6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001eda:	4b5d      	ldr	r3, [pc, #372]	@ (8002050 <StartDefaultTask+0x1ac>)
 8001edc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;
 8001ee0:	4b5c      	ldr	r3, [pc, #368]	@ (8002054 <StartDefaultTask+0x1b0>)
 8001ee2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001ee6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001eea:	4618      	mov	r0, r3
 8001eec:	f00c f856 	bl	800df9c <rcutils_set_default_allocator>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	f083 0301 	eor.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <StartDefaultTask+0x60>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8001efc:	21cc      	movs	r1, #204	@ 0xcc
 8001efe:	4856      	ldr	r0, [pc, #344]	@ (8002058 <StartDefaultTask+0x1b4>)
 8001f00:	f018 f9b8 	bl	801a274 <iprintf>
	}

	allocator = rcl_get_default_allocator();
 8001f04:	4c55      	ldr	r4, [pc, #340]	@ (800205c <StartDefaultTask+0x1b8>)
 8001f06:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f00c f864 	bl	800dfd8 <rcutils_get_default_allocator>
 8001f10:	4625      	mov	r5, r4
 8001f12:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001f16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 8001f1e:	f00a ff23 	bl	800cd68 <rcl_get_zero_initialized_init_options>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4a4e      	ldr	r2, [pc, #312]	@ (8002060 <StartDefaultTask+0x1bc>)
 8001f26:	6013      	str	r3, [r2, #0]
	RCLSOFTCHECK(rcl_init_options_init(&init_options, allocator));
 8001f28:	4b4c      	ldr	r3, [pc, #304]	@ (800205c <StartDefaultTask+0x1b8>)
 8001f2a:	466c      	mov	r4, sp
 8001f2c:	f103 020c 	add.w	r2, r3, #12
 8001f30:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f34:	e884 0003 	stmia.w	r4, {r0, r1}
 8001f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f3a:	4849      	ldr	r0, [pc, #292]	@ (8002060 <StartDefaultTask+0x1bc>)
 8001f3c:	f00a ff16 	bl	800cd6c <rcl_init_options_init>
	RCLSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));
 8001f40:	2163      	movs	r1, #99	@ 0x63
 8001f42:	4847      	ldr	r0, [pc, #284]	@ (8002060 <StartDefaultTask+0x1bc>)
 8001f44:	f00b f80e 	bl	800cf64 <rcl_init_options_set_domain_id>

	rclc_support_init_with_options(&support, 0, NULL, &init_options,
 8001f48:	4b44      	ldr	r3, [pc, #272]	@ (800205c <StartDefaultTask+0x1b8>)
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	4b44      	ldr	r3, [pc, #272]	@ (8002060 <StartDefaultTask+0x1bc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	2100      	movs	r1, #0
 8001f52:	4844      	ldr	r0, [pc, #272]	@ (8002064 <StartDefaultTask+0x1c0>)
 8001f54:	f00b ff38 	bl	800ddc8 <rclc_support_init_with_options>
			&allocator);

	// create node
	rclc_node_init_default(&node, "cleaner_node", "", &support);
 8001f58:	4b42      	ldr	r3, [pc, #264]	@ (8002064 <StartDefaultTask+0x1c0>)
 8001f5a:	4a43      	ldr	r2, [pc, #268]	@ (8002068 <StartDefaultTask+0x1c4>)
 8001f5c:	4943      	ldr	r1, [pc, #268]	@ (800206c <StartDefaultTask+0x1c8>)
 8001f5e:	4844      	ldr	r0, [pc, #272]	@ (8002070 <StartDefaultTask+0x1cc>)
 8001f60:	f00b ff66 	bl	800de30 <rclc_node_init_default>

	pub_msg.layout.dim.capacity = 1;
 8001f64:	4b43      	ldr	r3, [pc, #268]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	609a      	str	r2, [r3, #8]
	pub_msg.layout.dim.size = 1;
 8001f6a:	4b42      	ldr	r3, [pc, #264]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	605a      	str	r2, [r3, #4]
	pub_msg.layout.dim.data = malloc(
 8001f70:	2014      	movs	r0, #20
 8001f72:	f017 fe8b 	bl	8019c8c <malloc>
 8001f76:	4603      	mov	r3, r0
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001f7c:	601a      	str	r2, [r3, #0]
			sizeof(std_msgs__msg__MultiArrayDimension) * 1);

	pub_msg.layout.dim.data[0].label.data = malloc(10);
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001f80:	681c      	ldr	r4, [r3, #0]
 8001f82:	200a      	movs	r0, #10
 8001f84:	f017 fe82 	bl	8019c8c <malloc>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	6023      	str	r3, [r4, #0]
	pub_msg.layout.dim.data[0].label.capacity = 10;
 8001f8c:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	220a      	movs	r2, #10
 8001f92:	609a      	str	r2, [r3, #8]
	pub_msg.layout.dim.data[0].label.size = strlen("mani_data");
 8001f94:	4b37      	ldr	r3, [pc, #220]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2209      	movs	r2, #9
 8001f9a:	605a      	str	r2, [r3, #4]
	strcpy(pub_msg.layout.dim.data[0].label.data, "mani_data");
 8001f9c:	4b35      	ldr	r3, [pc, #212]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4935      	ldr	r1, [pc, #212]	@ (8002078 <StartDefaultTask+0x1d4>)
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	cb03      	ldmia	r3!, {r0, r1}
 8001faa:	6010      	str	r0, [r2, #0]
 8001fac:	6051      	str	r1, [r2, #4]
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	8113      	strh	r3, [r2, #8]

	pub_msg.layout.data_offset = 0;
 8001fb2:	4b30      	ldr	r3, [pc, #192]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	60da      	str	r2, [r3, #12]

	pub_msg.data.capacity = 5;
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001fba:	2205      	movs	r2, #5
 8001fbc:	619a      	str	r2, [r3, #24]
	pub_msg.data.size = 5;
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001fc0:	2205      	movs	r2, #5
 8001fc2:	615a      	str	r2, [r3, #20]
	pub_msg.data.data = malloc(5 * sizeof(double));
 8001fc4:	2028      	movs	r0, #40	@ 0x28
 8001fc6:	f017 fe61 	bl	8019c8c <malloc>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4b29      	ldr	r3, [pc, #164]	@ (8002074 <StartDefaultTask+0x1d0>)
 8001fd0:	611a      	str	r2, [r3, #16]

	// create publisher
	rclc_publisher_init_default(&publisher, &node,
 8001fd2:	f00d fa5d 	bl	800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	4b28      	ldr	r3, [pc, #160]	@ (800207c <StartDefaultTask+0x1d8>)
 8001fda:	4925      	ldr	r1, [pc, #148]	@ (8002070 <StartDefaultTask+0x1cc>)
 8001fdc:	4828      	ldr	r0, [pc, #160]	@ (8002080 <StartDefaultTask+0x1dc>)
 8001fde:	f00b ff63 	bl	800dea8 <rclc_publisher_init_default>
	// Create subscriber
//	rclc_subscription_init_best_effort(&subscriber_interface, &node,
//			ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float32MultiArray), " ");//

	// create timer
	rclc_timer_init_default(&timer, &support, timer_period, timer_callback);
 8001fe2:	4a28      	ldr	r2, [pc, #160]	@ (8002084 <StartDefaultTask+0x1e0>)
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	4690      	mov	r8, r2
 8001fe8:	4699      	mov	r9, r3
 8001fea:	4b27      	ldr	r3, [pc, #156]	@ (8002088 <StartDefaultTask+0x1e4>)
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	4642      	mov	r2, r8
 8001ff0:	464b      	mov	r3, r9
 8001ff2:	491c      	ldr	r1, [pc, #112]	@ (8002064 <StartDefaultTask+0x1c0>)
 8001ff4:	4825      	ldr	r0, [pc, #148]	@ (800208c <StartDefaultTask+0x1e8>)
 8001ff6:	f00b ff8b 	bl	800df10 <rclc_timer_init_default>

	// create executor
	executor = rclc_executor_get_zero_initialized_executor();
 8001ffa:	4c25      	ldr	r4, [pc, #148]	@ (8002090 <StartDefaultTask+0x1ec>)
 8001ffc:	463b      	mov	r3, r7
 8001ffe:	4618      	mov	r0, r3
 8002000:	f00b fc10 	bl	800d824 <rclc_executor_get_zero_initialized_executor>
 8002004:	4620      	mov	r0, r4
 8002006:	463b      	mov	r3, r7
 8002008:	2288      	movs	r2, #136	@ 0x88
 800200a:	4619      	mov	r1, r3
 800200c:	f018 fb81 	bl	801a712 <memcpy>
	rclc_executor_init(&executor, &support.context, 2, &allocator); // total number of handles = #subscriptions + #timers
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <StartDefaultTask+0x1b8>)
 8002012:	2202      	movs	r2, #2
 8002014:	4913      	ldr	r1, [pc, #76]	@ (8002064 <StartDefaultTask+0x1c0>)
 8002016:	481e      	ldr	r0, [pc, #120]	@ (8002090 <StartDefaultTask+0x1ec>)
 8002018:	f00b fc0e 	bl	800d838 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 800201c:	491b      	ldr	r1, [pc, #108]	@ (800208c <StartDefaultTask+0x1e8>)
 800201e:	481c      	ldr	r0, [pc, #112]	@ (8002090 <StartDefaultTask+0x1ec>)
 8002020:	f00b fc7a 	bl	800d918 <rclc_executor_add_timer>
//	rclc_executor_add_subscription(&executor, &subscriber_interface, &msg_interface, subscription_callback_interface, ON_NEW_DATA);
	rclc_executor_spin(&executor);
 8002024:	481a      	ldr	r0, [pc, #104]	@ (8002090 <StartDefaultTask+0x1ec>)
 8002026:	f00b fe8d 	bl	800dd44 <rclc_executor_spin>
}
 800202a:	bf00      	nop
 800202c:	37c0      	adds	r7, #192	@ 0xc0
 800202e:	46bd      	mov	sp, r7
 8002030:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002034:	080019ed 	.word	0x080019ed
 8002038:	08001989 	.word	0x08001989
 800203c:	08001969 	.word	0x08001969
 8002040:	0800193d 	.word	0x0800193d
 8002044:	20004afc 	.word	0x20004afc
 8002048:	080022f5 	.word	0x080022f5
 800204c:	08002339 	.word	0x08002339
 8002050:	08002371 	.word	0x08002371
 8002054:	080023dd 	.word	0x080023dd
 8002058:	0801b3b4 	.word	0x0801b3b4
 800205c:	2000492c 	.word	0x2000492c
 8002060:	20004948 	.word	0x20004948
 8002064:	200048f8 	.word	0x200048f8
 8002068:	0801b3dc 	.word	0x0801b3dc
 800206c:	0801b3e0 	.word	0x0801b3e0
 8002070:	20004940 	.word	0x20004940
 8002074:	200049e0 	.word	0x200049e0
 8002078:	0801b3f0 	.word	0x0801b3f0
 800207c:	0801b3fc 	.word	0x0801b3fc
 8002080:	200049dc 	.word	0x200049dc
 8002084:	00989680 	.word	0x00989680
 8002088:	08001da5 	.word	0x08001da5
 800208c:	200049d8 	.word	0x200049d8
 8002090:	20004950 	.word	0x20004950

08002094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002098:	f000 ff11 	bl	8002ebe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209c:	f000 f818 	bl	80020d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a0:	f7ff fcf8 	bl	8001a94 <MX_GPIO_Init>
  MX_DMA_Init();
 80020a4:	f7ff fc08 	bl	80018b8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80020a8:	f000 fdd8 	bl	8002c5c <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 80020ac:	f7ff fd76 	bl	8001b9c <MX_I2C1_Init>
  MX_TIM2_Init();
 80020b0:	f000 fc72 	bl	8002998 <MX_TIM2_Init>
  MX_TIM3_Init();
 80020b4:	f000 fcbe 	bl	8002a34 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	setup_io();
 80020b8:	f000 f856 	bl	8002168 <setup_io>
	cleaner_begin();
 80020bc:	f7ff f950 	bl	8001360 <cleaner_begin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020c0:	f008 f8ac 	bl	800a21c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80020c4:	f7ff f93a 	bl	800133c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80020c8:	f008 f8cc 	bl	800a264 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80020cc:	bf00      	nop
 80020ce:	e7fd      	b.n	80020cc <main+0x38>

080020d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b094      	sub	sp, #80	@ 0x50
 80020d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020d6:	f107 0318 	add.w	r3, r7, #24
 80020da:	2238      	movs	r2, #56	@ 0x38
 80020dc:	2100      	movs	r1, #0
 80020de:	4618      	mov	r0, r3
 80020e0:	f018 fa4e 	bl	801a580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
 80020f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f003 fe40 	bl	8005d78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002100:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002102:	2340      	movs	r3, #64	@ 0x40
 8002104:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002106:	2302      	movs	r3, #2
 8002108:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800210a:	2302      	movs	r3, #2
 800210c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800210e:	2304      	movs	r3, #4
 8002110:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002112:	2355      	movs	r3, #85	@ 0x55
 8002114:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002116:	2302      	movs	r3, #2
 8002118:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800211a:	2302      	movs	r3, #2
 800211c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800211e:	2302      	movs	r3, #2
 8002120:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002122:	f107 0318 	add.w	r3, r7, #24
 8002126:	4618      	mov	r0, r3
 8002128:	f003 feda 	bl	8005ee0 <HAL_RCC_OscConfig>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002132:	f000 f8d9 	bl	80022e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002136:	230f      	movs	r3, #15
 8002138:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800213a:	2303      	movs	r3, #3
 800213c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2104      	movs	r1, #4
 800214e:	4618      	mov	r0, r3
 8002150:	f004 f9d8 	bl	8006504 <HAL_RCC_ClockConfig>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800215a:	f000 f8c5 	bl	80022e8 <Error_Handler>
  }
}
 800215e:	bf00      	nop
 8002160:	3750      	adds	r7, #80	@ 0x50
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <setup_io>:

/* USER CODE BEGIN 4 */
void setup_io() {
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af04      	add	r7, sp, #16
	if (hi2c1.State == HAL_I2C_STATE_READY) {
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <setup_io+0x54>)
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	d11b      	bne.n	80021b2 <setup_io+0x4a>
		uint8_t dirB = 0x00;
 800217a:	2300      	movs	r3, #0
 800217c:	71fb      	strb	r3, [r7, #7]
		uint8_t dirA = 0xFF;
 800217e:	23ff      	movs	r3, #255	@ 0xff
 8002180:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT,
 8002182:	2364      	movs	r3, #100	@ 0x64
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	2301      	movs	r3, #1
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	1dfb      	adds	r3, r7, #7
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	2201      	movs	r2, #1
 8002192:	2142      	movs	r1, #66	@ 0x42
 8002194:	4809      	ldr	r0, [pc, #36]	@ (80021bc <setup_io+0x54>)
 8002196:	f001 fd6f 	bl	8003c78 <HAL_I2C_Mem_Write>
				&dirB, 1, 100);  // IODIRB
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
 800219a:	2364      	movs	r3, #100	@ 0x64
 800219c:	9302      	str	r3, [sp, #8]
 800219e:	2301      	movs	r3, #1
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	1dbb      	adds	r3, r7, #6
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2301      	movs	r3, #1
 80021a8:	2200      	movs	r2, #0
 80021aa:	2142      	movs	r1, #66	@ 0x42
 80021ac:	4803      	ldr	r0, [pc, #12]	@ (80021bc <setup_io+0x54>)
 80021ae:	f001 fd63 	bl	8003c78 <HAL_I2C_Mem_Write>
				&dirA, 1, 100);  // IODIRA
	}
}
 80021b2:	bf00      	nop
 80021b4:	3708      	adds	r7, #8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	200047e4 	.word	0x200047e4

080021c0 <read_encoder_data>:

uint16_t read_encoder_data(uint8_t EEPROM_ADR, uint16_t len) {
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	71fb      	strb	r3, [r7, #7]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80bb      	strh	r3, [r7, #4]
	if (hi2c1.State == HAL_I2C_STATE_READY) {
 80021d0:	4b32      	ldr	r3, [pc, #200]	@ (800229c <read_encoder_data+0xdc>)
 80021d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b20      	cmp	r3, #32
 80021da:	d157      	bne.n	800228c <read_encoder_data+0xcc>
		uint8_t lowbyte;
		uint8_t highbyte;
		uint16_t data_encoder;

		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADR, 0x12, I2C_MEMADD_SIZE_8BIT, &lowbyte, len);
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	b299      	uxth	r1, r3
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	9301      	str	r3, [sp, #4]
 80021e4:	f107 030d 	add.w	r3, r7, #13
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2301      	movs	r3, #1
 80021ec:	2212      	movs	r2, #18
 80021ee:	482b      	ldr	r0, [pc, #172]	@ (800229c <read_encoder_data+0xdc>)
 80021f0:	f001 fe56 	bl	8003ea0 <HAL_I2C_Mem_Read_IT>
		HAL_Delay(1);
 80021f4:	2001      	movs	r0, #1
 80021f6:	f000 fe99 	bl	8002f2c <HAL_Delay>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADR, 0x13, I2C_MEMADD_SIZE_8BIT, &highbyte, len);
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	b299      	uxth	r1, r3
 80021fe:	88bb      	ldrh	r3, [r7, #4]
 8002200:	9301      	str	r3, [sp, #4]
 8002202:	f107 030c 	add.w	r3, r7, #12
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	2301      	movs	r3, #1
 800220a:	2213      	movs	r2, #19
 800220c:	4823      	ldr	r0, [pc, #140]	@ (800229c <read_encoder_data+0xdc>)
 800220e:	f001 fe47 	bl	8003ea0 <HAL_I2C_Mem_Read_IT>
		HAL_Delay(1);
 8002212:	2001      	movs	r0, #1
 8002214:	f000 fe8a 	bl	8002f2c <HAL_Delay>

		lowbyte = ~lowbyte;
 8002218:	7b7b      	ldrb	r3, [r7, #13]
 800221a:	43db      	mvns	r3, r3
 800221c:	b2db      	uxtb	r3, r3
 800221e:	737b      	strb	r3, [r7, #13]
		highbyte = ~highbyte;
 8002220:	7b3b      	ldrb	r3, [r7, #12]
 8002222:	43db      	mvns	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	733b      	strb	r3, [r7, #12]
		data_encoder = (highbyte >> 4 & 0b1) * 1000 + (highbyte & 0b1111) * 100
 8002228:	7b3b      	ldrb	r3, [r7, #12]
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	b2db      	uxtb	r3, r3
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	b29b      	uxth	r3, r3
 8002234:	461a      	mov	r2, r3
 8002236:	0152      	lsls	r2, r2, #5
 8002238:	1ad2      	subs	r2, r2, r3
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4413      	add	r3, r2
 800223e:	00db      	lsls	r3, r3, #3
 8002240:	b29a      	uxth	r2, r3
 8002242:	7b3b      	ldrb	r3, [r7, #12]
 8002244:	f003 030f 	and.w	r3, r3, #15
 8002248:	b29b      	uxth	r3, r3
 800224a:	4619      	mov	r1, r3
 800224c:	0089      	lsls	r1, r1, #2
 800224e:	440b      	add	r3, r1
 8002250:	4619      	mov	r1, r3
 8002252:	0088      	lsls	r0, r1, #2
 8002254:	4619      	mov	r1, r3
 8002256:	4603      	mov	r3, r0
 8002258:	440b      	add	r3, r1
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	b29b      	uxth	r3, r3
 800225e:	4413      	add	r3, r2
 8002260:	b29a      	uxth	r2, r3
				+ (lowbyte >> 4 & 0b1111) * 10 + (lowbyte & 0b1111);
 8002262:	7b7b      	ldrb	r3, [r7, #13]
 8002264:	091b      	lsrs	r3, r3, #4
 8002266:	b2db      	uxtb	r3, r3
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	b29b      	uxth	r3, r3
 800226e:	4619      	mov	r1, r3
 8002270:	0089      	lsls	r1, r1, #2
 8002272:	440b      	add	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	b29b      	uxth	r3, r3
 8002278:	4413      	add	r3, r2
 800227a:	b29a      	uxth	r2, r3
 800227c:	7b7b      	ldrb	r3, [r7, #13]
 800227e:	f003 030f 	and.w	r3, r3, #15
 8002282:	b29b      	uxth	r3, r3
		data_encoder = (highbyte >> 4 & 0b1) * 1000 + (highbyte & 0b1111) * 100
 8002284:	4413      	add	r3, r2
 8002286:	81fb      	strh	r3, [r7, #14]
		return data_encoder;
 8002288:	89fb      	ldrh	r3, [r7, #14]
 800228a:	e002      	b.n	8002292 <read_encoder_data+0xd2>
	}
	HAL_Delay(1);
 800228c:	2001      	movs	r0, #1
 800228e:	f000 fe4d 	bl	8002f2c <HAL_Delay>
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200047e4 	.word	0x200047e4

080022a0 <spin_brush>:
void move_brush_auto() {
// Left highest 69 lowest 1010
// Right highest 2528 lowest 2536
}

void spin_brush() {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
	MDXX_set_range(&motor3, 2000, 30000);
 80022a4:	eddf 0a04 	vldr	s1, [pc, #16]	@ 80022b8 <spin_brush+0x18>
 80022a8:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 80022bc <spin_brush+0x1c>
 80022ac:	4804      	ldr	r0, [pc, #16]	@ (80022c0 <spin_brush+0x20>)
 80022ae:	f7fe fe41 	bl	8000f34 <MDXX_set_range>
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	46ea6000 	.word	0x46ea6000
 80022bc:	44fa0000 	.word	0x44fa0000
 80022c0:	200032d4 	.word	0x200032d4

080022c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d101      	bne.n	80022da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80022d6:	f000 fe0b 	bl	8002ef0 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
		if (htim == &htim2) {

		}
  /* USER CODE END Callback 1 */
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40012c00 	.word	0x40012c00

080022e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80022ec:	b672      	cpsid	i
}
 80022ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <Error_Handler+0x8>

080022f4 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <microros_allocate+0x3c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4413      	add	r3, r2
 8002308:	461a      	mov	r2, r3
 800230a:	4b09      	ldr	r3, [pc, #36]	@ (8002330 <microros_allocate+0x3c>)
 800230c:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <microros_allocate+0x40>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <microros_allocate+0x40>)
 800231c:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7ff f87a 	bl	8001418 <pvPortMallocMicroROS>
 8002324:	4603      	mov	r3, r0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20004a08 	.word	0x20004a08
 8002334:	20004a0c 	.word	0x20004a0c

08002338 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00c      	beq.n	8002362 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff f989 	bl	8001660 <getBlockSize>
 800234e:	4603      	mov	r3, r0
 8002350:	4a06      	ldr	r2, [pc, #24]	@ (800236c <microros_deallocate+0x34>)
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	461a      	mov	r2, r3
 8002358:	4b04      	ldr	r3, [pc, #16]	@ (800236c <microros_deallocate+0x34>)
 800235a:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff f923 	bl	80015a8 <vPortFreeMicroROS>
  }
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20004a0c 	.word	0x20004a0c

08002370 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 800237c:	4b15      	ldr	r3, [pc, #84]	@ (80023d4 <microros_reallocate+0x64>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4413      	add	r3, r2
 8002386:	461a      	mov	r2, r3
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <microros_reallocate+0x64>)
 800238a:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 800238c:	4b12      	ldr	r3, [pc, #72]	@ (80023d8 <microros_reallocate+0x68>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	4413      	add	r3, r2
 8002396:	461a      	mov	r2, r3
 8002398:	4b0f      	ldr	r3, [pc, #60]	@ (80023d8 <microros_reallocate+0x68>)
 800239a:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d104      	bne.n	80023ac <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 80023a2:	68b8      	ldr	r0, [r7, #8]
 80023a4:	f7ff f838 	bl	8001418 <pvPortMallocMicroROS>
 80023a8:	4603      	mov	r3, r0
 80023aa:	e00e      	b.n	80023ca <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f7ff f957 	bl	8001660 <getBlockSize>
 80023b2:	4603      	mov	r3, r0
 80023b4:	4a08      	ldr	r2, [pc, #32]	@ (80023d8 <microros_reallocate+0x68>)
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <microros_reallocate+0x68>)
 80023be:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 80023c0:	68b9      	ldr	r1, [r7, #8]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f7ff f96a 	bl	800169c <pvPortReallocMicroROS>
 80023c8:	4603      	mov	r3, r0
  }
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20004a08 	.word	0x20004a08
 80023d8:	20004a0c 	.word	0x20004a0c

080023dc <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	fb02 f303 	mul.w	r3, r2, r3
 80023f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <microros_zero_allocate+0x48>)
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	4413      	add	r3, r2
 80023f6:	461a      	mov	r2, r3
 80023f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <microros_zero_allocate+0x48>)
 80023fa:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	fb02 f303 	mul.w	r3, r2, r3
 8002404:	4a08      	ldr	r2, [pc, #32]	@ (8002428 <microros_zero_allocate+0x4c>)
 8002406:	6812      	ldr	r2, [r2, #0]
 8002408:	4413      	add	r3, r2
 800240a:	461a      	mov	r2, r3
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <microros_zero_allocate+0x4c>)
 800240e:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8002410:	68b9      	ldr	r1, [r7, #8]
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f7ff f96f 	bl	80016f6 <pvPortCallocMicroROS>
 8002418:	4603      	mov	r3, r0
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20004a08 	.word	0x20004a08
 8002428:	20004a0c 	.word	0x20004a0c
 800242c:	00000000 	.word	0x00000000

08002430 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8002430:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002434:	b086      	sub	sp, #24
 8002436:	af00      	add	r7, sp, #0
 8002438:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800243c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8002442:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002446:	a320      	add	r3, pc, #128	@ (adr r3, 80024c8 <UTILS_NanosecondsToTimespec+0x98>)
 8002448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800244c:	f7fe fb3e 	bl	8000acc <__aeabi_ldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 800245a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800245e:	a31a      	add	r3, pc, #104	@ (adr r3, 80024c8 <UTILS_NanosecondsToTimespec+0x98>)
 8002460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002464:	f7fe fb32 	bl	8000acc <__aeabi_ldivmod>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	2b00      	cmp	r3, #0
 8002472:	da20      	bge.n	80024b6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	4a11      	ldr	r2, [pc, #68]	@ (80024c0 <UTILS_NanosecondsToTimespec+0x90>)
 800247a:	fb82 1203 	smull	r1, r2, r2, r3
 800247e:	1712      	asrs	r2, r2, #28
 8002480:	17db      	asrs	r3, r3, #31
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	3301      	adds	r3, #1
 8002486:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	6979      	ldr	r1, [r7, #20]
 8002490:	17c8      	asrs	r0, r1, #31
 8002492:	460c      	mov	r4, r1
 8002494:	4605      	mov	r5, r0
 8002496:	ebb2 0804 	subs.w	r8, r2, r4
 800249a:	eb63 0905 	sbc.w	r9, r3, r5
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	4906      	ldr	r1, [pc, #24]	@ (80024c4 <UTILS_NanosecondsToTimespec+0x94>)
 80024ac:	fb01 f303 	mul.w	r3, r1, r3
 80024b0:	441a      	add	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]
    }
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80024c0:	44b82fa1 	.word	0x44b82fa1
 80024c4:	3b9aca00 	.word	0x3b9aca00
 80024c8:	3b9aca00 	.word	0x3b9aca00
 80024cc:	00000000 	.word	0x00000000

080024d0 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 80024d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024d4:	b08e      	sub	sp, #56	@ 0x38
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80024da:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 80024dc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80024e0:	2300      	movs	r3, #0
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 80024e6:	f04f 0200 	mov.w	r2, #0
 80024ea:	f04f 0300 	mov.w	r3, #0
 80024ee:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 80024f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024f6:	4618      	mov	r0, r3
 80024f8:	f009 fa38 	bl	800b96c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 80024fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fe:	17da      	asrs	r2, r3, #31
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	61fa      	str	r2, [r7, #28]
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	f04f 0300 	mov.w	r3, #0
 800250c:	69b9      	ldr	r1, [r7, #24]
 800250e:	000b      	movs	r3, r1
 8002510:	2200      	movs	r2, #0
 8002512:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002518:	2200      	movs	r2, #0
 800251a:	461c      	mov	r4, r3
 800251c:	4615      	mov	r5, r2
 800251e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002522:	1911      	adds	r1, r2, r4
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	416b      	adcs	r3, r5
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800252e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002532:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002536:	4602      	mov	r2, r0
 8002538:	460b      	mov	r3, r1
 800253a:	f04f 0400 	mov.w	r4, #0
 800253e:	f04f 0500 	mov.w	r5, #0
 8002542:	015d      	lsls	r5, r3, #5
 8002544:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002548:	0154      	lsls	r4, r2, #5
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	ebb2 0800 	subs.w	r8, r2, r0
 8002552:	eb63 0901 	sbc.w	r9, r3, r1
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002562:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002566:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800256a:	4690      	mov	r8, r2
 800256c:	4699      	mov	r9, r3
 800256e:	eb18 0a00 	adds.w	sl, r8, r0
 8002572:	eb49 0b01 	adc.w	fp, r9, r1
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002582:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002586:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800258a:	ebb2 040a 	subs.w	r4, r2, sl
 800258e:	603c      	str	r4, [r7, #0]
 8002590:	eb63 030b 	sbc.w	r3, r3, fp
 8002594:	607b      	str	r3, [r7, #4]
 8002596:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259a:	4623      	mov	r3, r4
 800259c:	181b      	adds	r3, r3, r0
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	462b      	mov	r3, r5
 80025a2:	eb41 0303 	adc.w	r3, r1, r3
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	6a3a      	ldr	r2, [r7, #32]
 80025aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ae:	f7ff ff3f 	bl	8002430 <UTILS_NanosecondsToTimespec>

    return 0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	3738      	adds	r7, #56	@ 0x38
 80025b8:	46bd      	mov	sp, r7
 80025ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080025c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025c6:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_MspInit+0x50>)
 80025c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025ca:	4a11      	ldr	r2, [pc, #68]	@ (8002610 <HAL_MspInit+0x50>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80025d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_MspInit+0x50>)
 80025d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	607b      	str	r3, [r7, #4]
 80025dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025de:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_MspInit+0x50>)
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002610 <HAL_MspInit+0x50>)
 80025e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_MspInit+0x50>)
 80025ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025f2:	603b      	str	r3, [r7, #0]
 80025f4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80025f6:	2200      	movs	r2, #0
 80025f8:	210f      	movs	r1, #15
 80025fa:	f06f 0001 	mvn.w	r0, #1
 80025fe:	f000 fd6f 	bl	80030e0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002602:	f003 fc5d 	bl	8005ec0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000

08002614 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	@ 0x30
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002624:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <HAL_InitTick+0xc4>)
 8002626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002628:	4a2b      	ldr	r2, [pc, #172]	@ (80026d8 <HAL_InitTick+0xc4>)
 800262a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800262e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002630:	4b29      	ldr	r3, [pc, #164]	@ (80026d8 <HAL_InitTick+0xc4>)
 8002632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002634:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002638:	60bb      	str	r3, [r7, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800263c:	f107 020c 	add.w	r2, r7, #12
 8002640:	f107 0310 	add.w	r3, r7, #16
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f004 f932 	bl	80068b0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800264c:	f004 f91a 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 8002650:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002654:	4a21      	ldr	r2, [pc, #132]	@ (80026dc <HAL_InitTick+0xc8>)
 8002656:	fba2 2303 	umull	r2, r3, r2, r3
 800265a:	0c9b      	lsrs	r3, r3, #18
 800265c:	3b01      	subs	r3, #1
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002660:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002662:	4a20      	ldr	r2, [pc, #128]	@ (80026e4 <HAL_InitTick+0xd0>)
 8002664:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002666:	4b1e      	ldr	r3, [pc, #120]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002668:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800266c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800266e:	4a1c      	ldr	r2, [pc, #112]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002674:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_InitTick+0xcc>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002680:	4817      	ldr	r0, [pc, #92]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002682:	f004 fbdb 	bl	8006e3c <HAL_TIM_Base_Init>
 8002686:	4603      	mov	r3, r0
 8002688:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800268c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002690:	2b00      	cmp	r3, #0
 8002692:	d11b      	bne.n	80026cc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002694:	4812      	ldr	r0, [pc, #72]	@ (80026e0 <HAL_InitTick+0xcc>)
 8002696:	f004 fc99 	bl	8006fcc <HAL_TIM_Base_Start_IT>
 800269a:	4603      	mov	r3, r0
 800269c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80026a0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d111      	bne.n	80026cc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80026a8:	2019      	movs	r0, #25
 80026aa:	f000 fd33 	bl	8003114 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d808      	bhi.n	80026c6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	2019      	movs	r0, #25
 80026ba:	f000 fd11 	bl	80030e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026be:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <HAL_InitTick+0xd4>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	e002      	b.n	80026cc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80026cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3730      	adds	r7, #48	@ 0x30
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	40021000 	.word	0x40021000
 80026dc:	431bde83 	.word	0x431bde83
 80026e0:	20004a10 	.word	0x20004a10
 80026e4:	40012c00 	.word	0x40012c00
 80026e8:	20000008 	.word	0x20000008

080026ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <NMI_Handler+0x4>

080026f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <HardFault_Handler+0x4>

080026fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <MemManage_Handler+0x4>

08002704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <BusFault_Handler+0x4>

0800270c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002710:	bf00      	nop
 8002712:	e7fd      	b.n	8002710 <UsageFault_Handler+0x4>

08002714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002728:	4802      	ldr	r0, [pc, #8]	@ (8002734 <DMA1_Channel1_IRQHandler+0x10>)
 800272a:	f000 fee4 	bl	80034f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20004b90 	.word	0x20004b90

08002738 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800273c:	4802      	ldr	r0, [pc, #8]	@ (8002748 <DMA1_Channel2_IRQHandler+0x10>)
 800273e:	f000 feda 	bl	80034f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002742:	bf00      	nop
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20004bf0 	.word	0x20004bf0

0800274c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002750:	4802      	ldr	r0, [pc, #8]	@ (800275c <DMA1_Channel3_IRQHandler+0x10>)
 8002752:	f000 fed0 	bl	80034f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20004838 	.word	0x20004838

08002760 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002764:	4802      	ldr	r0, [pc, #8]	@ (8002770 <DMA1_Channel4_IRQHandler+0x10>)
 8002766:	f000 fec6 	bl	80034f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20004898 	.word	0x20004898

08002774 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002778:	4802      	ldr	r0, [pc, #8]	@ (8002784 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800277a:	f004 fe09 	bl	8007390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20004a10 	.word	0x20004a10

08002788 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <TIM2_IRQHandler+0x10>)
 800278e:	f004 fdff 	bl	8007390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20004a64 	.word	0x20004a64

0800279c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <I2C1_EV_IRQHandler+0x10>)
 80027a2:	f001 fc03 	bl	8003fac <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	200047e4 	.word	0x200047e4

080027b0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <I2C1_ER_IRQHandler+0x10>)
 80027b6:	f001 fc13 	bl	8003fe0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200047e4 	.word	0x200047e4

080027c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80027c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80027cc:	f001 f996 	bl	8003afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80027d8:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <LPUART1_IRQHandler+0x10>)
 80027da:	f006 f8a9 	bl	8008930 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20004afc 	.word	0x20004afc

080027e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return 1;
 80027ec:	2301      	movs	r3, #1
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <_kill>:

int _kill(int pid, int sig)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002802:	f017 ff51 	bl	801a6a8 <__errno>
 8002806:	4603      	mov	r3, r0
 8002808:	2216      	movs	r2, #22
 800280a:	601a      	str	r2, [r3, #0]
  return -1;
 800280c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_exit>:

void _exit (int status)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002820:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ffe7 	bl	80027f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800282a:	bf00      	nop
 800282c:	e7fd      	b.n	800282a <_exit+0x12>

0800282e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	60f8      	str	r0, [r7, #12]
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e00a      	b.n	8002856 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002840:	f3af 8000 	nop.w
 8002844:	4601      	mov	r1, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	60ba      	str	r2, [r7, #8]
 800284c:	b2ca      	uxtb	r2, r1
 800284e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	3301      	adds	r3, #1
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	429a      	cmp	r2, r3
 800285c:	dbf0      	blt.n	8002840 <_read+0x12>
  }

  return len;
 800285e:	687b      	ldr	r3, [r7, #4]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e009      	b.n	800288e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	60ba      	str	r2, [r7, #8]
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	3301      	adds	r3, #1
 800288c:	617b      	str	r3, [r7, #20]
 800288e:	697a      	ldr	r2, [r7, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	429a      	cmp	r2, r3
 8002894:	dbf1      	blt.n	800287a <_write+0x12>
  }
  return len;
 8002896:	687b      	ldr	r3, [r7, #4]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}

080028a0 <_close>:

int _close(int file)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028c8:	605a      	str	r2, [r3, #4]
  return 0;
 80028ca:	2300      	movs	r3, #0
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_isatty>:

int _isatty(int file)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028e0:	2301      	movs	r3, #1
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3714      	adds	r7, #20
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002910:	4a14      	ldr	r2, [pc, #80]	@ (8002964 <_sbrk+0x5c>)
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <_sbrk+0x60>)
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800291c:	4b13      	ldr	r3, [pc, #76]	@ (800296c <_sbrk+0x64>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002924:	4b11      	ldr	r3, [pc, #68]	@ (800296c <_sbrk+0x64>)
 8002926:	4a12      	ldr	r2, [pc, #72]	@ (8002970 <_sbrk+0x68>)
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <_sbrk+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	429a      	cmp	r2, r3
 8002936:	d207      	bcs.n	8002948 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002938:	f017 feb6 	bl	801a6a8 <__errno>
 800293c:	4603      	mov	r3, r0
 800293e:	220c      	movs	r2, #12
 8002940:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002946:	e009      	b.n	800295c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002948:	4b08      	ldr	r3, [pc, #32]	@ (800296c <_sbrk+0x64>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800294e:	4b07      	ldr	r3, [pc, #28]	@ (800296c <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	4a05      	ldr	r2, [pc, #20]	@ (800296c <_sbrk+0x64>)
 8002958:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800295a:	68fb      	ldr	r3, [r7, #12]
}
 800295c:	4618      	mov	r0, r3
 800295e:	3718      	adds	r7, #24
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20020000 	.word	0x20020000
 8002968:	00000400 	.word	0x00000400
 800296c:	20004a60 	.word	0x20004a60
 8002970:	2000b200 	.word	0x2000b200

08002974 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002978:	4b06      	ldr	r3, [pc, #24]	@ (8002994 <SystemInit+0x20>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297e:	4a05      	ldr	r2, [pc, #20]	@ (8002994 <SystemInit+0x20>)
 8002980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002988:	bf00      	nop
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000ed00 	.word	0xe000ed00

08002998 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800299e:	f107 0310 	add.w	r3, r7, #16
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029ac:	1d3b      	adds	r3, r7, #4
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	605a      	str	r2, [r3, #4]
 80029b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80029b6:	4b1d      	ldr	r3, [pc, #116]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029b8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80029bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80029be:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029c0:	22a9      	movs	r2, #169	@ 0xa9
 80029c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 80029ca:	4b18      	ldr	r3, [pc, #96]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029cc:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <MX_TIM2_Init+0x98>)
 80029ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d0:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029d8:	2200      	movs	r2, #0
 80029da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80029dc:	4813      	ldr	r0, [pc, #76]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029de:	f004 fa2d 	bl	8006e3c <HAL_TIM_Base_Init>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d001      	beq.n	80029ec <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029e8:	f7ff fc7e 	bl	80022e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029f2:	f107 0310 	add.w	r3, r7, #16
 80029f6:	4619      	mov	r1, r3
 80029f8:	480c      	ldr	r0, [pc, #48]	@ (8002a2c <MX_TIM2_Init+0x94>)
 80029fa:	f004 ff2d 	bl	8007858 <HAL_TIM_ConfigClockSource>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d001      	beq.n	8002a08 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002a04:	f7ff fc70 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a08:	2320      	movs	r3, #32
 8002a0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a10:	1d3b      	adds	r3, r7, #4
 8002a12:	4619      	mov	r1, r3
 8002a14:	4805      	ldr	r0, [pc, #20]	@ (8002a2c <MX_TIM2_Init+0x94>)
 8002a16:	f005 fcfd 	bl	8008414 <HAL_TIMEx_MasterConfigSynchronization>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002a20:	f7ff fc62 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002a24:	bf00      	nop
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20004a64 	.word	0x20004a64
 8002a30:	0001869f 	.word	0x0001869f

08002a34 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b08a      	sub	sp, #40	@ 0x28
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a3a:	f107 031c 	add.w	r3, r7, #28
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
 8002a42:	605a      	str	r2, [r3, #4]
 8002a44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a46:	463b      	mov	r3, r7
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
 8002a54:	615a      	str	r2, [r3, #20]
 8002a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a58:	4b32      	ldr	r3, [pc, #200]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a5a:	4a33      	ldr	r2, [pc, #204]	@ (8002b28 <MX_TIM3_Init+0xf4>)
 8002a5c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b2f      	ldr	r3, [pc, #188]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a6c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002a70:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a72:	4b2c      	ldr	r3, [pc, #176]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a78:	4b2a      	ldr	r3, [pc, #168]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a7e:	4829      	ldr	r0, [pc, #164]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a80:	f004 fb1c 	bl	80070bc <HAL_TIM_PWM_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8002a8a:	f7ff fc2d 	bl	80022e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a92:	2300      	movs	r3, #0
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a96:	f107 031c 	add.w	r3, r7, #28
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	4821      	ldr	r0, [pc, #132]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002a9e:	f005 fcb9 	bl	8008414 <HAL_TIMEx_MasterConfigSynchronization>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8002aa8:	f7ff fc1e 	bl	80022e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002aac:	2360      	movs	r3, #96	@ 0x60
 8002aae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002abc:	463b      	mov	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4818      	ldr	r0, [pc, #96]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002ac4:	f004 fdb4 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d001      	beq.n	8002ad2 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8002ace:	f7ff fc0b 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	2204      	movs	r2, #4
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4812      	ldr	r0, [pc, #72]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002ada:	f004 fda9 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002ae4:	f7ff fc00 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002ae8:	463b      	mov	r3, r7
 8002aea:	2208      	movs	r2, #8
 8002aec:	4619      	mov	r1, r3
 8002aee:	480d      	ldr	r0, [pc, #52]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002af0:	f004 fd9e 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <MX_TIM3_Init+0xca>
  {
    Error_Handler();
 8002afa:	f7ff fbf5 	bl	80022e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002afe:	463b      	mov	r3, r7
 8002b00:	220c      	movs	r2, #12
 8002b02:	4619      	mov	r1, r3
 8002b04:	4807      	ldr	r0, [pc, #28]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002b06:	f004 fd93 	bl	8007630 <HAL_TIM_PWM_ConfigChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8002b10:	f7ff fbea 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002b14:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <MX_TIM3_Init+0xf0>)
 8002b16:	f000 f84d 	bl	8002bb4 <HAL_TIM_MspPostInit>

}
 8002b1a:	bf00      	nop
 8002b1c:	3728      	adds	r7, #40	@ 0x28
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20004ab0 	.word	0x20004ab0
 8002b28:	40000400 	.word	0x40000400

08002b2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b3c:	d113      	bne.n	8002b66 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8002b70 <HAL_TIM_Base_MspInit+0x44>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	4a0b      	ldr	r2, [pc, #44]	@ (8002b70 <HAL_TIM_Base_MspInit+0x44>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b4a:	4b09      	ldr	r3, [pc, #36]	@ (8002b70 <HAL_TIM_Base_MspInit+0x44>)
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002b56:	2200      	movs	r2, #0
 8002b58:	2105      	movs	r1, #5
 8002b5a:	201c      	movs	r0, #28
 8002b5c:	f000 fac0 	bl	80030e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b60:	201c      	movs	r0, #28
 8002b62:	f000 fad7 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000

08002b74 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a0a      	ldr	r2, [pc, #40]	@ (8002bac <HAL_TIM_PWM_MspInit+0x38>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d10b      	bne.n	8002b9e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b86:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	4a09      	ldr	r2, [pc, #36]	@ (8002bb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b8c:	f043 0302 	orr.w	r3, r3, #2
 8002b90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40000400 	.word	0x40000400
 8002bb0:	40021000 	.word	0x40021000

08002bb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b08a      	sub	sp, #40	@ 0x28
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	605a      	str	r2, [r3, #4]
 8002bc6:	609a      	str	r2, [r3, #8]
 8002bc8:	60da      	str	r2, [r3, #12]
 8002bca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c50 <HAL_TIM_MspPostInit+0x9c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d138      	bne.n	8002c48 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002c54 <HAL_TIM_MspPostInit+0xa0>)
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bda:	4a1e      	ldr	r2, [pc, #120]	@ (8002c54 <HAL_TIM_MspPostInit+0xa0>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <HAL_TIM_MspPostInit+0xa0>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bee:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_TIM_MspPostInit+0xa0>)
 8002bf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bf2:	4a18      	ldr	r2, [pc, #96]	@ (8002c54 <HAL_TIM_MspPostInit+0xa0>)
 8002bf4:	f043 0302 	orr.w	r3, r3, #2
 8002bf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bfa:	4b16      	ldr	r3, [pc, #88]	@ (8002c54 <HAL_TIM_MspPostInit+0xa0>)
 8002bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002c06:	2350      	movs	r3, #80	@ 0x50
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c12:	2300      	movs	r3, #0
 8002c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c16:	2302      	movs	r3, #2
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c1a:	f107 0314 	add.w	r3, r7, #20
 8002c1e:	4619      	mov	r1, r3
 8002c20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c24:	f000 fdd0 	bl	80037c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	4619      	mov	r1, r3
 8002c42:	4805      	ldr	r0, [pc, #20]	@ (8002c58 <HAL_TIM_MspPostInit+0xa4>)
 8002c44:	f000 fdc0 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c48:	bf00      	nop
 8002c4a:	3728      	adds	r7, #40	@ 0x28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40021000 	.word	0x40021000
 8002c58:	48000400 	.word	0x48000400

08002c5c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002c60:	4b21      	ldr	r3, [pc, #132]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c62:	4a22      	ldr	r2, [pc, #136]	@ (8002cec <MX_LPUART1_UART_Init+0x90>)
 8002c64:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002c66:	4b20      	ldr	r3, [pc, #128]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c6c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002c74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002c80:	4b19      	ldr	r3, [pc, #100]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c82:	220c      	movs	r2, #12
 8002c84:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c86:	4b18      	ldr	r3, [pc, #96]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002c8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002c9e:	4812      	ldr	r0, [pc, #72]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002ca0:	f005 fc94 	bl	80085cc <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002caa:	f7ff fb1d 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cae:	2100      	movs	r1, #0
 8002cb0:	480d      	ldr	r0, [pc, #52]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002cb2:	f007 f9a4 	bl	8009ffe <HAL_UARTEx_SetTxFifoThreshold>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d001      	beq.n	8002cc0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002cbc:	f7ff fb14 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	4809      	ldr	r0, [pc, #36]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002cc4:	f007 f9d9 	bl	800a07a <HAL_UARTEx_SetRxFifoThreshold>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002cce:	f7ff fb0b 	bl	80022e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002cd2:	4805      	ldr	r0, [pc, #20]	@ (8002ce8 <MX_LPUART1_UART_Init+0x8c>)
 8002cd4:	f007 f95a 	bl	8009f8c <HAL_UARTEx_DisableFifoMode>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002cde:	f7ff fb03 	bl	80022e8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002ce2:	bf00      	nop
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20004afc 	.word	0x20004afc
 8002cec:	40008000 	.word	0x40008000

08002cf0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b09e      	sub	sp, #120	@ 0x78
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d08:	f107 0310 	add.w	r3, r7, #16
 8002d0c:	2254      	movs	r2, #84	@ 0x54
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f017 fc35 	bl	801a580 <memset>
  if(uartHandle->Instance==LPUART1)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8002e54 <HAL_UART_MspInit+0x164>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	f040 8094 	bne.w	8002e4a <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002d22:	2320      	movs	r3, #32
 8002d24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002d26:	2300      	movs	r3, #0
 8002d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d2a:	f107 0310 	add.w	r3, r7, #16
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f003 fe36 	bl	80069a0 <HAL_RCCEx_PeriphCLKConfig>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002d3a:	f7ff fad5 	bl	80022e8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002d3e:	4b46      	ldr	r3, [pc, #280]	@ (8002e58 <HAL_UART_MspInit+0x168>)
 8002d40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d42:	4a45      	ldr	r2, [pc, #276]	@ (8002e58 <HAL_UART_MspInit+0x168>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002d4a:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <HAL_UART_MspInit+0x168>)
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d56:	4b40      	ldr	r3, [pc, #256]	@ (8002e58 <HAL_UART_MspInit+0x168>)
 8002d58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002e58 <HAL_UART_MspInit+0x168>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d62:	4b3d      	ldr	r3, [pc, #244]	@ (8002e58 <HAL_UART_MspInit+0x168>)
 8002d64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002d6e:	230c      	movs	r3, #12
 8002d70:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d72:	2302      	movs	r3, #2
 8002d74:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d76:	2300      	movs	r3, #0
 8002d78:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002d7e:	230c      	movs	r3, #12
 8002d80:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d82:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002d86:	4619      	mov	r1, r3
 8002d88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d8c:	f000 fd1c 	bl	80037c8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel1;
 8002d90:	4b32      	ldr	r3, [pc, #200]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002d92:	4a33      	ldr	r2, [pc, #204]	@ (8002e60 <HAL_UART_MspInit+0x170>)
 8002d94:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002d96:	4b31      	ldr	r3, [pc, #196]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002d98:	2223      	movs	r2, #35	@ 0x23
 8002d9a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d9c:	4b2f      	ldr	r3, [pc, #188]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002d9e:	2210      	movs	r2, #16
 8002da0:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002da2:	4b2e      	ldr	r3, [pc, #184]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002da8:	4b2c      	ldr	r3, [pc, #176]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002daa:	2280      	movs	r2, #128	@ 0x80
 8002dac:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dae:	4b2b      	ldr	r3, [pc, #172]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002db4:	4b29      	ldr	r3, [pc, #164]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002dba:	4b28      	ldr	r3, [pc, #160]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002dc0:	4b26      	ldr	r3, [pc, #152]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002dc2:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002dc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002dc8:	4824      	ldr	r0, [pc, #144]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002dca:	f000 f9b1 	bl	8003130 <HAL_DMA_Init>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002dd4:	f7ff fa88 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a20      	ldr	r2, [pc, #128]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002ddc:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002dde:	4a1f      	ldr	r2, [pc, #124]	@ (8002e5c <HAL_UART_MspInit+0x16c>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel2;
 8002de4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002de6:	4a20      	ldr	r2, [pc, #128]	@ (8002e68 <HAL_UART_MspInit+0x178>)
 8002de8:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002dea:	4b1e      	ldr	r3, [pc, #120]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002dec:	2222      	movs	r2, #34	@ 0x22
 8002dee:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002df0:	4b1c      	ldr	r3, [pc, #112]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002df6:	4b1b      	ldr	r3, [pc, #108]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002dfe:	2280      	movs	r2, #128	@ 0x80
 8002e00:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e02:	4b18      	ldr	r3, [pc, #96]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e08:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 8002e0e:	4b15      	ldr	r3, [pc, #84]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002e10:	2220      	movs	r2, #32
 8002e12:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e14:	4b13      	ldr	r3, [pc, #76]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002e16:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002e1a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002e1c:	4811      	ldr	r0, [pc, #68]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002e1e:	f000 f987 	bl	8003130 <HAL_DMA_Init>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d001      	beq.n	8002e2c <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 8002e28:	f7ff fa5e 	bl	80022e8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002e30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002e34:	4a0b      	ldr	r2, [pc, #44]	@ (8002e64 <HAL_UART_MspInit+0x174>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	2105      	movs	r1, #5
 8002e3e:	205b      	movs	r0, #91	@ 0x5b
 8002e40:	f000 f94e 	bl	80030e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002e44:	205b      	movs	r0, #91	@ 0x5b
 8002e46:	f000 f965 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3778      	adds	r7, #120	@ 0x78
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40008000 	.word	0x40008000
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	20004b90 	.word	0x20004b90
 8002e60:	40020008 	.word	0x40020008
 8002e64:	20004bf0 	.word	0x20004bf0
 8002e68:	4002001c 	.word	0x4002001c

08002e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e6c:	480d      	ldr	r0, [pc, #52]	@ (8002ea4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e70:	f7ff fd80 	bl	8002974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e74:	480c      	ldr	r0, [pc, #48]	@ (8002ea8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e76:	490d      	ldr	r1, [pc, #52]	@ (8002eac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e78:	4a0d      	ldr	r2, [pc, #52]	@ (8002eb0 <LoopForever+0xe>)
  movs r3, #0
 8002e7a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002e7c:	e002      	b.n	8002e84 <LoopCopyDataInit>

08002e7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e82:	3304      	adds	r3, #4

08002e84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e88:	d3f9      	bcc.n	8002e7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002e8c:	4c0a      	ldr	r4, [pc, #40]	@ (8002eb8 <LoopForever+0x16>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e90:	e001      	b.n	8002e96 <LoopFillZerobss>

08002e92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e94:	3204      	adds	r2, #4

08002e96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e98:	d3fb      	bcc.n	8002e92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f017 fc0b 	bl	801a6b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e9e:	f7ff f8f9 	bl	8002094 <main>

08002ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ea2:	e7fe      	b.n	8002ea2 <LoopForever>
  ldr   r0, =_estack
 8002ea4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eac:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002eb0:	0801c1f4 	.word	0x0801c1f4
  ldr r2, =_sbss
 8002eb4:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002eb8:	2000b200 	.word	0x2000b200

08002ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC1_2_IRQHandler>

08002ebe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f000 f8fe 	bl	80030ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f7ff fba0 	bl	8002614 <HAL_InitTick>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d002      	beq.n	8002ee0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	71fb      	strb	r3, [r7, #7]
 8002ede:	e001      	b.n	8002ee4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002ee0:	f7ff fb6e 	bl	80025c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ee4:	79fb      	ldrb	r3, [r7, #7]

}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3708      	adds	r7, #8
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
	...

08002ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef4:	4b05      	ldr	r3, [pc, #20]	@ (8002f0c <HAL_IncTick+0x1c>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b05      	ldr	r3, [pc, #20]	@ (8002f10 <HAL_IncTick+0x20>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	4a03      	ldr	r2, [pc, #12]	@ (8002f0c <HAL_IncTick+0x1c>)
 8002f00:	6013      	str	r3, [r2, #0]
}
 8002f02:	bf00      	nop
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	20004c50 	.word	0x20004c50
 8002f10:	2000000c 	.word	0x2000000c

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	@ (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20004c50 	.word	0x20004c50

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f44:	d004      	beq.n	8002f50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <HAL_Delay+0x40>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f50:	bf00      	nop
 8002f52:	f7ff ffdf 	bl	8002f14 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d8f7      	bhi.n	8002f52 <HAL_Delay+0x26>
  {
  }
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000000c 	.word	0x2000000c

08002f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b085      	sub	sp, #20
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f80:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fa2:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	60d3      	str	r3, [r2, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fbc:	4b04      	ldr	r3, [pc, #16]	@ (8002fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	0a1b      	lsrs	r3, r3, #8
 8002fc2:	f003 0307 	and.w	r3, r3, #7
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	db0b      	blt.n	8002ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	f003 021f 	and.w	r2, r3, #31
 8002fec:	4907      	ldr	r1, [pc, #28]	@ (800300c <__NVIC_EnableIRQ+0x38>)
 8002fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8002ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000e100 	.word	0xe000e100

08003010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	@ (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	@ (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003064:	b480      	push	{r7}
 8003066:	b089      	sub	sp, #36	@ 0x24
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	f1c3 0307 	rsb	r3, r3, #7
 800307e:	2b04      	cmp	r3, #4
 8003080:	bf28      	it	cs
 8003082:	2304      	movcs	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	3304      	adds	r3, #4
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <NVIC_EncodePriority+0x30>
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3b03      	subs	r3, #3
 8003092:	e000      	b.n	8003096 <NVIC_EncodePriority+0x32>
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003098:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43da      	mvns	r2, r3
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	401a      	ands	r2, r3
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	43d9      	mvns	r1, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030bc:	4313      	orrs	r3, r2
         );
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3724      	adds	r7, #36	@ 0x24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b082      	sub	sp, #8
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff ff4c 	bl	8002f70 <__NVIC_SetPriorityGrouping>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	4603      	mov	r3, r0
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030ee:	f7ff ff63 	bl	8002fb8 <__NVIC_GetPriorityGrouping>
 80030f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7ff ffb3 	bl	8003064 <NVIC_EncodePriority>
 80030fe:	4602      	mov	r2, r0
 8003100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff82 	bl	8003010 <__NVIC_SetPriority>
}
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff56 	bl	8002fd4 <__NVIC_EnableIRQ>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e08d      	b.n	800325e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	461a      	mov	r2, r3
 8003148:	4b47      	ldr	r3, [pc, #284]	@ (8003268 <HAL_DMA_Init+0x138>)
 800314a:	429a      	cmp	r2, r3
 800314c:	d80f      	bhi.n	800316e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	461a      	mov	r2, r3
 8003154:	4b45      	ldr	r3, [pc, #276]	@ (800326c <HAL_DMA_Init+0x13c>)
 8003156:	4413      	add	r3, r2
 8003158:	4a45      	ldr	r2, [pc, #276]	@ (8003270 <HAL_DMA_Init+0x140>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a42      	ldr	r2, [pc, #264]	@ (8003274 <HAL_DMA_Init+0x144>)
 800316a:	641a      	str	r2, [r3, #64]	@ 0x40
 800316c:	e00e      	b.n	800318c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	4b40      	ldr	r3, [pc, #256]	@ (8003278 <HAL_DMA_Init+0x148>)
 8003176:	4413      	add	r3, r2
 8003178:	4a3d      	ldr	r2, [pc, #244]	@ (8003270 <HAL_DMA_Init+0x140>)
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	091b      	lsrs	r3, r3, #4
 8003180:	009a      	lsls	r2, r3, #2
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a3c      	ldr	r2, [pc, #240]	@ (800327c <HAL_DMA_Init+0x14c>)
 800318a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2202      	movs	r2, #2
 8003190:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80031a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80031b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa90 	bl	8003704 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ec:	d102      	bne.n	80031f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003208:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d010      	beq.n	8003234 <HAL_DMA_Init+0x104>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d80c      	bhi.n	8003234 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fab0 	bl	8003780 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003224:	2200      	movs	r2, #0
 8003226:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	e008      	b.n	8003246 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40020407 	.word	0x40020407
 800326c:	bffdfff8 	.word	0xbffdfff8
 8003270:	cccccccd 	.word	0xcccccccd
 8003274:	40020000 	.word	0x40020000
 8003278:	bffdfbf8 	.word	0xbffdfbf8
 800327c:	40020400 	.word	0x40020400

08003280 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800328e:	2300      	movs	r3, #0
 8003290:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_DMA_Start_IT+0x20>
 800329c:	2302      	movs	r3, #2
 800329e:	e066      	b.n	800336e <HAL_DMA_Start_IT+0xee>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d155      	bne.n	8003360 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2200      	movs	r2, #0
 80032c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f022 0201 	bic.w	r2, r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	68b9      	ldr	r1, [r7, #8]
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f9d5 	bl	8003688 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f042 020e 	orr.w	r2, r2, #14
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e00f      	b.n	8003318 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0204 	bic.w	r2, r2, #4
 8003306:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 020a 	orr.w	r2, r2, #10
 8003316:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d007      	beq.n	8003336 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003330:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003334:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800333a:	2b00      	cmp	r3, #0
 800333c:	d007      	beq.n	800334e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800334c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
 800335e:	e005      	b.n	800336c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003368:	2302      	movs	r3, #2
 800336a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800336c:	7dfb      	ldrb	r3, [r7, #23]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003376:	b480      	push	{r7}
 8003378:	b085      	sub	sp, #20
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d005      	beq.n	800339a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2204      	movs	r2, #4
 8003392:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
 8003398:	e037      	b.n	800340a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 020e 	bic.w	r2, r2, #14
 80033a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ce:	f003 021f 	and.w	r2, r3, #31
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f202 	lsl.w	r2, r1, r2
 80033dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80033e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00c      	beq.n	800340a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003408:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800341a:	7bfb      	ldrb	r3, [r7, #15]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003430:	2300      	movs	r3, #0
 8003432:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d00d      	beq.n	800345c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2204      	movs	r2, #4
 8003444:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	73fb      	strb	r3, [r7, #15]
 800345a:	e047      	b.n	80034ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 020e 	bic.w	r2, r2, #14
 800346a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f022 0201 	bic.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800348a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003498:	2101      	movs	r1, #1
 800349a:	fa01 f202 	lsl.w	r2, r1, r2
 800349e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80034a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4798      	blx	r3
    }
  }
  return status;
 80034ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3710      	adds	r7, #16
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b084      	sub	sp, #16
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003512:	f003 031f 	and.w	r3, r3, #31
 8003516:	2204      	movs	r2, #4
 8003518:	409a      	lsls	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4013      	ands	r3, r2
 800351e:	2b00      	cmp	r3, #0
 8003520:	d026      	beq.n	8003570 <HAL_DMA_IRQHandler+0x7a>
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d021      	beq.n	8003570 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d107      	bne.n	800354a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 0204 	bic.w	r2, r2, #4
 8003548:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	f003 021f 	and.w	r2, r3, #31
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003556:	2104      	movs	r1, #4
 8003558:	fa01 f202 	lsl.w	r2, r1, r2
 800355c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003562:	2b00      	cmp	r3, #0
 8003564:	d071      	beq.n	800364a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800356e:	e06c      	b.n	800364a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003574:	f003 031f 	and.w	r3, r3, #31
 8003578:	2202      	movs	r2, #2
 800357a:	409a      	lsls	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	4013      	ands	r3, r2
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02e      	beq.n	80035e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d029      	beq.n	80035e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0320 	and.w	r3, r3, #32
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f022 020a 	bic.w	r2, r2, #10
 80035aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b8:	f003 021f 	and.w	r2, r3, #31
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	2102      	movs	r1, #2
 80035c2:	fa01 f202 	lsl.w	r2, r1, r2
 80035c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d038      	beq.n	800364a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035e0:	e033      	b.n	800364a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f003 031f 	and.w	r3, r3, #31
 80035ea:	2208      	movs	r2, #8
 80035ec:	409a      	lsls	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d02a      	beq.n	800364c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d025      	beq.n	800364c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f022 020e 	bic.w	r2, r2, #14
 800360e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003614:	f003 021f 	and.w	r2, r3, #31
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361c:	2101      	movs	r1, #1
 800361e:	fa01 f202 	lsl.w	r2, r1, r2
 8003622:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2200      	movs	r2, #0
 8003636:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800363e:	2b00      	cmp	r3, #0
 8003640:	d004      	beq.n	800364c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800364a:	bf00      	nop
 800364c:	bf00      	nop
}
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003662:	b2db      	uxtb	r3, r3
}
 8003664:	4618      	mov	r0, r3
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 800367c:	4618      	mov	r0, r3
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800369e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d108      	bne.n	80036e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036e6:	e007      	b.n	80036f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	4b16      	ldr	r3, [pc, #88]	@ (800376c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d802      	bhi.n	800371e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003718:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e001      	b.n	8003722 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003720:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3b08      	subs	r3, #8
 800372e:	4a12      	ldr	r2, [pc, #72]	@ (8003778 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0b      	ldr	r2, [pc, #44]	@ (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800374e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2201      	movs	r2, #1
 8003758:	409a      	lsls	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40020407 	.word	0x40020407
 8003770:	40020800 	.word	0x40020800
 8003774:	40020820 	.word	0x40020820
 8003778:	cccccccd 	.word	0xcccccccd
 800377c:	40020880 	.word	0x40020880

08003780 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4b0b      	ldr	r3, [pc, #44]	@ (80037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a08      	ldr	r2, [pc, #32]	@ (80037c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037a2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2201      	movs	r2, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	1000823f 	.word	0x1000823f
 80037c4:	40020940 	.word	0x40020940

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037d6:	e15a      	b.n	8003a8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 814c 	beq.w	8003a88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d005      	beq.n	8003808 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003804:	2b02      	cmp	r3, #2
 8003806:	d130      	bne.n	800386a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800383e:	2201      	movs	r2, #1
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0201 	and.w	r2, r3, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d017      	beq.n	80038a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d123      	bne.n	80038fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	6939      	ldr	r1, [r7, #16]
 80038f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a6 	beq.w	8003a88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393c:	4b5b      	ldr	r3, [pc, #364]	@ (8003aac <HAL_GPIO_Init+0x2e4>)
 800393e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003940:	4a5a      	ldr	r2, [pc, #360]	@ (8003aac <HAL_GPIO_Init+0x2e4>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6613      	str	r3, [r2, #96]	@ 0x60
 8003948:	4b58      	ldr	r3, [pc, #352]	@ (8003aac <HAL_GPIO_Init+0x2e4>)
 800394a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003954:	4a56      	ldr	r2, [pc, #344]	@ (8003ab0 <HAL_GPIO_Init+0x2e8>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800397e:	d01f      	beq.n	80039c0 <HAL_GPIO_Init+0x1f8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a4c      	ldr	r2, [pc, #304]	@ (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d019      	beq.n	80039bc <HAL_GPIO_Init+0x1f4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a4b      	ldr	r2, [pc, #300]	@ (8003ab8 <HAL_GPIO_Init+0x2f0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_GPIO_Init+0x1f0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <HAL_GPIO_Init+0x2f4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00d      	beq.n	80039b4 <HAL_GPIO_Init+0x1ec>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a49      	ldr	r2, [pc, #292]	@ (8003ac0 <HAL_GPIO_Init+0x2f8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <HAL_GPIO_Init+0x1e8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a48      	ldr	r2, [pc, #288]	@ (8003ac4 <HAL_GPIO_Init+0x2fc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_GPIO_Init+0x1e4>
 80039a8:	2305      	movs	r3, #5
 80039aa:	e00a      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039ac:	2306      	movs	r3, #6
 80039ae:	e008      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b0:	2304      	movs	r3, #4
 80039b2:	e006      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b4:	2303      	movs	r3, #3
 80039b6:	e004      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e002      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039c0:	2300      	movs	r3, #0
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d2:	4937      	ldr	r1, [pc, #220]	@ (8003ab0 <HAL_GPIO_Init+0x2e8>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e0:	4b39      	ldr	r3, [pc, #228]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a04:	4a30      	ldr	r2, [pc, #192]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a2e:	4a26      	ldr	r2, [pc, #152]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a34:	4b24      	ldr	r3, [pc, #144]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a58:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a82:	4a11      	ldr	r2, [pc, #68]	@ (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f ae9d 	bne.w	80037d8 <HAL_GPIO_Init+0x10>
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	48000400 	.word	0x48000400
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	48000c00 	.word	0x48000c00
 8003ac0:	48001000 	.word	0x48001000
 8003ac4:	48001400 	.word	0x48001400
 8003ac8:	40010400 	.word	0x40010400

08003acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003adc:	787b      	ldrb	r3, [r7, #1]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ae8:	e002      	b.n	8003af0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b06:	4b08      	ldr	r3, [pc, #32]	@ (8003b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b12:	4a05      	ldr	r2, [pc, #20]	@ (8003b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f806 	bl	8003b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40010400 	.word	0x40010400

08003b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b082      	sub	sp, #8
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e08d      	b.n	8003c70 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d106      	bne.n	8003b6e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7fe f857 	bl	8001c1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2224      	movs	r2, #36	@ 0x24
 8003b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f022 0201 	bic.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003b92:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689a      	ldr	r2, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ba2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d107      	bne.n	8003bbc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	e006      	b.n	8003bca <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	689a      	ldr	r2, [r3, #8]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003bc8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	2b02      	cmp	r3, #2
 8003bd0:	d108      	bne.n	8003be4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	e007      	b.n	8003bf4 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bf2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6812      	ldr	r2, [r2, #0]
 8003bfe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c06:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003c16:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691a      	ldr	r2, [r3, #16]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	699b      	ldr	r3, [r3, #24]
 8003c28:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	430a      	orrs	r2, r1
 8003c30:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69d9      	ldr	r1, [r3, #28]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1a      	ldr	r2, [r3, #32]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b088      	sub	sp, #32
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	4608      	mov	r0, r1
 8003c82:	4611      	mov	r1, r2
 8003c84:	461a      	mov	r2, r3
 8003c86:	4603      	mov	r3, r0
 8003c88:	817b      	strh	r3, [r7, #10]
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	813b      	strh	r3, [r7, #8]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	f040 80f9 	bne.w	8003e92 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_I2C_Mem_Write+0x34>
 8003ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cb2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0ed      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_Mem_Write+0x4e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	e0e6      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003cce:	f7ff f921 	bl	8002f14 <HAL_GetTick>
 8003cd2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	9300      	str	r3, [sp, #0]
 8003cd8:	2319      	movs	r3, #25
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f001 fcda 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e0d1      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2221      	movs	r2, #33	@ 0x21
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2240      	movs	r2, #64	@ 0x40
 8003cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	6a3a      	ldr	r2, [r7, #32]
 8003d0a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d18:	88f8      	ldrh	r0, [r7, #6]
 8003d1a:	893a      	ldrh	r2, [r7, #8]
 8003d1c:	8979      	ldrh	r1, [r7, #10]
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	9301      	str	r3, [sp, #4]
 8003d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	4603      	mov	r3, r0
 8003d28:	68f8      	ldr	r0, [r7, #12]
 8003d2a:	f000 ff5f 	bl	8004bec <I2C_RequestMemoryWrite>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e0a9      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2bff      	cmp	r3, #255	@ 0xff
 8003d48:	d90e      	bls.n	8003d68 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	22ff      	movs	r2, #255	@ 0xff
 8003d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	8979      	ldrh	r1, [r7, #10]
 8003d58:	2300      	movs	r3, #0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f001 fe5d 	bl	8005a20 <I2C_TransferConfig>
 8003d66:	e00f      	b.n	8003d88 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d76:	b2da      	uxtb	r2, r3
 8003d78:	8979      	ldrh	r1, [r7, #10]
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d82:	68f8      	ldr	r0, [r7, #12]
 8003d84:	f001 fe4c 	bl	8005a20 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f001 fcdd 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e07b      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d034      	beq.n	8003e40 <HAL_I2C_Mem_Write+0x1c8>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d130      	bne.n	8003e40 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de4:	2200      	movs	r2, #0
 8003de6:	2180      	movs	r1, #128	@ 0x80
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f001 fc56 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d001      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e04d      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	2bff      	cmp	r3, #255	@ 0xff
 8003e00:	d90e      	bls.n	8003e20 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	22ff      	movs	r2, #255	@ 0xff
 8003e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	8979      	ldrh	r1, [r7, #10]
 8003e10:	2300      	movs	r3, #0
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	f001 fe01 	bl	8005a20 <I2C_TransferConfig>
 8003e1e:	e00f      	b.n	8003e40 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	8979      	ldrh	r1, [r7, #10]
 8003e32:	2300      	movs	r3, #0
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f001 fdf0 	bl	8005a20 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d19e      	bne.n	8003d88 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f001 fcc3 	bl	80057da <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e01a      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2220      	movs	r2, #32
 8003e64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	4b0a      	ldr	r3, [pc, #40]	@ (8003e9c <HAL_I2C_Mem_Write+0x224>)
 8003e72:	400b      	ands	r3, r1
 8003e74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e000      	b.n	8003e94 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003e92:	2302      	movs	r3, #2
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3718      	adds	r7, #24
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	fe00e800 	.word	0xfe00e800

08003ea0 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	817b      	strh	r3, [r7, #10]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	813b      	strh	r3, [r7, #8]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b20      	cmp	r3, #32
 8003ec4:	d166      	bne.n	8003f94 <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <HAL_I2C_Mem_Read_IT+0x32>
 8003ecc:	8bbb      	ldrh	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d105      	bne.n	8003ede <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e05b      	b.n	8003f96 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003eec:	d101      	bne.n	8003ef2 <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e051      	b.n	8003f96 <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_I2C_Mem_Read_IT+0x60>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e04a      	b.n	8003f96 <HAL_I2C_Mem_Read_IT+0xf6>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2222      	movs	r2, #34	@ 0x22
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2240      	movs	r2, #64	@ 0x40
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8bba      	ldrh	r2, [r7, #28]
 8003f28:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa0 <HAL_I2C_Mem_Read_IT+0x100>)
 8003f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa4 <HAL_I2C_Mem_Read_IT+0x104>)
 8003f34:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003f36:	897a      	ldrh	r2, [r7, #10]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f3c:	88fb      	ldrh	r3, [r7, #6]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d109      	bne.n	8003f56 <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f52:	651a      	str	r2, [r3, #80]	@ 0x50
 8003f54:	e00b      	b.n	8003f6e <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f56:	893b      	ldrh	r3, [r7, #8]
 8003f58:	0a1b      	lsrs	r3, r3, #8
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 8003f64:	893b      	ldrh	r3, [r7, #8]
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	8979      	ldrh	r1, [r7, #10]
 8003f74:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa8 <HAL_I2C_Mem_Read_IT+0x108>)
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2300      	movs	r3, #0
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f001 fd50 	bl	8005a20 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f88:	2101      	movs	r1, #1
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f001 fd7a 	bl	8005a84 <I2C_Enable_IRQ>

    return HAL_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	e000      	b.n	8003f96 <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 8003f94:	2302      	movs	r3, #2
  }
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	ffff0000 	.word	0xffff0000
 8003fa4:	08004175 	.word	0x08004175
 8003fa8:	80002000 	.word	0x80002000

08003fac <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d005      	beq.n	8003fd8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fd0:	68ba      	ldr	r2, [r7, #8]
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	4798      	blx	r3
  }
}
 8003fd8:	bf00      	nop
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d010      	beq.n	8004026 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	09db      	lsrs	r3, r3, #7
 8004008:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004024:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	0a9b      	lsrs	r3, r3, #10
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d010      	beq.n	8004054 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	09db      	lsrs	r3, r3, #7
 8004036:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004042:	f043 0208 	orr.w	r2, r3, #8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004052:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	0a5b      	lsrs	r3, r3, #9
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d010      	beq.n	8004082 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	09db      	lsrs	r3, r3, #7
 8004064:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004070:	f043 0202 	orr.w	r2, r3, #2
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004080:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 030b 	and.w	r3, r3, #11
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f001 f9a7 	bl	80053e8 <I2C_ITError>
  }
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80040aa:	bf00      	nop
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr

080040b6 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b083      	sub	sp, #12
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
 80040fa:	460b      	mov	r3, r1
 80040fc:	70fb      	strb	r3, [r7, #3]
 80040fe:	4613      	mov	r3, r2
 8004100:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004102:	bf00      	nop
 8004104:	370c      	adds	r7, #12
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800410e:	b480      	push	{r7}
 8004110:	b083      	sub	sp, #12
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004116:	bf00      	nop
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800412a:	bf00      	nop
 800412c:	370c      	adds	r7, #12
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800413e:	bf00      	nop
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800414a:	b480      	push	{r7}
 800414c:	b083      	sub	sp, #12
 800414e:	af00      	add	r7, sp, #0
 8004150:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004152:	bf00      	nop
 8004154:	370c      	adds	r7, #12
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415e:	b480      	push	{r7}
 8004160:	b083      	sub	sp, #12
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
	...

08004174 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b088      	sub	sp, #32
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004180:	4b93      	ldr	r3, [pc, #588]	@ (80043d0 <I2C_Mem_ISR_IT+0x25c>)
 8004182:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <I2C_Mem_ISR_IT+0x22>
 8004192:	2302      	movs	r3, #2
 8004194:	e118      	b.n	80043c8 <I2C_Mem_ISR_IT+0x254>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d013      	beq.n	80041d2 <I2C_Mem_ISR_IT+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	091b      	lsrs	r3, r3, #4
 80041ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00d      	beq.n	80041d2 <I2C_Mem_ISR_IT+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2210      	movs	r2, #16
 80041bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041c2:	f043 0204 	orr.w	r2, r3, #4
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f001 fa23 	bl	8005616 <I2C_Flush_TXDR>
 80041d0:	e0e5      	b.n	800439e <I2C_Mem_ISR_IT+0x22a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	089b      	lsrs	r3, r3, #2
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d023      	beq.n	8004226 <I2C_Mem_ISR_IT+0xb2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	089b      	lsrs	r3, r3, #2
 80041e2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01d      	beq.n	8004226 <I2C_Mem_ISR_IT+0xb2>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f023 0304 	bic.w	r3, r3, #4
 80041f0:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004204:	1c5a      	adds	r2, r3, #1
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800420e:	3b01      	subs	r3, #1
 8004210:	b29a      	uxth	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	3b01      	subs	r3, #1
 800421e:	b29a      	uxth	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004224:	e0bb      	b.n	800439e <I2C_Mem_ISR_IT+0x22a>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	085b      	lsrs	r3, r3, #1
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02d      	beq.n	800428e <I2C_Mem_ISR_IT+0x11a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	085b      	lsrs	r3, r3, #1
 8004236:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800423a:	2b00      	cmp	r3, #0
 800423c:	d027      	beq.n	800428e <I2C_Mem_ISR_IT+0x11a>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004242:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004246:	d118      	bne.n	800427a <I2C_Mem_ISR_IT+0x106>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800424c:	781a      	ldrb	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	1c5a      	adds	r2, r3, #1
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004262:	3b01      	subs	r3, #1
 8004264:	b29a      	uxth	r2, r3
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8004278:	e091      	b.n	800439e <I2C_Mem_ISR_IT+0x22a>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004282:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800428a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 800428c:	e087      	b.n	800439e <I2C_Mem_ISR_IT+0x22a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	09db      	lsrs	r3, r3, #7
 8004292:	f003 0301 	and.w	r3, r3, #1
 8004296:	2b00      	cmp	r3, #0
 8004298:	d03d      	beq.n	8004316 <I2C_Mem_ISR_IT+0x1a2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d037      	beq.n	8004316 <I2C_Mem_ISR_IT+0x1a2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02c      	beq.n	800430a <I2C_Mem_ISR_IT+0x196>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d128      	bne.n	800430a <I2C_Mem_ISR_IT+0x196>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2bff      	cmp	r3, #255	@ 0xff
 80042c0:	d910      	bls.n	80042e4 <I2C_Mem_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	22ff      	movs	r2, #255	@ 0xff
 80042c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042cc:	b299      	uxth	r1, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	2300      	movs	r3, #0
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f001 fb9f 	bl	8005a20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042e2:	e017      	b.n	8004314 <I2C_Mem_ISR_IT+0x1a0>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f2:	b299      	uxth	r1, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	2300      	movs	r3, #0
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f001 fb8c 	bl	8005a20 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004308:	e004      	b.n	8004314 <I2C_Mem_ISR_IT+0x1a0>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800430a:	2140      	movs	r1, #64	@ 0x40
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f001 f86b 	bl	80053e8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004312:	e044      	b.n	800439e <I2C_Mem_ISR_IT+0x22a>
 8004314:	e043      	b.n	800439e <I2C_Mem_ISR_IT+0x22a>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d03d      	beq.n	800439e <I2C_Mem_ISR_IT+0x22a>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	099b      	lsrs	r3, r3, #6
 8004326:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800432a:	2b00      	cmp	r3, #0
 800432c:	d037      	beq.n	800439e <I2C_Mem_ISR_IT+0x22a>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800432e:	2101      	movs	r1, #1
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f001 fc2b 	bl	8005b8c <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004336:	2102      	movs	r1, #2
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f001 fba3 	bl	8005a84 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b22      	cmp	r3, #34	@ 0x22
 8004348:	d101      	bne.n	800434e <I2C_Mem_ISR_IT+0x1da>
    {
      direction = I2C_GENERATE_START_READ;
 800434a:	4b22      	ldr	r3, [pc, #136]	@ (80043d4 <I2C_Mem_ISR_IT+0x260>)
 800434c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2bff      	cmp	r3, #255	@ 0xff
 8004356:	d910      	bls.n	800437a <I2C_Mem_ISR_IT+0x206>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	22ff      	movs	r2, #255	@ 0xff
 800435c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004362:	b299      	uxth	r1, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004368:	b2da      	uxtb	r2, r3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f001 fb54 	bl	8005a20 <I2C_TransferConfig>
 8004378:	e011      	b.n	800439e <I2C_Mem_ISR_IT+0x22a>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004388:	b299      	uxth	r1, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438e:	b2da      	uxtb	r2, r3
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f001 fb41 	bl	8005a20 <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <I2C_Mem_ISR_IT+0x24a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	095b      	lsrs	r3, r3, #5
 80043ae:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d003      	beq.n	80043be <I2C_Mem_ISR_IT+0x24a>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80043b6:	6939      	ldr	r1, [r7, #16]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fd8b 	bl	8004ed4 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	80002000 	.word	0x80002000
 80043d4:	80002400 	.word	0x80002400

080043d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b086      	sub	sp, #24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <I2C_Slave_ISR_IT+0x24>
 80043f8:	2302      	movs	r3, #2
 80043fa:	e0ed      	b.n	80045d8 <I2C_Slave_ISR_IT+0x200>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	095b      	lsrs	r3, r3, #5
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	095b      	lsrs	r3, r3, #5
 8004414:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004418:	2b00      	cmp	r3, #0
 800441a:	d004      	beq.n	8004426 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800441c:	6939      	ldr	r1, [r7, #16]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 fe22 	bl	8005068 <I2C_ITSlaveCplt>
 8004424:	e0d3      	b.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	2b00      	cmp	r3, #0
 8004430:	d04d      	beq.n	80044ce <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	091b      	lsrs	r3, r3, #4
 8004436:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800443a:	2b00      	cmp	r3, #0
 800443c:	d047      	beq.n	80044ce <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004442:	b29b      	uxth	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d128      	bne.n	800449a <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b28      	cmp	r3, #40	@ 0x28
 8004452:	d108      	bne.n	8004466 <I2C_Slave_ISR_IT+0x8e>
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800445a:	d104      	bne.n	8004466 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800445c:	6939      	ldr	r1, [r7, #16]
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 ff6c 	bl	800533c <I2C_ITListenCplt>
 8004464:	e032      	b.n	80044cc <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b29      	cmp	r3, #41	@ 0x29
 8004470:	d10e      	bne.n	8004490 <I2C_Slave_ISR_IT+0xb8>
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004478:	d00a      	beq.n	8004490 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2210      	movs	r2, #16
 8004480:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f001 f8c7 	bl	8005616 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fcc4 	bl	8004e16 <I2C_ITSlaveSeqCplt>
 800448e:	e01d      	b.n	80044cc <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2210      	movs	r2, #16
 8004496:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004498:	e096      	b.n	80045c8 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2210      	movs	r2, #16
 80044a0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044a6:	f043 0204 	orr.w	r2, r3, #4
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d004      	beq.n	80044be <I2C_Slave_ISR_IT+0xe6>
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044ba:	f040 8085 	bne.w	80045c8 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c2:	4619      	mov	r1, r3
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 ff8f 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80044ca:	e07d      	b.n	80045c8 <I2C_Slave_ISR_IT+0x1f0>
 80044cc:	e07c      	b.n	80045c8 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	089b      	lsrs	r3, r3, #2
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d030      	beq.n	800453c <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d02a      	beq.n	800453c <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044ea:	b29b      	uxth	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d018      	beq.n	8004522 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004502:	1c5a      	adds	r2, r3, #1
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d14f      	bne.n	80045cc <I2C_Slave_ISR_IT+0x1f4>
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004532:	d04b      	beq.n	80045cc <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fc6e 	bl	8004e16 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800453a:	e047      	b.n	80045cc <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	08db      	lsrs	r3, r3, #3
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	08db      	lsrs	r3, r3, #3
 800454c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004550:	2b00      	cmp	r3, #0
 8004552:	d004      	beq.n	800455e <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004554:	6939      	ldr	r1, [r7, #16]
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f000 fb9c 	bl	8004c94 <I2C_ITAddrCplt>
 800455c:	e037      	b.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	085b      	lsrs	r3, r3, #1
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d031      	beq.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	085b      	lsrs	r3, r3, #1
 800456e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02b      	beq.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800457a:	b29b      	uxth	r3, r3
 800457c:	2b00      	cmp	r3, #0
 800457e:	d018      	beq.n	80045b2 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004584:	781a      	ldrb	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	3b01      	subs	r3, #1
 800459e:	b29a      	uxth	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a8:	3b01      	subs	r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	851a      	strh	r2, [r3, #40]	@ 0x28
 80045b0:	e00d      	b.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045b8:	d002      	beq.n	80045c0 <I2C_Slave_ISR_IT+0x1e8>
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d106      	bne.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 fc28 	bl	8004e16 <I2C_ITSlaveSeqCplt>
 80045c6:	e002      	b.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80045c8:	bf00      	nop
 80045ca:	e000      	b.n	80045ce <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80045cc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d101      	bne.n	80045fa <I2C_Master_ISR_DMA+0x1a>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e0e1      	b.n	80047be <I2C_Master_ISR_DMA+0x1de>
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	091b      	lsrs	r3, r3, #4
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d017      	beq.n	800463e <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	091b      	lsrs	r3, r3, #4
 8004612:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004616:	2b00      	cmp	r3, #0
 8004618:	d011      	beq.n	800463e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2210      	movs	r2, #16
 8004620:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004626:	f043 0204 	orr.w	r2, r3, #4
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800462e:	2120      	movs	r1, #32
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f001 fa27 	bl	8005a84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	f000 ffed 	bl	8005616 <I2C_Flush_TXDR>
 800463c:	e0ba      	b.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	09db      	lsrs	r3, r3, #7
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d072      	beq.n	8004730 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004652:	2b00      	cmp	r3, #0
 8004654:	d06c      	beq.n	8004730 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004664:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d04e      	beq.n	800470e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	b29b      	uxth	r3, r3
 8004678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800467c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	2bff      	cmp	r3, #255	@ 0xff
 8004686:	d906      	bls.n	8004696 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	22ff      	movs	r2, #255	@ 0xff
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800468e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e010      	b.n	80046b8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046a8:	d003      	beq.n	80046b2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	e002      	b.n	80046b8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80046b2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046b6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	8a79      	ldrh	r1, [r7, #18]
 80046c0:	2300      	movs	r3, #0
 80046c2:	9300      	str	r3, [sp, #0]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f001 f9aa 	bl	8005a20 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b22      	cmp	r3, #34	@ 0x22
 80046e8:	d108      	bne.n	80046fc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80046f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80046fa:	e05b      	b.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800470a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800470c:	e052      	b.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004718:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800471c:	d003      	beq.n	8004726 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 fb3c 	bl	8004d9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004724:	e046      	b.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004726:	2140      	movs	r1, #64	@ 0x40
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 fe5d 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800472e:	e041      	b.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	099b      	lsrs	r3, r3, #6
 8004734:	f003 0301 	and.w	r3, r3, #1
 8004738:	2b00      	cmp	r3, #0
 800473a:	d029      	beq.n	8004790 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	099b      	lsrs	r3, r3, #6
 8004740:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004744:	2b00      	cmp	r3, #0
 8004746:	d023      	beq.n	8004790 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d119      	bne.n	8004786 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800475c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004760:	d027      	beq.n	80047b2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800476a:	d108      	bne.n	800477e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800477a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800477c:	e019      	b.n	80047b2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f000 fb0c 	bl	8004d9c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004784:	e015      	b.n	80047b2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004786:	2140      	movs	r1, #64	@ 0x40
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fe2d 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800478e:	e010      	b.n	80047b2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	095b      	lsrs	r3, r3, #5
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00b      	beq.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d005      	beq.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fb92 	bl	8004ed4 <I2C_ITMasterCplt>
 80047b0:	e000      	b.n	80047b4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80047b2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b088      	sub	sp, #32
 80047cc:	af02      	add	r7, sp, #8
 80047ce:	60f8      	str	r0, [r7, #12]
 80047d0:	60b9      	str	r1, [r7, #8]
 80047d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80047d4:	4b92      	ldr	r3, [pc, #584]	@ (8004a20 <I2C_Mem_ISR_DMA+0x258>)
 80047d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <I2C_Mem_ISR_DMA+0x1e>
 80047e2:	2302      	movs	r3, #2
 80047e4:	e118      	b.n	8004a18 <I2C_Mem_ISR_DMA+0x250>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2201      	movs	r2, #1
 80047ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d017      	beq.n	800482a <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004802:	2b00      	cmp	r3, #0
 8004804:	d011      	beq.n	800482a <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2210      	movs	r2, #16
 800480c:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f043 0204 	orr.w	r2, r3, #4
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800481a:	2120      	movs	r1, #32
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f001 f931 	bl	8005a84 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fef7 	bl	8005616 <I2C_Flush_TXDR>
 8004828:	e0f1      	b.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	085b      	lsrs	r3, r3, #1
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00f      	beq.n	8004856 <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	085b      	lsrs	r3, r3, #1
 800483a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800483e:	2b00      	cmp	r3, #0
 8004840:	d009      	beq.n	8004856 <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800484a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004852:	651a      	str	r2, [r3, #80]	@ 0x50
 8004854:	e0db      	b.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	09db      	lsrs	r3, r3, #7
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d060      	beq.n	8004924 <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	099b      	lsrs	r3, r3, #6
 8004866:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800486a:	2b00      	cmp	r3, #0
 800486c:	d05a      	beq.n	8004924 <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800486e:	2101      	movs	r1, #1
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f001 f98b 	bl	8005b8c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004876:	2110      	movs	r1, #16
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f001 f903 	bl	8005a84 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004882:	b29b      	uxth	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d048      	beq.n	800491a <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2bff      	cmp	r3, #255	@ 0xff
 8004890:	d910      	bls.n	80048b4 <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	22ff      	movs	r2, #255	@ 0xff
 8004896:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800489c:	b299      	uxth	r1, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048a2:	b2da      	uxtb	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	9300      	str	r3, [sp, #0]
 80048a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80048ac:	68f8      	ldr	r0, [r7, #12]
 80048ae:	f001 f8b7 	bl	8005a20 <I2C_TransferConfig>
 80048b2:	e011      	b.n	80048d8 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c2:	b299      	uxth	r1, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	2300      	movs	r3, #0
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f001 f8a4 	bl	8005a20 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b22      	cmp	r3, #34	@ 0x22
 80048f4:	d108      	bne.n	8004908 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004904:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004906:	e082      	b.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004916:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004918:	e079      	b.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800491a:	2140      	movs	r1, #64	@ 0x40
 800491c:	68f8      	ldr	r0, [r7, #12]
 800491e:	f000 fd63 	bl	80053e8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004922:	e074      	b.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	099b      	lsrs	r3, r3, #6
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d05e      	beq.n	80049ee <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	099b      	lsrs	r3, r3, #6
 8004934:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004938:	2b00      	cmp	r3, #0
 800493a:	d058      	beq.n	80049ee <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800493c:	2101      	movs	r1, #1
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f001 f924 	bl	8005b8c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004944:	2110      	movs	r1, #16
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f001 f89c 	bl	8005a84 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b22      	cmp	r3, #34	@ 0x22
 8004956:	d101      	bne.n	800495c <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8004958:	4b32      	ldr	r3, [pc, #200]	@ (8004a24 <I2C_Mem_ISR_DMA+0x25c>)
 800495a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	2bff      	cmp	r3, #255	@ 0xff
 8004964:	d910      	bls.n	8004988 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	22ff      	movs	r2, #255	@ 0xff
 800496a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004970:	b299      	uxth	r1, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004976:	b2da      	uxtb	r2, r3
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f001 f84d 	bl	8005a20 <I2C_TransferConfig>
 8004986:	e011      	b.n	80049ac <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29a      	uxth	r2, r3
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004996:	b299      	uxth	r1, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499c:	b2da      	uxtb	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f001 f83a 	bl	8005a20 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b0:	b29a      	uxth	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b22      	cmp	r3, #34	@ 0x22
 80049c8:	d108      	bne.n	80049dc <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049d8:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049da:	e018      	b.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80049ea:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80049ec:	e00f      	b.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	095b      	lsrs	r3, r3, #5
 80049fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fa63 	bl	8004ed4 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3718      	adds	r7, #24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	80002000 	.word	0x80002000
 8004a24:	80002400 	.word	0x80002400

08004a28 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a38:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <I2C_Slave_ISR_DMA+0x24>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	e0ca      	b.n	8004be2 <I2C_Slave_ISR_DMA+0x1ba>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	f003 0301 	and.w	r3, r3, #1
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00a      	beq.n	8004a76 <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	095b      	lsrs	r3, r3, #5
 8004a64:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d004      	beq.n	8004a76 <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004a6c:	68b9      	ldr	r1, [r7, #8]
 8004a6e:	68f8      	ldr	r0, [r7, #12]
 8004a70:	f000 fafa 	bl	8005068 <I2C_ITSlaveCplt>
 8004a74:	e0b0      	b.n	8004bd8 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	091b      	lsrs	r3, r3, #4
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 809a 	beq.w	8004bb8 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	091b      	lsrs	r3, r3, #4
 8004a88:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 8093 	beq.w	8004bb8 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	0b9b      	lsrs	r3, r3, #14
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d105      	bne.n	8004aaa <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	0bdb      	lsrs	r3, r3, #15
 8004aa2:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d07f      	beq.n	8004baa <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00d      	beq.n	8004ace <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0bdb      	lsrs	r3, r3, #15
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8004aca:	2301      	movs	r3, #1
 8004acc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0b9b      	lsrs	r3, r3, #14
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d007      	beq.n	8004af2 <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8004aee:	2301      	movs	r3, #1
 8004af0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d128      	bne.n	8004b4a <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b28      	cmp	r3, #40	@ 0x28
 8004b02:	d108      	bne.n	8004b16 <I2C_Slave_ISR_DMA+0xee>
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b0a:	d104      	bne.n	8004b16 <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8004b0c:	68b9      	ldr	r1, [r7, #8]
 8004b0e:	68f8      	ldr	r0, [r7, #12]
 8004b10:	f000 fc14 	bl	800533c <I2C_ITListenCplt>
 8004b14:	e048      	b.n	8004ba8 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b29      	cmp	r3, #41	@ 0x29
 8004b20:	d10e      	bne.n	8004b40 <I2C_Slave_ISR_DMA+0x118>
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b28:	d00a      	beq.n	8004b40 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2210      	movs	r2, #16
 8004b30:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f000 fd6f 	bl	8005616 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004b38:	68f8      	ldr	r0, [r7, #12]
 8004b3a:	f000 f96c 	bl	8004e16 <I2C_ITSlaveSeqCplt>
 8004b3e:	e033      	b.n	8004ba8 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2210      	movs	r2, #16
 8004b46:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004b48:	e034      	b.n	8004bb4 <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2210      	movs	r2, #16
 8004b50:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b64:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <I2C_Slave_ISR_DMA+0x14c>
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b72:	d11f      	bne.n	8004bb4 <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b74:	7dfb      	ldrb	r3, [r7, #23]
 8004b76:	2b21      	cmp	r3, #33	@ 0x21
 8004b78:	d002      	beq.n	8004b80 <I2C_Slave_ISR_DMA+0x158>
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	2b29      	cmp	r3, #41	@ 0x29
 8004b7e:	d103      	bne.n	8004b88 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2221      	movs	r2, #33	@ 0x21
 8004b84:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b86:	e008      	b.n	8004b9a <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b88:	7dfb      	ldrb	r3, [r7, #23]
 8004b8a:	2b22      	cmp	r3, #34	@ 0x22
 8004b8c:	d002      	beq.n	8004b94 <I2C_Slave_ISR_DMA+0x16c>
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b92:	d102      	bne.n	8004b9a <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2222      	movs	r2, #34	@ 0x22
 8004b98:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	68f8      	ldr	r0, [r7, #12]
 8004ba2:	f000 fc21 	bl	80053e8 <I2C_ITError>
      if (treatdmanack == 1U)
 8004ba6:	e005      	b.n	8004bb4 <I2C_Slave_ISR_DMA+0x18c>
 8004ba8:	e004      	b.n	8004bb4 <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2210      	movs	r2, #16
 8004bb0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bb2:	e011      	b.n	8004bd8 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8004bb4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004bb6:	e00f      	b.n	8004bd8 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	08db      	lsrs	r3, r3, #3
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d009      	beq.n	8004bd8 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	08db      	lsrs	r3, r3, #3
 8004bc8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d003      	beq.n	8004bd8 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8004bd0:	68b9      	ldr	r1, [r7, #8]
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f000 f85e 	bl	8004c94 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
	...

08004bec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	817b      	strh	r3, [r7, #10]
 8004bfe:	460b      	mov	r3, r1
 8004c00:	813b      	strh	r3, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004c06:	88fb      	ldrh	r3, [r7, #6]
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	8979      	ldrh	r1, [r7, #10]
 8004c0c:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <I2C_RequestMemoryWrite+0xa4>)
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 ff03 	bl	8005a20 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c1a:	69fa      	ldr	r2, [r7, #28]
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fd94 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e02c      	b.n	8004c88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c2e:	88fb      	ldrh	r3, [r7, #6]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d105      	bne.n	8004c40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c34:	893b      	ldrh	r3, [r7, #8]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004c3e:	e015      	b.n	8004c6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c40:	893b      	ldrh	r3, [r7, #8]
 8004c42:	0a1b      	lsrs	r3, r3, #8
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c4e:	69fa      	ldr	r2, [r7, #28]
 8004c50:	69b9      	ldr	r1, [r7, #24]
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fd7a 	bl	800574c <I2C_WaitOnTXISFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e012      	b.n	8004c88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	b2da      	uxtb	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2200      	movs	r2, #0
 8004c74:	2180      	movs	r1, #128	@ 0x80
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 fd0f 	bl	800569a <I2C_WaitOnFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e000      	b.n	8004c88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3710      	adds	r7, #16
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	80002000 	.word	0x80002000

08004c94 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004caa:	2b28      	cmp	r3, #40	@ 0x28
 8004cac:	d16a      	bne.n	8004d84 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	699b      	ldr	r3, [r3, #24]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004ccc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cda:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004ce8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d138      	bne.n	8004d64 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004cf2:	897b      	ldrh	r3, [r7, #10]
 8004cf4:	09db      	lsrs	r3, r3, #7
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	89bb      	ldrh	r3, [r7, #12]
 8004cfa:	4053      	eors	r3, r2
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	f003 0306 	and.w	r3, r3, #6
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d11c      	bne.n	8004d40 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d0e:	1c5a      	adds	r2, r3, #1
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d13b      	bne.n	8004d94 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2208      	movs	r2, #8
 8004d28:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d32:	89ba      	ldrh	r2, [r7, #12]
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff f9da 	bl	80040f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d3e:	e029      	b.n	8004d94 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004d40:	893b      	ldrh	r3, [r7, #8]
 8004d42:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 ff1f 	bl	8005b8c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d56:	89ba      	ldrh	r2, [r7, #12]
 8004d58:	7bfb      	ldrb	r3, [r7, #15]
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff f9c8 	bl	80040f2 <HAL_I2C_AddrCallback>
}
 8004d62:	e017      	b.n	8004d94 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004d64:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 ff0f 	bl	8005b8c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004d76:	89ba      	ldrh	r2, [r7, #12]
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7ff f9b8 	bl	80040f2 <HAL_I2C_AddrCallback>
}
 8004d82:	e007      	b.n	8004d94 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2208      	movs	r2, #8
 8004d8a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004d94:	bf00      	nop
 8004d96:	3710      	adds	r7, #16
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b21      	cmp	r3, #33	@ 0x21
 8004db6:	d115      	bne.n	8004de4 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2211      	movs	r2, #17
 8004dc4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004dcc:	2101      	movs	r1, #1
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fedc 	bl	8005b8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff f960 	bl	80040a2 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004de2:	e014      	b.n	8004e0e <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2220      	movs	r2, #32
 8004de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2212      	movs	r2, #18
 8004df0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2200      	movs	r2, #0
 8004df6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004df8:	2102      	movs	r1, #2
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fec6 	bl	8005b8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f7ff f954 	bl	80040b6 <HAL_I2C_MasterRxCpltCallback>
}
 8004e0e:	bf00      	nop
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	0b9b      	lsrs	r3, r3, #14
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d008      	beq.n	8004e4c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e00d      	b.n	8004e68 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	0bdb      	lsrs	r3, r3, #15
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d007      	beq.n	8004e68 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e66:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b29      	cmp	r3, #41	@ 0x29
 8004e72:	d112      	bne.n	8004e9a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2228      	movs	r2, #40	@ 0x28
 8004e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2221      	movs	r2, #33	@ 0x21
 8004e80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004e82:	2101      	movs	r1, #1
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 fe81 	bl	8005b8c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff f919 	bl	80040ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e98:	e017      	b.n	8004eca <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ea4:	d111      	bne.n	8004eca <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2228      	movs	r2, #40	@ 0x28
 8004eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2222      	movs	r2, #34	@ 0x22
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 fe68 	bl	8005b8c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff f90a 	bl	80040de <HAL_I2C_SlaveRxCpltCallback>
}
 8004eca:	bf00      	nop
 8004ecc:	3710      	adds	r7, #16
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ed4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b086      	sub	sp, #24
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	2b21      	cmp	r3, #33	@ 0x21
 8004ef4:	d107      	bne.n	8004f06 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fe47 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2211      	movs	r2, #17
 8004f02:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f04:	e00c      	b.n	8004f20 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	2b22      	cmp	r3, #34	@ 0x22
 8004f10:	d106      	bne.n	8004f20 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004f12:	2102      	movs	r1, #2
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 fe39 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2212      	movs	r2, #18
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b4d      	ldr	r3, [pc, #308]	@ (8005060 <I2C_ITMasterCplt+0x18c>)
 8004f2c:	400b      	ands	r3, r1
 8004f2e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4a      	ldr	r2, [pc, #296]	@ (8005064 <I2C_ITMasterCplt+0x190>)
 8004f3a:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	091b      	lsrs	r3, r3, #4
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f54:	f043 0204 	orr.w	r2, r3, #4
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	2b60      	cmp	r3, #96	@ 0x60
 8004f66:	d10b      	bne.n	8004f80 <I2C_ITMasterCplt+0xac>
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d005      	beq.n	8004f80 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fb48 	bl	8005616 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	2b60      	cmp	r3, #96	@ 0x60
 8004f96:	d002      	beq.n	8004f9e <I2C_ITMasterCplt+0xca>
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fa1f 	bl	80053e8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004faa:	e054      	b.n	8005056 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b21      	cmp	r3, #33	@ 0x21
 8004fb6:	d124      	bne.n	8005002 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b40      	cmp	r3, #64	@ 0x40
 8004fd0:	d10b      	bne.n	8004fea <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7ff f89d 	bl	8004122 <HAL_I2C_MemTxCpltCallback>
}
 8004fe8:	e035      	b.n	8005056 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7ff f851 	bl	80040a2 <HAL_I2C_MasterTxCpltCallback>
}
 8005000:	e029      	b.n	8005056 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b22      	cmp	r3, #34	@ 0x22
 800500c:	d123      	bne.n	8005056 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b40      	cmp	r3, #64	@ 0x40
 8005026:	d10b      	bne.n	8005040 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff f87c 	bl	8004136 <HAL_I2C_MemRxCpltCallback>
}
 800503e:	e00a      	b.n	8005056 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f7ff f830 	bl	80040b6 <HAL_I2C_MasterRxCpltCallback>
}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	fe00e800 	.word	0xfe00e800
 8005064:	ffff0000 	.word	0xffff0000

08005068 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005082:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2220      	movs	r2, #32
 8005092:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005094:	7afb      	ldrb	r3, [r7, #11]
 8005096:	2b21      	cmp	r3, #33	@ 0x21
 8005098:	d002      	beq.n	80050a0 <I2C_ITSlaveCplt+0x38>
 800509a:	7afb      	ldrb	r3, [r7, #11]
 800509c:	2b29      	cmp	r3, #41	@ 0x29
 800509e:	d108      	bne.n	80050b2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80050a0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f000 fd71 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2221      	movs	r2, #33	@ 0x21
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
 80050b0:	e019      	b.n	80050e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050b2:	7afb      	ldrb	r3, [r7, #11]
 80050b4:	2b22      	cmp	r3, #34	@ 0x22
 80050b6:	d002      	beq.n	80050be <I2C_ITSlaveCplt+0x56>
 80050b8:	7afb      	ldrb	r3, [r7, #11]
 80050ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80050bc:	d108      	bne.n	80050d0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80050be:	f248 0102 	movw	r1, #32770	@ 0x8002
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fd62 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2222      	movs	r2, #34	@ 0x22
 80050cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80050ce:	e00a      	b.n	80050e6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80050d0:	7afb      	ldrb	r3, [r7, #11]
 80050d2:	2b28      	cmp	r3, #40	@ 0x28
 80050d4:	d107      	bne.n	80050e6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80050d6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fd56 	bl	8005b8c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80050f4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6859      	ldr	r1, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b8c      	ldr	r3, [pc, #560]	@ (8005334 <I2C_ITSlaveCplt+0x2cc>)
 8005102:	400b      	ands	r3, r1
 8005104:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa85 	bl	8005616 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	0b9b      	lsrs	r3, r3, #14
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b00      	cmp	r3, #0
 8005116:	d013      	beq.n	8005140 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005126:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	2b00      	cmp	r3, #0
 800512e:	d020      	beq.n	8005172 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	b29a      	uxth	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800513e:	e018      	b.n	8005172 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	0bdb      	lsrs	r3, r3, #15
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d012      	beq.n	8005172 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800515a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d006      	beq.n	8005172 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	b29a      	uxth	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	089b      	lsrs	r3, r3, #2
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d020      	beq.n	80051c0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0304 	bic.w	r3, r3, #4
 8005184:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00c      	beq.n	80051c0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	3b01      	subs	r3, #1
 80051ba:	b29a      	uxth	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f043 0204 	orr.w	r2, r3, #4
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04a      	beq.n	8005278 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	091b      	lsrs	r3, r3, #4
 80051e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d044      	beq.n	8005278 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d128      	bne.n	800524a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b28      	cmp	r3, #40	@ 0x28
 8005202:	d108      	bne.n	8005216 <I2C_ITSlaveCplt+0x1ae>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800520a:	d104      	bne.n	8005216 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800520c:	6979      	ldr	r1, [r7, #20]
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f000 f894 	bl	800533c <I2C_ITListenCplt>
 8005214:	e030      	b.n	8005278 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b29      	cmp	r3, #41	@ 0x29
 8005220:	d10e      	bne.n	8005240 <I2C_ITSlaveCplt+0x1d8>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005228:	d00a      	beq.n	8005240 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2210      	movs	r2, #16
 8005230:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 f9ef 	bl	8005616 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f7ff fdec 	bl	8004e16 <I2C_ITSlaveSeqCplt>
 800523e:	e01b      	b.n	8005278 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2210      	movs	r2, #16
 8005246:	61da      	str	r2, [r3, #28]
 8005248:	e016      	b.n	8005278 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2210      	movs	r2, #16
 8005250:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005256:	f043 0204 	orr.w	r2, r3, #4
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <I2C_ITSlaveCplt+0x204>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800526a:	d105      	bne.n	8005278 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005270:	4619      	mov	r1, r3
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f8b8 	bl	80053e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2200      	movs	r2, #0
 8005284:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800528a:	2b00      	cmp	r3, #0
 800528c:	d010      	beq.n	80052b0 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f8a7 	bl	80053e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b28      	cmp	r3, #40	@ 0x28
 80052a4:	d141      	bne.n	800532a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80052a6:	6979      	ldr	r1, [r7, #20]
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f000 f847 	bl	800533c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80052ae:	e03c      	b.n	800532a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80052b8:	d014      	beq.n	80052e4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fdab 	bl	8004e16 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1d      	ldr	r2, [pc, #116]	@ (8005338 <I2C_ITSlaveCplt+0x2d0>)
 80052c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7fe ff16 	bl	800410e <HAL_I2C_ListenCpltCallback>
}
 80052e2:	e022      	b.n	800532a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b22      	cmp	r3, #34	@ 0x22
 80052ee:	d10e      	bne.n	800530e <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fe fee9 	bl	80040de <HAL_I2C_SlaveRxCpltCallback>
}
 800530c:	e00d      	b.n	800532a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7fe fed0 	bl	80040ca <HAL_I2C_SlaveTxCpltCallback>
}
 800532a:	bf00      	nop
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	fe00e800 	.word	0xfe00e800
 8005338:	ffff0000 	.word	0xffff0000

0800533c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a26      	ldr	r2, [pc, #152]	@ (80053e4 <I2C_ITListenCplt+0xa8>)
 800534a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2220      	movs	r2, #32
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	d022      	beq.n	80053ba <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d012      	beq.n	80053ba <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053b2:	f043 0204 	orr.w	r2, r3, #4
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80053ba:	f248 0103 	movw	r1, #32771	@ 0x8003
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fbe4 	bl	8005b8c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2210      	movs	r2, #16
 80053ca:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	f7fe fe9a 	bl	800410e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	ffff0000 	.word	0xffff0000

080053e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053f8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a6d      	ldr	r2, [pc, #436]	@ (80055bc <I2C_ITError+0x1d4>)
 8005406:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800541a:	7bfb      	ldrb	r3, [r7, #15]
 800541c:	2b28      	cmp	r3, #40	@ 0x28
 800541e:	d005      	beq.n	800542c <I2C_ITError+0x44>
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b29      	cmp	r3, #41	@ 0x29
 8005424:	d002      	beq.n	800542c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	2b2a      	cmp	r3, #42	@ 0x2a
 800542a:	d10b      	bne.n	8005444 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800542c:	2103      	movs	r1, #3
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 fbac 	bl	8005b8c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2228      	movs	r2, #40	@ 0x28
 8005438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a60      	ldr	r2, [pc, #384]	@ (80055c0 <I2C_ITError+0x1d8>)
 8005440:	635a      	str	r2, [r3, #52]	@ 0x34
 8005442:	e030      	b.n	80054a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005444:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fb9f 	bl	8005b8c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 f8e1 	bl	8005616 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b60      	cmp	r3, #96	@ 0x60
 800545e:	d01f      	beq.n	80054a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f003 0320 	and.w	r3, r3, #32
 8005472:	2b20      	cmp	r3, #32
 8005474:	d114      	bne.n	80054a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b10      	cmp	r3, #16
 8005482:	d109      	bne.n	8005498 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2210      	movs	r2, #16
 800548a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005490:	f043 0204 	orr.w	r2, r3, #4
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2220      	movs	r2, #32
 800549e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d039      	beq.n	8005528 <I2C_ITError+0x140>
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	2b11      	cmp	r3, #17
 80054b8:	d002      	beq.n	80054c0 <I2C_ITError+0xd8>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	2b21      	cmp	r3, #33	@ 0x21
 80054be:	d133      	bne.n	8005528 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80054ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80054ce:	d107      	bne.n	80054e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80054de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe f8b5 	bl	8003654 <HAL_DMA_GetState>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d017      	beq.n	8005520 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f4:	4a33      	ldr	r2, [pc, #204]	@ (80055c4 <I2C_ITError+0x1dc>)
 80054f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005504:	4618      	mov	r0, r3
 8005506:	f7fd ff8f 	bl	8003428 <HAL_DMA_Abort_IT>
 800550a:	4603      	mov	r3, r0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d04d      	beq.n	80055ac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800551a:	4610      	mov	r0, r2
 800551c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800551e:	e045      	b.n	80055ac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 f851 	bl	80055c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005526:	e041      	b.n	80055ac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800552c:	2b00      	cmp	r3, #0
 800552e:	d039      	beq.n	80055a4 <I2C_ITError+0x1bc>
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b12      	cmp	r3, #18
 8005534:	d002      	beq.n	800553c <I2C_ITError+0x154>
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	2b22      	cmp	r3, #34	@ 0x22
 800553a:	d133      	bne.n	80055a4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005546:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800554a:	d107      	bne.n	800555c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800555a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005560:	4618      	mov	r0, r3
 8005562:	f7fe f877 	bl	8003654 <HAL_DMA_GetState>
 8005566:	4603      	mov	r3, r0
 8005568:	2b01      	cmp	r3, #1
 800556a:	d017      	beq.n	800559c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005570:	4a14      	ldr	r2, [pc, #80]	@ (80055c4 <I2C_ITError+0x1dc>)
 8005572:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	4618      	mov	r0, r3
 8005582:	f7fd ff51 	bl	8003428 <HAL_DMA_Abort_IT>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005596:	4610      	mov	r0, r2
 8005598:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800559a:	e009      	b.n	80055b0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f000 f813 	bl	80055c8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055a2:	e005      	b.n	80055b0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 f80f 	bl	80055c8 <I2C_TreatErrorCallback>
  }
}
 80055aa:	e002      	b.n	80055b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80055ac:	bf00      	nop
 80055ae:	e000      	b.n	80055b2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055b0:	bf00      	nop
}
 80055b2:	bf00      	nop
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	ffff0000 	.word	0xffff0000
 80055c0:	080043d9 	.word	0x080043d9
 80055c4:	0800565f 	.word	0x0800565f

080055c8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2b60      	cmp	r3, #96	@ 0x60
 80055da:	d10e      	bne.n	80055fa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f7fe fdb3 	bl	800415e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80055f8:	e009      	b.n	800560e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7fe fd9e 	bl	800414a <HAL_I2C_ErrorCallback>
}
 800560e:	bf00      	nop
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}

08005616 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	699b      	ldr	r3, [r3, #24]
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b02      	cmp	r3, #2
 800562a:	d103      	bne.n	8005634 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2200      	movs	r2, #0
 8005632:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b01      	cmp	r3, #1
 8005640:	d007      	beq.n	8005652 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	699a      	ldr	r2, [r3, #24]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f042 0201 	orr.w	r2, r2, #1
 8005650:	619a      	str	r2, [r3, #24]
  }
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b084      	sub	sp, #16
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	2b00      	cmp	r3, #0
 8005672:	d003      	beq.n	800567c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	2200      	movs	r2, #0
 800567a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	2b00      	cmp	r3, #0
 8005682:	d003      	beq.n	800568c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005688:	2200      	movs	r2, #0
 800568a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f7ff ff9b 	bl	80055c8 <I2C_TreatErrorCallback>
}
 8005692:	bf00      	nop
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}

0800569a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800569a:	b580      	push	{r7, lr}
 800569c:	b084      	sub	sp, #16
 800569e:	af00      	add	r7, sp, #0
 80056a0:	60f8      	str	r0, [r7, #12]
 80056a2:	60b9      	str	r1, [r7, #8]
 80056a4:	603b      	str	r3, [r7, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056aa:	e03b      	b.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	6839      	ldr	r1, [r7, #0]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f8d5 	bl	8005860 <I2C_IsErrorOccurred>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d001      	beq.n	80056c0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e041      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056c6:	d02d      	beq.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fd fc24 	bl	8002f14 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <I2C_WaitOnFlagUntilTimeout+0x44>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d122      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	699a      	ldr	r2, [r3, #24]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	4013      	ands	r3, r2
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	bf0c      	ite	eq
 80056ee:	2301      	moveq	r3, #1
 80056f0:	2300      	movne	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	461a      	mov	r2, r3
 80056f6:	79fb      	ldrb	r3, [r7, #7]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d113      	bne.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005700:	f043 0220 	orr.w	r2, r3, #32
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2220      	movs	r2, #32
 800570c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e00f      	b.n	8005744 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	68ba      	ldr	r2, [r7, #8]
 8005730:	429a      	cmp	r2, r3
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	429a      	cmp	r2, r3
 8005740:	d0b4      	beq.n	80056ac <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005742:	2300      	movs	r3, #0
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005758:	e033      	b.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f87e 	bl	8005860 <I2C_IsErrorOccurred>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e031      	b.n	80057d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005774:	d025      	beq.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005776:	f7fd fbcd 	bl	8002f14 <HAL_GetTick>
 800577a:	4602      	mov	r2, r0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	1ad3      	subs	r3, r2, r3
 8005780:	68ba      	ldr	r2, [r7, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	d302      	bcc.n	800578c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d11a      	bne.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	f003 0302 	and.w	r3, r3, #2
 8005796:	2b02      	cmp	r3, #2
 8005798:	d013      	beq.n	80057c2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800579e:	f043 0220 	orr.w	r2, r3, #32
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e007      	b.n	80057d2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d1c4      	bne.n	800575a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80057da:	b580      	push	{r7, lr}
 80057dc:	b084      	sub	sp, #16
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057e6:	e02f      	b.n	8005848 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	68b9      	ldr	r1, [r7, #8]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 f837 	bl	8005860 <I2C_IsErrorOccurred>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e02d      	b.n	8005858 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057fc:	f7fd fb8a 	bl	8002f14 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d302      	bcc.n	8005812 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d11a      	bne.n	8005848 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	f003 0320 	and.w	r3, r3, #32
 800581c:	2b20      	cmp	r3, #32
 800581e:	d013      	beq.n	8005848 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	e007      	b.n	8005858 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	f003 0320 	and.w	r3, r3, #32
 8005852:	2b20      	cmp	r3, #32
 8005854:	d1c8      	bne.n	80057e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005856:	2300      	movs	r3, #0
}
 8005858:	4618      	mov	r0, r3
 800585a:	3710      	adds	r7, #16
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b08a      	sub	sp, #40	@ 0x28
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	699b      	ldr	r3, [r3, #24]
 8005878:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005882:	69bb      	ldr	r3, [r7, #24]
 8005884:	f003 0310 	and.w	r3, r3, #16
 8005888:	2b00      	cmp	r3, #0
 800588a:	d068      	beq.n	800595e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2210      	movs	r2, #16
 8005892:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005894:	e049      	b.n	800592a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800589c:	d045      	beq.n	800592a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fd fb39 	bl	8002f14 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <I2C_IsErrorOccurred+0x54>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d13a      	bne.n	800592a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058be:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058c6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058d6:	d121      	bne.n	800591c <I2C_IsErrorOccurred+0xbc>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058de:	d01d      	beq.n	800591c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80058e0:	7cfb      	ldrb	r3, [r7, #19]
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d01a      	beq.n	800591c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058f4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80058f6:	f7fd fb0d 	bl	8002f14 <HAL_GetTick>
 80058fa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058fc:	e00e      	b.n	800591c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80058fe:	f7fd fb09 	bl	8002f14 <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b19      	cmp	r3, #25
 800590a:	d907      	bls.n	800591c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800590c:	6a3b      	ldr	r3, [r7, #32]
 800590e:	f043 0320 	orr.w	r3, r3, #32
 8005912:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800591a:	e006      	b.n	800592a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	699b      	ldr	r3, [r3, #24]
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b20      	cmp	r3, #32
 8005928:	d1e9      	bne.n	80058fe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b20      	cmp	r3, #32
 8005936:	d003      	beq.n	8005940 <I2C_IsErrorOccurred+0xe0>
 8005938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0aa      	beq.n	8005896 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005944:	2b00      	cmp	r3, #0
 8005946:	d103      	bne.n	8005950 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2220      	movs	r2, #32
 800594e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	f043 0304 	orr.w	r3, r3, #4
 8005956:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00b      	beq.n	8005988 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	f043 0301 	orr.w	r3, r3, #1
 8005976:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005980:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	f043 0308 	orr.w	r3, r3, #8
 8005998:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80059a2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00b      	beq.n	80059cc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	f043 0302 	orr.w	r3, r3, #2
 80059ba:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80059cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01c      	beq.n	8005a0e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f7ff fe1e 	bl	8005616 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6859      	ldr	r1, [r3, #4]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	4b0d      	ldr	r3, [pc, #52]	@ (8005a1c <I2C_IsErrorOccurred+0x1bc>)
 80059e6:	400b      	ands	r3, r1
 80059e8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	431a      	orrs	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2220      	movs	r2, #32
 80059fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3728      	adds	r7, #40	@ 0x28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	fe00e800 	.word	0xfe00e800

08005a20 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	607b      	str	r3, [r7, #4]
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	817b      	strh	r3, [r7, #10]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a32:	897b      	ldrh	r3, [r7, #10]
 8005a34:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a38:	7a7b      	ldrb	r3, [r7, #9]
 8005a3a:	041b      	lsls	r3, r3, #16
 8005a3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a40:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a4e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	0d5b      	lsrs	r3, r3, #21
 8005a5a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8005a5e:	4b08      	ldr	r3, [pc, #32]	@ (8005a80 <I2C_TransferConfig+0x60>)
 8005a60:	430b      	orrs	r3, r1
 8005a62:	43db      	mvns	r3, r3
 8005a64:	ea02 0103 	and.w	r1, r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	697a      	ldr	r2, [r7, #20]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	03ff63ff 	.word	0x03ff63ff

08005a84 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a98:	4a39      	ldr	r2, [pc, #228]	@ (8005b80 <I2C_Enable_IRQ+0xfc>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d032      	beq.n	8005b04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005aa2:	4a38      	ldr	r2, [pc, #224]	@ (8005b84 <I2C_Enable_IRQ+0x100>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d02d      	beq.n	8005b04 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005aac:	4a36      	ldr	r2, [pc, #216]	@ (8005b88 <I2C_Enable_IRQ+0x104>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d028      	beq.n	8005b04 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005ab2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	da03      	bge.n	8005ac2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005ac0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005ac2:	887b      	ldrh	r3, [r7, #2]
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d003      	beq.n	8005ad4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005ad2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005ae4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005ae6:	887b      	ldrh	r3, [r7, #2]
 8005ae8:	2b10      	cmp	r3, #16
 8005aea:	d103      	bne.n	8005af4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005af2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005af4:	887b      	ldrh	r3, [r7, #2]
 8005af6:	2b20      	cmp	r3, #32
 8005af8:	d133      	bne.n	8005b62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f043 0320 	orr.w	r3, r3, #32
 8005b00:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b02:	e02e      	b.n	8005b62 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005b04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	da03      	bge.n	8005b14 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005b12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b14:	887b      	ldrh	r3, [r7, #2]
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005b24:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005b26:	887b      	ldrh	r3, [r7, #2]
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d003      	beq.n	8005b38 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005b36:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005b38:	887b      	ldrh	r3, [r7, #2]
 8005b3a:	2b10      	cmp	r3, #16
 8005b3c:	d103      	bne.n	8005b46 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005b44:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005b46:	887b      	ldrh	r3, [r7, #2]
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d103      	bne.n	8005b54 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b52:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005b54:	887b      	ldrh	r3, [r7, #2]
 8005b56:	2b40      	cmp	r3, #64	@ 0x40
 8005b58:	d103      	bne.n	8005b62 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b60:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6819      	ldr	r1, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	430a      	orrs	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]
}
 8005b72:	bf00      	nop
 8005b74:	3714      	adds	r7, #20
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop
 8005b80:	080045e1 	.word	0x080045e1
 8005b84:	08004a29 	.word	0x08004a29
 8005b88:	080047c9 	.word	0x080047c9

08005b8c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005b9c:	887b      	ldrh	r3, [r7, #2]
 8005b9e:	f003 0301 	and.w	r3, r3, #1
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00f      	beq.n	8005bc6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005bac:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bb4:	b2db      	uxtb	r3, r3
 8005bb6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005bba:	2b28      	cmp	r3, #40	@ 0x28
 8005bbc:	d003      	beq.n	8005bc6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005bc4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005bc6:	887b      	ldrh	r3, [r7, #2]
 8005bc8:	f003 0302 	and.w	r3, r3, #2
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00f      	beq.n	8005bf0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005bd6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005be4:	2b28      	cmp	r3, #40	@ 0x28
 8005be6:	d003      	beq.n	8005bf0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005bee:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005bf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	da03      	bge.n	8005c00 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005bfe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005c00:	887b      	ldrh	r3, [r7, #2]
 8005c02:	2b10      	cmp	r3, #16
 8005c04:	d103      	bne.n	8005c0e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005c0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005c0e:	887b      	ldrh	r3, [r7, #2]
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d103      	bne.n	8005c1c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f043 0320 	orr.w	r3, r3, #32
 8005c1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005c1c:	887b      	ldrh	r3, [r7, #2]
 8005c1e:	2b40      	cmp	r3, #64	@ 0x40
 8005c20:	d103      	bne.n	8005c2a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c28:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6819      	ldr	r1, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	43da      	mvns	r2, r3
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	400a      	ands	r2, r1
 8005c3a:	601a      	str	r2, [r3, #0]
}
 8005c3c:	bf00      	nop
 8005c3e:	3714      	adds	r7, #20
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d138      	bne.n	8005cd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e032      	b.n	8005cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	@ 0x24
 8005c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005c9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6819      	ldr	r1, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	e000      	b.n	8005cd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005cd0:	2302      	movs	r3, #2
  }
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	370c      	adds	r7, #12
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b20      	cmp	r3, #32
 8005cf2:	d139      	bne.n	8005d68 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d101      	bne.n	8005d02 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005cfe:	2302      	movs	r3, #2
 8005d00:	e033      	b.n	8005d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2224      	movs	r2, #36	@ 0x24
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005d30:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	e000      	b.n	8005d6a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005d68:	2302      	movs	r3, #2
  }
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d141      	bne.n	8005e0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d86:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005d8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d92:	d131      	bne.n	8005df8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d94:	4b47      	ldr	r3, [pc, #284]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d9a:	4a46      	ldr	r2, [pc, #280]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005da0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005da4:	4b43      	ldr	r3, [pc, #268]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005dac:	4a41      	ldr	r2, [pc, #260]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005db4:	4b40      	ldr	r3, [pc, #256]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2232      	movs	r2, #50	@ 0x32
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	4a3f      	ldr	r2, [pc, #252]	@ (8005ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc4:	0c9b      	lsrs	r3, r3, #18
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dca:	e002      	b.n	8005dd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dd2:	4b38      	ldr	r3, [pc, #224]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005dde:	d102      	bne.n	8005de6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f2      	bne.n	8005dcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005de6:	4b33      	ldr	r3, [pc, #204]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005df2:	d158      	bne.n	8005ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e057      	b.n	8005ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005df8:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005dfe:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e08:	e04d      	b.n	8005ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e10:	d141      	bne.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e12:	4b28      	ldr	r3, [pc, #160]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005e1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e1e:	d131      	bne.n	8005e84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e20:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e26:	4a23      	ldr	r2, [pc, #140]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e2c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e30:	4b20      	ldr	r3, [pc, #128]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e38:	4a1e      	ldr	r2, [pc, #120]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005e3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e40:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2232      	movs	r2, #50	@ 0x32
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e50:	0c9b      	lsrs	r3, r3, #18
 8005e52:	3301      	adds	r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e56:	e002      	b.n	8005e5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3b01      	subs	r3, #1
 8005e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e5e:	4b15      	ldr	r3, [pc, #84]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6a:	d102      	bne.n	8005e72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1f2      	bne.n	8005e58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e72:	4b10      	ldr	r3, [pc, #64]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e7e:	d112      	bne.n	8005ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e011      	b.n	8005ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e84:	4b0b      	ldr	r3, [pc, #44]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005e94:	e007      	b.n	8005ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e96:	4b07      	ldr	r3, [pc, #28]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005e9e:	4a05      	ldr	r2, [pc, #20]	@ (8005eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005ea4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3714      	adds	r7, #20
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40007000 	.word	0x40007000
 8005eb8:	20000004 	.word	0x20000004
 8005ebc:	431bde83 	.word	0x431bde83

08005ec0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005ec4:	4b05      	ldr	r3, [pc, #20]	@ (8005edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	4a04      	ldr	r2, [pc, #16]	@ (8005edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005eca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ece:	6093      	str	r3, [r2, #8]
}
 8005ed0:	bf00      	nop
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
 8005eda:	bf00      	nop
 8005edc:	40007000 	.word	0x40007000

08005ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b088      	sub	sp, #32
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e2fe      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0301 	and.w	r3, r3, #1
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d075      	beq.n	8005fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005efe:	4b97      	ldr	r3, [pc, #604]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f003 030c 	and.w	r3, r3, #12
 8005f06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f08:	4b94      	ldr	r3, [pc, #592]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f0a:	68db      	ldr	r3, [r3, #12]
 8005f0c:	f003 0303 	and.w	r3, r3, #3
 8005f10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	2b0c      	cmp	r3, #12
 8005f16:	d102      	bne.n	8005f1e <HAL_RCC_OscConfig+0x3e>
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2b03      	cmp	r3, #3
 8005f1c:	d002      	beq.n	8005f24 <HAL_RCC_OscConfig+0x44>
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	2b08      	cmp	r3, #8
 8005f22:	d10b      	bne.n	8005f3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f24:	4b8d      	ldr	r3, [pc, #564]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d05b      	beq.n	8005fe8 <HAL_RCC_OscConfig+0x108>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d157      	bne.n	8005fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e2d9      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f44:	d106      	bne.n	8005f54 <HAL_RCC_OscConfig+0x74>
 8005f46:	4b85      	ldr	r3, [pc, #532]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a84      	ldr	r2, [pc, #528]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	e01d      	b.n	8005f90 <HAL_RCC_OscConfig+0xb0>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f5c:	d10c      	bne.n	8005f78 <HAL_RCC_OscConfig+0x98>
 8005f5e:	4b7f      	ldr	r3, [pc, #508]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a7e      	ldr	r2, [pc, #504]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	4b7c      	ldr	r3, [pc, #496]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a7b      	ldr	r2, [pc, #492]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f74:	6013      	str	r3, [r2, #0]
 8005f76:	e00b      	b.n	8005f90 <HAL_RCC_OscConfig+0xb0>
 8005f78:	4b78      	ldr	r3, [pc, #480]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a77      	ldr	r2, [pc, #476]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f82:	6013      	str	r3, [r2, #0]
 8005f84:	4b75      	ldr	r3, [pc, #468]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a74      	ldr	r2, [pc, #464]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d013      	beq.n	8005fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f98:	f7fc ffbc 	bl	8002f14 <HAL_GetTick>
 8005f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f9e:	e008      	b.n	8005fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa0:	f7fc ffb8 	bl	8002f14 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	2b64      	cmp	r3, #100	@ 0x64
 8005fac:	d901      	bls.n	8005fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e29e      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fb2:	4b6a      	ldr	r3, [pc, #424]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d0f0      	beq.n	8005fa0 <HAL_RCC_OscConfig+0xc0>
 8005fbe:	e014      	b.n	8005fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fc0:	f7fc ffa8 	bl	8002f14 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc8:	f7fc ffa4 	bl	8002f14 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b64      	cmp	r3, #100	@ 0x64
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e28a      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fda:	4b60      	ldr	r3, [pc, #384]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1f0      	bne.n	8005fc8 <HAL_RCC_OscConfig+0xe8>
 8005fe6:	e000      	b.n	8005fea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d075      	beq.n	80060e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff6:	4b59      	ldr	r3, [pc, #356]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006000:	4b56      	ldr	r3, [pc, #344]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d102      	bne.n	8006016 <HAL_RCC_OscConfig+0x136>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b02      	cmp	r3, #2
 8006014:	d002      	beq.n	800601c <HAL_RCC_OscConfig+0x13c>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b04      	cmp	r3, #4
 800601a:	d11f      	bne.n	800605c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800601c:	4b4f      	ldr	r3, [pc, #316]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_OscConfig+0x154>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	68db      	ldr	r3, [r3, #12]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d101      	bne.n	8006034 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e25d      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006034:	4b49      	ldr	r3, [pc, #292]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	691b      	ldr	r3, [r3, #16]
 8006040:	061b      	lsls	r3, r3, #24
 8006042:	4946      	ldr	r1, [pc, #280]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006044:	4313      	orrs	r3, r2
 8006046:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006048:	4b45      	ldr	r3, [pc, #276]	@ (8006160 <HAL_RCC_OscConfig+0x280>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f7fc fae1 	bl	8002614 <HAL_InitTick>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d043      	beq.n	80060e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e249      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d023      	beq.n	80060ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006064:	4b3d      	ldr	r3, [pc, #244]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a3c      	ldr	r2, [pc, #240]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 800606a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800606e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006070:	f7fc ff50 	bl	8002f14 <HAL_GetTick>
 8006074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006076:	e008      	b.n	800608a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006078:	f7fc ff4c 	bl	8002f14 <HAL_GetTick>
 800607c:	4602      	mov	r2, r0
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	2b02      	cmp	r3, #2
 8006084:	d901      	bls.n	800608a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006086:	2303      	movs	r3, #3
 8006088:	e232      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800608a:	4b34      	ldr	r3, [pc, #208]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006092:	2b00      	cmp	r3, #0
 8006094:	d0f0      	beq.n	8006078 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006096:	4b31      	ldr	r3, [pc, #196]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	061b      	lsls	r3, r3, #24
 80060a4:	492d      	ldr	r1, [pc, #180]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	604b      	str	r3, [r1, #4]
 80060aa:	e01a      	b.n	80060e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060ac:	4b2b      	ldr	r3, [pc, #172]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a2a      	ldr	r2, [pc, #168]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 80060b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fc ff2c 	bl	8002f14 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c0:	f7fc ff28 	bl	8002f14 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e20e      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060d2:	4b22      	ldr	r3, [pc, #136]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x1e0>
 80060de:	e000      	b.n	80060e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0308 	and.w	r3, r3, #8
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d041      	beq.n	8006172 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d01c      	beq.n	8006130 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060f6:	4b19      	ldr	r3, [pc, #100]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 80060f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060fc:	4a17      	ldr	r2, [pc, #92]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006106:	f7fc ff05 	bl	8002f14 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800610e:	f7fc ff01 	bl	8002f14 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e1e7      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006120:	4b0e      	ldr	r3, [pc, #56]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0ef      	beq.n	800610e <HAL_RCC_OscConfig+0x22e>
 800612e:	e020      	b.n	8006172 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006130:	4b0a      	ldr	r3, [pc, #40]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006136:	4a09      	ldr	r2, [pc, #36]	@ (800615c <HAL_RCC_OscConfig+0x27c>)
 8006138:	f023 0301 	bic.w	r3, r3, #1
 800613c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006140:	f7fc fee8 	bl	8002f14 <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006146:	e00d      	b.n	8006164 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006148:	f7fc fee4 	bl	8002f14 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b02      	cmp	r3, #2
 8006154:	d906      	bls.n	8006164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e1ca      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
 800615a:	bf00      	nop
 800615c:	40021000 	.word	0x40021000
 8006160:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006164:	4b8c      	ldr	r3, [pc, #560]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1ea      	bne.n	8006148 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0304 	and.w	r3, r3, #4
 800617a:	2b00      	cmp	r3, #0
 800617c:	f000 80a6 	beq.w	80062cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006180:	2300      	movs	r3, #0
 8006182:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006184:	4b84      	ldr	r3, [pc, #528]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d101      	bne.n	8006194 <HAL_RCC_OscConfig+0x2b4>
 8006190:	2301      	movs	r3, #1
 8006192:	e000      	b.n	8006196 <HAL_RCC_OscConfig+0x2b6>
 8006194:	2300      	movs	r3, #0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00d      	beq.n	80061b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800619a:	4b7f      	ldr	r3, [pc, #508]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800619c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800619e:	4a7e      	ldr	r2, [pc, #504]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80061a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80061a6:	4b7c      	ldr	r3, [pc, #496]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80061a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061b2:	2301      	movs	r3, #1
 80061b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061b6:	4b79      	ldr	r3, [pc, #484]	@ (800639c <HAL_RCC_OscConfig+0x4bc>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d118      	bne.n	80061f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061c2:	4b76      	ldr	r3, [pc, #472]	@ (800639c <HAL_RCC_OscConfig+0x4bc>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a75      	ldr	r2, [pc, #468]	@ (800639c <HAL_RCC_OscConfig+0x4bc>)
 80061c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061ce:	f7fc fea1 	bl	8002f14 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061d4:	e008      	b.n	80061e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061d6:	f7fc fe9d 	bl	8002f14 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d901      	bls.n	80061e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e183      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061e8:	4b6c      	ldr	r3, [pc, #432]	@ (800639c <HAL_RCC_OscConfig+0x4bc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d0f0      	beq.n	80061d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d108      	bne.n	800620e <HAL_RCC_OscConfig+0x32e>
 80061fc:	4b66      	ldr	r3, [pc, #408]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006202:	4a65      	ldr	r2, [pc, #404]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006204:	f043 0301 	orr.w	r3, r3, #1
 8006208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800620c:	e024      	b.n	8006258 <HAL_RCC_OscConfig+0x378>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	2b05      	cmp	r3, #5
 8006214:	d110      	bne.n	8006238 <HAL_RCC_OscConfig+0x358>
 8006216:	4b60      	ldr	r3, [pc, #384]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621c:	4a5e      	ldr	r2, [pc, #376]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800621e:	f043 0304 	orr.w	r3, r3, #4
 8006222:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006226:	4b5c      	ldr	r3, [pc, #368]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800622c:	4a5a      	ldr	r2, [pc, #360]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006236:	e00f      	b.n	8006258 <HAL_RCC_OscConfig+0x378>
 8006238:	4b57      	ldr	r3, [pc, #348]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800623e:	4a56      	ldr	r2, [pc, #344]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006248:	4b53      	ldr	r3, [pc, #332]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800624a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800624e:	4a52      	ldr	r2, [pc, #328]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006250:	f023 0304 	bic.w	r3, r3, #4
 8006254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d016      	beq.n	800628e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fc fe58 	bl	8002f14 <HAL_GetTick>
 8006264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006266:	e00a      	b.n	800627e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006268:	f7fc fe54 	bl	8002f14 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006276:	4293      	cmp	r3, r2
 8006278:	d901      	bls.n	800627e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e138      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800627e:	4b46      	ldr	r3, [pc, #280]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0ed      	beq.n	8006268 <HAL_RCC_OscConfig+0x388>
 800628c:	e015      	b.n	80062ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800628e:	f7fc fe41 	bl	8002f14 <HAL_GetTick>
 8006292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006294:	e00a      	b.n	80062ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006296:	f7fc fe3d 	bl	8002f14 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e121      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80062ac:	4b3a      	ldr	r3, [pc, #232]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80062ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1ed      	bne.n	8006296 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062ba:	7ffb      	ldrb	r3, [r7, #31]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d105      	bne.n	80062cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062c0:	4b35      	ldr	r3, [pc, #212]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80062c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062c4:	4a34      	ldr	r2, [pc, #208]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80062c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062ca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0320 	and.w	r3, r3, #32
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d03c      	beq.n	8006352 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d01c      	beq.n	800631a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062e0:	4b2d      	ldr	r3, [pc, #180]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80062e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062e6:	4a2c      	ldr	r2, [pc, #176]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 80062e8:	f043 0301 	orr.w	r3, r3, #1
 80062ec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f0:	f7fc fe10 	bl	8002f14 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062f8:	f7fc fe0c 	bl	8002f14 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e0f2      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800630a:	4b23      	ldr	r3, [pc, #140]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800630c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006310:	f003 0302 	and.w	r3, r3, #2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d0ef      	beq.n	80062f8 <HAL_RCC_OscConfig+0x418>
 8006318:	e01b      	b.n	8006352 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800631a:	4b1f      	ldr	r3, [pc, #124]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800631c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006320:	4a1d      	ldr	r2, [pc, #116]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006322:	f023 0301 	bic.w	r3, r3, #1
 8006326:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800632a:	f7fc fdf3 	bl	8002f14 <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006330:	e008      	b.n	8006344 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006332:	f7fc fdef 	bl	8002f14 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e0d5      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006344:	4b14      	ldr	r3, [pc, #80]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006346:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800634a:	f003 0302 	and.w	r3, r3, #2
 800634e:	2b00      	cmp	r3, #0
 8006350:	d1ef      	bne.n	8006332 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	f000 80c9 	beq.w	80064ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800635c:	4b0e      	ldr	r3, [pc, #56]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 030c 	and.w	r3, r3, #12
 8006364:	2b0c      	cmp	r3, #12
 8006366:	f000 8083 	beq.w	8006470 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	2b02      	cmp	r3, #2
 8006370:	d15e      	bne.n	8006430 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006372:	4b09      	ldr	r3, [pc, #36]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a08      	ldr	r2, [pc, #32]	@ (8006398 <HAL_RCC_OscConfig+0x4b8>)
 8006378:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800637c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800637e:	f7fc fdc9 	bl	8002f14 <HAL_GetTick>
 8006382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006384:	e00c      	b.n	80063a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006386:	f7fc fdc5 	bl	8002f14 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	2b02      	cmp	r3, #2
 8006392:	d905      	bls.n	80063a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006394:	2303      	movs	r3, #3
 8006396:	e0ab      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
 8006398:	40021000 	.word	0x40021000
 800639c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80063a0:	4b55      	ldr	r3, [pc, #340]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1ec      	bne.n	8006386 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80063ac:	4b52      	ldr	r3, [pc, #328]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 80063ae:	68da      	ldr	r2, [r3, #12]
 80063b0:	4b52      	ldr	r3, [pc, #328]	@ (80064fc <HAL_RCC_OscConfig+0x61c>)
 80063b2:	4013      	ands	r3, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6a11      	ldr	r1, [r2, #32]
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80063bc:	3a01      	subs	r2, #1
 80063be:	0112      	lsls	r2, r2, #4
 80063c0:	4311      	orrs	r1, r2
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80063c6:	0212      	lsls	r2, r2, #8
 80063c8:	4311      	orrs	r1, r2
 80063ca:	687a      	ldr	r2, [r7, #4]
 80063cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80063ce:	0852      	lsrs	r2, r2, #1
 80063d0:	3a01      	subs	r2, #1
 80063d2:	0552      	lsls	r2, r2, #21
 80063d4:	4311      	orrs	r1, r2
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80063da:	0852      	lsrs	r2, r2, #1
 80063dc:	3a01      	subs	r2, #1
 80063de:	0652      	lsls	r2, r2, #25
 80063e0:	4311      	orrs	r1, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80063e6:	06d2      	lsls	r2, r2, #27
 80063e8:	430a      	orrs	r2, r1
 80063ea:	4943      	ldr	r1, [pc, #268]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 80063ec:	4313      	orrs	r3, r2
 80063ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063f0:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a40      	ldr	r2, [pc, #256]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 80063f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063fc:	4b3e      	ldr	r3, [pc, #248]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	4a3d      	ldr	r2, [pc, #244]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 8006402:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006408:	f7fc fd84 	bl	8002f14 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006410:	f7fc fd80 	bl	8002f14 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e066      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006422:	4b35      	ldr	r3, [pc, #212]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0x530>
 800642e:	e05e      	b.n	80064ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006430:	4b31      	ldr	r3, [pc, #196]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a30      	ldr	r2, [pc, #192]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 8006436:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800643a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643c:	f7fc fd6a 	bl	8002f14 <HAL_GetTick>
 8006440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006442:	e008      	b.n	8006456 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006444:	f7fc fd66 	bl	8002f14 <HAL_GetTick>
 8006448:	4602      	mov	r2, r0
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	1ad3      	subs	r3, r2, r3
 800644e:	2b02      	cmp	r3, #2
 8006450:	d901      	bls.n	8006456 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e04c      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006456:	4b28      	ldr	r3, [pc, #160]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1f0      	bne.n	8006444 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006462:	4b25      	ldr	r3, [pc, #148]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	4924      	ldr	r1, [pc, #144]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 8006468:	4b25      	ldr	r3, [pc, #148]	@ (8006500 <HAL_RCC_OscConfig+0x620>)
 800646a:	4013      	ands	r3, r2
 800646c:	60cb      	str	r3, [r1, #12]
 800646e:	e03e      	b.n	80064ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006478:	2301      	movs	r3, #1
 800647a:	e039      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800647c:	4b1e      	ldr	r3, [pc, #120]	@ (80064f8 <HAL_RCC_OscConfig+0x618>)
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f003 0203 	and.w	r2, r3, #3
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	429a      	cmp	r2, r3
 800648e:	d12c      	bne.n	80064ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800649a:	3b01      	subs	r3, #1
 800649c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d123      	bne.n	80064ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d11b      	bne.n	80064ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064be:	429a      	cmp	r2, r3
 80064c0:	d113      	bne.n	80064ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	3b01      	subs	r3, #1
 80064d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d109      	bne.n	80064ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064e0:	085b      	lsrs	r3, r3, #1
 80064e2:	3b01      	subs	r3, #1
 80064e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d001      	beq.n	80064ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	e000      	b.n	80064f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3720      	adds	r7, #32
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	40021000 	.word	0x40021000
 80064fc:	019f800c 	.word	0x019f800c
 8006500:	feeefffc 	.word	0xfeeefffc

08006504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800650e:	2300      	movs	r3, #0
 8006510:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e11e      	b.n	800675a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800651c:	4b91      	ldr	r3, [pc, #580]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	683a      	ldr	r2, [r7, #0]
 8006526:	429a      	cmp	r2, r3
 8006528:	d910      	bls.n	800654c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800652a:	4b8e      	ldr	r3, [pc, #568]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f023 020f 	bic.w	r2, r3, #15
 8006532:	498c      	ldr	r1, [pc, #560]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	4313      	orrs	r3, r2
 8006538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800653a:	4b8a      	ldr	r3, [pc, #552]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	683a      	ldr	r2, [r7, #0]
 8006544:	429a      	cmp	r2, r3
 8006546:	d001      	beq.n	800654c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e106      	b.n	800675a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d073      	beq.n	8006640 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2b03      	cmp	r3, #3
 800655e:	d129      	bne.n	80065b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006560:	4b81      	ldr	r3, [pc, #516]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d101      	bne.n	8006570 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e0f4      	b.n	800675a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006570:	f000 f9d0 	bl	8006914 <RCC_GetSysClockFreqFromPLLSource>
 8006574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4a7c      	ldr	r2, [pc, #496]	@ (800676c <HAL_RCC_ClockConfig+0x268>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d93f      	bls.n	80065fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800657e:	4b7a      	ldr	r3, [pc, #488]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d009      	beq.n	800659e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006592:	2b00      	cmp	r3, #0
 8006594:	d033      	beq.n	80065fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800659a:	2b00      	cmp	r3, #0
 800659c:	d12f      	bne.n	80065fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800659e:	4b72      	ldr	r3, [pc, #456]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065a6:	4a70      	ldr	r2, [pc, #448]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80065a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80065ae:	2380      	movs	r3, #128	@ 0x80
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	e024      	b.n	80065fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d107      	bne.n	80065cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d109      	bne.n	80065dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0c6      	b.n	800675a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065cc:	4b66      	ldr	r3, [pc, #408]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	e0be      	b.n	800675a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065dc:	f000 f8ce 	bl	800677c <HAL_RCC_GetSysClockFreq>
 80065e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4a61      	ldr	r2, [pc, #388]	@ (800676c <HAL_RCC_ClockConfig+0x268>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d909      	bls.n	80065fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065ea:	4b5f      	ldr	r3, [pc, #380]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065f2:	4a5d      	ldr	r2, [pc, #372]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80065f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065fa:	2380      	movs	r3, #128	@ 0x80
 80065fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065fe:	4b5a      	ldr	r3, [pc, #360]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f023 0203 	bic.w	r2, r3, #3
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	4957      	ldr	r1, [pc, #348]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800660c:	4313      	orrs	r3, r2
 800660e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006610:	f7fc fc80 	bl	8002f14 <HAL_GetTick>
 8006614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006616:	e00a      	b.n	800662e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006618:	f7fc fc7c 	bl	8002f14 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006626:	4293      	cmp	r3, r2
 8006628:	d901      	bls.n	800662e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e095      	b.n	800675a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662e:	4b4e      	ldr	r3, [pc, #312]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 020c 	and.w	r2, r3, #12
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	429a      	cmp	r2, r3
 800663e:	d1eb      	bne.n	8006618 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0302 	and.w	r3, r3, #2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d023      	beq.n	8006694 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006658:	4b43      	ldr	r3, [pc, #268]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	4a42      	ldr	r2, [pc, #264]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800665e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006662:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f003 0308 	and.w	r3, r3, #8
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006670:	4b3d      	ldr	r3, [pc, #244]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006678:	4a3b      	ldr	r2, [pc, #236]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800667a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800667e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006680:	4b39      	ldr	r3, [pc, #228]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	4936      	ldr	r1, [pc, #216]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800668e:	4313      	orrs	r3, r2
 8006690:	608b      	str	r3, [r1, #8]
 8006692:	e008      	b.n	80066a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b80      	cmp	r3, #128	@ 0x80
 8006698:	d105      	bne.n	80066a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800669a:	4b33      	ldr	r3, [pc, #204]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	4a32      	ldr	r2, [pc, #200]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80066a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80066a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d21d      	bcs.n	80066f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b4:	4b2b      	ldr	r3, [pc, #172]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f023 020f 	bic.w	r2, r3, #15
 80066bc:	4929      	ldr	r1, [pc, #164]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066c4:	f7fc fc26 	bl	8002f14 <HAL_GetTick>
 80066c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ca:	e00a      	b.n	80066e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066cc:	f7fc fc22 	bl	8002f14 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066da:	4293      	cmp	r3, r2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e03b      	b.n	800675a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066e2:	4b20      	ldr	r3, [pc, #128]	@ (8006764 <HAL_RCC_ClockConfig+0x260>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	683a      	ldr	r2, [r7, #0]
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d1ed      	bne.n	80066cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0304 	and.w	r3, r3, #4
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d008      	beq.n	800670e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066fc:	4b1a      	ldr	r3, [pc, #104]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4917      	ldr	r1, [pc, #92]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800670a:	4313      	orrs	r3, r2
 800670c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 0308 	and.w	r3, r3, #8
 8006716:	2b00      	cmp	r3, #0
 8006718:	d009      	beq.n	800672e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800671a:	4b13      	ldr	r3, [pc, #76]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691b      	ldr	r3, [r3, #16]
 8006726:	00db      	lsls	r3, r3, #3
 8006728:	490f      	ldr	r1, [pc, #60]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 800672a:	4313      	orrs	r3, r2
 800672c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800672e:	f000 f825 	bl	800677c <HAL_RCC_GetSysClockFreq>
 8006732:	4602      	mov	r2, r0
 8006734:	4b0c      	ldr	r3, [pc, #48]	@ (8006768 <HAL_RCC_ClockConfig+0x264>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	091b      	lsrs	r3, r3, #4
 800673a:	f003 030f 	and.w	r3, r3, #15
 800673e:	490c      	ldr	r1, [pc, #48]	@ (8006770 <HAL_RCC_ClockConfig+0x26c>)
 8006740:	5ccb      	ldrb	r3, [r1, r3]
 8006742:	f003 031f 	and.w	r3, r3, #31
 8006746:	fa22 f303 	lsr.w	r3, r2, r3
 800674a:	4a0a      	ldr	r2, [pc, #40]	@ (8006774 <HAL_RCC_ClockConfig+0x270>)
 800674c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800674e:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <HAL_RCC_ClockConfig+0x274>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4618      	mov	r0, r3
 8006754:	f7fb ff5e 	bl	8002614 <HAL_InitTick>
 8006758:	4603      	mov	r3, r0
}
 800675a:	4618      	mov	r0, r3
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	40022000 	.word	0x40022000
 8006768:	40021000 	.word	0x40021000
 800676c:	04c4b400 	.word	0x04c4b400
 8006770:	0801b464 	.word	0x0801b464
 8006774:	20000004 	.word	0x20000004
 8006778:	20000008 	.word	0x20000008

0800677c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006782:	4b2c      	ldr	r3, [pc, #176]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
 800678a:	2b04      	cmp	r3, #4
 800678c:	d102      	bne.n	8006794 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800678e:	4b2a      	ldr	r3, [pc, #168]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006790:	613b      	str	r3, [r7, #16]
 8006792:	e047      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006794:	4b27      	ldr	r3, [pc, #156]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	f003 030c 	and.w	r3, r3, #12
 800679c:	2b08      	cmp	r3, #8
 800679e:	d102      	bne.n	80067a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80067a0:	4b26      	ldr	r3, [pc, #152]	@ (800683c <HAL_RCC_GetSysClockFreq+0xc0>)
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	e03e      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80067a6:	4b23      	ldr	r3, [pc, #140]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b0c      	cmp	r3, #12
 80067b0:	d136      	bne.n	8006820 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067b2:	4b20      	ldr	r3, [pc, #128]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0303 	and.w	r3, r3, #3
 80067ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	091b      	lsrs	r3, r3, #4
 80067c2:	f003 030f 	and.w	r3, r3, #15
 80067c6:	3301      	adds	r3, #1
 80067c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	2b03      	cmp	r3, #3
 80067ce:	d10c      	bne.n	80067ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067d0:	4a1a      	ldr	r2, [pc, #104]	@ (800683c <HAL_RCC_GetSysClockFreq+0xc0>)
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d8:	4a16      	ldr	r2, [pc, #88]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067da:	68d2      	ldr	r2, [r2, #12]
 80067dc:	0a12      	lsrs	r2, r2, #8
 80067de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067e2:	fb02 f303 	mul.w	r3, r2, r3
 80067e6:	617b      	str	r3, [r7, #20]
      break;
 80067e8:	e00c      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067ea:	4a13      	ldr	r2, [pc, #76]	@ (8006838 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f2:	4a10      	ldr	r2, [pc, #64]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f4:	68d2      	ldr	r2, [r2, #12]
 80067f6:	0a12      	lsrs	r2, r2, #8
 80067f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]
      break;
 8006802:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006804:	4b0b      	ldr	r3, [pc, #44]	@ (8006834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	0e5b      	lsrs	r3, r3, #25
 800680a:	f003 0303 	and.w	r3, r3, #3
 800680e:	3301      	adds	r3, #1
 8006810:	005b      	lsls	r3, r3, #1
 8006812:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	fbb2 f3f3 	udiv	r3, r2, r3
 800681c:	613b      	str	r3, [r7, #16]
 800681e:	e001      	b.n	8006824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006824:	693b      	ldr	r3, [r7, #16]
}
 8006826:	4618      	mov	r0, r3
 8006828:	371c      	adds	r7, #28
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	40021000 	.word	0x40021000
 8006838:	00f42400 	.word	0x00f42400
 800683c:	016e3600 	.word	0x016e3600

08006840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006844:	4b03      	ldr	r3, [pc, #12]	@ (8006854 <HAL_RCC_GetHCLKFreq+0x14>)
 8006846:	681b      	ldr	r3, [r3, #0]
}
 8006848:	4618      	mov	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	20000004 	.word	0x20000004

08006858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800685c:	f7ff fff0 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 8006860:	4602      	mov	r2, r0
 8006862:	4b06      	ldr	r3, [pc, #24]	@ (800687c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	0a1b      	lsrs	r3, r3, #8
 8006868:	f003 0307 	and.w	r3, r3, #7
 800686c:	4904      	ldr	r1, [pc, #16]	@ (8006880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800686e:	5ccb      	ldrb	r3, [r1, r3]
 8006870:	f003 031f 	and.w	r3, r3, #31
 8006874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006878:	4618      	mov	r0, r3
 800687a:	bd80      	pop	{r7, pc}
 800687c:	40021000 	.word	0x40021000
 8006880:	0801b474 	.word	0x0801b474

08006884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006888:	f7ff ffda 	bl	8006840 <HAL_RCC_GetHCLKFreq>
 800688c:	4602      	mov	r2, r0
 800688e:	4b06      	ldr	r3, [pc, #24]	@ (80068a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	0adb      	lsrs	r3, r3, #11
 8006894:	f003 0307 	and.w	r3, r3, #7
 8006898:	4904      	ldr	r1, [pc, #16]	@ (80068ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800689a:	5ccb      	ldrb	r3, [r1, r3]
 800689c:	f003 031f 	and.w	r3, r3, #31
 80068a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	40021000 	.word	0x40021000
 80068ac:	0801b474 	.word	0x0801b474

080068b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	220f      	movs	r2, #15
 80068be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80068c0:	4b12      	ldr	r3, [pc, #72]	@ (800690c <HAL_RCC_GetClockConfig+0x5c>)
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	f003 0203 	and.w	r2, r3, #3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80068cc:	4b0f      	ldr	r3, [pc, #60]	@ (800690c <HAL_RCC_GetClockConfig+0x5c>)
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80068d8:	4b0c      	ldr	r3, [pc, #48]	@ (800690c <HAL_RCC_GetClockConfig+0x5c>)
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80068e4:	4b09      	ldr	r3, [pc, #36]	@ (800690c <HAL_RCC_GetClockConfig+0x5c>)
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	08db      	lsrs	r3, r3, #3
 80068ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80068f2:	4b07      	ldr	r3, [pc, #28]	@ (8006910 <HAL_RCC_GetClockConfig+0x60>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 020f 	and.w	r2, r3, #15
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	370c      	adds	r7, #12
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	40021000 	.word	0x40021000
 8006910:	40022000 	.word	0x40022000

08006914 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800691a:	4b1e      	ldr	r3, [pc, #120]	@ (8006994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006924:	4b1b      	ldr	r3, [pc, #108]	@ (8006994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	091b      	lsrs	r3, r3, #4
 800692a:	f003 030f 	and.w	r3, r3, #15
 800692e:	3301      	adds	r3, #1
 8006930:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	2b03      	cmp	r3, #3
 8006936:	d10c      	bne.n	8006952 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006938:	4a17      	ldr	r2, [pc, #92]	@ (8006998 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006940:	4a14      	ldr	r2, [pc, #80]	@ (8006994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006942:	68d2      	ldr	r2, [r2, #12]
 8006944:	0a12      	lsrs	r2, r2, #8
 8006946:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800694a:	fb02 f303 	mul.w	r3, r2, r3
 800694e:	617b      	str	r3, [r7, #20]
    break;
 8006950:	e00c      	b.n	800696c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006952:	4a12      	ldr	r2, [pc, #72]	@ (800699c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	fbb2 f3f3 	udiv	r3, r2, r3
 800695a:	4a0e      	ldr	r2, [pc, #56]	@ (8006994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800695c:	68d2      	ldr	r2, [r2, #12]
 800695e:	0a12      	lsrs	r2, r2, #8
 8006960:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	617b      	str	r3, [r7, #20]
    break;
 800696a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800696c:	4b09      	ldr	r3, [pc, #36]	@ (8006994 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	0e5b      	lsrs	r3, r3, #25
 8006972:	f003 0303 	and.w	r3, r3, #3
 8006976:	3301      	adds	r3, #1
 8006978:	005b      	lsls	r3, r3, #1
 800697a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800697c:	697a      	ldr	r2, [r7, #20]
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	fbb2 f3f3 	udiv	r3, r2, r3
 8006984:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006986:	687b      	ldr	r3, [r7, #4]
}
 8006988:	4618      	mov	r0, r3
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40021000 	.word	0x40021000
 8006998:	016e3600 	.word	0x016e3600
 800699c:	00f42400 	.word	0x00f42400

080069a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069a8:	2300      	movs	r3, #0
 80069aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069ac:	2300      	movs	r3, #0
 80069ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 8098 	beq.w	8006aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069be:	2300      	movs	r3, #0
 80069c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069c2:	4b43      	ldr	r3, [pc, #268]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10d      	bne.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069ce:	4b40      	ldr	r3, [pc, #256]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069d2:	4a3f      	ldr	r2, [pc, #252]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80069d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80069da:	4b3d      	ldr	r3, [pc, #244]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80069e2:	60bb      	str	r3, [r7, #8]
 80069e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069e6:	2301      	movs	r3, #1
 80069e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069ea:	4b3a      	ldr	r3, [pc, #232]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a39      	ldr	r2, [pc, #228]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069f6:	f7fc fa8d 	bl	8002f14 <HAL_GetTick>
 80069fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80069fc:	e009      	b.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069fe:	f7fc fa89 	bl	8002f14 <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d902      	bls.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	74fb      	strb	r3, [r7, #19]
        break;
 8006a10:	e005      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a12:	4b30      	ldr	r3, [pc, #192]	@ (8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ef      	beq.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a1e:	7cfb      	ldrb	r3, [r7, #19]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d159      	bne.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a24:	4b2a      	ldr	r3, [pc, #168]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a2e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01e      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d019      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a40:	4b23      	ldr	r3, [pc, #140]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a4a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a4c:	4b20      	ldr	r3, [pc, #128]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a52:	4a1f      	ldr	r2, [pc, #124]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a6c:	4a18      	ldr	r2, [pc, #96]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f003 0301 	and.w	r3, r3, #1
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d016      	beq.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a7e:	f7fc fa49 	bl	8002f14 <HAL_GetTick>
 8006a82:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a84:	e00b      	b.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a86:	f7fc fa45 	bl	8002f14 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d902      	bls.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	74fb      	strb	r3, [r7, #19]
            break;
 8006a9c:	e006      	b.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa4:	f003 0302 	and.w	r3, r3, #2
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0ec      	beq.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006aac:	7cfb      	ldrb	r3, [r7, #19]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10b      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ab2:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ab8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ac0:	4903      	ldr	r1, [pc, #12]	@ (8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006ac8:	e008      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aca:	7cfb      	ldrb	r3, [r7, #19]
 8006acc:	74bb      	strb	r3, [r7, #18]
 8006ace:	e005      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ad8:	7cfb      	ldrb	r3, [r7, #19]
 8006ada:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006adc:	7c7b      	ldrb	r3, [r7, #17]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d105      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ae2:	4ba7      	ldr	r3, [pc, #668]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae6:	4aa6      	ldr	r2, [pc, #664]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006aec:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0301 	and.w	r3, r3, #1
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d00a      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006afa:	4ba1      	ldr	r3, [pc, #644]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b00:	f023 0203 	bic.w	r2, r3, #3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	499d      	ldr	r1, [pc, #628]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d00a      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b1c:	4b98      	ldr	r3, [pc, #608]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b22:	f023 020c 	bic.w	r2, r3, #12
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	4995      	ldr	r1, [pc, #596]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00a      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b3e:	4b90      	ldr	r3, [pc, #576]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b44:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	498c      	ldr	r1, [pc, #560]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b60:	4b87      	ldr	r3, [pc, #540]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b66:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	691b      	ldr	r3, [r3, #16]
 8006b6e:	4984      	ldr	r1, [pc, #528]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b70:	4313      	orrs	r3, r2
 8006b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0310 	and.w	r3, r3, #16
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d00a      	beq.n	8006b98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b82:	4b7f      	ldr	r3, [pc, #508]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	497b      	ldr	r1, [pc, #492]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00a      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ba4:	4b76      	ldr	r3, [pc, #472]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006baa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	4973      	ldr	r1, [pc, #460]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00a      	beq.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bcc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	496a      	ldr	r1, [pc, #424]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00a      	beq.n	8006bfe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006be8:	4b65      	ldr	r3, [pc, #404]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bee:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4962      	ldr	r1, [pc, #392]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c0a:	4b5d      	ldr	r3, [pc, #372]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c10:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c18:	4959      	ldr	r1, [pc, #356]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00a      	beq.n	8006c42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006c2c:	4b54      	ldr	r3, [pc, #336]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c32:	f023 0203 	bic.w	r2, r3, #3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c3a:	4951      	ldr	r1, [pc, #324]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d00a      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c4e:	4b4c      	ldr	r3, [pc, #304]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c54:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	4948      	ldr	r1, [pc, #288]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d015      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c70:	4b43      	ldr	r3, [pc, #268]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c7e:	4940      	ldr	r1, [pc, #256]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c80:	4313      	orrs	r3, r2
 8006c82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006c8e:	d105      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c90:	4b3b      	ldr	r3, [pc, #236]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	4a3a      	ldr	r2, [pc, #232]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006c9a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d015      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ca8:	4b35      	ldr	r3, [pc, #212]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cb6:	4932      	ldr	r1, [pc, #200]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cc6:	d105      	bne.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc8:	4b2d      	ldr	r3, [pc, #180]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cca:	68db      	ldr	r3, [r3, #12]
 8006ccc:	4a2c      	ldr	r2, [pc, #176]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cd2:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d015      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ce0:	4b27      	ldr	r3, [pc, #156]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	4924      	ldr	r1, [pc, #144]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cfe:	d105      	bne.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d00:	4b1f      	ldr	r3, [pc, #124]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	4a1e      	ldr	r2, [pc, #120]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d015      	beq.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006d18:	4b19      	ldr	r3, [pc, #100]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d26:	4916      	ldr	r1, [pc, #88]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d36:	d105      	bne.n	8006d44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d38:	4b11      	ldr	r3, [pc, #68]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	4a10      	ldr	r2, [pc, #64]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d019      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d50:	4b0b      	ldr	r3, [pc, #44]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d56:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5e:	4908      	ldr	r1, [pc, #32]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d6a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d6e:	d109      	bne.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d70:	4b03      	ldr	r3, [pc, #12]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	4a02      	ldr	r2, [pc, #8]	@ (8006d80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d7a:	60d3      	str	r3, [r2, #12]
 8006d7c:	e002      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006d7e:	bf00      	nop
 8006d80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d90:	4b29      	ldr	r3, [pc, #164]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d96:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d9e:	4926      	ldr	r1, [pc, #152]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006da0:	4313      	orrs	r3, r2
 8006da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006daa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dae:	d105      	bne.n	8006dbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006db0:	4b21      	ldr	r3, [pc, #132]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006db2:	68db      	ldr	r3, [r3, #12]
 8006db4:	4a20      	ldr	r2, [pc, #128]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006db6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d015      	beq.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dce:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dd6:	4918      	ldr	r1, [pc, #96]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006de6:	d105      	bne.n	8006df4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006de8:	4b13      	ldr	r3, [pc, #76]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	4a12      	ldr	r2, [pc, #72]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006df2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d015      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006e00:	4b0d      	ldr	r3, [pc, #52]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006e06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e0e:	490a      	ldr	r1, [pc, #40]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e10:	4313      	orrs	r3, r2
 8006e12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006e1e:	d105      	bne.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006e20:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	4a04      	ldr	r2, [pc, #16]	@ (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006e2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006e2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	40021000 	.word	0x40021000

08006e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	e049      	b.n	8006ee2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fb fe62 	bl	8002b2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	3304      	adds	r3, #4
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f000 fe2a 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ee0:	2300      	movs	r3, #0
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3708      	adds	r7, #8
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
	...

08006eec <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d001      	beq.n	8006f04 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	e04c      	b.n	8006f9e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a26      	ldr	r2, [pc, #152]	@ (8006fac <HAL_TIM_Base_Start+0xc0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d022      	beq.n	8006f5c <HAL_TIM_Base_Start+0x70>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f1e:	d01d      	beq.n	8006f5c <HAL_TIM_Base_Start+0x70>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a22      	ldr	r2, [pc, #136]	@ (8006fb0 <HAL_TIM_Base_Start+0xc4>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d018      	beq.n	8006f5c <HAL_TIM_Base_Start+0x70>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a21      	ldr	r2, [pc, #132]	@ (8006fb4 <HAL_TIM_Base_Start+0xc8>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d013      	beq.n	8006f5c <HAL_TIM_Base_Start+0x70>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a1f      	ldr	r2, [pc, #124]	@ (8006fb8 <HAL_TIM_Base_Start+0xcc>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00e      	beq.n	8006f5c <HAL_TIM_Base_Start+0x70>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1e      	ldr	r2, [pc, #120]	@ (8006fbc <HAL_TIM_Base_Start+0xd0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d009      	beq.n	8006f5c <HAL_TIM_Base_Start+0x70>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1c      	ldr	r2, [pc, #112]	@ (8006fc0 <HAL_TIM_Base_Start+0xd4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d004      	beq.n	8006f5c <HAL_TIM_Base_Start+0x70>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1b      	ldr	r2, [pc, #108]	@ (8006fc4 <HAL_TIM_Base_Start+0xd8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d115      	bne.n	8006f88 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	4b19      	ldr	r3, [pc, #100]	@ (8006fc8 <HAL_TIM_Base_Start+0xdc>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2b06      	cmp	r3, #6
 8006f6c:	d015      	beq.n	8006f9a <HAL_TIM_Base_Start+0xae>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f74:	d011      	beq.n	8006f9a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f042 0201 	orr.w	r2, r2, #1
 8006f84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f86:	e008      	b.n	8006f9a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f042 0201 	orr.w	r2, r2, #1
 8006f96:	601a      	str	r2, [r3, #0]
 8006f98:	e000      	b.n	8006f9c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40012c00 	.word	0x40012c00
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40013400 	.word	0x40013400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40015000 	.word	0x40015000
 8006fc8:	00010007 	.word	0x00010007

08006fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b085      	sub	sp, #20
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d001      	beq.n	8006fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e054      	b.n	800708e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68da      	ldr	r2, [r3, #12]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f042 0201 	orr.w	r2, r2, #1
 8006ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a26      	ldr	r2, [pc, #152]	@ (800709c <HAL_TIM_Base_Start_IT+0xd0>)
 8007002:	4293      	cmp	r3, r2
 8007004:	d022      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x80>
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700e:	d01d      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x80>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a22      	ldr	r2, [pc, #136]	@ (80070a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d018      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x80>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4a21      	ldr	r2, [pc, #132]	@ (80070a4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007020:	4293      	cmp	r3, r2
 8007022:	d013      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x80>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1f      	ldr	r2, [pc, #124]	@ (80070a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d00e      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x80>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1e      	ldr	r2, [pc, #120]	@ (80070ac <HAL_TIM_Base_Start_IT+0xe0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d009      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x80>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1c      	ldr	r2, [pc, #112]	@ (80070b0 <HAL_TIM_Base_Start_IT+0xe4>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d004      	beq.n	800704c <HAL_TIM_Base_Start_IT+0x80>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1b      	ldr	r2, [pc, #108]	@ (80070b4 <HAL_TIM_Base_Start_IT+0xe8>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d115      	bne.n	8007078 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	4b19      	ldr	r3, [pc, #100]	@ (80070b8 <HAL_TIM_Base_Start_IT+0xec>)
 8007054:	4013      	ands	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b06      	cmp	r3, #6
 800705c:	d015      	beq.n	800708a <HAL_TIM_Base_Start_IT+0xbe>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007064:	d011      	beq.n	800708a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681a      	ldr	r2, [r3, #0]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0201 	orr.w	r2, r2, #1
 8007074:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007076:	e008      	b.n	800708a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	601a      	str	r2, [r3, #0]
 8007088:	e000      	b.n	800708c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800708a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800708c:	2300      	movs	r3, #0
}
 800708e:	4618      	mov	r0, r3
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40000400 	.word	0x40000400
 80070a4:	40000800 	.word	0x40000800
 80070a8:	40000c00 	.word	0x40000c00
 80070ac:	40013400 	.word	0x40013400
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40015000 	.word	0x40015000
 80070b8:	00010007 	.word	0x00010007

080070bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d101      	bne.n	80070ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80070ca:	2301      	movs	r3, #1
 80070cc:	e049      	b.n	8007162 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d106      	bne.n	80070e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f7fb fd46 	bl	8002b74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2202      	movs	r2, #2
 80070ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4619      	mov	r1, r3
 80070fa:	4610      	mov	r0, r2
 80070fc:	f000 fcea 	bl	8007ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2201      	movs	r2, #1
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d109      	bne.n	8007190 <HAL_TIM_PWM_Start+0x24>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007182:	b2db      	uxtb	r3, r3
 8007184:	2b01      	cmp	r3, #1
 8007186:	bf14      	ite	ne
 8007188:	2301      	movne	r3, #1
 800718a:	2300      	moveq	r3, #0
 800718c:	b2db      	uxtb	r3, r3
 800718e:	e03c      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d109      	bne.n	80071aa <HAL_TIM_PWM_Start+0x3e>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b01      	cmp	r3, #1
 80071a0:	bf14      	ite	ne
 80071a2:	2301      	movne	r3, #1
 80071a4:	2300      	moveq	r3, #0
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	e02f      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d109      	bne.n	80071c4 <HAL_TIM_PWM_Start+0x58>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	bf14      	ite	ne
 80071bc:	2301      	movne	r3, #1
 80071be:	2300      	moveq	r3, #0
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	e022      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	2b0c      	cmp	r3, #12
 80071c8:	d109      	bne.n	80071de <HAL_TIM_PWM_Start+0x72>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	bf14      	ite	ne
 80071d6:	2301      	movne	r3, #1
 80071d8:	2300      	moveq	r3, #0
 80071da:	b2db      	uxtb	r3, r3
 80071dc:	e015      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d109      	bne.n	80071f8 <HAL_TIM_PWM_Start+0x8c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	bf14      	ite	ne
 80071f0:	2301      	movne	r3, #1
 80071f2:	2300      	moveq	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	e008      	b.n	800720a <HAL_TIM_PWM_Start+0x9e>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e0a6      	b.n	8007360 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d104      	bne.n	8007222 <HAL_TIM_PWM_Start+0xb6>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2202      	movs	r2, #2
 800721c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007220:	e023      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	2b04      	cmp	r3, #4
 8007226:	d104      	bne.n	8007232 <HAL_TIM_PWM_Start+0xc6>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2202      	movs	r2, #2
 800722c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007230:	e01b      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b08      	cmp	r3, #8
 8007236:	d104      	bne.n	8007242 <HAL_TIM_PWM_Start+0xd6>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007240:	e013      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	2b0c      	cmp	r3, #12
 8007246:	d104      	bne.n	8007252 <HAL_TIM_PWM_Start+0xe6>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2202      	movs	r2, #2
 800724c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007250:	e00b      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	2b10      	cmp	r3, #16
 8007256:	d104      	bne.n	8007262 <HAL_TIM_PWM_Start+0xf6>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007260:	e003      	b.n	800726a <HAL_TIM_PWM_Start+0xfe>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2201      	movs	r2, #1
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	4618      	mov	r0, r3
 8007274:	f001 f8a8 	bl	80083c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a3a      	ldr	r2, [pc, #232]	@ (8007368 <HAL_TIM_PWM_Start+0x1fc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a39      	ldr	r2, [pc, #228]	@ (800736c <HAL_TIM_PWM_Start+0x200>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a37      	ldr	r2, [pc, #220]	@ (8007370 <HAL_TIM_PWM_Start+0x204>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a36      	ldr	r2, [pc, #216]	@ (8007374 <HAL_TIM_PWM_Start+0x208>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a34      	ldr	r2, [pc, #208]	@ (8007378 <HAL_TIM_PWM_Start+0x20c>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_TIM_PWM_Start+0x148>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a33      	ldr	r2, [pc, #204]	@ (800737c <HAL_TIM_PWM_Start+0x210>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <HAL_TIM_PWM_Start+0x14c>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <HAL_TIM_PWM_Start+0x14e>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80072cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a25      	ldr	r2, [pc, #148]	@ (8007368 <HAL_TIM_PWM_Start+0x1fc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d022      	beq.n	800731e <HAL_TIM_PWM_Start+0x1b2>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072e0:	d01d      	beq.n	800731e <HAL_TIM_PWM_Start+0x1b2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a26      	ldr	r2, [pc, #152]	@ (8007380 <HAL_TIM_PWM_Start+0x214>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d018      	beq.n	800731e <HAL_TIM_PWM_Start+0x1b2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a24      	ldr	r2, [pc, #144]	@ (8007384 <HAL_TIM_PWM_Start+0x218>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d013      	beq.n	800731e <HAL_TIM_PWM_Start+0x1b2>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a23      	ldr	r2, [pc, #140]	@ (8007388 <HAL_TIM_PWM_Start+0x21c>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00e      	beq.n	800731e <HAL_TIM_PWM_Start+0x1b2>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a19      	ldr	r2, [pc, #100]	@ (800736c <HAL_TIM_PWM_Start+0x200>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_TIM_PWM_Start+0x1b2>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a18      	ldr	r2, [pc, #96]	@ (8007370 <HAL_TIM_PWM_Start+0x204>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <HAL_TIM_PWM_Start+0x1b2>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a18      	ldr	r2, [pc, #96]	@ (800737c <HAL_TIM_PWM_Start+0x210>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d115      	bne.n	800734a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689a      	ldr	r2, [r3, #8]
 8007324:	4b19      	ldr	r3, [pc, #100]	@ (800738c <HAL_TIM_PWM_Start+0x220>)
 8007326:	4013      	ands	r3, r2
 8007328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b06      	cmp	r3, #6
 800732e:	d015      	beq.n	800735c <HAL_TIM_PWM_Start+0x1f0>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007336:	d011      	beq.n	800735c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007348:	e008      	b.n	800735c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f042 0201 	orr.w	r2, r2, #1
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e000      	b.n	800735e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800735c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800735e:	2300      	movs	r3, #0
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	40012c00 	.word	0x40012c00
 800736c:	40013400 	.word	0x40013400
 8007370:	40014000 	.word	0x40014000
 8007374:	40014400 	.word	0x40014400
 8007378:	40014800 	.word	0x40014800
 800737c:	40015000 	.word	0x40015000
 8007380:	40000400 	.word	0x40000400
 8007384:	40000800 	.word	0x40000800
 8007388:	40000c00 	.word	0x40000c00
 800738c:	00010007 	.word	0x00010007

08007390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d020      	beq.n	80073f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01b      	beq.n	80073f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0202 	mvn.w	r2, #2
 80073c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2201      	movs	r2, #1
 80073ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f003 0303 	and.w	r3, r3, #3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 fb5c 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 80073e0:	e005      	b.n	80073ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 fb4e 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fb5f 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f003 0304 	and.w	r3, r3, #4
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d020      	beq.n	8007440 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	f003 0304 	and.w	r3, r3, #4
 8007404:	2b00      	cmp	r3, #0
 8007406:	d01b      	beq.n	8007440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f06f 0204 	mvn.w	r2, #4
 8007410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2202      	movs	r2, #2
 8007416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fb36 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 800742c:	e005      	b.n	800743a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 fb28 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f000 fb39 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d020      	beq.n	800748c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f003 0308 	and.w	r3, r3, #8
 8007450:	2b00      	cmp	r3, #0
 8007452:	d01b      	beq.n	800748c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f06f 0208 	mvn.w	r2, #8
 800745c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2204      	movs	r2, #4
 8007462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	69db      	ldr	r3, [r3, #28]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f000 fb10 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 8007478:	e005      	b.n	8007486 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 fb02 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f000 fb13 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2200      	movs	r2, #0
 800748a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	2b00      	cmp	r3, #0
 8007494:	d020      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 0310 	and.w	r3, r3, #16
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01b      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f06f 0210 	mvn.w	r2, #16
 80074a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2208      	movs	r2, #8
 80074ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d003      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 faea 	bl	8007a98 <HAL_TIM_IC_CaptureCallback>
 80074c4:	e005      	b.n	80074d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 fadc 	bl	8007a84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f000 faed 	bl	8007aac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0301 	and.w	r3, r3, #1
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00c      	beq.n	80074fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d007      	beq.n	80074fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f06f 0201 	mvn.w	r2, #1
 80074f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fa fee4 	bl	80022c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007502:	2b00      	cmp	r3, #0
 8007504:	d104      	bne.n	8007510 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00c      	beq.n	800752a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8007522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f001 f815 	bl	8008554 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00c      	beq.n	800754e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f001 f80d 	bl	8008568 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00c      	beq.n	8007572 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800755e:	2b00      	cmp	r3, #0
 8007560:	d007      	beq.n	8007572 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800756a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 faa7 	bl	8007ac0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	f003 0320 	and.w	r3, r3, #32
 8007578:	2b00      	cmp	r3, #0
 800757a:	d00c      	beq.n	8007596 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	f003 0320 	and.w	r3, r3, #32
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f06f 0220 	mvn.w	r2, #32
 800758e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 ffd5 	bl	8008540 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800759c:	2b00      	cmp	r3, #0
 800759e:	d00c      	beq.n	80075ba <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d007      	beq.n	80075ba <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80075b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 ffe1 	bl	800857c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00c      	beq.n	80075de <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d007      	beq.n	80075de <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80075d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 ffd9 	bl	8008590 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d00c      	beq.n	8007602 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d007      	beq.n	8007602 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80075fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f000 ffd1 	bl	80085a4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007608:	2b00      	cmp	r3, #0
 800760a:	d00c      	beq.n	8007626 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d007      	beq.n	8007626 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800761e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 ffc9 	bl	80085b8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007626:	bf00      	nop
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b086      	sub	sp, #24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800764a:	2302      	movs	r3, #2
 800764c:	e0ff      	b.n	800784e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2b14      	cmp	r3, #20
 800765a:	f200 80f0 	bhi.w	800783e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800765e:	a201      	add	r2, pc, #4	@ (adr r2, 8007664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007664:	080076b9 	.word	0x080076b9
 8007668:	0800783f 	.word	0x0800783f
 800766c:	0800783f 	.word	0x0800783f
 8007670:	0800783f 	.word	0x0800783f
 8007674:	080076f9 	.word	0x080076f9
 8007678:	0800783f 	.word	0x0800783f
 800767c:	0800783f 	.word	0x0800783f
 8007680:	0800783f 	.word	0x0800783f
 8007684:	0800773b 	.word	0x0800773b
 8007688:	0800783f 	.word	0x0800783f
 800768c:	0800783f 	.word	0x0800783f
 8007690:	0800783f 	.word	0x0800783f
 8007694:	0800777b 	.word	0x0800777b
 8007698:	0800783f 	.word	0x0800783f
 800769c:	0800783f 	.word	0x0800783f
 80076a0:	0800783f 	.word	0x0800783f
 80076a4:	080077bd 	.word	0x080077bd
 80076a8:	0800783f 	.word	0x0800783f
 80076ac:	0800783f 	.word	0x0800783f
 80076b0:	0800783f 	.word	0x0800783f
 80076b4:	080077fd 	.word	0x080077fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68b9      	ldr	r1, [r7, #8]
 80076be:	4618      	mov	r0, r3
 80076c0:	f000 fabc 	bl	8007c3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	699a      	ldr	r2, [r3, #24]
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f042 0208 	orr.w	r2, r2, #8
 80076d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	699a      	ldr	r2, [r3, #24]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f022 0204 	bic.w	r2, r2, #4
 80076e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6999      	ldr	r1, [r3, #24]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	691a      	ldr	r2, [r3, #16]
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	619a      	str	r2, [r3, #24]
      break;
 80076f6:	e0a5      	b.n	8007844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68b9      	ldr	r1, [r7, #8]
 80076fe:	4618      	mov	r0, r3
 8007700:	f000 fb36 	bl	8007d70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	699a      	ldr	r2, [r3, #24]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6999      	ldr	r1, [r3, #24]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	021a      	lsls	r2, r3, #8
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	619a      	str	r2, [r3, #24]
      break;
 8007738:	e084      	b.n	8007844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68b9      	ldr	r1, [r7, #8]
 8007740:	4618      	mov	r0, r3
 8007742:	f000 fba9 	bl	8007e98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	69da      	ldr	r2, [r3, #28]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f042 0208 	orr.w	r2, r2, #8
 8007754:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	69da      	ldr	r2, [r3, #28]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f022 0204 	bic.w	r2, r2, #4
 8007764:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	69d9      	ldr	r1, [r3, #28]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	430a      	orrs	r2, r1
 8007776:	61da      	str	r2, [r3, #28]
      break;
 8007778:	e064      	b.n	8007844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	4618      	mov	r0, r3
 8007782:	f000 fc1b 	bl	8007fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	69da      	ldr	r2, [r3, #28]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69da      	ldr	r2, [r3, #28]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	69d9      	ldr	r1, [r3, #28]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	021a      	lsls	r2, r3, #8
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	61da      	str	r2, [r3, #28]
      break;
 80077ba:	e043      	b.n	8007844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 fc8e 	bl	80080e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0208 	orr.w	r2, r2, #8
 80077d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f022 0204 	bic.w	r2, r2, #4
 80077e6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	691a      	ldr	r2, [r3, #16]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	430a      	orrs	r2, r1
 80077f8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077fa:	e023      	b.n	8007844 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 fcd8 	bl	80081b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007816:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007826:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	021a      	lsls	r2, r3, #8
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800783c:	e002      	b.n	8007844 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	75fb      	strb	r3, [r7, #23]
      break;
 8007842:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop

08007858 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800786c:	2b01      	cmp	r3, #1
 800786e:	d101      	bne.n	8007874 <HAL_TIM_ConfigClockSource+0x1c>
 8007870:	2302      	movs	r3, #2
 8007872:	e0f6      	b.n	8007a62 <HAL_TIM_ConfigClockSource+0x20a>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2202      	movs	r2, #2
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007892:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007896:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800789e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a6f      	ldr	r2, [pc, #444]	@ (8007a6c <HAL_TIM_ConfigClockSource+0x214>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	f000 80c1 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 80078b4:	4a6d      	ldr	r2, [pc, #436]	@ (8007a6c <HAL_TIM_ConfigClockSource+0x214>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	f200 80c6 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80078bc:	4a6c      	ldr	r2, [pc, #432]	@ (8007a70 <HAL_TIM_ConfigClockSource+0x218>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	f000 80b9 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 80078c4:	4a6a      	ldr	r2, [pc, #424]	@ (8007a70 <HAL_TIM_ConfigClockSource+0x218>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	f200 80be 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80078cc:	4a69      	ldr	r2, [pc, #420]	@ (8007a74 <HAL_TIM_ConfigClockSource+0x21c>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	f000 80b1 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 80078d4:	4a67      	ldr	r2, [pc, #412]	@ (8007a74 <HAL_TIM_ConfigClockSource+0x21c>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	f200 80b6 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80078dc:	4a66      	ldr	r2, [pc, #408]	@ (8007a78 <HAL_TIM_ConfigClockSource+0x220>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	f000 80a9 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 80078e4:	4a64      	ldr	r2, [pc, #400]	@ (8007a78 <HAL_TIM_ConfigClockSource+0x220>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	f200 80ae 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80078ec:	4a63      	ldr	r2, [pc, #396]	@ (8007a7c <HAL_TIM_ConfigClockSource+0x224>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	f000 80a1 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 80078f4:	4a61      	ldr	r2, [pc, #388]	@ (8007a7c <HAL_TIM_ConfigClockSource+0x224>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	f200 80a6 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 80078fc:	4a60      	ldr	r2, [pc, #384]	@ (8007a80 <HAL_TIM_ConfigClockSource+0x228>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	f000 8099 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 8007904:	4a5e      	ldr	r2, [pc, #376]	@ (8007a80 <HAL_TIM_ConfigClockSource+0x228>)
 8007906:	4293      	cmp	r3, r2
 8007908:	f200 809e 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800790c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007910:	f000 8091 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 8007914:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007918:	f200 8096 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800791c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007920:	f000 8089 	beq.w	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 8007924:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007928:	f200 808e 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800792c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007930:	d03e      	beq.n	80079b0 <HAL_TIM_ConfigClockSource+0x158>
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007936:	f200 8087 	bhi.w	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 800793a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800793e:	f000 8086 	beq.w	8007a4e <HAL_TIM_ConfigClockSource+0x1f6>
 8007942:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007946:	d87f      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8007948:	2b70      	cmp	r3, #112	@ 0x70
 800794a:	d01a      	beq.n	8007982 <HAL_TIM_ConfigClockSource+0x12a>
 800794c:	2b70      	cmp	r3, #112	@ 0x70
 800794e:	d87b      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8007950:	2b60      	cmp	r3, #96	@ 0x60
 8007952:	d050      	beq.n	80079f6 <HAL_TIM_ConfigClockSource+0x19e>
 8007954:	2b60      	cmp	r3, #96	@ 0x60
 8007956:	d877      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8007958:	2b50      	cmp	r3, #80	@ 0x50
 800795a:	d03c      	beq.n	80079d6 <HAL_TIM_ConfigClockSource+0x17e>
 800795c:	2b50      	cmp	r3, #80	@ 0x50
 800795e:	d873      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8007960:	2b40      	cmp	r3, #64	@ 0x40
 8007962:	d058      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0x1be>
 8007964:	2b40      	cmp	r3, #64	@ 0x40
 8007966:	d86f      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8007968:	2b30      	cmp	r3, #48	@ 0x30
 800796a:	d064      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 800796c:	2b30      	cmp	r3, #48	@ 0x30
 800796e:	d86b      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8007970:	2b20      	cmp	r3, #32
 8007972:	d060      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 8007974:	2b20      	cmp	r3, #32
 8007976:	d867      	bhi.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
 8007978:	2b00      	cmp	r3, #0
 800797a:	d05c      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 800797c:	2b10      	cmp	r3, #16
 800797e:	d05a      	beq.n	8007a36 <HAL_TIM_ConfigClockSource+0x1de>
 8007980:	e062      	b.n	8007a48 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007992:	f000 fcf9 	bl	8008388 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	609a      	str	r2, [r3, #8]
      break;
 80079ae:	e04f      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079c0:	f000 fce2 	bl	8008388 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	689a      	ldr	r2, [r3, #8]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079d2:	609a      	str	r2, [r3, #8]
      break;
 80079d4:	e03c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079e2:	461a      	mov	r2, r3
 80079e4:	f000 fc54 	bl	8008290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	2150      	movs	r1, #80	@ 0x50
 80079ee:	4618      	mov	r0, r3
 80079f0:	f000 fcad 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 80079f4:	e02c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a02:	461a      	mov	r2, r3
 8007a04:	f000 fc73 	bl	80082ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2160      	movs	r1, #96	@ 0x60
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fc9d 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 8007a14:	e01c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a22:	461a      	mov	r2, r3
 8007a24:	f000 fc34 	bl	8008290 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2140      	movs	r1, #64	@ 0x40
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 fc8d 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 8007a34:	e00c      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f000 fc84 	bl	800834e <TIM_ITRx_SetConfig>
      break;
 8007a46:	e003      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8007a4c:	e000      	b.n	8007a50 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007a4e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	00100070 	.word	0x00100070
 8007a70:	00100060 	.word	0x00100060
 8007a74:	00100050 	.word	0x00100050
 8007a78:	00100040 	.word	0x00100040
 8007a7c:	00100030 	.word	0x00100030
 8007a80:	00100020 	.word	0x00100020

08007a84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	4a4c      	ldr	r2, [pc, #304]	@ (8007c18 <TIM_Base_SetConfig+0x144>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d017      	beq.n	8007b1c <TIM_Base_SetConfig+0x48>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af2:	d013      	beq.n	8007b1c <TIM_Base_SetConfig+0x48>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a49      	ldr	r2, [pc, #292]	@ (8007c1c <TIM_Base_SetConfig+0x148>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d00f      	beq.n	8007b1c <TIM_Base_SetConfig+0x48>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a48      	ldr	r2, [pc, #288]	@ (8007c20 <TIM_Base_SetConfig+0x14c>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d00b      	beq.n	8007b1c <TIM_Base_SetConfig+0x48>
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	4a47      	ldr	r2, [pc, #284]	@ (8007c24 <TIM_Base_SetConfig+0x150>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d007      	beq.n	8007b1c <TIM_Base_SetConfig+0x48>
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4a46      	ldr	r2, [pc, #280]	@ (8007c28 <TIM_Base_SetConfig+0x154>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d003      	beq.n	8007b1c <TIM_Base_SetConfig+0x48>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a45      	ldr	r2, [pc, #276]	@ (8007c2c <TIM_Base_SetConfig+0x158>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d108      	bne.n	8007b2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4313      	orrs	r3, r2
 8007b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a39      	ldr	r2, [pc, #228]	@ (8007c18 <TIM_Base_SetConfig+0x144>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d023      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b3c:	d01f      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	4a36      	ldr	r2, [pc, #216]	@ (8007c1c <TIM_Base_SetConfig+0x148>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d01b      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	4a35      	ldr	r2, [pc, #212]	@ (8007c20 <TIM_Base_SetConfig+0x14c>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d017      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	4a34      	ldr	r2, [pc, #208]	@ (8007c24 <TIM_Base_SetConfig+0x150>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d013      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	4a33      	ldr	r2, [pc, #204]	@ (8007c28 <TIM_Base_SetConfig+0x154>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d00f      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	4a33      	ldr	r2, [pc, #204]	@ (8007c30 <TIM_Base_SetConfig+0x15c>)
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d00b      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	4a32      	ldr	r2, [pc, #200]	@ (8007c34 <TIM_Base_SetConfig+0x160>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d007      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	4a31      	ldr	r2, [pc, #196]	@ (8007c38 <TIM_Base_SetConfig+0x164>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d003      	beq.n	8007b7e <TIM_Base_SetConfig+0xaa>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	4a2c      	ldr	r2, [pc, #176]	@ (8007c2c <TIM_Base_SetConfig+0x158>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d108      	bne.n	8007b90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68fa      	ldr	r2, [r7, #12]
 8007ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	689a      	ldr	r2, [r3, #8]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	4a18      	ldr	r2, [pc, #96]	@ (8007c18 <TIM_Base_SetConfig+0x144>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d013      	beq.n	8007be4 <TIM_Base_SetConfig+0x110>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8007c28 <TIM_Base_SetConfig+0x154>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d00f      	beq.n	8007be4 <TIM_Base_SetConfig+0x110>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8007c30 <TIM_Base_SetConfig+0x15c>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00b      	beq.n	8007be4 <TIM_Base_SetConfig+0x110>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a19      	ldr	r2, [pc, #100]	@ (8007c34 <TIM_Base_SetConfig+0x160>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d007      	beq.n	8007be4 <TIM_Base_SetConfig+0x110>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a18      	ldr	r2, [pc, #96]	@ (8007c38 <TIM_Base_SetConfig+0x164>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d003      	beq.n	8007be4 <TIM_Base_SetConfig+0x110>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a13      	ldr	r2, [pc, #76]	@ (8007c2c <TIM_Base_SetConfig+0x158>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d103      	bne.n	8007bec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d105      	bne.n	8007c0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	f023 0201 	bic.w	r2, r3, #1
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	611a      	str	r2, [r3, #16]
  }
}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	40012c00 	.word	0x40012c00
 8007c1c:	40000400 	.word	0x40000400
 8007c20:	40000800 	.word	0x40000800
 8007c24:	40000c00 	.word	0x40000c00
 8007c28:	40013400 	.word	0x40013400
 8007c2c:	40015000 	.word	0x40015000
 8007c30:	40014000 	.word	0x40014000
 8007c34:	40014400 	.word	0x40014400
 8007c38:	40014800 	.word	0x40014800

08007c3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b087      	sub	sp, #28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a1b      	ldr	r3, [r3, #32]
 8007c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f023 0201 	bic.w	r2, r3, #1
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f023 0303 	bic.w	r3, r3, #3
 8007c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68fa      	ldr	r2, [r7, #12]
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f023 0302 	bic.w	r3, r3, #2
 8007c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a30      	ldr	r2, [pc, #192]	@ (8007d58 <TIM_OC1_SetConfig+0x11c>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d013      	beq.n	8007cc4 <TIM_OC1_SetConfig+0x88>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	@ (8007d5c <TIM_OC1_SetConfig+0x120>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d00f      	beq.n	8007cc4 <TIM_OC1_SetConfig+0x88>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8007d60 <TIM_OC1_SetConfig+0x124>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d00b      	beq.n	8007cc4 <TIM_OC1_SetConfig+0x88>
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4a2d      	ldr	r2, [pc, #180]	@ (8007d64 <TIM_OC1_SetConfig+0x128>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d007      	beq.n	8007cc4 <TIM_OC1_SetConfig+0x88>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8007d68 <TIM_OC1_SetConfig+0x12c>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d003      	beq.n	8007cc4 <TIM_OC1_SetConfig+0x88>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8007d6c <TIM_OC1_SetConfig+0x130>)
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d10c      	bne.n	8007cde <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	f023 0308 	bic.w	r3, r3, #8
 8007cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f023 0304 	bic.w	r3, r3, #4
 8007cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d58 <TIM_OC1_SetConfig+0x11c>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d013      	beq.n	8007d0e <TIM_OC1_SetConfig+0xd2>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8007d5c <TIM_OC1_SetConfig+0x120>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d00f      	beq.n	8007d0e <TIM_OC1_SetConfig+0xd2>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8007d60 <TIM_OC1_SetConfig+0x124>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d00b      	beq.n	8007d0e <TIM_OC1_SetConfig+0xd2>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8007d64 <TIM_OC1_SetConfig+0x128>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d007      	beq.n	8007d0e <TIM_OC1_SetConfig+0xd2>
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4a19      	ldr	r2, [pc, #100]	@ (8007d68 <TIM_OC1_SetConfig+0x12c>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d003      	beq.n	8007d0e <TIM_OC1_SetConfig+0xd2>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a18      	ldr	r2, [pc, #96]	@ (8007d6c <TIM_OC1_SetConfig+0x130>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d111      	bne.n	8007d32 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	695b      	ldr	r3, [r3, #20]
 8007d22:	693a      	ldr	r2, [r7, #16]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	699b      	ldr	r3, [r3, #24]
 8007d2c:	693a      	ldr	r2, [r7, #16]
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	693a      	ldr	r2, [r7, #16]
 8007d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	68fa      	ldr	r2, [r7, #12]
 8007d3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	621a      	str	r2, [r3, #32]
}
 8007d4c:	bf00      	nop
 8007d4e:	371c      	adds	r7, #28
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr
 8007d58:	40012c00 	.word	0x40012c00
 8007d5c:	40013400 	.word	0x40013400
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800
 8007d6c:	40015000 	.word	0x40015000

08007d70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6a1b      	ldr	r3, [r3, #32]
 8007d84:	f023 0210 	bic.w	r2, r3, #16
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	021b      	lsls	r3, r3, #8
 8007db2:	68fa      	ldr	r2, [r7, #12]
 8007db4:	4313      	orrs	r3, r2
 8007db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	f023 0320 	bic.w	r3, r3, #32
 8007dbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	011b      	lsls	r3, r3, #4
 8007dc6:	697a      	ldr	r2, [r7, #20]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	4a2c      	ldr	r2, [pc, #176]	@ (8007e80 <TIM_OC2_SetConfig+0x110>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d007      	beq.n	8007de4 <TIM_OC2_SetConfig+0x74>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	4a2b      	ldr	r2, [pc, #172]	@ (8007e84 <TIM_OC2_SetConfig+0x114>)
 8007dd8:	4293      	cmp	r3, r2
 8007dda:	d003      	beq.n	8007de4 <TIM_OC2_SetConfig+0x74>
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	4a2a      	ldr	r2, [pc, #168]	@ (8007e88 <TIM_OC2_SetConfig+0x118>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d10d      	bne.n	8007e00 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	68db      	ldr	r3, [r3, #12]
 8007df0:	011b      	lsls	r3, r3, #4
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	4313      	orrs	r3, r2
 8007df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007dfe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1f      	ldr	r2, [pc, #124]	@ (8007e80 <TIM_OC2_SetConfig+0x110>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d013      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8007e84 <TIM_OC2_SetConfig+0x114>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d00f      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc0>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a1e      	ldr	r2, [pc, #120]	@ (8007e8c <TIM_OC2_SetConfig+0x11c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc0>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8007e90 <TIM_OC2_SetConfig+0x120>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d007      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc0>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a1c      	ldr	r2, [pc, #112]	@ (8007e94 <TIM_OC2_SetConfig+0x124>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d003      	beq.n	8007e30 <TIM_OC2_SetConfig+0xc0>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a17      	ldr	r2, [pc, #92]	@ (8007e88 <TIM_OC2_SetConfig+0x118>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d113      	bne.n	8007e58 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007e36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007e3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	009b      	lsls	r3, r3, #2
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	699b      	ldr	r3, [r3, #24]
 8007e50:	009b      	lsls	r3, r3, #2
 8007e52:	693a      	ldr	r2, [r7, #16]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	685a      	ldr	r2, [r3, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	697a      	ldr	r2, [r7, #20]
 8007e70:	621a      	str	r2, [r3, #32]
}
 8007e72:	bf00      	nop
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop
 8007e80:	40012c00 	.word	0x40012c00
 8007e84:	40013400 	.word	0x40013400
 8007e88:	40015000 	.word	0x40015000
 8007e8c:	40014000 	.word	0x40014000
 8007e90:	40014400 	.word	0x40014400
 8007e94:	40014800 	.word	0x40014800

08007e98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a1b      	ldr	r3, [r3, #32]
 8007eac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	021b      	lsls	r3, r3, #8
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8007fa4 <TIM_OC3_SetConfig+0x10c>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d007      	beq.n	8007f0a <TIM_OC3_SetConfig+0x72>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	4a2a      	ldr	r2, [pc, #168]	@ (8007fa8 <TIM_OC3_SetConfig+0x110>)
 8007efe:	4293      	cmp	r3, r2
 8007f00:	d003      	beq.n	8007f0a <TIM_OC3_SetConfig+0x72>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	4a29      	ldr	r2, [pc, #164]	@ (8007fac <TIM_OC3_SetConfig+0x114>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d10d      	bne.n	8007f26 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007f10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	021b      	lsls	r3, r3, #8
 8007f18:	697a      	ldr	r2, [r7, #20]
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f1e:	697b      	ldr	r3, [r7, #20]
 8007f20:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007f24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a1e      	ldr	r2, [pc, #120]	@ (8007fa4 <TIM_OC3_SetConfig+0x10c>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <TIM_OC3_SetConfig+0xbe>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa8 <TIM_OC3_SetConfig+0x110>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d00f      	beq.n	8007f56 <TIM_OC3_SetConfig+0xbe>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1d      	ldr	r2, [pc, #116]	@ (8007fb0 <TIM_OC3_SetConfig+0x118>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d00b      	beq.n	8007f56 <TIM_OC3_SetConfig+0xbe>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1c      	ldr	r2, [pc, #112]	@ (8007fb4 <TIM_OC3_SetConfig+0x11c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d007      	beq.n	8007f56 <TIM_OC3_SetConfig+0xbe>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1b      	ldr	r2, [pc, #108]	@ (8007fb8 <TIM_OC3_SetConfig+0x120>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d003      	beq.n	8007f56 <TIM_OC3_SetConfig+0xbe>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a16      	ldr	r2, [pc, #88]	@ (8007fac <TIM_OC3_SetConfig+0x114>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d113      	bne.n	8007f7e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007f64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	011b      	lsls	r3, r3, #4
 8007f6c:	693a      	ldr	r2, [r7, #16]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	621a      	str	r2, [r3, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40013400 	.word	0x40013400
 8007fac:	40015000 	.word	0x40015000
 8007fb0:	40014000 	.word	0x40014000
 8007fb4:	40014400 	.word	0x40014400
 8007fb8:	40014800 	.word	0x40014800

08007fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b087      	sub	sp, #28
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6a1b      	ldr	r3, [r3, #32]
 8007fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	021b      	lsls	r3, r3, #8
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	4313      	orrs	r3, r2
 8008002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800800a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	031b      	lsls	r3, r3, #12
 8008012:	697a      	ldr	r2, [r7, #20]
 8008014:	4313      	orrs	r3, r2
 8008016:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	4a2c      	ldr	r2, [pc, #176]	@ (80080cc <TIM_OC4_SetConfig+0x110>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d007      	beq.n	8008030 <TIM_OC4_SetConfig+0x74>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	4a2b      	ldr	r2, [pc, #172]	@ (80080d0 <TIM_OC4_SetConfig+0x114>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d003      	beq.n	8008030 <TIM_OC4_SetConfig+0x74>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	4a2a      	ldr	r2, [pc, #168]	@ (80080d4 <TIM_OC4_SetConfig+0x118>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d10d      	bne.n	800804c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	031b      	lsls	r3, r3, #12
 800803e:	697a      	ldr	r2, [r7, #20]
 8008040:	4313      	orrs	r3, r2
 8008042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800804a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	4a1f      	ldr	r2, [pc, #124]	@ (80080cc <TIM_OC4_SetConfig+0x110>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d013      	beq.n	800807c <TIM_OC4_SetConfig+0xc0>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	4a1e      	ldr	r2, [pc, #120]	@ (80080d0 <TIM_OC4_SetConfig+0x114>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00f      	beq.n	800807c <TIM_OC4_SetConfig+0xc0>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	4a1e      	ldr	r2, [pc, #120]	@ (80080d8 <TIM_OC4_SetConfig+0x11c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d00b      	beq.n	800807c <TIM_OC4_SetConfig+0xc0>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	4a1d      	ldr	r2, [pc, #116]	@ (80080dc <TIM_OC4_SetConfig+0x120>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d007      	beq.n	800807c <TIM_OC4_SetConfig+0xc0>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	4a1c      	ldr	r2, [pc, #112]	@ (80080e0 <TIM_OC4_SetConfig+0x124>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d003      	beq.n	800807c <TIM_OC4_SetConfig+0xc0>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a17      	ldr	r2, [pc, #92]	@ (80080d4 <TIM_OC4_SetConfig+0x118>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d113      	bne.n	80080a4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008082:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800808a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	019b      	lsls	r3, r3, #6
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	4313      	orrs	r3, r2
 8008096:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	019b      	lsls	r3, r3, #6
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	693a      	ldr	r2, [r7, #16]
 80080a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	621a      	str	r2, [r3, #32]
}
 80080be:	bf00      	nop
 80080c0:	371c      	adds	r7, #28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40012c00 	.word	0x40012c00
 80080d0:	40013400 	.word	0x40013400
 80080d4:	40015000 	.word	0x40015000
 80080d8:	40014000 	.word	0x40014000
 80080dc:	40014400 	.word	0x40014400
 80080e0:	40014800 	.word	0x40014800

080080e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6a1b      	ldr	r3, [r3, #32]
 80080f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008112:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008128:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689b      	ldr	r3, [r3, #8]
 800812e:	041b      	lsls	r3, r3, #16
 8008130:	693a      	ldr	r2, [r7, #16]
 8008132:	4313      	orrs	r3, r2
 8008134:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	4a19      	ldr	r2, [pc, #100]	@ (80081a0 <TIM_OC5_SetConfig+0xbc>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d013      	beq.n	8008166 <TIM_OC5_SetConfig+0x82>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a18      	ldr	r2, [pc, #96]	@ (80081a4 <TIM_OC5_SetConfig+0xc0>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00f      	beq.n	8008166 <TIM_OC5_SetConfig+0x82>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a17      	ldr	r2, [pc, #92]	@ (80081a8 <TIM_OC5_SetConfig+0xc4>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00b      	beq.n	8008166 <TIM_OC5_SetConfig+0x82>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a16      	ldr	r2, [pc, #88]	@ (80081ac <TIM_OC5_SetConfig+0xc8>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d007      	beq.n	8008166 <TIM_OC5_SetConfig+0x82>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a15      	ldr	r2, [pc, #84]	@ (80081b0 <TIM_OC5_SetConfig+0xcc>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC5_SetConfig+0x82>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a14      	ldr	r2, [pc, #80]	@ (80081b4 <TIM_OC5_SetConfig+0xd0>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d109      	bne.n	800817a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800816c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	621a      	str	r2, [r3, #32]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40014400 	.word	0x40014400
 80081b0:	40014800 	.word	0x40014800
 80081b4:	40015000 	.word	0x40015000

080081b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80081ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80081fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	051b      	lsls	r3, r3, #20
 8008206:	693a      	ldr	r2, [r7, #16]
 8008208:	4313      	orrs	r3, r2
 800820a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	4a1a      	ldr	r2, [pc, #104]	@ (8008278 <TIM_OC6_SetConfig+0xc0>)
 8008210:	4293      	cmp	r3, r2
 8008212:	d013      	beq.n	800823c <TIM_OC6_SetConfig+0x84>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a19      	ldr	r2, [pc, #100]	@ (800827c <TIM_OC6_SetConfig+0xc4>)
 8008218:	4293      	cmp	r3, r2
 800821a:	d00f      	beq.n	800823c <TIM_OC6_SetConfig+0x84>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	4a18      	ldr	r2, [pc, #96]	@ (8008280 <TIM_OC6_SetConfig+0xc8>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d00b      	beq.n	800823c <TIM_OC6_SetConfig+0x84>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	4a17      	ldr	r2, [pc, #92]	@ (8008284 <TIM_OC6_SetConfig+0xcc>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d007      	beq.n	800823c <TIM_OC6_SetConfig+0x84>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a16      	ldr	r2, [pc, #88]	@ (8008288 <TIM_OC6_SetConfig+0xd0>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d003      	beq.n	800823c <TIM_OC6_SetConfig+0x84>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	4a15      	ldr	r2, [pc, #84]	@ (800828c <TIM_OC6_SetConfig+0xd4>)
 8008238:	4293      	cmp	r3, r2
 800823a:	d109      	bne.n	8008250 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008242:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	695b      	ldr	r3, [r3, #20]
 8008248:	029b      	lsls	r3, r3, #10
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	4313      	orrs	r3, r2
 800824e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	697a      	ldr	r2, [r7, #20]
 8008254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	68fa      	ldr	r2, [r7, #12]
 800825a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685a      	ldr	r2, [r3, #4]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
 8008276:	bf00      	nop
 8008278:	40012c00 	.word	0x40012c00
 800827c:	40013400 	.word	0x40013400
 8008280:	40014000 	.word	0x40014000
 8008284:	40014400 	.word	0x40014400
 8008288:	40014800 	.word	0x40014800
 800828c:	40015000 	.word	0x40015000

08008290 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	f023 0201 	bic.w	r2, r3, #1
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	011b      	lsls	r3, r3, #4
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f023 030a 	bic.w	r3, r3, #10
 80082cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	621a      	str	r2, [r3, #32]
}
 80082e2:	bf00      	nop
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr

080082ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082ee:	b480      	push	{r7}
 80082f0:	b087      	sub	sp, #28
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	60f8      	str	r0, [r7, #12]
 80082f6:	60b9      	str	r1, [r7, #8]
 80082f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6a1b      	ldr	r3, [r3, #32]
 8008304:	f023 0210 	bic.w	r2, r3, #16
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	699b      	ldr	r3, [r3, #24]
 8008310:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008318:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	031b      	lsls	r3, r3, #12
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	4313      	orrs	r3, r2
 8008322:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800832a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	011b      	lsls	r3, r3, #4
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	4313      	orrs	r3, r2
 8008334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	697a      	ldr	r2, [r7, #20]
 8008340:	621a      	str	r2, [r3, #32]
}
 8008342:	bf00      	nop
 8008344:	371c      	adds	r7, #28
 8008346:	46bd      	mov	sp, r7
 8008348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834c:	4770      	bx	lr

0800834e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800834e:	b480      	push	{r7}
 8008350:	b085      	sub	sp, #20
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008364:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008368:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4313      	orrs	r3, r2
 8008370:	f043 0307 	orr.w	r3, r3, #7
 8008374:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	68fa      	ldr	r2, [r7, #12]
 800837a:	609a      	str	r2, [r3, #8]
}
 800837c:	bf00      	nop
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	021a      	lsls	r2, r3, #8
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	697a      	ldr	r2, [r7, #20]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	697a      	ldr	r2, [r7, #20]
 80083ba:	609a      	str	r2, [r3, #8]
}
 80083bc:	bf00      	nop
 80083be:	371c      	adds	r7, #28
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr

080083c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	f003 031f 	and.w	r3, r3, #31
 80083da:	2201      	movs	r2, #1
 80083dc:	fa02 f303 	lsl.w	r3, r2, r3
 80083e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	6a1a      	ldr	r2, [r3, #32]
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	401a      	ands	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6a1a      	ldr	r2, [r3, #32]
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	fa01 f303 	lsl.w	r3, r1, r3
 8008400:	431a      	orrs	r2, r3
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	621a      	str	r2, [r3, #32]
}
 8008406:	bf00      	nop
 8008408:	371c      	adds	r7, #28
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
	...

08008414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008414:	b480      	push	{r7}
 8008416:	b085      	sub	sp, #20
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008424:	2b01      	cmp	r3, #1
 8008426:	d101      	bne.n	800842c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008428:	2302      	movs	r3, #2
 800842a:	e074      	b.n	8008516 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a34      	ldr	r2, [pc, #208]	@ (8008524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d009      	beq.n	800846a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	4a33      	ldr	r2, [pc, #204]	@ (8008528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d004      	beq.n	800846a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a31      	ldr	r2, [pc, #196]	@ (800852c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d108      	bne.n	800847c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008470:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	4313      	orrs	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008482:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a21      	ldr	r2, [pc, #132]	@ (8008524 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d022      	beq.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80084ac:	d01d      	beq.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008530 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d018      	beq.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008534 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d013      	beq.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1c      	ldr	r2, [pc, #112]	@ (8008538 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d00e      	beq.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a15      	ldr	r2, [pc, #84]	@ (8008528 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d009      	beq.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a18      	ldr	r2, [pc, #96]	@ (800853c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d004      	beq.n	80084ea <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a11      	ldr	r2, [pc, #68]	@ (800852c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d10c      	bne.n	8008504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80084f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	68ba      	ldr	r2, [r7, #8]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	40012c00 	.word	0x40012c00
 8008528:	40013400 	.word	0x40013400
 800852c:	40015000 	.word	0x40015000
 8008530:	40000400 	.word	0x40000400
 8008534:	40000800 	.word	0x40000800
 8008538:	40000c00 	.word	0x40000c00
 800853c:	40014000 	.word	0x40014000

08008540 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008540:	b480      	push	{r7}
 8008542:	b083      	sub	sp, #12
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800855c:	bf00      	nop
 800855e:	370c      	adds	r7, #12
 8008560:	46bd      	mov	sp, r7
 8008562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008566:	4770      	bx	lr

08008568 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008568:	b480      	push	{r7}
 800856a:	b083      	sub	sp, #12
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008584:	bf00      	nop
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008590:	b480      	push	{r7}
 8008592:	b083      	sub	sp, #12
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008598:	bf00      	nop
 800859a:	370c      	adds	r7, #12
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80085c0:	bf00      	nop
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d101      	bne.n	80085de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085da:	2301      	movs	r3, #1
 80085dc:	e042      	b.n	8008664 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d106      	bne.n	80085f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f7fa fb7d 	bl	8002cf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2224      	movs	r2, #36	@ 0x24
 80085fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0201 	bic.w	r2, r2, #1
 800860c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f001 f806 	bl	8009628 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fd07 	bl	8009030 <UART_SetConfig>
 8008622:	4603      	mov	r3, r0
 8008624:	2b01      	cmp	r3, #1
 8008626:	d101      	bne.n	800862c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e01b      	b.n	8008664 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685a      	ldr	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800863a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800864a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f042 0201 	orr.w	r2, r2, #1
 800865a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f885 	bl	800976c <UART_CheckIdleState>
 8008662:	4603      	mov	r3, r0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3708      	adds	r7, #8
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b08a      	sub	sp, #40	@ 0x28
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	4613      	mov	r3, r2
 8008678:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008680:	2b20      	cmp	r3, #32
 8008682:	d167      	bne.n	8008754 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d002      	beq.n	8008690 <HAL_UART_Transmit_DMA+0x24>
 800868a:	88fb      	ldrh	r3, [r7, #6]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e060      	b.n	8008756 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	88fa      	ldrh	r2, [r7, #6]
 800869e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	88fa      	ldrh	r2, [r7, #6]
 80086a6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2221      	movs	r2, #33	@ 0x21
 80086b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d028      	beq.n	8008714 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086c6:	4a26      	ldr	r2, [pc, #152]	@ (8008760 <HAL_UART_Transmit_DMA+0xf4>)
 80086c8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086ce:	4a25      	ldr	r2, [pc, #148]	@ (8008764 <HAL_UART_Transmit_DMA+0xf8>)
 80086d0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086d6:	4a24      	ldr	r2, [pc, #144]	@ (8008768 <HAL_UART_Transmit_DMA+0xfc>)
 80086d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80086de:	2200      	movs	r2, #0
 80086e0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086ea:	4619      	mov	r1, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	3328      	adds	r3, #40	@ 0x28
 80086f2:	461a      	mov	r2, r3
 80086f4:	88fb      	ldrh	r3, [r7, #6]
 80086f6:	f7fa fdc3 	bl	8003280 <HAL_DMA_Start_IT>
 80086fa:	4603      	mov	r3, r0
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d009      	beq.n	8008714 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2210      	movs	r2, #16
 8008704:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2220      	movs	r2, #32
 800870c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008710:	2301      	movs	r3, #1
 8008712:	e020      	b.n	8008756 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2240      	movs	r2, #64	@ 0x40
 800871a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	3308      	adds	r3, #8
 8008722:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	e853 3f00 	ldrex	r3, [r3]
 800872a:	613b      	str	r3, [r7, #16]
   return(result);
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008732:	627b      	str	r3, [r7, #36]	@ 0x24
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3308      	adds	r3, #8
 800873a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800873c:	623a      	str	r2, [r7, #32]
 800873e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008740:	69f9      	ldr	r1, [r7, #28]
 8008742:	6a3a      	ldr	r2, [r7, #32]
 8008744:	e841 2300 	strex	r3, r2, [r1]
 8008748:	61bb      	str	r3, [r7, #24]
   return(result);
 800874a:	69bb      	ldr	r3, [r7, #24]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1e5      	bne.n	800871c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	e000      	b.n	8008756 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008754:	2302      	movs	r3, #2
  }
}
 8008756:	4618      	mov	r0, r3
 8008758:	3728      	adds	r7, #40	@ 0x28
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08009c37 	.word	0x08009c37
 8008764:	08009cd1 	.word	0x08009cd1
 8008768:	08009e57 	.word	0x08009e57

0800876c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b08a      	sub	sp, #40	@ 0x28
 8008770:	af00      	add	r7, sp, #0
 8008772:	60f8      	str	r0, [r7, #12]
 8008774:	60b9      	str	r1, [r7, #8]
 8008776:	4613      	mov	r3, r2
 8008778:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008780:	2b20      	cmp	r3, #32
 8008782:	d137      	bne.n	80087f4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d002      	beq.n	8008790 <HAL_UART_Receive_DMA+0x24>
 800878a:	88fb      	ldrh	r3, [r7, #6]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e030      	b.n	80087f6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2200      	movs	r2, #0
 8008798:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a18      	ldr	r2, [pc, #96]	@ (8008800 <HAL_UART_Receive_DMA+0x94>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d01f      	beq.n	80087e4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d018      	beq.n	80087e4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	e853 3f00 	ldrex	r3, [r3]
 80087be:	613b      	str	r3, [r7, #16]
   return(result);
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80087c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087d0:	623b      	str	r3, [r7, #32]
 80087d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d4:	69f9      	ldr	r1, [r7, #28]
 80087d6:	6a3a      	ldr	r2, [r7, #32]
 80087d8:	e841 2300 	strex	r3, r2, [r1]
 80087dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d1e6      	bne.n	80087b2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	461a      	mov	r2, r3
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	f001 f8d6 	bl	800999c <UART_Start_Receive_DMA>
 80087f0:	4603      	mov	r3, r0
 80087f2:	e000      	b.n	80087f6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80087f4:	2302      	movs	r3, #2
  }
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3728      	adds	r7, #40	@ 0x28
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop
 8008800:	40008000 	.word	0x40008000

08008804 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b090      	sub	sp, #64	@ 0x40
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008812:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800881a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	689b      	ldr	r3, [r3, #8]
 8008822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008826:	2b80      	cmp	r3, #128	@ 0x80
 8008828:	d139      	bne.n	800889e <HAL_UART_DMAStop+0x9a>
 800882a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800882c:	2b21      	cmp	r3, #33	@ 0x21
 800882e:	d136      	bne.n	800889e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6a3b      	ldr	r3, [r7, #32]
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008846:	637b      	str	r3, [r7, #52]	@ 0x34
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	3308      	adds	r3, #8
 800884e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008850:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008852:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800885e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e5      	bne.n	8008830 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d015      	beq.n	8008898 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008870:	4618      	mov	r0, r3
 8008872:	f7fa fd80 	bl	8003376 <HAL_DMA_Abort>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d00d      	beq.n	8008898 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008880:	4618      	mov	r0, r3
 8008882:	f7fa fef5 	bl	8003670 <HAL_DMA_GetError>
 8008886:	4603      	mov	r3, r0
 8008888:	2b20      	cmp	r3, #32
 800888a:	d105      	bne.n	8008898 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2210      	movs	r2, #16
 8008890:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e047      	b.n	8008928 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f001 f925 	bl	8009ae8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088a8:	2b40      	cmp	r3, #64	@ 0x40
 80088aa:	d13c      	bne.n	8008926 <HAL_UART_DMAStop+0x122>
 80088ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088ae:	2b22      	cmp	r3, #34	@ 0x22
 80088b0:	d139      	bne.n	8008926 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3308      	adds	r3, #8
 80088b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	e853 3f00 	ldrex	r3, [r3]
 80088c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3308      	adds	r3, #8
 80088d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088d2:	61ba      	str	r2, [r7, #24]
 80088d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d6:	6979      	ldr	r1, [r7, #20]
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	e841 2300 	strex	r3, r2, [r1]
 80088de:	613b      	str	r3, [r7, #16]
   return(result);
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d1e5      	bne.n	80088b2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d017      	beq.n	8008920 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7fa fd3d 	bl	8003376 <HAL_DMA_Abort>
 80088fc:	4603      	mov	r3, r0
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d00e      	beq.n	8008920 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008908:	4618      	mov	r0, r3
 800890a:	f7fa feb1 	bl	8003670 <HAL_DMA_GetError>
 800890e:	4603      	mov	r3, r0
 8008910:	2b20      	cmp	r3, #32
 8008912:	d105      	bne.n	8008920 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2210      	movs	r2, #16
 8008918:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800891c:	2303      	movs	r3, #3
 800891e:	e003      	b.n	8008928 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f001 f922 	bl	8009b6a <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3740      	adds	r7, #64	@ 0x40
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b0ba      	sub	sp, #232	@ 0xe8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	69db      	ldr	r3, [r3, #28]
 800893e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008956:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800895a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800895e:	4013      	ands	r3, r2
 8008960:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008964:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008968:	2b00      	cmp	r3, #0
 800896a:	d11b      	bne.n	80089a4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800896c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008970:	f003 0320 	and.w	r3, r3, #32
 8008974:	2b00      	cmp	r3, #0
 8008976:	d015      	beq.n	80089a4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800897c:	f003 0320 	and.w	r3, r3, #32
 8008980:	2b00      	cmp	r3, #0
 8008982:	d105      	bne.n	8008990 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d009      	beq.n	80089a4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 8300 	beq.w	8008f9a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
      }
      return;
 80089a2:	e2fa      	b.n	8008f9a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80089a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8123 	beq.w	8008bf4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80089ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80089b2:	4b8d      	ldr	r3, [pc, #564]	@ (8008be8 <HAL_UART_IRQHandler+0x2b8>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d106      	bne.n	80089c8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80089ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80089be:	4b8b      	ldr	r3, [pc, #556]	@ (8008bec <HAL_UART_IRQHandler+0x2bc>)
 80089c0:	4013      	ands	r3, r2
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	f000 8116 	beq.w	8008bf4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80089c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089cc:	f003 0301 	and.w	r3, r3, #1
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d011      	beq.n	80089f8 <HAL_UART_IRQHandler+0xc8>
 80089d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00b      	beq.n	80089f8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2201      	movs	r2, #1
 80089e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089ee:	f043 0201 	orr.w	r2, r3, #1
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80089f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d011      	beq.n	8008a28 <HAL_UART_IRQHandler+0xf8>
 8008a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a08:	f003 0301 	and.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00b      	beq.n	8008a28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	2202      	movs	r2, #2
 8008a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a1e:	f043 0204 	orr.w	r2, r3, #4
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d011      	beq.n	8008a58 <HAL_UART_IRQHandler+0x128>
 8008a34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d00b      	beq.n	8008a58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2204      	movs	r2, #4
 8008a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a4e:	f043 0202 	orr.w	r2, r3, #2
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008a58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a5c:	f003 0308 	and.w	r3, r3, #8
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d017      	beq.n	8008a94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008a68:	f003 0320 	and.w	r3, r3, #32
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d105      	bne.n	8008a7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008a70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008a74:	4b5c      	ldr	r3, [pc, #368]	@ (8008be8 <HAL_UART_IRQHandler+0x2b8>)
 8008a76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00b      	beq.n	8008a94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2208      	movs	r2, #8
 8008a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a8a:	f043 0208 	orr.w	r2, r3, #8
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d012      	beq.n	8008ac6 <HAL_UART_IRQHandler+0x196>
 8008aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008aa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d00c      	beq.n	8008ac6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ab4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008abc:	f043 0220 	orr.w	r2, r3, #32
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	f000 8266 	beq.w	8008f9e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ad6:	f003 0320 	and.w	r3, r3, #32
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d013      	beq.n	8008b06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae2:	f003 0320 	and.w	r3, r3, #32
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d105      	bne.n	8008af6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008aea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d007      	beq.n	8008b06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d003      	beq.n	8008b06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1a:	2b40      	cmp	r3, #64	@ 0x40
 8008b1c:	d005      	beq.n	8008b2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008b1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008b22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d054      	beq.n	8008bd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 f81d 	bl	8009b6a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b3a:	2b40      	cmp	r3, #64	@ 0x40
 8008b3c:	d146      	bne.n	8008bcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	3308      	adds	r3, #8
 8008b44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008b4c:	e853 3f00 	ldrex	r3, [r3]
 8008b50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008b54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008b5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3308      	adds	r3, #8
 8008b66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008b6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008b6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008b76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008b7a:	e841 2300 	strex	r3, r2, [r1]
 8008b7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008b82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1d9      	bne.n	8008b3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d017      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b9a:	4a15      	ldr	r2, [pc, #84]	@ (8008bf0 <HAL_UART_IRQHandler+0x2c0>)
 8008b9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7fa fc3f 	bl	8003428 <HAL_DMA_Abort_IT>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d019      	beq.n	8008be4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008bb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bc2:	e00f      	b.n	8008be4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fa1d 	bl	8009004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bca:	e00b      	b.n	8008be4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fa19 	bl	8009004 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bd2:	e007      	b.n	8008be4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fa15 	bl	8009004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008be2:	e1dc      	b.n	8008f9e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be4:	bf00      	nop
    return;
 8008be6:	e1da      	b.n	8008f9e <HAL_UART_IRQHandler+0x66e>
 8008be8:	10000001 	.word	0x10000001
 8008bec:	04000120 	.word	0x04000120
 8008bf0:	08009ed7 	.word	0x08009ed7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bf8:	2b01      	cmp	r3, #1
 8008bfa:	f040 8170 	bne.w	8008ede <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c02:	f003 0310 	and.w	r3, r3, #16
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 8169 	beq.w	8008ede <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c10:	f003 0310 	and.w	r3, r3, #16
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f000 8162 	beq.w	8008ede <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2210      	movs	r2, #16
 8008c20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2c:	2b40      	cmp	r3, #64	@ 0x40
 8008c2e:	f040 80d8 	bne.w	8008de2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008c40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 80af 	beq.w	8008da8 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008c50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c54:	429a      	cmp	r2, r3
 8008c56:	f080 80a7 	bcs.w	8008da8 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008c60:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0320 	and.w	r3, r3, #32
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f040 8087 	bne.w	8008d86 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c84:	e853 3f00 	ldrex	r3, [r3]
 8008c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008ca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008ca6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008caa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008cb2:	e841 2300 	strex	r3, r2, [r1]
 8008cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d1da      	bne.n	8008c78 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ccc:	e853 3f00 	ldrex	r3, [r3]
 8008cd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008cd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008cd4:	f023 0301 	bic.w	r3, r3, #1
 8008cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	3308      	adds	r3, #8
 8008ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008ce6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008cf2:	e841 2300 	strex	r3, r2, [r1]
 8008cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d1e1      	bne.n	8008cc2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3308      	adds	r3, #8
 8008d04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d08:	e853 3f00 	ldrex	r3, [r3]
 8008d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008d22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008d24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008d28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008d2a:	e841 2300 	strex	r3, r2, [r1]
 8008d2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d1e3      	bne.n	8008cfe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d54:	f023 0310 	bic.w	r3, r3, #16
 8008d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	461a      	mov	r2, r3
 8008d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008d66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d6e:	e841 2300 	strex	r3, r2, [r1]
 8008d72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1e4      	bne.n	8008d44 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7fa faf8 	bl	8003376 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2202      	movs	r2, #2
 8008d8a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	b29b      	uxth	r3, r3
 8008d9e:	4619      	mov	r1, r3
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 f939 	bl	8009018 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8008da6:	e0fc      	b.n	8008fa2 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008db2:	429a      	cmp	r2, r3
 8008db4:	f040 80f5 	bne.w	8008fa2 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f003 0320 	and.w	r3, r3, #32
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	f040 80eb 	bne.w	8008fa2 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f91c 	bl	8009018 <HAL_UARTEx_RxEventCallback>
      return;
 8008de0:	e0df      	b.n	8008fa2 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 80d1 	beq.w	8008fa6 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8008e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80cc 	beq.w	8008fa6 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e16:	e853 3f00 	ldrex	r3, [r3]
 8008e1a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8008e32:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e34:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e38:	e841 2300 	strex	r3, r2, [r1]
 8008e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008e3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d1e4      	bne.n	8008e0e <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	3308      	adds	r3, #8
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4e:	e853 3f00 	ldrex	r3, [r3]
 8008e52:	623b      	str	r3, [r7, #32]
   return(result);
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008e5a:	f023 0301 	bic.w	r3, r3, #1
 8008e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	3308      	adds	r3, #8
 8008e68:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008e6c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e70:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e74:	e841 2300 	strex	r3, r2, [r1]
 8008e78:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d1e1      	bne.n	8008e44 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2220      	movs	r2, #32
 8008e84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f023 0310 	bic.w	r3, r3, #16
 8008ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008eb6:	61fb      	str	r3, [r7, #28]
 8008eb8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eba:	69b9      	ldr	r1, [r7, #24]
 8008ebc:	69fa      	ldr	r2, [r7, #28]
 8008ebe:	e841 2300 	strex	r3, r2, [r1]
 8008ec2:	617b      	str	r3, [r7, #20]
   return(result);
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d1e4      	bne.n	8008e94 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f89e 	bl	8009018 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008edc:	e063      	b.n	8008fa6 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ee2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d00e      	beq.n	8008f08 <HAL_UART_IRQHandler+0x5d8>
 8008eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d008      	beq.n	8008f08 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008efe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 f825 	bl	8009f50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f06:	e051      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d014      	beq.n	8008f3e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d105      	bne.n	8008f2c <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d03a      	beq.n	8008faa <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	4798      	blx	r3
    }
    return;
 8008f3c:	e035      	b.n	8008faa <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d009      	beq.n	8008f5e <HAL_UART_IRQHandler+0x62e>
 8008f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 ffcf 	bl	8009efa <UART_EndTransmit_IT>
    return;
 8008f5c:	e026      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d009      	beq.n	8008f7e <HAL_UART_IRQHandler+0x64e>
 8008f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f6e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 fffe 	bl	8009f78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f7c:	e016      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f82:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d010      	beq.n	8008fac <HAL_UART_IRQHandler+0x67c>
 8008f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	da0c      	bge.n	8008fac <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 ffe6 	bl	8009f64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008f98:	e008      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
      return;
 8008f9a:	bf00      	nop
 8008f9c:	e006      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
    return;
 8008f9e:	bf00      	nop
 8008fa0:	e004      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
      return;
 8008fa2:	bf00      	nop
 8008fa4:	e002      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
      return;
 8008fa6:	bf00      	nop
 8008fa8:	e000      	b.n	8008fac <HAL_UART_IRQHandler+0x67c>
    return;
 8008faa:	bf00      	nop
  }
}
 8008fac:	37e8      	adds	r7, #232	@ 0xe8
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop

08008fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008fd0:	bf00      	nop
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fee:	4770      	bx	lr

08008ff0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b083      	sub	sp, #12
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008ff8:	bf00      	nop
 8008ffa:	370c      	adds	r7, #12
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr

08009004 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
 8009020:	460b      	mov	r3, r1
 8009022:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009034:	b08c      	sub	sp, #48	@ 0x30
 8009036:	af00      	add	r7, sp, #0
 8009038:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	689a      	ldr	r2, [r3, #8]
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	431a      	orrs	r2, r3
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	431a      	orrs	r2, r3
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	69db      	ldr	r3, [r3, #28]
 8009054:	4313      	orrs	r3, r2
 8009056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4baa      	ldr	r3, [pc, #680]	@ (8009308 <UART_SetConfig+0x2d8>)
 8009060:	4013      	ands	r3, r2
 8009062:	697a      	ldr	r2, [r7, #20]
 8009064:	6812      	ldr	r2, [r2, #0]
 8009066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009068:	430b      	orrs	r3, r1
 800906a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	685b      	ldr	r3, [r3, #4]
 8009072:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	68da      	ldr	r2, [r3, #12]
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	430a      	orrs	r2, r1
 8009080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a9f      	ldr	r2, [pc, #636]	@ (800930c <UART_SetConfig+0x2dc>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d004      	beq.n	800909c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009098:	4313      	orrs	r3, r2
 800909a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80090a6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	6812      	ldr	r2, [r2, #0]
 80090ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090b0:	430b      	orrs	r3, r1
 80090b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ba:	f023 010f 	bic.w	r1, r3, #15
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a90      	ldr	r2, [pc, #576]	@ (8009310 <UART_SetConfig+0x2e0>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d125      	bne.n	8009120 <UART_SetConfig+0xf0>
 80090d4:	4b8f      	ldr	r3, [pc, #572]	@ (8009314 <UART_SetConfig+0x2e4>)
 80090d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090da:	f003 0303 	and.w	r3, r3, #3
 80090de:	2b03      	cmp	r3, #3
 80090e0:	d81a      	bhi.n	8009118 <UART_SetConfig+0xe8>
 80090e2:	a201      	add	r2, pc, #4	@ (adr r2, 80090e8 <UART_SetConfig+0xb8>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	080090f9 	.word	0x080090f9
 80090ec:	08009109 	.word	0x08009109
 80090f0:	08009101 	.word	0x08009101
 80090f4:	08009111 	.word	0x08009111
 80090f8:	2301      	movs	r3, #1
 80090fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090fe:	e116      	b.n	800932e <UART_SetConfig+0x2fe>
 8009100:	2302      	movs	r3, #2
 8009102:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009106:	e112      	b.n	800932e <UART_SetConfig+0x2fe>
 8009108:	2304      	movs	r3, #4
 800910a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800910e:	e10e      	b.n	800932e <UART_SetConfig+0x2fe>
 8009110:	2308      	movs	r3, #8
 8009112:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009116:	e10a      	b.n	800932e <UART_SetConfig+0x2fe>
 8009118:	2310      	movs	r3, #16
 800911a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800911e:	e106      	b.n	800932e <UART_SetConfig+0x2fe>
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a7c      	ldr	r2, [pc, #496]	@ (8009318 <UART_SetConfig+0x2e8>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d138      	bne.n	800919c <UART_SetConfig+0x16c>
 800912a:	4b7a      	ldr	r3, [pc, #488]	@ (8009314 <UART_SetConfig+0x2e4>)
 800912c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009130:	f003 030c 	and.w	r3, r3, #12
 8009134:	2b0c      	cmp	r3, #12
 8009136:	d82d      	bhi.n	8009194 <UART_SetConfig+0x164>
 8009138:	a201      	add	r2, pc, #4	@ (adr r2, 8009140 <UART_SetConfig+0x110>)
 800913a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913e:	bf00      	nop
 8009140:	08009175 	.word	0x08009175
 8009144:	08009195 	.word	0x08009195
 8009148:	08009195 	.word	0x08009195
 800914c:	08009195 	.word	0x08009195
 8009150:	08009185 	.word	0x08009185
 8009154:	08009195 	.word	0x08009195
 8009158:	08009195 	.word	0x08009195
 800915c:	08009195 	.word	0x08009195
 8009160:	0800917d 	.word	0x0800917d
 8009164:	08009195 	.word	0x08009195
 8009168:	08009195 	.word	0x08009195
 800916c:	08009195 	.word	0x08009195
 8009170:	0800918d 	.word	0x0800918d
 8009174:	2300      	movs	r3, #0
 8009176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800917a:	e0d8      	b.n	800932e <UART_SetConfig+0x2fe>
 800917c:	2302      	movs	r3, #2
 800917e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009182:	e0d4      	b.n	800932e <UART_SetConfig+0x2fe>
 8009184:	2304      	movs	r3, #4
 8009186:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800918a:	e0d0      	b.n	800932e <UART_SetConfig+0x2fe>
 800918c:	2308      	movs	r3, #8
 800918e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009192:	e0cc      	b.n	800932e <UART_SetConfig+0x2fe>
 8009194:	2310      	movs	r3, #16
 8009196:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800919a:	e0c8      	b.n	800932e <UART_SetConfig+0x2fe>
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a5e      	ldr	r2, [pc, #376]	@ (800931c <UART_SetConfig+0x2ec>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d125      	bne.n	80091f2 <UART_SetConfig+0x1c2>
 80091a6:	4b5b      	ldr	r3, [pc, #364]	@ (8009314 <UART_SetConfig+0x2e4>)
 80091a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80091b0:	2b30      	cmp	r3, #48	@ 0x30
 80091b2:	d016      	beq.n	80091e2 <UART_SetConfig+0x1b2>
 80091b4:	2b30      	cmp	r3, #48	@ 0x30
 80091b6:	d818      	bhi.n	80091ea <UART_SetConfig+0x1ba>
 80091b8:	2b20      	cmp	r3, #32
 80091ba:	d00a      	beq.n	80091d2 <UART_SetConfig+0x1a2>
 80091bc:	2b20      	cmp	r3, #32
 80091be:	d814      	bhi.n	80091ea <UART_SetConfig+0x1ba>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d002      	beq.n	80091ca <UART_SetConfig+0x19a>
 80091c4:	2b10      	cmp	r3, #16
 80091c6:	d008      	beq.n	80091da <UART_SetConfig+0x1aa>
 80091c8:	e00f      	b.n	80091ea <UART_SetConfig+0x1ba>
 80091ca:	2300      	movs	r3, #0
 80091cc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091d0:	e0ad      	b.n	800932e <UART_SetConfig+0x2fe>
 80091d2:	2302      	movs	r3, #2
 80091d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091d8:	e0a9      	b.n	800932e <UART_SetConfig+0x2fe>
 80091da:	2304      	movs	r3, #4
 80091dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091e0:	e0a5      	b.n	800932e <UART_SetConfig+0x2fe>
 80091e2:	2308      	movs	r3, #8
 80091e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091e8:	e0a1      	b.n	800932e <UART_SetConfig+0x2fe>
 80091ea:	2310      	movs	r3, #16
 80091ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091f0:	e09d      	b.n	800932e <UART_SetConfig+0x2fe>
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a4a      	ldr	r2, [pc, #296]	@ (8009320 <UART_SetConfig+0x2f0>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d125      	bne.n	8009248 <UART_SetConfig+0x218>
 80091fc:	4b45      	ldr	r3, [pc, #276]	@ (8009314 <UART_SetConfig+0x2e4>)
 80091fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009202:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009206:	2bc0      	cmp	r3, #192	@ 0xc0
 8009208:	d016      	beq.n	8009238 <UART_SetConfig+0x208>
 800920a:	2bc0      	cmp	r3, #192	@ 0xc0
 800920c:	d818      	bhi.n	8009240 <UART_SetConfig+0x210>
 800920e:	2b80      	cmp	r3, #128	@ 0x80
 8009210:	d00a      	beq.n	8009228 <UART_SetConfig+0x1f8>
 8009212:	2b80      	cmp	r3, #128	@ 0x80
 8009214:	d814      	bhi.n	8009240 <UART_SetConfig+0x210>
 8009216:	2b00      	cmp	r3, #0
 8009218:	d002      	beq.n	8009220 <UART_SetConfig+0x1f0>
 800921a:	2b40      	cmp	r3, #64	@ 0x40
 800921c:	d008      	beq.n	8009230 <UART_SetConfig+0x200>
 800921e:	e00f      	b.n	8009240 <UART_SetConfig+0x210>
 8009220:	2300      	movs	r3, #0
 8009222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009226:	e082      	b.n	800932e <UART_SetConfig+0x2fe>
 8009228:	2302      	movs	r3, #2
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800922e:	e07e      	b.n	800932e <UART_SetConfig+0x2fe>
 8009230:	2304      	movs	r3, #4
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009236:	e07a      	b.n	800932e <UART_SetConfig+0x2fe>
 8009238:	2308      	movs	r3, #8
 800923a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800923e:	e076      	b.n	800932e <UART_SetConfig+0x2fe>
 8009240:	2310      	movs	r3, #16
 8009242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009246:	e072      	b.n	800932e <UART_SetConfig+0x2fe>
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a35      	ldr	r2, [pc, #212]	@ (8009324 <UART_SetConfig+0x2f4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d12a      	bne.n	80092a8 <UART_SetConfig+0x278>
 8009252:	4b30      	ldr	r3, [pc, #192]	@ (8009314 <UART_SetConfig+0x2e4>)
 8009254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009258:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800925c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009260:	d01a      	beq.n	8009298 <UART_SetConfig+0x268>
 8009262:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009266:	d81b      	bhi.n	80092a0 <UART_SetConfig+0x270>
 8009268:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800926c:	d00c      	beq.n	8009288 <UART_SetConfig+0x258>
 800926e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009272:	d815      	bhi.n	80092a0 <UART_SetConfig+0x270>
 8009274:	2b00      	cmp	r3, #0
 8009276:	d003      	beq.n	8009280 <UART_SetConfig+0x250>
 8009278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800927c:	d008      	beq.n	8009290 <UART_SetConfig+0x260>
 800927e:	e00f      	b.n	80092a0 <UART_SetConfig+0x270>
 8009280:	2300      	movs	r3, #0
 8009282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009286:	e052      	b.n	800932e <UART_SetConfig+0x2fe>
 8009288:	2302      	movs	r3, #2
 800928a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800928e:	e04e      	b.n	800932e <UART_SetConfig+0x2fe>
 8009290:	2304      	movs	r3, #4
 8009292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009296:	e04a      	b.n	800932e <UART_SetConfig+0x2fe>
 8009298:	2308      	movs	r3, #8
 800929a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800929e:	e046      	b.n	800932e <UART_SetConfig+0x2fe>
 80092a0:	2310      	movs	r3, #16
 80092a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092a6:	e042      	b.n	800932e <UART_SetConfig+0x2fe>
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a17      	ldr	r2, [pc, #92]	@ (800930c <UART_SetConfig+0x2dc>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d13a      	bne.n	8009328 <UART_SetConfig+0x2f8>
 80092b2:	4b18      	ldr	r3, [pc, #96]	@ (8009314 <UART_SetConfig+0x2e4>)
 80092b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80092bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092c0:	d01a      	beq.n	80092f8 <UART_SetConfig+0x2c8>
 80092c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092c6:	d81b      	bhi.n	8009300 <UART_SetConfig+0x2d0>
 80092c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092cc:	d00c      	beq.n	80092e8 <UART_SetConfig+0x2b8>
 80092ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80092d2:	d815      	bhi.n	8009300 <UART_SetConfig+0x2d0>
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d003      	beq.n	80092e0 <UART_SetConfig+0x2b0>
 80092d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80092dc:	d008      	beq.n	80092f0 <UART_SetConfig+0x2c0>
 80092de:	e00f      	b.n	8009300 <UART_SetConfig+0x2d0>
 80092e0:	2300      	movs	r3, #0
 80092e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092e6:	e022      	b.n	800932e <UART_SetConfig+0x2fe>
 80092e8:	2302      	movs	r3, #2
 80092ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092ee:	e01e      	b.n	800932e <UART_SetConfig+0x2fe>
 80092f0:	2304      	movs	r3, #4
 80092f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092f6:	e01a      	b.n	800932e <UART_SetConfig+0x2fe>
 80092f8:	2308      	movs	r3, #8
 80092fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80092fe:	e016      	b.n	800932e <UART_SetConfig+0x2fe>
 8009300:	2310      	movs	r3, #16
 8009302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009306:	e012      	b.n	800932e <UART_SetConfig+0x2fe>
 8009308:	cfff69f3 	.word	0xcfff69f3
 800930c:	40008000 	.word	0x40008000
 8009310:	40013800 	.word	0x40013800
 8009314:	40021000 	.word	0x40021000
 8009318:	40004400 	.word	0x40004400
 800931c:	40004800 	.word	0x40004800
 8009320:	40004c00 	.word	0x40004c00
 8009324:	40005000 	.word	0x40005000
 8009328:	2310      	movs	r3, #16
 800932a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4aae      	ldr	r2, [pc, #696]	@ (80095ec <UART_SetConfig+0x5bc>)
 8009334:	4293      	cmp	r3, r2
 8009336:	f040 8097 	bne.w	8009468 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800933a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800933e:	2b08      	cmp	r3, #8
 8009340:	d823      	bhi.n	800938a <UART_SetConfig+0x35a>
 8009342:	a201      	add	r2, pc, #4	@ (adr r2, 8009348 <UART_SetConfig+0x318>)
 8009344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009348:	0800936d 	.word	0x0800936d
 800934c:	0800938b 	.word	0x0800938b
 8009350:	08009375 	.word	0x08009375
 8009354:	0800938b 	.word	0x0800938b
 8009358:	0800937b 	.word	0x0800937b
 800935c:	0800938b 	.word	0x0800938b
 8009360:	0800938b 	.word	0x0800938b
 8009364:	0800938b 	.word	0x0800938b
 8009368:	08009383 	.word	0x08009383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800936c:	f7fd fa74 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 8009370:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009372:	e010      	b.n	8009396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009374:	4b9e      	ldr	r3, [pc, #632]	@ (80095f0 <UART_SetConfig+0x5c0>)
 8009376:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009378:	e00d      	b.n	8009396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800937a:	f7fd f9ff 	bl	800677c <HAL_RCC_GetSysClockFreq>
 800937e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009380:	e009      	b.n	8009396 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009386:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009388:	e005      	b.n	8009396 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009394:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 8130 	beq.w	80095fe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093a2:	4a94      	ldr	r2, [pc, #592]	@ (80095f4 <UART_SetConfig+0x5c4>)
 80093a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093a8:	461a      	mov	r2, r3
 80093aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80093b0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	685a      	ldr	r2, [r3, #4]
 80093b6:	4613      	mov	r3, r2
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	4413      	add	r3, r2
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d305      	bcc.n	80093ce <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80093c2:	697b      	ldr	r3, [r7, #20]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80093c8:	69ba      	ldr	r2, [r7, #24]
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d903      	bls.n	80093d6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80093d4:	e113      	b.n	80095fe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	2200      	movs	r2, #0
 80093da:	60bb      	str	r3, [r7, #8]
 80093dc:	60fa      	str	r2, [r7, #12]
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	4a84      	ldr	r2, [pc, #528]	@ (80095f4 <UART_SetConfig+0x5c4>)
 80093e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	2200      	movs	r2, #0
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	607a      	str	r2, [r7, #4]
 80093f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80093f8:	f7f7 fbb8 	bl	8000b6c <__aeabi_uldivmod>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4610      	mov	r0, r2
 8009402:	4619      	mov	r1, r3
 8009404:	f04f 0200 	mov.w	r2, #0
 8009408:	f04f 0300 	mov.w	r3, #0
 800940c:	020b      	lsls	r3, r1, #8
 800940e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009412:	0202      	lsls	r2, r0, #8
 8009414:	6979      	ldr	r1, [r7, #20]
 8009416:	6849      	ldr	r1, [r1, #4]
 8009418:	0849      	lsrs	r1, r1, #1
 800941a:	2000      	movs	r0, #0
 800941c:	460c      	mov	r4, r1
 800941e:	4605      	mov	r5, r0
 8009420:	eb12 0804 	adds.w	r8, r2, r4
 8009424:	eb43 0905 	adc.w	r9, r3, r5
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	469a      	mov	sl, r3
 8009430:	4693      	mov	fp, r2
 8009432:	4652      	mov	r2, sl
 8009434:	465b      	mov	r3, fp
 8009436:	4640      	mov	r0, r8
 8009438:	4649      	mov	r1, r9
 800943a:	f7f7 fb97 	bl	8000b6c <__aeabi_uldivmod>
 800943e:	4602      	mov	r2, r0
 8009440:	460b      	mov	r3, r1
 8009442:	4613      	mov	r3, r2
 8009444:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009446:	6a3b      	ldr	r3, [r7, #32]
 8009448:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800944c:	d308      	bcc.n	8009460 <UART_SetConfig+0x430>
 800944e:	6a3b      	ldr	r3, [r7, #32]
 8009450:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009454:	d204      	bcs.n	8009460 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	6a3a      	ldr	r2, [r7, #32]
 800945c:	60da      	str	r2, [r3, #12]
 800945e:	e0ce      	b.n	80095fe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009460:	2301      	movs	r3, #1
 8009462:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009466:	e0ca      	b.n	80095fe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	69db      	ldr	r3, [r3, #28]
 800946c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009470:	d166      	bne.n	8009540 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009472:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009476:	2b08      	cmp	r3, #8
 8009478:	d827      	bhi.n	80094ca <UART_SetConfig+0x49a>
 800947a:	a201      	add	r2, pc, #4	@ (adr r2, 8009480 <UART_SetConfig+0x450>)
 800947c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094ad 	.word	0x080094ad
 8009488:	080094b5 	.word	0x080094b5
 800948c:	080094cb 	.word	0x080094cb
 8009490:	080094bb 	.word	0x080094bb
 8009494:	080094cb 	.word	0x080094cb
 8009498:	080094cb 	.word	0x080094cb
 800949c:	080094cb 	.word	0x080094cb
 80094a0:	080094c3 	.word	0x080094c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a4:	f7fd f9d8 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 80094a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094aa:	e014      	b.n	80094d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094ac:	f7fd f9ea 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 80094b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094b2:	e010      	b.n	80094d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094b4:	4b4e      	ldr	r3, [pc, #312]	@ (80095f0 <UART_SetConfig+0x5c0>)
 80094b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094b8:	e00d      	b.n	80094d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ba:	f7fd f95f 	bl	800677c <HAL_RCC_GetSysClockFreq>
 80094be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094c0:	e009      	b.n	80094d6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094c8:	e005      	b.n	80094d6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80094d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	2b00      	cmp	r3, #0
 80094da:	f000 8090 	beq.w	80095fe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094de:	697b      	ldr	r3, [r7, #20]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e2:	4a44      	ldr	r2, [pc, #272]	@ (80095f4 <UART_SetConfig+0x5c4>)
 80094e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094e8:	461a      	mov	r2, r3
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80094f0:	005a      	lsls	r2, r3, #1
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	085b      	lsrs	r3, r3, #1
 80094f8:	441a      	add	r2, r3
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8009502:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	2b0f      	cmp	r3, #15
 8009508:	d916      	bls.n	8009538 <UART_SetConfig+0x508>
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009510:	d212      	bcs.n	8009538 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009512:	6a3b      	ldr	r3, [r7, #32]
 8009514:	b29b      	uxth	r3, r3
 8009516:	f023 030f 	bic.w	r3, r3, #15
 800951a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	085b      	lsrs	r3, r3, #1
 8009520:	b29b      	uxth	r3, r3
 8009522:	f003 0307 	and.w	r3, r3, #7
 8009526:	b29a      	uxth	r2, r3
 8009528:	8bfb      	ldrh	r3, [r7, #30]
 800952a:	4313      	orrs	r3, r2
 800952c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	8bfa      	ldrh	r2, [r7, #30]
 8009534:	60da      	str	r2, [r3, #12]
 8009536:	e062      	b.n	80095fe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800953e:	e05e      	b.n	80095fe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009540:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009544:	2b08      	cmp	r3, #8
 8009546:	d828      	bhi.n	800959a <UART_SetConfig+0x56a>
 8009548:	a201      	add	r2, pc, #4	@ (adr r2, 8009550 <UART_SetConfig+0x520>)
 800954a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800954e:	bf00      	nop
 8009550:	08009575 	.word	0x08009575
 8009554:	0800957d 	.word	0x0800957d
 8009558:	08009585 	.word	0x08009585
 800955c:	0800959b 	.word	0x0800959b
 8009560:	0800958b 	.word	0x0800958b
 8009564:	0800959b 	.word	0x0800959b
 8009568:	0800959b 	.word	0x0800959b
 800956c:	0800959b 	.word	0x0800959b
 8009570:	08009593 	.word	0x08009593
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009574:	f7fd f970 	bl	8006858 <HAL_RCC_GetPCLK1Freq>
 8009578:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800957a:	e014      	b.n	80095a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800957c:	f7fd f982 	bl	8006884 <HAL_RCC_GetPCLK2Freq>
 8009580:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009582:	e010      	b.n	80095a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009584:	4b1a      	ldr	r3, [pc, #104]	@ (80095f0 <UART_SetConfig+0x5c0>)
 8009586:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009588:	e00d      	b.n	80095a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800958a:	f7fd f8f7 	bl	800677c <HAL_RCC_GetSysClockFreq>
 800958e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009590:	e009      	b.n	80095a6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009592:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009596:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009598:	e005      	b.n	80095a6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095a4:	bf00      	nop
    }

    if (pclk != 0U)
 80095a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d028      	beq.n	80095fe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	4a10      	ldr	r2, [pc, #64]	@ (80095f4 <UART_SetConfig+0x5c4>)
 80095b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ba:	fbb3 f2f2 	udiv	r2, r3, r2
 80095be:	697b      	ldr	r3, [r7, #20]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	085b      	lsrs	r3, r3, #1
 80095c4:	441a      	add	r2, r3
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80095ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80095d0:	6a3b      	ldr	r3, [r7, #32]
 80095d2:	2b0f      	cmp	r3, #15
 80095d4:	d910      	bls.n	80095f8 <UART_SetConfig+0x5c8>
 80095d6:	6a3b      	ldr	r3, [r7, #32]
 80095d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80095dc:	d20c      	bcs.n	80095f8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60da      	str	r2, [r3, #12]
 80095e8:	e009      	b.n	80095fe <UART_SetConfig+0x5ce>
 80095ea:	bf00      	nop
 80095ec:	40008000 	.word	0x40008000
 80095f0:	00f42400 	.word	0x00f42400
 80095f4:	0801b47c 	.word	0x0801b47c
      }
      else
      {
        ret = HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2201      	movs	r2, #1
 8009602:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	2201      	movs	r2, #1
 800960a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	2200      	movs	r2, #0
 8009612:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	2200      	movs	r2, #0
 8009618:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800961a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800961e:	4618      	mov	r0, r3
 8009620:	3730      	adds	r7, #48	@ 0x30
 8009622:	46bd      	mov	sp, r7
 8009624:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009628 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b083      	sub	sp, #12
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009634:	f003 0308 	and.w	r3, r3, #8
 8009638:	2b00      	cmp	r3, #0
 800963a:	d00a      	beq.n	8009652 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00a      	beq.n	8009674 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d00a      	beq.n	8009696 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800969a:	f003 0304 	and.w	r3, r3, #4
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d00a      	beq.n	80096b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	685b      	ldr	r3, [r3, #4]
 80096a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	430a      	orrs	r2, r1
 80096b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096bc:	f003 0310 	and.w	r3, r3, #16
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d00a      	beq.n	80096da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	689b      	ldr	r3, [r3, #8]
 80096ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	430a      	orrs	r2, r1
 80096d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096de:	f003 0320 	and.w	r3, r3, #32
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00a      	beq.n	80096fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009704:	2b00      	cmp	r3, #0
 8009706:	d01a      	beq.n	800973e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009726:	d10a      	bne.n	800973e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009746:	2b00      	cmp	r3, #0
 8009748:	d00a      	beq.n	8009760 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b098      	sub	sp, #96	@ 0x60
 8009770:	af02      	add	r7, sp, #8
 8009772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800977c:	f7f9 fbca 	bl	8002f14 <HAL_GetTick>
 8009780:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f003 0308 	and.w	r3, r3, #8
 800978c:	2b08      	cmp	r3, #8
 800978e:	d12f      	bne.n	80097f0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009790:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009798:	2200      	movs	r2, #0
 800979a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f88e 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d022      	beq.n	80097f0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b2:	e853 3f00 	ldrex	r3, [r3]
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80097be:	653b      	str	r3, [r7, #80]	@ 0x50
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	461a      	mov	r2, r3
 80097c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097ca:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097cc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80097ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097d0:	e841 2300 	strex	r3, r2, [r1]
 80097d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80097d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1e6      	bne.n	80097aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2220      	movs	r2, #32
 80097e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2200      	movs	r2, #0
 80097e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e063      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d149      	bne.n	8009892 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097fe:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009806:	2200      	movs	r2, #0
 8009808:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 f857 	bl	80098c0 <UART_WaitOnFlagUntilTimeout>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d03c      	beq.n	8009892 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009820:	e853 3f00 	ldrex	r3, [r3]
 8009824:	623b      	str	r3, [r7, #32]
   return(result);
 8009826:	6a3b      	ldr	r3, [r7, #32]
 8009828:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800982c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	461a      	mov	r2, r3
 8009834:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009836:	633b      	str	r3, [r7, #48]	@ 0x30
 8009838:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800983a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800983c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009846:	2b00      	cmp	r3, #0
 8009848:	d1e6      	bne.n	8009818 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	e853 3f00 	ldrex	r3, [r3]
 8009858:	60fb      	str	r3, [r7, #12]
   return(result);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f023 0301 	bic.w	r3, r3, #1
 8009860:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	3308      	adds	r3, #8
 8009868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800986a:	61fa      	str	r2, [r7, #28]
 800986c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800986e:	69b9      	ldr	r1, [r7, #24]
 8009870:	69fa      	ldr	r2, [r7, #28]
 8009872:	e841 2300 	strex	r3, r2, [r1]
 8009876:	617b      	str	r3, [r7, #20]
   return(result);
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d1e5      	bne.n	800984a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2220      	movs	r2, #32
 8009882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2200      	movs	r2, #0
 800988a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800988e:	2303      	movs	r3, #3
 8009890:	e012      	b.n	80098b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2220      	movs	r2, #32
 800989e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098b6:	2300      	movs	r3, #0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3758      	adds	r7, #88	@ 0x58
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}

080098c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b084      	sub	sp, #16
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	603b      	str	r3, [r7, #0]
 80098cc:	4613      	mov	r3, r2
 80098ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098d0:	e04f      	b.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80098d8:	d04b      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098da:	f7f9 fb1b 	bl	8002f14 <HAL_GetTick>
 80098de:	4602      	mov	r2, r0
 80098e0:	683b      	ldr	r3, [r7, #0]
 80098e2:	1ad3      	subs	r3, r2, r3
 80098e4:	69ba      	ldr	r2, [r7, #24]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d302      	bcc.n	80098f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80098f0:	2303      	movs	r3, #3
 80098f2:	e04e      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d037      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	2b80      	cmp	r3, #128	@ 0x80
 8009906:	d034      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b40      	cmp	r3, #64	@ 0x40
 800990c:	d031      	beq.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69db      	ldr	r3, [r3, #28]
 8009914:	f003 0308 	and.w	r3, r3, #8
 8009918:	2b08      	cmp	r3, #8
 800991a:	d110      	bne.n	800993e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2208      	movs	r2, #8
 8009922:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009924:	68f8      	ldr	r0, [r7, #12]
 8009926:	f000 f920 	bl	8009b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2208      	movs	r2, #8
 800992e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2200      	movs	r2, #0
 8009936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e029      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	69db      	ldr	r3, [r3, #28]
 8009944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800994c:	d111      	bne.n	8009972 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009956:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f000 f906 	bl	8009b6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2220      	movs	r2, #32
 8009962:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2200      	movs	r2, #0
 800996a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800996e:	2303      	movs	r3, #3
 8009970:	e00f      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	69da      	ldr	r2, [r3, #28]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	4013      	ands	r3, r2
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	429a      	cmp	r2, r3
 8009980:	bf0c      	ite	eq
 8009982:	2301      	moveq	r3, #1
 8009984:	2300      	movne	r3, #0
 8009986:	b2db      	uxtb	r3, r3
 8009988:	461a      	mov	r2, r3
 800998a:	79fb      	ldrb	r3, [r7, #7]
 800998c:	429a      	cmp	r2, r3
 800998e:	d0a0      	beq.n	80098d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b096      	sub	sp, #88	@ 0x58
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	60b9      	str	r1, [r7, #8]
 80099a6:	4613      	mov	r3, r2
 80099a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	68ba      	ldr	r2, [r7, #8]
 80099ae:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	88fa      	ldrh	r2, [r7, #6]
 80099b4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2200      	movs	r2, #0
 80099bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	2222      	movs	r2, #34	@ 0x22
 80099c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d02d      	beq.n	8009a2e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d8:	4a40      	ldr	r2, [pc, #256]	@ (8009adc <UART_Start_Receive_DMA+0x140>)
 80099da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099e2:	4a3f      	ldr	r2, [pc, #252]	@ (8009ae0 <UART_Start_Receive_DMA+0x144>)
 80099e4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ec:	4a3d      	ldr	r2, [pc, #244]	@ (8009ae4 <UART_Start_Receive_DMA+0x148>)
 80099ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099f6:	2200      	movs	r2, #0
 80099f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	3324      	adds	r3, #36	@ 0x24
 8009a06:	4619      	mov	r1, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	f7f9 fc36 	bl	8003280 <HAL_DMA_Start_IT>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d009      	beq.n	8009a2e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2210      	movs	r2, #16
 8009a1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	2220      	movs	r2, #32
 8009a26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	e051      	b.n	8009ad2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d018      	beq.n	8009a68 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a3e:	e853 3f00 	ldrex	r3, [r3]
 8009a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	461a      	mov	r2, r3
 8009a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a56:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a58:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009a5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a5c:	e841 2300 	strex	r3, r2, [r1]
 8009a60:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009a62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1e6      	bne.n	8009a36 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	3308      	adds	r3, #8
 8009a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3308      	adds	r3, #8
 8009a86:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009a88:	637a      	str	r2, [r7, #52]	@ 0x34
 8009a8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a8c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009a8e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009a90:	e841 2300 	strex	r3, r2, [r1]
 8009a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d1e5      	bne.n	8009a68 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	3308      	adds	r3, #8
 8009aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	e853 3f00 	ldrex	r3, [r3]
 8009aaa:	613b      	str	r3, [r7, #16]
   return(result);
 8009aac:	693b      	ldr	r3, [r7, #16]
 8009aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009abc:	623a      	str	r2, [r7, #32]
 8009abe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ac0:	69f9      	ldr	r1, [r7, #28]
 8009ac2:	6a3a      	ldr	r2, [r7, #32]
 8009ac4:	e841 2300 	strex	r3, r2, [r1]
 8009ac8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d1e5      	bne.n	8009a9c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	3758      	adds	r7, #88	@ 0x58
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	bd80      	pop	{r7, pc}
 8009ada:	bf00      	nop
 8009adc:	08009ced 	.word	0x08009ced
 8009ae0:	08009e19 	.word	0x08009e19
 8009ae4:	08009e57 	.word	0x08009e57

08009ae8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b08f      	sub	sp, #60	@ 0x3c
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af6:	6a3b      	ldr	r3, [r7, #32]
 8009af8:	e853 3f00 	ldrex	r3, [r3]
 8009afc:	61fb      	str	r3, [r7, #28]
   return(result);
 8009afe:	69fb      	ldr	r3, [r7, #28]
 8009b00:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009b04:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b10:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b16:	e841 2300 	strex	r3, r2, [r1]
 8009b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1e6      	bne.n	8009af0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3308      	adds	r3, #8
 8009b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	e853 3f00 	ldrex	r3, [r3]
 8009b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009b38:	633b      	str	r3, [r7, #48]	@ 0x30
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3308      	adds	r3, #8
 8009b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b42:	61ba      	str	r2, [r7, #24]
 8009b44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6979      	ldr	r1, [r7, #20]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e5      	bne.n	8009b22 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009b5e:	bf00      	nop
 8009b60:	373c      	adds	r7, #60	@ 0x3c
 8009b62:	46bd      	mov	sp, r7
 8009b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b68:	4770      	bx	lr

08009b6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b6a:	b480      	push	{r7}
 8009b6c:	b095      	sub	sp, #84	@ 0x54
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009b90:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b98:	e841 2300 	strex	r3, r2, [r1]
 8009b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1e6      	bne.n	8009b72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3308      	adds	r3, #8
 8009baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bac:	6a3b      	ldr	r3, [r7, #32]
 8009bae:	e853 3f00 	ldrex	r3, [r3]
 8009bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009bba:	f023 0301 	bic.w	r3, r3, #1
 8009bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009bc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009bca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bcc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009bce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bd0:	e841 2300 	strex	r3, r2, [r1]
 8009bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1e3      	bne.n	8009ba4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d118      	bne.n	8009c16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f023 0310 	bic.w	r3, r3, #16
 8009bf8:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c02:	61bb      	str	r3, [r7, #24]
 8009c04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	6979      	ldr	r1, [r7, #20]
 8009c08:	69ba      	ldr	r2, [r7, #24]
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	613b      	str	r3, [r7, #16]
   return(result);
 8009c10:	693b      	ldr	r3, [r7, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e6      	bne.n	8009be4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009c2a:	bf00      	nop
 8009c2c:	3754      	adds	r7, #84	@ 0x54
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c36:	b580      	push	{r7, lr}
 8009c38:	b090      	sub	sp, #64	@ 0x40
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c42:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0320 	and.w	r3, r3, #32
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d137      	bne.n	8009cc2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c54:	2200      	movs	r2, #0
 8009c56:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009c5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3308      	adds	r3, #8
 8009c60:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	623b      	str	r3, [r7, #32]
   return(result);
 8009c6a:	6a3b      	ldr	r3, [r7, #32]
 8009c6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009c70:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	3308      	adds	r3, #8
 8009c78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009c7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8009c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009c80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c82:	e841 2300 	strex	r3, r2, [r1]
 8009c86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d1e5      	bne.n	8009c5a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	e853 3f00 	ldrex	r3, [r3]
 8009c9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ca2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ca4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	461a      	mov	r2, r3
 8009caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cac:	61fb      	str	r3, [r7, #28]
 8009cae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb0:	69b9      	ldr	r1, [r7, #24]
 8009cb2:	69fa      	ldr	r2, [r7, #28]
 8009cb4:	e841 2300 	strex	r3, r2, [r1]
 8009cb8:	617b      	str	r3, [r7, #20]
   return(result);
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d1e6      	bne.n	8009c8e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009cc0:	e002      	b.n	8009cc8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009cc2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009cc4:	f7ff f976 	bl	8008fb4 <HAL_UART_TxCpltCallback>
}
 8009cc8:	bf00      	nop
 8009cca:	3740      	adds	r7, #64	@ 0x40
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	bd80      	pop	{r7, pc}

08009cd0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cdc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009cde:	68f8      	ldr	r0, [r7, #12]
 8009ce0:	f7ff f972 	bl	8008fc8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ce4:	bf00      	nop
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b09c      	sub	sp, #112	@ 0x70
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f003 0320 	and.w	r3, r3, #32
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d171      	bne.n	8009dec <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d30:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d32:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d36:	e841 2300 	strex	r3, r2, [r1]
 8009d3a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d1e6      	bne.n	8009d10 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	3308      	adds	r3, #8
 8009d48:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d4c:	e853 3f00 	ldrex	r3, [r3]
 8009d50:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d54:	f023 0301 	bic.w	r3, r3, #1
 8009d58:	667b      	str	r3, [r7, #100]	@ 0x64
 8009d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3308      	adds	r3, #8
 8009d60:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009d62:	647a      	str	r2, [r7, #68]	@ 0x44
 8009d64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d6a:	e841 2300 	strex	r3, r2, [r1]
 8009d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d1e5      	bne.n	8009d42 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d80:	e853 3f00 	ldrex	r3, [r3]
 8009d84:	623b      	str	r3, [r7, #32]
   return(result);
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	3308      	adds	r3, #8
 8009d94:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009d96:	633a      	str	r2, [r7, #48]	@ 0x30
 8009d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d9a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009d9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d9e:	e841 2300 	strex	r3, r2, [r1]
 8009da2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1e5      	bne.n	8009d76 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009daa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dac:	2220      	movs	r2, #32
 8009dae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009db2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009db4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db6:	2b01      	cmp	r3, #1
 8009db8:	d118      	bne.n	8009dec <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	e853 3f00 	ldrex	r3, [r3]
 8009dc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f023 0310 	bic.w	r3, r3, #16
 8009dce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009dd8:	61fb      	str	r3, [r7, #28]
 8009dda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ddc:	69b9      	ldr	r1, [r7, #24]
 8009dde:	69fa      	ldr	r2, [r7, #28]
 8009de0:	e841 2300 	strex	r3, r2, [r1]
 8009de4:	617b      	str	r3, [r7, #20]
   return(result);
 8009de6:	697b      	ldr	r3, [r7, #20]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1e6      	bne.n	8009dba <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dee:	2200      	movs	r2, #0
 8009df0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009df2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009df4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d107      	bne.n	8009e0a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009dfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e00:	4619      	mov	r1, r3
 8009e02:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e04:	f7ff f908 	bl	8009018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e08:	e002      	b.n	8009e10 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009e0a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009e0c:	f7ff f8e6 	bl	8008fdc <HAL_UART_RxCpltCallback>
}
 8009e10:	bf00      	nop
 8009e12:	3770      	adds	r7, #112	@ 0x70
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e24:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2201      	movs	r2, #1
 8009e2a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d109      	bne.n	8009e48 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009e3a:	085b      	lsrs	r3, r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	4619      	mov	r1, r3
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff f8e9 	bl	8009018 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009e46:	e002      	b.n	8009e4e <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f7ff f8d1 	bl	8008ff0 <HAL_UART_RxHalfCpltCallback>
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}

08009e56 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009e56:	b580      	push	{r7, lr}
 8009e58:	b086      	sub	sp, #24
 8009e5a:	af00      	add	r7, sp, #0
 8009e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e62:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e6a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e7e:	2b80      	cmp	r3, #128	@ 0x80
 8009e80:	d109      	bne.n	8009e96 <UART_DMAError+0x40>
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	2b21      	cmp	r3, #33	@ 0x21
 8009e86:	d106      	bne.n	8009e96 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009e90:	6978      	ldr	r0, [r7, #20]
 8009e92:	f7ff fe29 	bl	8009ae8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ea0:	2b40      	cmp	r3, #64	@ 0x40
 8009ea2:	d109      	bne.n	8009eb8 <UART_DMAError+0x62>
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b22      	cmp	r3, #34	@ 0x22
 8009ea8:	d106      	bne.n	8009eb8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009eb2:	6978      	ldr	r0, [r7, #20]
 8009eb4:	f7ff fe59 	bl	8009b6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009eb8:	697b      	ldr	r3, [r7, #20]
 8009eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ebe:	f043 0210 	orr.w	r2, r3, #16
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ec8:	6978      	ldr	r0, [r7, #20]
 8009eca:	f7ff f89b 	bl	8009004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ece:	bf00      	nop
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ee2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f7ff f889 	bl	8009004 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009ef2:	bf00      	nop
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b088      	sub	sp, #32
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f16:	61fb      	str	r3, [r7, #28]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	461a      	mov	r2, r3
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	61bb      	str	r3, [r7, #24]
 8009f22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6979      	ldr	r1, [r7, #20]
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e6      	bne.n	8009f02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2220      	movs	r2, #32
 8009f38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f7ff f836 	bl	8008fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f48:	bf00      	nop
 8009f4a:	3720      	adds	r7, #32
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b083      	sub	sp, #12
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009f58:	bf00      	nop
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b083      	sub	sp, #12
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	b083      	sub	sp, #12
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009f80:	bf00      	nop
 8009f82:	370c      	adds	r7, #12
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr

08009f8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009f8c:	b480      	push	{r7}
 8009f8e:	b085      	sub	sp, #20
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d101      	bne.n	8009fa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	e027      	b.n	8009ff2 <HAL_UARTEx_DisableFifoMode+0x66>
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2201      	movs	r2, #1
 8009fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2224      	movs	r2, #36	@ 0x24
 8009fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009fd0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2220      	movs	r2, #32
 8009fe4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2200      	movs	r2, #0
 8009fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ff0:	2300      	movs	r3, #0
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3714      	adds	r7, #20
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr

08009ffe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b084      	sub	sp, #16
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a012:	2302      	movs	r3, #2
 800a014:	e02d      	b.n	800a072 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2224      	movs	r2, #36	@ 0x24
 800a022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f022 0201 	bic.w	r2, r2, #1
 800a03c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	430a      	orrs	r2, r1
 800a050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f850 	bl	800a0f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2220      	movs	r2, #32
 800a064:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b084      	sub	sp, #16
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
 800a082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	d101      	bne.n	800a092 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a08e:	2302      	movs	r3, #2
 800a090:	e02d      	b.n	800a0ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2224      	movs	r2, #36	@ 0x24
 800a09e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	681a      	ldr	r2, [r3, #0]
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f022 0201 	bic.w	r2, r2, #1
 800a0b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	689b      	ldr	r3, [r3, #8]
 800a0c0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	683a      	ldr	r2, [r7, #0]
 800a0ca:	430a      	orrs	r2, r1
 800a0cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f812 	bl	800a0f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2220      	movs	r2, #32
 800a0e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0ec:	2300      	movs	r3, #0
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3710      	adds	r7, #16
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b085      	sub	sp, #20
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a104:	2b00      	cmp	r3, #0
 800a106:	d108      	bne.n	800a11a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2201      	movs	r2, #1
 800a10c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2201      	movs	r2, #1
 800a114:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a118:	e031      	b.n	800a17e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a11a:	2308      	movs	r3, #8
 800a11c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a11e:	2308      	movs	r3, #8
 800a120:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	689b      	ldr	r3, [r3, #8]
 800a128:	0e5b      	lsrs	r3, r3, #25
 800a12a:	b2db      	uxtb	r3, r3
 800a12c:	f003 0307 	and.w	r3, r3, #7
 800a130:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689b      	ldr	r3, [r3, #8]
 800a138:	0f5b      	lsrs	r3, r3, #29
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	f003 0307 	and.w	r3, r3, #7
 800a140:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a142:	7bbb      	ldrb	r3, [r7, #14]
 800a144:	7b3a      	ldrb	r2, [r7, #12]
 800a146:	4911      	ldr	r1, [pc, #68]	@ (800a18c <UARTEx_SetNbDataToProcess+0x94>)
 800a148:	5c8a      	ldrb	r2, [r1, r2]
 800a14a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a14e:	7b3a      	ldrb	r2, [r7, #12]
 800a150:	490f      	ldr	r1, [pc, #60]	@ (800a190 <UARTEx_SetNbDataToProcess+0x98>)
 800a152:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a154:	fb93 f3f2 	sdiv	r3, r3, r2
 800a158:	b29a      	uxth	r2, r3
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a160:	7bfb      	ldrb	r3, [r7, #15]
 800a162:	7b7a      	ldrb	r2, [r7, #13]
 800a164:	4909      	ldr	r1, [pc, #36]	@ (800a18c <UARTEx_SetNbDataToProcess+0x94>)
 800a166:	5c8a      	ldrb	r2, [r1, r2]
 800a168:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a16c:	7b7a      	ldrb	r2, [r7, #13]
 800a16e:	4908      	ldr	r1, [pc, #32]	@ (800a190 <UARTEx_SetNbDataToProcess+0x98>)
 800a170:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a172:	fb93 f3f2 	sdiv	r3, r3, r2
 800a176:	b29a      	uxth	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a17e:	bf00      	nop
 800a180:	3714      	adds	r7, #20
 800a182:	46bd      	mov	sp, r7
 800a184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a188:	4770      	bx	lr
 800a18a:	bf00      	nop
 800a18c:	0801b494 	.word	0x0801b494
 800a190:	0801b49c 	.word	0x0801b49c

0800a194 <__NVIC_SetPriority>:
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	4603      	mov	r3, r0
 800a19c:	6039      	str	r1, [r7, #0]
 800a19e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	db0a      	blt.n	800a1be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	b2da      	uxtb	r2, r3
 800a1ac:	490c      	ldr	r1, [pc, #48]	@ (800a1e0 <__NVIC_SetPriority+0x4c>)
 800a1ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1b2:	0112      	lsls	r2, r2, #4
 800a1b4:	b2d2      	uxtb	r2, r2
 800a1b6:	440b      	add	r3, r1
 800a1b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a1bc:	e00a      	b.n	800a1d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	4908      	ldr	r1, [pc, #32]	@ (800a1e4 <__NVIC_SetPriority+0x50>)
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	f003 030f 	and.w	r3, r3, #15
 800a1ca:	3b04      	subs	r3, #4
 800a1cc:	0112      	lsls	r2, r2, #4
 800a1ce:	b2d2      	uxtb	r2, r2
 800a1d0:	440b      	add	r3, r1
 800a1d2:	761a      	strb	r2, [r3, #24]
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr
 800a1e0:	e000e100 	.word	0xe000e100
 800a1e4:	e000ed00 	.word	0xe000ed00

0800a1e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a1ec:	4b05      	ldr	r3, [pc, #20]	@ (800a204 <SysTick_Handler+0x1c>)
 800a1ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a1f0:	f001 fd40 	bl	800bc74 <xTaskGetSchedulerState>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d001      	beq.n	800a1fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a1fa:	f002 fb35 	bl	800c868 <xPortSysTickHandler>
  }
}
 800a1fe:	bf00      	nop
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	e000e010 	.word	0xe000e010

0800a208 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a208:	b580      	push	{r7, lr}
 800a20a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a20c:	2100      	movs	r1, #0
 800a20e:	f06f 0004 	mvn.w	r0, #4
 800a212:	f7ff ffbf 	bl	800a194 <__NVIC_SetPriority>
#endif
}
 800a216:	bf00      	nop
 800a218:	bd80      	pop	{r7, pc}
	...

0800a21c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a222:	f3ef 8305 	mrs	r3, IPSR
 800a226:	603b      	str	r3, [r7, #0]
  return(result);
 800a228:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d003      	beq.n	800a236 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a22e:	f06f 0305 	mvn.w	r3, #5
 800a232:	607b      	str	r3, [r7, #4]
 800a234:	e00c      	b.n	800a250 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a236:	4b0a      	ldr	r3, [pc, #40]	@ (800a260 <osKernelInitialize+0x44>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d105      	bne.n	800a24a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a23e:	4b08      	ldr	r3, [pc, #32]	@ (800a260 <osKernelInitialize+0x44>)
 800a240:	2201      	movs	r2, #1
 800a242:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a244:	2300      	movs	r3, #0
 800a246:	607b      	str	r3, [r7, #4]
 800a248:	e002      	b.n	800a250 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a24e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a250:	687b      	ldr	r3, [r7, #4]
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20004c54 	.word	0x20004c54

0800a264 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a264:	b580      	push	{r7, lr}
 800a266:	b082      	sub	sp, #8
 800a268:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a26a:	f3ef 8305 	mrs	r3, IPSR
 800a26e:	603b      	str	r3, [r7, #0]
  return(result);
 800a270:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a272:	2b00      	cmp	r3, #0
 800a274:	d003      	beq.n	800a27e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a276:	f06f 0305 	mvn.w	r3, #5
 800a27a:	607b      	str	r3, [r7, #4]
 800a27c:	e010      	b.n	800a2a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a27e:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <osKernelStart+0x48>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b01      	cmp	r3, #1
 800a284:	d109      	bne.n	800a29a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a286:	f7ff ffbf 	bl	800a208 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a28a:	4b08      	ldr	r3, [pc, #32]	@ (800a2ac <osKernelStart+0x48>)
 800a28c:	2202      	movs	r2, #2
 800a28e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a290:	f001 f87a 	bl	800b388 <vTaskStartScheduler>
      stat = osOK;
 800a294:	2300      	movs	r3, #0
 800a296:	607b      	str	r3, [r7, #4]
 800a298:	e002      	b.n	800a2a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a29a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a29e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a2a0:	687b      	ldr	r3, [r7, #4]
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3708      	adds	r7, #8
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20004c54 	.word	0x20004c54

0800a2b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08e      	sub	sp, #56	@ 0x38
 800a2b4:	af04      	add	r7, sp, #16
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2c0:	f3ef 8305 	mrs	r3, IPSR
 800a2c4:	617b      	str	r3, [r7, #20]
  return(result);
 800a2c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d17e      	bne.n	800a3ca <osThreadNew+0x11a>
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d07b      	beq.n	800a3ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2d2:	2380      	movs	r3, #128	@ 0x80
 800a2d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2d6:	2318      	movs	r3, #24
 800a2d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a2de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a2e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d045      	beq.n	800a376 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d002      	beq.n	800a2f8 <osThreadNew+0x48>
        name = attr->name;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d002      	beq.n	800a306 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d008      	beq.n	800a31e <osThreadNew+0x6e>
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	2b38      	cmp	r3, #56	@ 0x38
 800a310:	d805      	bhi.n	800a31e <osThreadNew+0x6e>
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	685b      	ldr	r3, [r3, #4]
 800a316:	f003 0301 	and.w	r3, r3, #1
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <osThreadNew+0x72>
        return (NULL);
 800a31e:	2300      	movs	r3, #0
 800a320:	e054      	b.n	800a3cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	695b      	ldr	r3, [r3, #20]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d003      	beq.n	800a332 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	695b      	ldr	r3, [r3, #20]
 800a32e:	089b      	lsrs	r3, r3, #2
 800a330:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d00e      	beq.n	800a358 <osThreadNew+0xa8>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2b5b      	cmp	r3, #91	@ 0x5b
 800a340:	d90a      	bls.n	800a358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a346:	2b00      	cmp	r3, #0
 800a348:	d006      	beq.n	800a358 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d002      	beq.n	800a358 <osThreadNew+0xa8>
        mem = 1;
 800a352:	2301      	movs	r3, #1
 800a354:	61bb      	str	r3, [r7, #24]
 800a356:	e010      	b.n	800a37a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d10c      	bne.n	800a37a <osThreadNew+0xca>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	68db      	ldr	r3, [r3, #12]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d108      	bne.n	800a37a <osThreadNew+0xca>
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <osThreadNew+0xca>
          mem = 0;
 800a370:	2300      	movs	r3, #0
 800a372:	61bb      	str	r3, [r7, #24]
 800a374:	e001      	b.n	800a37a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d110      	bne.n	800a3a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a388:	9202      	str	r2, [sp, #8]
 800a38a:	9301      	str	r3, [sp, #4]
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	6a3a      	ldr	r2, [r7, #32]
 800a394:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a396:	68f8      	ldr	r0, [r7, #12]
 800a398:	f000 fe1a 	bl	800afd0 <xTaskCreateStatic>
 800a39c:	4603      	mov	r3, r0
 800a39e:	613b      	str	r3, [r7, #16]
 800a3a0:	e013      	b.n	800a3ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d110      	bne.n	800a3ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	b29a      	uxth	r2, r3
 800a3ac:	f107 0310 	add.w	r3, r7, #16
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f000 fe68 	bl	800b090 <xTaskCreate>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d001      	beq.n	800a3ca <osThreadNew+0x11a>
            hTask = NULL;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3ca:	693b      	ldr	r3, [r7, #16]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3728      	adds	r7, #40	@ 0x28
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3dc:	f3ef 8305 	mrs	r3, IPSR
 800a3e0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d003      	beq.n	800a3f0 <osDelay+0x1c>
    stat = osErrorISR;
 800a3e8:	f06f 0305 	mvn.w	r3, #5
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	e007      	b.n	800a400 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 ff8e 	bl	800b31c <vTaskDelay>
    }
  }

  return (stat);
 800a400:	68fb      	ldr	r3, [r7, #12]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}
	...

0800a40c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a40c:	b480      	push	{r7}
 800a40e:	b085      	sub	sp, #20
 800a410:	af00      	add	r7, sp, #0
 800a412:	60f8      	str	r0, [r7, #12]
 800a414:	60b9      	str	r1, [r7, #8]
 800a416:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4a07      	ldr	r2, [pc, #28]	@ (800a438 <vApplicationGetIdleTaskMemory+0x2c>)
 800a41c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	4a06      	ldr	r2, [pc, #24]	@ (800a43c <vApplicationGetIdleTaskMemory+0x30>)
 800a422:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2280      	movs	r2, #128	@ 0x80
 800a428:	601a      	str	r2, [r3, #0]
}
 800a42a:	bf00      	nop
 800a42c:	3714      	adds	r7, #20
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr
 800a436:	bf00      	nop
 800a438:	20004c58 	.word	0x20004c58
 800a43c:	20004cb4 	.word	0x20004cb4

0800a440 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	4a07      	ldr	r2, [pc, #28]	@ (800a46c <vApplicationGetTimerTaskMemory+0x2c>)
 800a450:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	4a06      	ldr	r2, [pc, #24]	@ (800a470 <vApplicationGetTimerTaskMemory+0x30>)
 800a456:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a45e:	601a      	str	r2, [r3, #0]
}
 800a460:	bf00      	nop
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	20004eb4 	.word	0x20004eb4
 800a470:	20004f10 	.word	0x20004f10

0800a474 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a474:	b480      	push	{r7}
 800a476:	b083      	sub	sp, #12
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f103 0208 	add.w	r2, r3, #8
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a48c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f103 0208 	add.w	r2, r3, #8
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f103 0208 	add.w	r2, r3, #8
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a4a8:	bf00      	nop
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a4c2:	bf00      	nop
 800a4c4:	370c      	adds	r7, #12
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4cc:	4770      	bx	lr

0800a4ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a4ce:	b480      	push	{r7}
 800a4d0:	b085      	sub	sp, #20
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	6078      	str	r0, [r7, #4]
 800a4d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689a      	ldr	r2, [r3, #8]
 800a4e8:	683b      	ldr	r3, [r7, #0]
 800a4ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	683a      	ldr	r2, [r7, #0]
 800a4f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	1c5a      	adds	r2, r3, #1
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	601a      	str	r2, [r3, #0]
}
 800a50a:	bf00      	nop
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a516:	b480      	push	{r7}
 800a518:	b085      	sub	sp, #20
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a52c:	d103      	bne.n	800a536 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	e00c      	b.n	800a550 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	3308      	adds	r3, #8
 800a53a:	60fb      	str	r3, [r7, #12]
 800a53c:	e002      	b.n	800a544 <vListInsert+0x2e>
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	429a      	cmp	r2, r3
 800a54e:	d2f6      	bcs.n	800a53e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	683a      	ldr	r2, [r7, #0]
 800a55e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	601a      	str	r2, [r3, #0]
}
 800a57c:	bf00      	nop
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a588:	b480      	push	{r7}
 800a58a:	b085      	sub	sp, #20
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	691b      	ldr	r3, [r3, #16]
 800a594:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	6892      	ldr	r2, [r2, #8]
 800a59e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	689b      	ldr	r3, [r3, #8]
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	6852      	ldr	r2, [r2, #4]
 800a5a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	687a      	ldr	r2, [r7, #4]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d103      	bne.n	800a5bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	689a      	ldr	r2, [r3, #8]
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	1e5a      	subs	r2, r3, #1
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	681b      	ldr	r3, [r3, #0]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d10b      	bne.n	800a608 <xQueueGenericReset+0x2c>
	__asm volatile
 800a5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5f4:	f383 8811 	msr	BASEPRI, r3
 800a5f8:	f3bf 8f6f 	isb	sy
 800a5fc:	f3bf 8f4f 	dsb	sy
 800a600:	60bb      	str	r3, [r7, #8]
}
 800a602:	bf00      	nop
 800a604:	bf00      	nop
 800a606:	e7fd      	b.n	800a604 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a608:	f002 f89e 	bl	800c748 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	681a      	ldr	r2, [r3, #0]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a614:	68f9      	ldr	r1, [r7, #12]
 800a616:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a618:	fb01 f303 	mul.w	r3, r1, r3
 800a61c:	441a      	add	r2, r3
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a638:	3b01      	subs	r3, #1
 800a63a:	68f9      	ldr	r1, [r7, #12]
 800a63c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a63e:	fb01 f303 	mul.w	r3, r1, r3
 800a642:	441a      	add	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	22ff      	movs	r2, #255	@ 0xff
 800a64c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	22ff      	movs	r2, #255	@ 0xff
 800a654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d114      	bne.n	800a688 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d01a      	beq.n	800a69c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	3310      	adds	r3, #16
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 f91a 	bl	800b8a4 <xTaskRemoveFromEventList>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d012      	beq.n	800a69c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a676:	4b0d      	ldr	r3, [pc, #52]	@ (800a6ac <xQueueGenericReset+0xd0>)
 800a678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	f3bf 8f4f 	dsb	sy
 800a682:	f3bf 8f6f 	isb	sy
 800a686:	e009      	b.n	800a69c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	3310      	adds	r3, #16
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7ff fef1 	bl	800a474 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	3324      	adds	r3, #36	@ 0x24
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff feec 	bl	800a474 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a69c:	f002 f886 	bl	800c7ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a6a0:	2301      	movs	r3, #1
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	e000ed04 	.word	0xe000ed04

0800a6b0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b08e      	sub	sp, #56	@ 0x38
 800a6b4:	af02      	add	r7, sp, #8
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	607a      	str	r2, [r7, #4]
 800a6bc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10b      	bne.n	800a6dc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a6d6:	bf00      	nop
 800a6d8:	bf00      	nop
 800a6da:	e7fd      	b.n	800a6d8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d10b      	bne.n	800a6fa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e6:	f383 8811 	msr	BASEPRI, r3
 800a6ea:	f3bf 8f6f 	isb	sy
 800a6ee:	f3bf 8f4f 	dsb	sy
 800a6f2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6f4:	bf00      	nop
 800a6f6:	bf00      	nop
 800a6f8:	e7fd      	b.n	800a6f6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d002      	beq.n	800a706 <xQueueGenericCreateStatic+0x56>
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <xQueueGenericCreateStatic+0x5a>
 800a706:	2301      	movs	r3, #1
 800a708:	e000      	b.n	800a70c <xQueueGenericCreateStatic+0x5c>
 800a70a:	2300      	movs	r3, #0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10b      	bne.n	800a728 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a714:	f383 8811 	msr	BASEPRI, r3
 800a718:	f3bf 8f6f 	isb	sy
 800a71c:	f3bf 8f4f 	dsb	sy
 800a720:	623b      	str	r3, [r7, #32]
}
 800a722:	bf00      	nop
 800a724:	bf00      	nop
 800a726:	e7fd      	b.n	800a724 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d102      	bne.n	800a734 <xQueueGenericCreateStatic+0x84>
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <xQueueGenericCreateStatic+0x88>
 800a734:	2301      	movs	r3, #1
 800a736:	e000      	b.n	800a73a <xQueueGenericCreateStatic+0x8a>
 800a738:	2300      	movs	r3, #0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10b      	bne.n	800a756 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a742:	f383 8811 	msr	BASEPRI, r3
 800a746:	f3bf 8f6f 	isb	sy
 800a74a:	f3bf 8f4f 	dsb	sy
 800a74e:	61fb      	str	r3, [r7, #28]
}
 800a750:	bf00      	nop
 800a752:	bf00      	nop
 800a754:	e7fd      	b.n	800a752 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a756:	2350      	movs	r3, #80	@ 0x50
 800a758:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	2b50      	cmp	r3, #80	@ 0x50
 800a75e:	d00b      	beq.n	800a778 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	61bb      	str	r3, [r7, #24]
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a778:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00d      	beq.n	800a7a0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a786:	2201      	movs	r2, #1
 800a788:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a78c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a792:	9300      	str	r3, [sp, #0]
 800a794:	4613      	mov	r3, r2
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	68b9      	ldr	r1, [r7, #8]
 800a79a:	68f8      	ldr	r0, [r7, #12]
 800a79c:	f000 f805 	bl	800a7aa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3730      	adds	r7, #48	@ 0x30
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}

0800a7aa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b084      	sub	sp, #16
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	60f8      	str	r0, [r7, #12]
 800a7b2:	60b9      	str	r1, [r7, #8]
 800a7b4:	607a      	str	r2, [r7, #4]
 800a7b6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d103      	bne.n	800a7c6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a7be:	69bb      	ldr	r3, [r7, #24]
 800a7c0:	69ba      	ldr	r2, [r7, #24]
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	e002      	b.n	800a7cc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	68fa      	ldr	r2, [r7, #12]
 800a7d0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	68ba      	ldr	r2, [r7, #8]
 800a7d6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a7d8:	2101      	movs	r1, #1
 800a7da:	69b8      	ldr	r0, [r7, #24]
 800a7dc:	f7ff fefe 	bl	800a5dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a7e0:	69bb      	ldr	r3, [r7, #24]
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a7e8:	bf00      	nop
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b08e      	sub	sp, #56	@ 0x38
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a7fe:	2300      	movs	r3, #0
 800a800:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10b      	bne.n	800a824 <xQueueGenericSend+0x34>
	__asm volatile
 800a80c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a810:	f383 8811 	msr	BASEPRI, r3
 800a814:	f3bf 8f6f 	isb	sy
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a81e:	bf00      	nop
 800a820:	bf00      	nop
 800a822:	e7fd      	b.n	800a820 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d103      	bne.n	800a832 <xQueueGenericSend+0x42>
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d101      	bne.n	800a836 <xQueueGenericSend+0x46>
 800a832:	2301      	movs	r3, #1
 800a834:	e000      	b.n	800a838 <xQueueGenericSend+0x48>
 800a836:	2300      	movs	r3, #0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10b      	bne.n	800a854 <xQueueGenericSend+0x64>
	__asm volatile
 800a83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a840:	f383 8811 	msr	BASEPRI, r3
 800a844:	f3bf 8f6f 	isb	sy
 800a848:	f3bf 8f4f 	dsb	sy
 800a84c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a84e:	bf00      	nop
 800a850:	bf00      	nop
 800a852:	e7fd      	b.n	800a850 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b02      	cmp	r3, #2
 800a858:	d103      	bne.n	800a862 <xQueueGenericSend+0x72>
 800a85a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a85c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d101      	bne.n	800a866 <xQueueGenericSend+0x76>
 800a862:	2301      	movs	r3, #1
 800a864:	e000      	b.n	800a868 <xQueueGenericSend+0x78>
 800a866:	2300      	movs	r3, #0
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10b      	bne.n	800a884 <xQueueGenericSend+0x94>
	__asm volatile
 800a86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a870:	f383 8811 	msr	BASEPRI, r3
 800a874:	f3bf 8f6f 	isb	sy
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	623b      	str	r3, [r7, #32]
}
 800a87e:	bf00      	nop
 800a880:	bf00      	nop
 800a882:	e7fd      	b.n	800a880 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a884:	f001 f9f6 	bl	800bc74 <xTaskGetSchedulerState>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d102      	bne.n	800a894 <xQueueGenericSend+0xa4>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d101      	bne.n	800a898 <xQueueGenericSend+0xa8>
 800a894:	2301      	movs	r3, #1
 800a896:	e000      	b.n	800a89a <xQueueGenericSend+0xaa>
 800a898:	2300      	movs	r3, #0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d10b      	bne.n	800a8b6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	f3bf 8f6f 	isb	sy
 800a8aa:	f3bf 8f4f 	dsb	sy
 800a8ae:	61fb      	str	r3, [r7, #28]
}
 800a8b0:	bf00      	nop
 800a8b2:	bf00      	nop
 800a8b4:	e7fd      	b.n	800a8b2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8b6:	f001 ff47 	bl	800c748 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a8ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8c2:	429a      	cmp	r2, r3
 800a8c4:	d302      	bcc.n	800a8cc <xQueueGenericSend+0xdc>
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b02      	cmp	r3, #2
 800a8ca:	d129      	bne.n	800a920 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	68b9      	ldr	r1, [r7, #8]
 800a8d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a8d2:	f000 fa0f 	bl	800acf4 <prvCopyDataToQueue>
 800a8d6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d010      	beq.n	800a902 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a8e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8e2:	3324      	adds	r3, #36	@ 0x24
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 ffdd 	bl	800b8a4 <xTaskRemoveFromEventList>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d013      	beq.n	800a918 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a8f0:	4b3f      	ldr	r3, [pc, #252]	@ (800a9f0 <xQueueGenericSend+0x200>)
 800a8f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8f6:	601a      	str	r2, [r3, #0]
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	e00a      	b.n	800a918 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a904:	2b00      	cmp	r3, #0
 800a906:	d007      	beq.n	800a918 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a908:	4b39      	ldr	r3, [pc, #228]	@ (800a9f0 <xQueueGenericSend+0x200>)
 800a90a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a918:	f001 ff48 	bl	800c7ac <vPortExitCritical>
				return pdPASS;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e063      	b.n	800a9e8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d103      	bne.n	800a92e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a926:	f001 ff41 	bl	800c7ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a92a:	2300      	movs	r3, #0
 800a92c:	e05c      	b.n	800a9e8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a92e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a930:	2b00      	cmp	r3, #0
 800a932:	d106      	bne.n	800a942 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a934:	f107 0314 	add.w	r3, r7, #20
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 f83f 	bl	800b9bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a93e:	2301      	movs	r3, #1
 800a940:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a942:	f001 ff33 	bl	800c7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a946:	f000 fd87 	bl	800b458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a94a:	f001 fefd 	bl	800c748 <vPortEnterCritical>
 800a94e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a950:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a954:	b25b      	sxtb	r3, r3
 800a956:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a95a:	d103      	bne.n	800a964 <xQueueGenericSend+0x174>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a966:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a96a:	b25b      	sxtb	r3, r3
 800a96c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a970:	d103      	bne.n	800a97a <xQueueGenericSend+0x18a>
 800a972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a97a:	f001 ff17 	bl	800c7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a97e:	1d3a      	adds	r2, r7, #4
 800a980:	f107 0314 	add.w	r3, r7, #20
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f001 f82e 	bl	800b9e8 <xTaskCheckForTimeOut>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d124      	bne.n	800a9dc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a992:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a994:	f000 faa6 	bl	800aee4 <prvIsQueueFull>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d018      	beq.n	800a9d0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a99e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a0:	3310      	adds	r3, #16
 800a9a2:	687a      	ldr	r2, [r7, #4]
 800a9a4:	4611      	mov	r1, r2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f000 ff2a 	bl	800b800 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a9ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9ae:	f000 fa31 	bl	800ae14 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a9b2:	f000 fd5f 	bl	800b474 <xTaskResumeAll>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f47f af7c 	bne.w	800a8b6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a9be:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f0 <xQueueGenericSend+0x200>)
 800a9c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9c4:	601a      	str	r2, [r3, #0]
 800a9c6:	f3bf 8f4f 	dsb	sy
 800a9ca:	f3bf 8f6f 	isb	sy
 800a9ce:	e772      	b.n	800a8b6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a9d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9d2:	f000 fa1f 	bl	800ae14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9d6:	f000 fd4d 	bl	800b474 <xTaskResumeAll>
 800a9da:	e76c      	b.n	800a8b6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a9dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a9de:	f000 fa19 	bl	800ae14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9e2:	f000 fd47 	bl	800b474 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a9e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3738      	adds	r7, #56	@ 0x38
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	e000ed04 	.word	0xe000ed04

0800a9f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b090      	sub	sp, #64	@ 0x40
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	607a      	str	r2, [r7, #4]
 800aa00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10b      	bne.n	800aa24 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	e7fd      	b.n	800aa20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d103      	bne.n	800aa32 <xQueueGenericSendFromISR+0x3e>
 800aa2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d101      	bne.n	800aa36 <xQueueGenericSendFromISR+0x42>
 800aa32:	2301      	movs	r3, #1
 800aa34:	e000      	b.n	800aa38 <xQueueGenericSendFromISR+0x44>
 800aa36:	2300      	movs	r3, #0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d10b      	bne.n	800aa54 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800aa3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa40:	f383 8811 	msr	BASEPRI, r3
 800aa44:	f3bf 8f6f 	isb	sy
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa4e:	bf00      	nop
 800aa50:	bf00      	nop
 800aa52:	e7fd      	b.n	800aa50 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d103      	bne.n	800aa62 <xQueueGenericSendFromISR+0x6e>
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d101      	bne.n	800aa66 <xQueueGenericSendFromISR+0x72>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e000      	b.n	800aa68 <xQueueGenericSendFromISR+0x74>
 800aa66:	2300      	movs	r3, #0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10b      	bne.n	800aa84 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aa6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa70:	f383 8811 	msr	BASEPRI, r3
 800aa74:	f3bf 8f6f 	isb	sy
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	623b      	str	r3, [r7, #32]
}
 800aa7e:	bf00      	nop
 800aa80:	bf00      	nop
 800aa82:	e7fd      	b.n	800aa80 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa84:	f001 ff40 	bl	800c908 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aa88:	f3ef 8211 	mrs	r2, BASEPRI
 800aa8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	61fa      	str	r2, [r7, #28]
 800aa9e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aaa0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaa2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aaac:	429a      	cmp	r2, r3
 800aaae:	d302      	bcc.n	800aab6 <xQueueGenericSendFromISR+0xc2>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b02      	cmp	r3, #2
 800aab4:	d12f      	bne.n	800ab16 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aab8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aabc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	68b9      	ldr	r1, [r7, #8]
 800aaca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800aacc:	f000 f912 	bl	800acf4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aad0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800aad4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aad8:	d112      	bne.n	800ab00 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aadc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d016      	beq.n	800ab10 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae4:	3324      	adds	r3, #36	@ 0x24
 800aae6:	4618      	mov	r0, r3
 800aae8:	f000 fedc 	bl	800b8a4 <xTaskRemoveFromEventList>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d00e      	beq.n	800ab10 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	2201      	movs	r2, #1
 800aafc:	601a      	str	r2, [r3, #0]
 800aafe:	e007      	b.n	800ab10 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ab04:	3301      	adds	r3, #1
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	b25a      	sxtb	r2, r3
 800ab0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ab10:	2301      	movs	r3, #1
 800ab12:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ab14:	e001      	b.n	800ab1a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab16:	2300      	movs	r3, #0
 800ab18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3740      	adds	r7, #64	@ 0x40
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08c      	sub	sp, #48	@ 0x30
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d10b      	bne.n	800ab62 <xQueueReceive+0x32>
	__asm volatile
 800ab4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab4e:	f383 8811 	msr	BASEPRI, r3
 800ab52:	f3bf 8f6f 	isb	sy
 800ab56:	f3bf 8f4f 	dsb	sy
 800ab5a:	623b      	str	r3, [r7, #32]
}
 800ab5c:	bf00      	nop
 800ab5e:	bf00      	nop
 800ab60:	e7fd      	b.n	800ab5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d103      	bne.n	800ab70 <xQueueReceive+0x40>
 800ab68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d101      	bne.n	800ab74 <xQueueReceive+0x44>
 800ab70:	2301      	movs	r3, #1
 800ab72:	e000      	b.n	800ab76 <xQueueReceive+0x46>
 800ab74:	2300      	movs	r3, #0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d10b      	bne.n	800ab92 <xQueueReceive+0x62>
	__asm volatile
 800ab7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab7e:	f383 8811 	msr	BASEPRI, r3
 800ab82:	f3bf 8f6f 	isb	sy
 800ab86:	f3bf 8f4f 	dsb	sy
 800ab8a:	61fb      	str	r3, [r7, #28]
}
 800ab8c:	bf00      	nop
 800ab8e:	bf00      	nop
 800ab90:	e7fd      	b.n	800ab8e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab92:	f001 f86f 	bl	800bc74 <xTaskGetSchedulerState>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d102      	bne.n	800aba2 <xQueueReceive+0x72>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d101      	bne.n	800aba6 <xQueueReceive+0x76>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e000      	b.n	800aba8 <xQueueReceive+0x78>
 800aba6:	2300      	movs	r3, #0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10b      	bne.n	800abc4 <xQueueReceive+0x94>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	61bb      	str	r3, [r7, #24]
}
 800abbe:	bf00      	nop
 800abc0:	bf00      	nop
 800abc2:	e7fd      	b.n	800abc0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abc4:	f001 fdc0 	bl	800c748 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800abc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abcc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d01f      	beq.n	800ac14 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800abd4:	68b9      	ldr	r1, [r7, #8]
 800abd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800abd8:	f000 f8f6 	bl	800adc8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800abdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abde:	1e5a      	subs	r2, r3, #1
 800abe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800abe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00f      	beq.n	800ac0c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800abec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abee:	3310      	adds	r3, #16
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 fe57 	bl	800b8a4 <xTaskRemoveFromEventList>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d007      	beq.n	800ac0c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800abfc:	4b3c      	ldr	r3, [pc, #240]	@ (800acf0 <xQueueReceive+0x1c0>)
 800abfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac02:	601a      	str	r2, [r3, #0]
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac0c:	f001 fdce 	bl	800c7ac <vPortExitCritical>
				return pdPASS;
 800ac10:	2301      	movs	r3, #1
 800ac12:	e069      	b.n	800ace8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d103      	bne.n	800ac22 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac1a:	f001 fdc7 	bl	800c7ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	e062      	b.n	800ace8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d106      	bne.n	800ac36 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac28:	f107 0310 	add.w	r3, r7, #16
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f000 fec5 	bl	800b9bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac32:	2301      	movs	r3, #1
 800ac34:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac36:	f001 fdb9 	bl	800c7ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac3a:	f000 fc0d 	bl	800b458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac3e:	f001 fd83 	bl	800c748 <vPortEnterCritical>
 800ac42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac44:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac48:	b25b      	sxtb	r3, r3
 800ac4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac4e:	d103      	bne.n	800ac58 <xQueueReceive+0x128>
 800ac50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac52:	2200      	movs	r2, #0
 800ac54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac5e:	b25b      	sxtb	r3, r3
 800ac60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac64:	d103      	bne.n	800ac6e <xQueueReceive+0x13e>
 800ac66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac6e:	f001 fd9d 	bl	800c7ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac72:	1d3a      	adds	r2, r7, #4
 800ac74:	f107 0310 	add.w	r3, r7, #16
 800ac78:	4611      	mov	r1, r2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 feb4 	bl	800b9e8 <xTaskCheckForTimeOut>
 800ac80:	4603      	mov	r3, r0
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d123      	bne.n	800acce <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ac88:	f000 f916 	bl	800aeb8 <prvIsQueueEmpty>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d017      	beq.n	800acc2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ac92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac94:	3324      	adds	r3, #36	@ 0x24
 800ac96:	687a      	ldr	r2, [r7, #4]
 800ac98:	4611      	mov	r1, r2
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 fdb0 	bl	800b800 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aca0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aca2:	f000 f8b7 	bl	800ae14 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aca6:	f000 fbe5 	bl	800b474 <xTaskResumeAll>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d189      	bne.n	800abc4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800acb0:	4b0f      	ldr	r3, [pc, #60]	@ (800acf0 <xQueueReceive+0x1c0>)
 800acb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	f3bf 8f6f 	isb	sy
 800acc0:	e780      	b.n	800abc4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800acc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acc4:	f000 f8a6 	bl	800ae14 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acc8:	f000 fbd4 	bl	800b474 <xTaskResumeAll>
 800accc:	e77a      	b.n	800abc4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800acce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acd0:	f000 f8a0 	bl	800ae14 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acd4:	f000 fbce 	bl	800b474 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800acda:	f000 f8ed 	bl	800aeb8 <prvIsQueueEmpty>
 800acde:	4603      	mov	r3, r0
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f43f af6f 	beq.w	800abc4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ace6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3730      	adds	r7, #48	@ 0x30
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	e000ed04 	.word	0xe000ed04

0800acf4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b086      	sub	sp, #24
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ad00:	2300      	movs	r3, #0
 800ad02:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad08:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d10d      	bne.n	800ad2e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d14d      	bne.n	800adb6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	689b      	ldr	r3, [r3, #8]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 ffc6 	bl	800bcb0 <xTaskPriorityDisinherit>
 800ad24:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	2200      	movs	r2, #0
 800ad2a:	609a      	str	r2, [r3, #8]
 800ad2c:	e043      	b.n	800adb6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d119      	bne.n	800ad68 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	6858      	ldr	r0, [r3, #4]
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	68b9      	ldr	r1, [r7, #8]
 800ad40:	f00f fce7 	bl	801a712 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	685a      	ldr	r2, [r3, #4]
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad4c:	441a      	add	r2, r3
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d32b      	bcc.n	800adb6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	605a      	str	r2, [r3, #4]
 800ad66:	e026      	b.n	800adb6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	68d8      	ldr	r0, [r3, #12]
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad70:	461a      	mov	r2, r3
 800ad72:	68b9      	ldr	r1, [r7, #8]
 800ad74:	f00f fccd 	bl	801a712 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	68da      	ldr	r2, [r3, #12]
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad80:	425b      	negs	r3, r3
 800ad82:	441a      	add	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68da      	ldr	r2, [r3, #12]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d207      	bcs.n	800ada4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	689a      	ldr	r2, [r3, #8]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad9c:	425b      	negs	r3, r3
 800ad9e:	441a      	add	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d105      	bne.n	800adb6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	3b01      	subs	r3, #1
 800adb4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	1c5a      	adds	r2, r3, #1
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800adbe:	697b      	ldr	r3, [r7, #20]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3718      	adds	r7, #24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b082      	sub	sp, #8
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add6:	2b00      	cmp	r3, #0
 800add8:	d018      	beq.n	800ae0c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ade2:	441a      	add	r2, r3
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68da      	ldr	r2, [r3, #12]
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d303      	bcc.n	800adfc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681a      	ldr	r2, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	68d9      	ldr	r1, [r3, #12]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae04:	461a      	mov	r2, r3
 800ae06:	6838      	ldr	r0, [r7, #0]
 800ae08:	f00f fc83 	bl	801a712 <memcpy>
	}
}
 800ae0c:	bf00      	nop
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ae1c:	f001 fc94 	bl	800c748 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae26:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae28:	e011      	b.n	800ae4e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d012      	beq.n	800ae58 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	3324      	adds	r3, #36	@ 0x24
 800ae36:	4618      	mov	r0, r3
 800ae38:	f000 fd34 	bl	800b8a4 <xTaskRemoveFromEventList>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d001      	beq.n	800ae46 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ae42:	f000 fe35 	bl	800bab0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ae46:	7bfb      	ldrb	r3, [r7, #15]
 800ae48:	3b01      	subs	r3, #1
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ae4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	dce9      	bgt.n	800ae2a <prvUnlockQueue+0x16>
 800ae56:	e000      	b.n	800ae5a <prvUnlockQueue+0x46>
					break;
 800ae58:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	22ff      	movs	r2, #255	@ 0xff
 800ae5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ae62:	f001 fca3 	bl	800c7ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ae66:	f001 fc6f 	bl	800c748 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae70:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae72:	e011      	b.n	800ae98 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d012      	beq.n	800aea2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	3310      	adds	r3, #16
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 fd0f 	bl	800b8a4 <xTaskRemoveFromEventList>
 800ae86:	4603      	mov	r3, r0
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ae8c:	f000 fe10 	bl	800bab0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ae90:	7bbb      	ldrb	r3, [r7, #14]
 800ae92:	3b01      	subs	r3, #1
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ae98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	dce9      	bgt.n	800ae74 <prvUnlockQueue+0x60>
 800aea0:	e000      	b.n	800aea4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aea2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	22ff      	movs	r2, #255	@ 0xff
 800aea8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aeac:	f001 fc7e 	bl	800c7ac <vPortExitCritical>
}
 800aeb0:	bf00      	nop
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aec0:	f001 fc42 	bl	800c748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aecc:	2301      	movs	r3, #1
 800aece:	60fb      	str	r3, [r7, #12]
 800aed0:	e001      	b.n	800aed6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aed2:	2300      	movs	r3, #0
 800aed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aed6:	f001 fc69 	bl	800c7ac <vPortExitCritical>

	return xReturn;
 800aeda:	68fb      	ldr	r3, [r7, #12]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	3710      	adds	r7, #16
 800aee0:	46bd      	mov	sp, r7
 800aee2:	bd80      	pop	{r7, pc}

0800aee4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aeec:	f001 fc2c 	bl	800c748 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aef8:	429a      	cmp	r2, r3
 800aefa:	d102      	bne.n	800af02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800aefc:	2301      	movs	r3, #1
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	e001      	b.n	800af06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af02:	2300      	movs	r3, #0
 800af04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af06:	f001 fc51 	bl	800c7ac <vPortExitCritical>

	return xReturn;
 800af0a:	68fb      	ldr	r3, [r7, #12]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800af14:	b480      	push	{r7}
 800af16:	b085      	sub	sp, #20
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af1e:	2300      	movs	r3, #0
 800af20:	60fb      	str	r3, [r7, #12]
 800af22:	e014      	b.n	800af4e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800af24:	4a0f      	ldr	r2, [pc, #60]	@ (800af64 <vQueueAddToRegistry+0x50>)
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10b      	bne.n	800af48 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800af30:	490c      	ldr	r1, [pc, #48]	@ (800af64 <vQueueAddToRegistry+0x50>)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	683a      	ldr	r2, [r7, #0]
 800af36:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800af3a:	4a0a      	ldr	r2, [pc, #40]	@ (800af64 <vQueueAddToRegistry+0x50>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	00db      	lsls	r3, r3, #3
 800af40:	4413      	add	r3, r2
 800af42:	687a      	ldr	r2, [r7, #4]
 800af44:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800af46:	e006      	b.n	800af56 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3301      	adds	r3, #1
 800af4c:	60fb      	str	r3, [r7, #12]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2b07      	cmp	r3, #7
 800af52:	d9e7      	bls.n	800af24 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	3714      	adds	r7, #20
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	20005310 	.word	0x20005310

0800af68 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	60f8      	str	r0, [r7, #12]
 800af70:	60b9      	str	r1, [r7, #8]
 800af72:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800af78:	f001 fbe6 	bl	800c748 <vPortEnterCritical>
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af82:	b25b      	sxtb	r3, r3
 800af84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af88:	d103      	bne.n	800af92 <vQueueWaitForMessageRestricted+0x2a>
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	2200      	movs	r2, #0
 800af8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af98:	b25b      	sxtb	r3, r3
 800af9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af9e:	d103      	bne.n	800afa8 <vQueueWaitForMessageRestricted+0x40>
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800afa8:	f001 fc00 	bl	800c7ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800afac:	697b      	ldr	r3, [r7, #20]
 800afae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d106      	bne.n	800afc2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	3324      	adds	r3, #36	@ 0x24
 800afb8:	687a      	ldr	r2, [r7, #4]
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f000 fc45 	bl	800b84c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800afc2:	6978      	ldr	r0, [r7, #20]
 800afc4:	f7ff ff26 	bl	800ae14 <prvUnlockQueue>
	}
 800afc8:	bf00      	nop
 800afca:	3718      	adds	r7, #24
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b08e      	sub	sp, #56	@ 0x38
 800afd4:	af04      	add	r7, sp, #16
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	607a      	str	r2, [r7, #4]
 800afdc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800afde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10b      	bne.n	800affc <xTaskCreateStatic+0x2c>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	623b      	str	r3, [r7, #32]
}
 800aff6:	bf00      	nop
 800aff8:	bf00      	nop
 800affa:	e7fd      	b.n	800aff8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800affc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10b      	bne.n	800b01a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	61fb      	str	r3, [r7, #28]
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop
 800b018:	e7fd      	b.n	800b016 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b01a:	235c      	movs	r3, #92	@ 0x5c
 800b01c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2b5c      	cmp	r3, #92	@ 0x5c
 800b022:	d00b      	beq.n	800b03c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b028:	f383 8811 	msr	BASEPRI, r3
 800b02c:	f3bf 8f6f 	isb	sy
 800b030:	f3bf 8f4f 	dsb	sy
 800b034:	61bb      	str	r3, [r7, #24]
}
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	e7fd      	b.n	800b038 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b03c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b03e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b040:	2b00      	cmp	r3, #0
 800b042:	d01e      	beq.n	800b082 <xTaskCreateStatic+0xb2>
 800b044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01b      	beq.n	800b082 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b04a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b050:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b052:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b056:	2202      	movs	r2, #2
 800b058:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b05c:	2300      	movs	r3, #0
 800b05e:	9303      	str	r3, [sp, #12]
 800b060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b062:	9302      	str	r3, [sp, #8]
 800b064:	f107 0314 	add.w	r3, r7, #20
 800b068:	9301      	str	r3, [sp, #4]
 800b06a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	687a      	ldr	r2, [r7, #4]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 f850 	bl	800b11a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b07a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b07c:	f000 f8de 	bl	800b23c <prvAddNewTaskToReadyList>
 800b080:	e001      	b.n	800b086 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b082:	2300      	movs	r3, #0
 800b084:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b086:	697b      	ldr	r3, [r7, #20]
	}
 800b088:	4618      	mov	r0, r3
 800b08a:	3728      	adds	r7, #40	@ 0x28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b090:	b580      	push	{r7, lr}
 800b092:	b08c      	sub	sp, #48	@ 0x30
 800b094:	af04      	add	r7, sp, #16
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	603b      	str	r3, [r7, #0]
 800b09c:	4613      	mov	r3, r2
 800b09e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b0a0:	88fb      	ldrh	r3, [r7, #6]
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 fc71 	bl	800c98c <pvPortMalloc>
 800b0aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b0ac:	697b      	ldr	r3, [r7, #20]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00e      	beq.n	800b0d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b0b2:	205c      	movs	r0, #92	@ 0x5c
 800b0b4:	f001 fc6a 	bl	800c98c <pvPortMalloc>
 800b0b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d003      	beq.n	800b0c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
 800b0c2:	697a      	ldr	r2, [r7, #20]
 800b0c4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b0c6:	e005      	b.n	800b0d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b0c8:	6978      	ldr	r0, [r7, #20]
 800b0ca:	f001 fd2d 	bl	800cb28 <vPortFree>
 800b0ce:	e001      	b.n	800b0d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d017      	beq.n	800b10a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	2200      	movs	r2, #0
 800b0de:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b0e2:	88fa      	ldrh	r2, [r7, #6]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	9303      	str	r3, [sp, #12]
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	9302      	str	r3, [sp, #8]
 800b0ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ee:	9301      	str	r3, [sp, #4]
 800b0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0f2:	9300      	str	r3, [sp, #0]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	68b9      	ldr	r1, [r7, #8]
 800b0f8:	68f8      	ldr	r0, [r7, #12]
 800b0fa:	f000 f80e 	bl	800b11a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b0fe:	69f8      	ldr	r0, [r7, #28]
 800b100:	f000 f89c 	bl	800b23c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b104:	2301      	movs	r3, #1
 800b106:	61bb      	str	r3, [r7, #24]
 800b108:	e002      	b.n	800b110 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b10a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b10e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b110:	69bb      	ldr	r3, [r7, #24]
	}
 800b112:	4618      	mov	r0, r3
 800b114:	3720      	adds	r7, #32
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b088      	sub	sp, #32
 800b11e:	af00      	add	r7, sp, #0
 800b120:	60f8      	str	r0, [r7, #12]
 800b122:	60b9      	str	r1, [r7, #8]
 800b124:	607a      	str	r2, [r7, #4]
 800b126:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b12a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	009b      	lsls	r3, r3, #2
 800b130:	461a      	mov	r2, r3
 800b132:	21a5      	movs	r1, #165	@ 0xa5
 800b134:	f00f fa24 	bl	801a580 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b142:	3b01      	subs	r3, #1
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	4413      	add	r3, r2
 800b148:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	f023 0307 	bic.w	r3, r3, #7
 800b150:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b152:	69bb      	ldr	r3, [r7, #24]
 800b154:	f003 0307 	and.w	r3, r3, #7
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00b      	beq.n	800b174 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b160:	f383 8811 	msr	BASEPRI, r3
 800b164:	f3bf 8f6f 	isb	sy
 800b168:	f3bf 8f4f 	dsb	sy
 800b16c:	617b      	str	r3, [r7, #20]
}
 800b16e:	bf00      	nop
 800b170:	bf00      	nop
 800b172:	e7fd      	b.n	800b170 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d01f      	beq.n	800b1ba <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b17a:	2300      	movs	r3, #0
 800b17c:	61fb      	str	r3, [r7, #28]
 800b17e:	e012      	b.n	800b1a6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	4413      	add	r3, r2
 800b186:	7819      	ldrb	r1, [r3, #0]
 800b188:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b18a:	69fb      	ldr	r3, [r7, #28]
 800b18c:	4413      	add	r3, r2
 800b18e:	3334      	adds	r3, #52	@ 0x34
 800b190:	460a      	mov	r2, r1
 800b192:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	4413      	add	r3, r2
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d006      	beq.n	800b1ae <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	61fb      	str	r3, [r7, #28]
 800b1a6:	69fb      	ldr	r3, [r7, #28]
 800b1a8:	2b0f      	cmp	r3, #15
 800b1aa:	d9e9      	bls.n	800b180 <prvInitialiseNewTask+0x66>
 800b1ac:	e000      	b.n	800b1b0 <prvInitialiseNewTask+0x96>
			{
				break;
 800b1ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b1b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b1b8:	e003      	b.n	800b1c2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b1ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c4:	2b37      	cmp	r3, #55	@ 0x37
 800b1c6:	d901      	bls.n	800b1cc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b1c8:	2337      	movs	r3, #55	@ 0x37
 800b1ca:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b1cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b1d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b1d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1da:	2200      	movs	r2, #0
 800b1dc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7ff f966 	bl	800a4b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ea:	3318      	adds	r3, #24
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff f961 	bl	800a4b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b1f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b200:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b204:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b206:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b20a:	2200      	movs	r2, #0
 800b20c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b20e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b210:	2200      	movs	r2, #0
 800b212:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	68f9      	ldr	r1, [r7, #12]
 800b21a:	69b8      	ldr	r0, [r7, #24]
 800b21c:	f001 f966 	bl	800c4ec <pxPortInitialiseStack>
 800b220:	4602      	mov	r2, r0
 800b222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b224:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b226:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b22c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b22e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b230:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b232:	bf00      	nop
 800b234:	3720      	adds	r7, #32
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b082      	sub	sp, #8
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b244:	f001 fa80 	bl	800c748 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b248:	4b2d      	ldr	r3, [pc, #180]	@ (800b300 <prvAddNewTaskToReadyList+0xc4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	3301      	adds	r3, #1
 800b24e:	4a2c      	ldr	r2, [pc, #176]	@ (800b300 <prvAddNewTaskToReadyList+0xc4>)
 800b250:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b252:	4b2c      	ldr	r3, [pc, #176]	@ (800b304 <prvAddNewTaskToReadyList+0xc8>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d109      	bne.n	800b26e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b25a:	4a2a      	ldr	r2, [pc, #168]	@ (800b304 <prvAddNewTaskToReadyList+0xc8>)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b260:	4b27      	ldr	r3, [pc, #156]	@ (800b300 <prvAddNewTaskToReadyList+0xc4>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d110      	bne.n	800b28a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b268:	f000 fc46 	bl	800baf8 <prvInitialiseTaskLists>
 800b26c:	e00d      	b.n	800b28a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b26e:	4b26      	ldr	r3, [pc, #152]	@ (800b308 <prvAddNewTaskToReadyList+0xcc>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d109      	bne.n	800b28a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b276:	4b23      	ldr	r3, [pc, #140]	@ (800b304 <prvAddNewTaskToReadyList+0xc8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b280:	429a      	cmp	r2, r3
 800b282:	d802      	bhi.n	800b28a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b284:	4a1f      	ldr	r2, [pc, #124]	@ (800b304 <prvAddNewTaskToReadyList+0xc8>)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b28a:	4b20      	ldr	r3, [pc, #128]	@ (800b30c <prvAddNewTaskToReadyList+0xd0>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	3301      	adds	r3, #1
 800b290:	4a1e      	ldr	r2, [pc, #120]	@ (800b30c <prvAddNewTaskToReadyList+0xd0>)
 800b292:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b294:	4b1d      	ldr	r3, [pc, #116]	@ (800b30c <prvAddNewTaskToReadyList+0xd0>)
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2a0:	4b1b      	ldr	r3, [pc, #108]	@ (800b310 <prvAddNewTaskToReadyList+0xd4>)
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d903      	bls.n	800b2b0 <prvAddNewTaskToReadyList+0x74>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ac:	4a18      	ldr	r2, [pc, #96]	@ (800b310 <prvAddNewTaskToReadyList+0xd4>)
 800b2ae:	6013      	str	r3, [r2, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4a15      	ldr	r2, [pc, #84]	@ (800b314 <prvAddNewTaskToReadyList+0xd8>)
 800b2be:	441a      	add	r2, r3
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	f7ff f901 	bl	800a4ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b2cc:	f001 fa6e 	bl	800c7ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b2d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b308 <prvAddNewTaskToReadyList+0xcc>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00e      	beq.n	800b2f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b2d8:	4b0a      	ldr	r3, [pc, #40]	@ (800b304 <prvAddNewTaskToReadyList+0xc8>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d207      	bcs.n	800b2f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b2e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b318 <prvAddNewTaskToReadyList+0xdc>)
 800b2e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b2f6:	bf00      	nop
 800b2f8:	3708      	adds	r7, #8
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20005824 	.word	0x20005824
 800b304:	20005350 	.word	0x20005350
 800b308:	20005830 	.word	0x20005830
 800b30c:	20005840 	.word	0x20005840
 800b310:	2000582c 	.word	0x2000582c
 800b314:	20005354 	.word	0x20005354
 800b318:	e000ed04 	.word	0xe000ed04

0800b31c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b324:	2300      	movs	r3, #0
 800b326:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d018      	beq.n	800b360 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b32e:	4b14      	ldr	r3, [pc, #80]	@ (800b380 <vTaskDelay+0x64>)
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00b      	beq.n	800b34e <vTaskDelay+0x32>
	__asm volatile
 800b336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	60bb      	str	r3, [r7, #8]
}
 800b348:	bf00      	nop
 800b34a:	bf00      	nop
 800b34c:	e7fd      	b.n	800b34a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b34e:	f000 f883 	bl	800b458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b352:	2100      	movs	r1, #0
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fd1b 	bl	800bd90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b35a:	f000 f88b 	bl	800b474 <xTaskResumeAll>
 800b35e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d107      	bne.n	800b376 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b366:	4b07      	ldr	r3, [pc, #28]	@ (800b384 <vTaskDelay+0x68>)
 800b368:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b36c:	601a      	str	r2, [r3, #0]
 800b36e:	f3bf 8f4f 	dsb	sy
 800b372:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	2000584c 	.word	0x2000584c
 800b384:	e000ed04 	.word	0xe000ed04

0800b388 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b08a      	sub	sp, #40	@ 0x28
 800b38c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b38e:	2300      	movs	r3, #0
 800b390:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b392:	2300      	movs	r3, #0
 800b394:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b396:	463a      	mov	r2, r7
 800b398:	1d39      	adds	r1, r7, #4
 800b39a:	f107 0308 	add.w	r3, r7, #8
 800b39e:	4618      	mov	r0, r3
 800b3a0:	f7ff f834 	bl	800a40c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68ba      	ldr	r2, [r7, #8]
 800b3aa:	9202      	str	r2, [sp, #8]
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	9300      	str	r3, [sp, #0]
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	460a      	mov	r2, r1
 800b3b6:	4922      	ldr	r1, [pc, #136]	@ (800b440 <vTaskStartScheduler+0xb8>)
 800b3b8:	4822      	ldr	r0, [pc, #136]	@ (800b444 <vTaskStartScheduler+0xbc>)
 800b3ba:	f7ff fe09 	bl	800afd0 <xTaskCreateStatic>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	4a21      	ldr	r2, [pc, #132]	@ (800b448 <vTaskStartScheduler+0xc0>)
 800b3c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b3c4:	4b20      	ldr	r3, [pc, #128]	@ (800b448 <vTaskStartScheduler+0xc0>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d002      	beq.n	800b3d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	617b      	str	r3, [r7, #20]
 800b3d0:	e001      	b.n	800b3d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b3d6:	697b      	ldr	r3, [r7, #20]
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d102      	bne.n	800b3e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b3dc:	f000 fd2c 	bl	800be38 <xTimerCreateTimerTask>
 800b3e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d116      	bne.n	800b416 <vTaskStartScheduler+0x8e>
	__asm volatile
 800b3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3ec:	f383 8811 	msr	BASEPRI, r3
 800b3f0:	f3bf 8f6f 	isb	sy
 800b3f4:	f3bf 8f4f 	dsb	sy
 800b3f8:	613b      	str	r3, [r7, #16]
}
 800b3fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b3fc:	4b13      	ldr	r3, [pc, #76]	@ (800b44c <vTaskStartScheduler+0xc4>)
 800b3fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b402:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b404:	4b12      	ldr	r3, [pc, #72]	@ (800b450 <vTaskStartScheduler+0xc8>)
 800b406:	2201      	movs	r2, #1
 800b408:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b40a:	4b12      	ldr	r3, [pc, #72]	@ (800b454 <vTaskStartScheduler+0xcc>)
 800b40c:	2200      	movs	r2, #0
 800b40e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b410:	f001 f8f6 	bl	800c600 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b414:	e00f      	b.n	800b436 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b416:	697b      	ldr	r3, [r7, #20]
 800b418:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b41c:	d10b      	bne.n	800b436 <vTaskStartScheduler+0xae>
	__asm volatile
 800b41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b422:	f383 8811 	msr	BASEPRI, r3
 800b426:	f3bf 8f6f 	isb	sy
 800b42a:	f3bf 8f4f 	dsb	sy
 800b42e:	60fb      	str	r3, [r7, #12]
}
 800b430:	bf00      	nop
 800b432:	bf00      	nop
 800b434:	e7fd      	b.n	800b432 <vTaskStartScheduler+0xaa>
}
 800b436:	bf00      	nop
 800b438:	3718      	adds	r7, #24
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	0801b408 	.word	0x0801b408
 800b444:	0800bac9 	.word	0x0800bac9
 800b448:	20005848 	.word	0x20005848
 800b44c:	20005844 	.word	0x20005844
 800b450:	20005830 	.word	0x20005830
 800b454:	20005828 	.word	0x20005828

0800b458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b458:	b480      	push	{r7}
 800b45a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b45c:	4b04      	ldr	r3, [pc, #16]	@ (800b470 <vTaskSuspendAll+0x18>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	4a03      	ldr	r2, [pc, #12]	@ (800b470 <vTaskSuspendAll+0x18>)
 800b464:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b466:	bf00      	nop
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	2000584c 	.word	0x2000584c

0800b474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b47a:	2300      	movs	r3, #0
 800b47c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b47e:	2300      	movs	r3, #0
 800b480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b482:	4b42      	ldr	r3, [pc, #264]	@ (800b58c <xTaskResumeAll+0x118>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10b      	bne.n	800b4a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	603b      	str	r3, [r7, #0]
}
 800b49c:	bf00      	nop
 800b49e:	bf00      	nop
 800b4a0:	e7fd      	b.n	800b49e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b4a2:	f001 f951 	bl	800c748 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b4a6:	4b39      	ldr	r3, [pc, #228]	@ (800b58c <xTaskResumeAll+0x118>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	4a37      	ldr	r2, [pc, #220]	@ (800b58c <xTaskResumeAll+0x118>)
 800b4ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4b0:	4b36      	ldr	r3, [pc, #216]	@ (800b58c <xTaskResumeAll+0x118>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d162      	bne.n	800b57e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b4b8:	4b35      	ldr	r3, [pc, #212]	@ (800b590 <xTaskResumeAll+0x11c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d05e      	beq.n	800b57e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b4c0:	e02f      	b.n	800b522 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4c2:	4b34      	ldr	r3, [pc, #208]	@ (800b594 <xTaskResumeAll+0x120>)
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	68db      	ldr	r3, [r3, #12]
 800b4c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	3318      	adds	r3, #24
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7ff f85a 	bl	800a588 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3304      	adds	r3, #4
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff f855 	bl	800a588 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e2:	4b2d      	ldr	r3, [pc, #180]	@ (800b598 <xTaskResumeAll+0x124>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d903      	bls.n	800b4f2 <xTaskResumeAll+0x7e>
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ee:	4a2a      	ldr	r2, [pc, #168]	@ (800b598 <xTaskResumeAll+0x124>)
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4a27      	ldr	r2, [pc, #156]	@ (800b59c <xTaskResumeAll+0x128>)
 800b500:	441a      	add	r2, r3
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	3304      	adds	r3, #4
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fe ffe0 	bl	800a4ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b512:	4b23      	ldr	r3, [pc, #140]	@ (800b5a0 <xTaskResumeAll+0x12c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b518:	429a      	cmp	r2, r3
 800b51a:	d302      	bcc.n	800b522 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b51c:	4b21      	ldr	r3, [pc, #132]	@ (800b5a4 <xTaskResumeAll+0x130>)
 800b51e:	2201      	movs	r2, #1
 800b520:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b522:	4b1c      	ldr	r3, [pc, #112]	@ (800b594 <xTaskResumeAll+0x120>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d1cb      	bne.n	800b4c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d001      	beq.n	800b534 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b530:	f000 fb80 	bl	800bc34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b534:	4b1c      	ldr	r3, [pc, #112]	@ (800b5a8 <xTaskResumeAll+0x134>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d010      	beq.n	800b562 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b540:	f000 f846 	bl	800b5d0 <xTaskIncrementTick>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d002      	beq.n	800b550 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b54a:	4b16      	ldr	r3, [pc, #88]	@ (800b5a4 <xTaskResumeAll+0x130>)
 800b54c:	2201      	movs	r2, #1
 800b54e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	3b01      	subs	r3, #1
 800b554:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f1      	bne.n	800b540 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b55c:	4b12      	ldr	r3, [pc, #72]	@ (800b5a8 <xTaskResumeAll+0x134>)
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b562:	4b10      	ldr	r3, [pc, #64]	@ (800b5a4 <xTaskResumeAll+0x130>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d009      	beq.n	800b57e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b56a:	2301      	movs	r3, #1
 800b56c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b56e:	4b0f      	ldr	r3, [pc, #60]	@ (800b5ac <xTaskResumeAll+0x138>)
 800b570:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b574:	601a      	str	r2, [r3, #0]
 800b576:	f3bf 8f4f 	dsb	sy
 800b57a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b57e:	f001 f915 	bl	800c7ac <vPortExitCritical>

	return xAlreadyYielded;
 800b582:	68bb      	ldr	r3, [r7, #8]
}
 800b584:	4618      	mov	r0, r3
 800b586:	3710      	adds	r7, #16
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	2000584c 	.word	0x2000584c
 800b590:	20005824 	.word	0x20005824
 800b594:	200057e4 	.word	0x200057e4
 800b598:	2000582c 	.word	0x2000582c
 800b59c:	20005354 	.word	0x20005354
 800b5a0:	20005350 	.word	0x20005350
 800b5a4:	20005838 	.word	0x20005838
 800b5a8:	20005834 	.word	0x20005834
 800b5ac:	e000ed04 	.word	0xe000ed04

0800b5b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b5b0:	b480      	push	{r7}
 800b5b2:	b083      	sub	sp, #12
 800b5b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b5b6:	4b05      	ldr	r3, [pc, #20]	@ (800b5cc <xTaskGetTickCount+0x1c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b5bc:	687b      	ldr	r3, [r7, #4]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr
 800b5ca:	bf00      	nop
 800b5cc:	20005828 	.word	0x20005828

0800b5d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b086      	sub	sp, #24
 800b5d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5da:	4b4f      	ldr	r3, [pc, #316]	@ (800b718 <xTaskIncrementTick+0x148>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	f040 8090 	bne.w	800b704 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b5e4:	4b4d      	ldr	r3, [pc, #308]	@ (800b71c <xTaskIncrementTick+0x14c>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	3301      	adds	r3, #1
 800b5ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b5ec:	4a4b      	ldr	r2, [pc, #300]	@ (800b71c <xTaskIncrementTick+0x14c>)
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d121      	bne.n	800b63c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b5f8:	4b49      	ldr	r3, [pc, #292]	@ (800b720 <xTaskIncrementTick+0x150>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d00b      	beq.n	800b61a <xTaskIncrementTick+0x4a>
	__asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	603b      	str	r3, [r7, #0]
}
 800b614:	bf00      	nop
 800b616:	bf00      	nop
 800b618:	e7fd      	b.n	800b616 <xTaskIncrementTick+0x46>
 800b61a:	4b41      	ldr	r3, [pc, #260]	@ (800b720 <xTaskIncrementTick+0x150>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	60fb      	str	r3, [r7, #12]
 800b620:	4b40      	ldr	r3, [pc, #256]	@ (800b724 <xTaskIncrementTick+0x154>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4a3e      	ldr	r2, [pc, #248]	@ (800b720 <xTaskIncrementTick+0x150>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	4a3e      	ldr	r2, [pc, #248]	@ (800b724 <xTaskIncrementTick+0x154>)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	4b3e      	ldr	r3, [pc, #248]	@ (800b728 <xTaskIncrementTick+0x158>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	4a3c      	ldr	r2, [pc, #240]	@ (800b728 <xTaskIncrementTick+0x158>)
 800b636:	6013      	str	r3, [r2, #0]
 800b638:	f000 fafc 	bl	800bc34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b63c:	4b3b      	ldr	r3, [pc, #236]	@ (800b72c <xTaskIncrementTick+0x15c>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	693a      	ldr	r2, [r7, #16]
 800b642:	429a      	cmp	r2, r3
 800b644:	d349      	bcc.n	800b6da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b646:	4b36      	ldr	r3, [pc, #216]	@ (800b720 <xTaskIncrementTick+0x150>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d104      	bne.n	800b65a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b650:	4b36      	ldr	r3, [pc, #216]	@ (800b72c <xTaskIncrementTick+0x15c>)
 800b652:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b656:	601a      	str	r2, [r3, #0]
					break;
 800b658:	e03f      	b.n	800b6da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b65a:	4b31      	ldr	r3, [pc, #196]	@ (800b720 <xTaskIncrementTick+0x150>)
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	68db      	ldr	r3, [r3, #12]
 800b660:	68db      	ldr	r3, [r3, #12]
 800b662:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b66a:	693a      	ldr	r2, [r7, #16]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	429a      	cmp	r2, r3
 800b670:	d203      	bcs.n	800b67a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b672:	4a2e      	ldr	r2, [pc, #184]	@ (800b72c <xTaskIncrementTick+0x15c>)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b678:	e02f      	b.n	800b6da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	3304      	adds	r3, #4
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe ff82 	bl	800a588 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d004      	beq.n	800b696 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	3318      	adds	r3, #24
 800b690:	4618      	mov	r0, r3
 800b692:	f7fe ff79 	bl	800a588 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b69a:	4b25      	ldr	r3, [pc, #148]	@ (800b730 <xTaskIncrementTick+0x160>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	d903      	bls.n	800b6aa <xTaskIncrementTick+0xda>
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6a6:	4a22      	ldr	r2, [pc, #136]	@ (800b730 <xTaskIncrementTick+0x160>)
 800b6a8:	6013      	str	r3, [r2, #0]
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	009b      	lsls	r3, r3, #2
 800b6b2:	4413      	add	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b734 <xTaskIncrementTick+0x164>)
 800b6b8:	441a      	add	r2, r3
 800b6ba:	68bb      	ldr	r3, [r7, #8]
 800b6bc:	3304      	adds	r3, #4
 800b6be:	4619      	mov	r1, r3
 800b6c0:	4610      	mov	r0, r2
 800b6c2:	f7fe ff04 	bl	800a4ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6ca:	4b1b      	ldr	r3, [pc, #108]	@ (800b738 <xTaskIncrementTick+0x168>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d3b8      	bcc.n	800b646 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b6d8:	e7b5      	b.n	800b646 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b6da:	4b17      	ldr	r3, [pc, #92]	@ (800b738 <xTaskIncrementTick+0x168>)
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e0:	4914      	ldr	r1, [pc, #80]	@ (800b734 <xTaskIncrementTick+0x164>)
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	009b      	lsls	r3, r3, #2
 800b6e6:	4413      	add	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	440b      	add	r3, r1
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d901      	bls.n	800b6f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b6f6:	4b11      	ldr	r3, [pc, #68]	@ (800b73c <xTaskIncrementTick+0x16c>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d007      	beq.n	800b70e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b6fe:	2301      	movs	r3, #1
 800b700:	617b      	str	r3, [r7, #20]
 800b702:	e004      	b.n	800b70e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b704:	4b0e      	ldr	r3, [pc, #56]	@ (800b740 <xTaskIncrementTick+0x170>)
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	3301      	adds	r3, #1
 800b70a:	4a0d      	ldr	r2, [pc, #52]	@ (800b740 <xTaskIncrementTick+0x170>)
 800b70c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b70e:	697b      	ldr	r3, [r7, #20]
}
 800b710:	4618      	mov	r0, r3
 800b712:	3718      	adds	r7, #24
 800b714:	46bd      	mov	sp, r7
 800b716:	bd80      	pop	{r7, pc}
 800b718:	2000584c 	.word	0x2000584c
 800b71c:	20005828 	.word	0x20005828
 800b720:	200057dc 	.word	0x200057dc
 800b724:	200057e0 	.word	0x200057e0
 800b728:	2000583c 	.word	0x2000583c
 800b72c:	20005844 	.word	0x20005844
 800b730:	2000582c 	.word	0x2000582c
 800b734:	20005354 	.word	0x20005354
 800b738:	20005350 	.word	0x20005350
 800b73c:	20005838 	.word	0x20005838
 800b740:	20005834 	.word	0x20005834

0800b744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b744:	b480      	push	{r7}
 800b746:	b085      	sub	sp, #20
 800b748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b74a:	4b28      	ldr	r3, [pc, #160]	@ (800b7ec <vTaskSwitchContext+0xa8>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d003      	beq.n	800b75a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b752:	4b27      	ldr	r3, [pc, #156]	@ (800b7f0 <vTaskSwitchContext+0xac>)
 800b754:	2201      	movs	r2, #1
 800b756:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b758:	e042      	b.n	800b7e0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800b75a:	4b25      	ldr	r3, [pc, #148]	@ (800b7f0 <vTaskSwitchContext+0xac>)
 800b75c:	2200      	movs	r2, #0
 800b75e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b760:	4b24      	ldr	r3, [pc, #144]	@ (800b7f4 <vTaskSwitchContext+0xb0>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	60fb      	str	r3, [r7, #12]
 800b766:	e011      	b.n	800b78c <vTaskSwitchContext+0x48>
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d10b      	bne.n	800b786 <vTaskSwitchContext+0x42>
	__asm volatile
 800b76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b772:	f383 8811 	msr	BASEPRI, r3
 800b776:	f3bf 8f6f 	isb	sy
 800b77a:	f3bf 8f4f 	dsb	sy
 800b77e:	607b      	str	r3, [r7, #4]
}
 800b780:	bf00      	nop
 800b782:	bf00      	nop
 800b784:	e7fd      	b.n	800b782 <vTaskSwitchContext+0x3e>
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	3b01      	subs	r3, #1
 800b78a:	60fb      	str	r3, [r7, #12]
 800b78c:	491a      	ldr	r1, [pc, #104]	@ (800b7f8 <vTaskSwitchContext+0xb4>)
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	4613      	mov	r3, r2
 800b792:	009b      	lsls	r3, r3, #2
 800b794:	4413      	add	r3, r2
 800b796:	009b      	lsls	r3, r3, #2
 800b798:	440b      	add	r3, r1
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d0e3      	beq.n	800b768 <vTaskSwitchContext+0x24>
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	4613      	mov	r3, r2
 800b7a4:	009b      	lsls	r3, r3, #2
 800b7a6:	4413      	add	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4a13      	ldr	r2, [pc, #76]	@ (800b7f8 <vTaskSwitchContext+0xb4>)
 800b7ac:	4413      	add	r3, r2
 800b7ae:	60bb      	str	r3, [r7, #8]
 800b7b0:	68bb      	ldr	r3, [r7, #8]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	685a      	ldr	r2, [r3, #4]
 800b7b6:	68bb      	ldr	r3, [r7, #8]
 800b7b8:	605a      	str	r2, [r3, #4]
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d104      	bne.n	800b7d0 <vTaskSwitchContext+0x8c>
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	68bb      	ldr	r3, [r7, #8]
 800b7ce:	605a      	str	r2, [r3, #4]
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	68db      	ldr	r3, [r3, #12]
 800b7d6:	4a09      	ldr	r2, [pc, #36]	@ (800b7fc <vTaskSwitchContext+0xb8>)
 800b7d8:	6013      	str	r3, [r2, #0]
 800b7da:	4a06      	ldr	r2, [pc, #24]	@ (800b7f4 <vTaskSwitchContext+0xb0>)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	6013      	str	r3, [r2, #0]
}
 800b7e0:	bf00      	nop
 800b7e2:	3714      	adds	r7, #20
 800b7e4:	46bd      	mov	sp, r7
 800b7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ea:	4770      	bx	lr
 800b7ec:	2000584c 	.word	0x2000584c
 800b7f0:	20005838 	.word	0x20005838
 800b7f4:	2000582c 	.word	0x2000582c
 800b7f8:	20005354 	.word	0x20005354
 800b7fc:	20005350 	.word	0x20005350

0800b800 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b084      	sub	sp, #16
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
 800b808:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10b      	bne.n	800b828 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b814:	f383 8811 	msr	BASEPRI, r3
 800b818:	f3bf 8f6f 	isb	sy
 800b81c:	f3bf 8f4f 	dsb	sy
 800b820:	60fb      	str	r3, [r7, #12]
}
 800b822:	bf00      	nop
 800b824:	bf00      	nop
 800b826:	e7fd      	b.n	800b824 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b828:	4b07      	ldr	r3, [pc, #28]	@ (800b848 <vTaskPlaceOnEventList+0x48>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3318      	adds	r3, #24
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f7fe fe70 	bl	800a516 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b836:	2101      	movs	r1, #1
 800b838:	6838      	ldr	r0, [r7, #0]
 800b83a:	f000 faa9 	bl	800bd90 <prvAddCurrentTaskToDelayedList>
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}
 800b846:	bf00      	nop
 800b848:	20005350 	.word	0x20005350

0800b84c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b086      	sub	sp, #24
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	60b9      	str	r1, [r7, #8]
 800b856:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10b      	bne.n	800b876 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b862:	f383 8811 	msr	BASEPRI, r3
 800b866:	f3bf 8f6f 	isb	sy
 800b86a:	f3bf 8f4f 	dsb	sy
 800b86e:	617b      	str	r3, [r7, #20]
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	e7fd      	b.n	800b872 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b876:	4b0a      	ldr	r3, [pc, #40]	@ (800b8a0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	3318      	adds	r3, #24
 800b87c:	4619      	mov	r1, r3
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7fe fe25 	bl	800a4ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b88a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b88e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b890:	6879      	ldr	r1, [r7, #4]
 800b892:	68b8      	ldr	r0, [r7, #8]
 800b894:	f000 fa7c 	bl	800bd90 <prvAddCurrentTaskToDelayedList>
	}
 800b898:	bf00      	nop
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20005350 	.word	0x20005350

0800b8a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b086      	sub	sp, #24
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	68db      	ldr	r3, [r3, #12]
 800b8b0:	68db      	ldr	r3, [r3, #12]
 800b8b2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8be:	f383 8811 	msr	BASEPRI, r3
 800b8c2:	f3bf 8f6f 	isb	sy
 800b8c6:	f3bf 8f4f 	dsb	sy
 800b8ca:	60fb      	str	r3, [r7, #12]
}
 800b8cc:	bf00      	nop
 800b8ce:	bf00      	nop
 800b8d0:	e7fd      	b.n	800b8ce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	3318      	adds	r3, #24
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7fe fe56 	bl	800a588 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8dc:	4b1d      	ldr	r3, [pc, #116]	@ (800b954 <xTaskRemoveFromEventList+0xb0>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d11d      	bne.n	800b920 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	3304      	adds	r3, #4
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f7fe fe4d 	bl	800a588 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8f2:	4b19      	ldr	r3, [pc, #100]	@ (800b958 <xTaskRemoveFromEventList+0xb4>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	429a      	cmp	r2, r3
 800b8f8:	d903      	bls.n	800b902 <xTaskRemoveFromEventList+0x5e>
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8fe:	4a16      	ldr	r2, [pc, #88]	@ (800b958 <xTaskRemoveFromEventList+0xb4>)
 800b900:	6013      	str	r3, [r2, #0]
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b906:	4613      	mov	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	4413      	add	r3, r2
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4a13      	ldr	r2, [pc, #76]	@ (800b95c <xTaskRemoveFromEventList+0xb8>)
 800b910:	441a      	add	r2, r3
 800b912:	693b      	ldr	r3, [r7, #16]
 800b914:	3304      	adds	r3, #4
 800b916:	4619      	mov	r1, r3
 800b918:	4610      	mov	r0, r2
 800b91a:	f7fe fdd8 	bl	800a4ce <vListInsertEnd>
 800b91e:	e005      	b.n	800b92c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	3318      	adds	r3, #24
 800b924:	4619      	mov	r1, r3
 800b926:	480e      	ldr	r0, [pc, #56]	@ (800b960 <xTaskRemoveFromEventList+0xbc>)
 800b928:	f7fe fdd1 	bl	800a4ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b930:	4b0c      	ldr	r3, [pc, #48]	@ (800b964 <xTaskRemoveFromEventList+0xc0>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b936:	429a      	cmp	r2, r3
 800b938:	d905      	bls.n	800b946 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b93a:	2301      	movs	r3, #1
 800b93c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b93e:	4b0a      	ldr	r3, [pc, #40]	@ (800b968 <xTaskRemoveFromEventList+0xc4>)
 800b940:	2201      	movs	r2, #1
 800b942:	601a      	str	r2, [r3, #0]
 800b944:	e001      	b.n	800b94a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b946:	2300      	movs	r3, #0
 800b948:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b94a:	697b      	ldr	r3, [r7, #20]
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	3718      	adds	r7, #24
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	2000584c 	.word	0x2000584c
 800b958:	2000582c 	.word	0x2000582c
 800b95c:	20005354 	.word	0x20005354
 800b960:	200057e4 	.word	0x200057e4
 800b964:	20005350 	.word	0x20005350
 800b968:	20005838 	.word	0x20005838

0800b96c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d10b      	bne.n	800b992 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800b97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b97e:	f383 8811 	msr	BASEPRI, r3
 800b982:	f3bf 8f6f 	isb	sy
 800b986:	f3bf 8f4f 	dsb	sy
 800b98a:	60fb      	str	r3, [r7, #12]
}
 800b98c:	bf00      	nop
 800b98e:	bf00      	nop
 800b990:	e7fd      	b.n	800b98e <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800b992:	f000 fed9 	bl	800c748 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b996:	4b07      	ldr	r3, [pc, #28]	@ (800b9b4 <vTaskSetTimeOutState+0x48>)
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800b99e:	4b06      	ldr	r3, [pc, #24]	@ (800b9b8 <vTaskSetTimeOutState+0x4c>)
 800b9a0:	681a      	ldr	r2, [r3, #0]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800b9a6:	f000 ff01 	bl	800c7ac <vPortExitCritical>
}
 800b9aa:	bf00      	nop
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	2000583c 	.word	0x2000583c
 800b9b8:	20005828 	.word	0x20005828

0800b9bc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b083      	sub	sp, #12
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b9c4:	4b06      	ldr	r3, [pc, #24]	@ (800b9e0 <vTaskInternalSetTimeOutState+0x24>)
 800b9c6:	681a      	ldr	r2, [r3, #0]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b9cc:	4b05      	ldr	r3, [pc, #20]	@ (800b9e4 <vTaskInternalSetTimeOutState+0x28>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	605a      	str	r2, [r3, #4]
}
 800b9d4:	bf00      	nop
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr
 800b9e0:	2000583c 	.word	0x2000583c
 800b9e4:	20005828 	.word	0x20005828

0800b9e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10b      	bne.n	800ba10 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9fc:	f383 8811 	msr	BASEPRI, r3
 800ba00:	f3bf 8f6f 	isb	sy
 800ba04:	f3bf 8f4f 	dsb	sy
 800ba08:	613b      	str	r3, [r7, #16]
}
 800ba0a:	bf00      	nop
 800ba0c:	bf00      	nop
 800ba0e:	e7fd      	b.n	800ba0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d10b      	bne.n	800ba2e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800ba16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba1a:	f383 8811 	msr	BASEPRI, r3
 800ba1e:	f3bf 8f6f 	isb	sy
 800ba22:	f3bf 8f4f 	dsb	sy
 800ba26:	60fb      	str	r3, [r7, #12]
}
 800ba28:	bf00      	nop
 800ba2a:	bf00      	nop
 800ba2c:	e7fd      	b.n	800ba2a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800ba2e:	f000 fe8b 	bl	800c748 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ba32:	4b1d      	ldr	r3, [pc, #116]	@ (800baa8 <xTaskCheckForTimeOut+0xc0>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ba4a:	d102      	bne.n	800ba52 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61fb      	str	r3, [r7, #28]
 800ba50:	e023      	b.n	800ba9a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	4b15      	ldr	r3, [pc, #84]	@ (800baac <xTaskCheckForTimeOut+0xc4>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d007      	beq.n	800ba6e <xTaskCheckForTimeOut+0x86>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	685b      	ldr	r3, [r3, #4]
 800ba62:	69ba      	ldr	r2, [r7, #24]
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d302      	bcc.n	800ba6e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ba68:	2301      	movs	r3, #1
 800ba6a:	61fb      	str	r3, [r7, #28]
 800ba6c:	e015      	b.n	800ba9a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	697a      	ldr	r2, [r7, #20]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d20b      	bcs.n	800ba90 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	681a      	ldr	r2, [r3, #0]
 800ba7c:	697b      	ldr	r3, [r7, #20]
 800ba7e:	1ad2      	subs	r2, r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f7ff ff99 	bl	800b9bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	61fb      	str	r3, [r7, #28]
 800ba8e:	e004      	b.n	800ba9a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	2200      	movs	r2, #0
 800ba94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ba96:	2301      	movs	r3, #1
 800ba98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ba9a:	f000 fe87 	bl	800c7ac <vPortExitCritical>

	return xReturn;
 800ba9e:	69fb      	ldr	r3, [r7, #28]
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20005828 	.word	0x20005828
 800baac:	2000583c 	.word	0x2000583c

0800bab0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bab0:	b480      	push	{r7}
 800bab2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bab4:	4b03      	ldr	r3, [pc, #12]	@ (800bac4 <vTaskMissedYield+0x14>)
 800bab6:	2201      	movs	r2, #1
 800bab8:	601a      	str	r2, [r3, #0]
}
 800baba:	bf00      	nop
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr
 800bac4:	20005838 	.word	0x20005838

0800bac8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bad0:	f000 f852 	bl	800bb78 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bad4:	4b06      	ldr	r3, [pc, #24]	@ (800baf0 <prvIdleTask+0x28>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d9f9      	bls.n	800bad0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800badc:	4b05      	ldr	r3, [pc, #20]	@ (800baf4 <prvIdleTask+0x2c>)
 800bade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bae2:	601a      	str	r2, [r3, #0]
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800baec:	e7f0      	b.n	800bad0 <prvIdleTask+0x8>
 800baee:	bf00      	nop
 800baf0:	20005354 	.word	0x20005354
 800baf4:	e000ed04 	.word	0xe000ed04

0800baf8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
 800bb02:	e00c      	b.n	800bb1e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4a12      	ldr	r2, [pc, #72]	@ (800bb58 <prvInitialiseTaskLists+0x60>)
 800bb10:	4413      	add	r3, r2
 800bb12:	4618      	mov	r0, r3
 800bb14:	f7fe fcae 	bl	800a474 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	607b      	str	r3, [r7, #4]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b37      	cmp	r3, #55	@ 0x37
 800bb22:	d9ef      	bls.n	800bb04 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bb24:	480d      	ldr	r0, [pc, #52]	@ (800bb5c <prvInitialiseTaskLists+0x64>)
 800bb26:	f7fe fca5 	bl	800a474 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bb2a:	480d      	ldr	r0, [pc, #52]	@ (800bb60 <prvInitialiseTaskLists+0x68>)
 800bb2c:	f7fe fca2 	bl	800a474 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bb30:	480c      	ldr	r0, [pc, #48]	@ (800bb64 <prvInitialiseTaskLists+0x6c>)
 800bb32:	f7fe fc9f 	bl	800a474 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bb36:	480c      	ldr	r0, [pc, #48]	@ (800bb68 <prvInitialiseTaskLists+0x70>)
 800bb38:	f7fe fc9c 	bl	800a474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bb3c:	480b      	ldr	r0, [pc, #44]	@ (800bb6c <prvInitialiseTaskLists+0x74>)
 800bb3e:	f7fe fc99 	bl	800a474 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bb42:	4b0b      	ldr	r3, [pc, #44]	@ (800bb70 <prvInitialiseTaskLists+0x78>)
 800bb44:	4a05      	ldr	r2, [pc, #20]	@ (800bb5c <prvInitialiseTaskLists+0x64>)
 800bb46:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bb48:	4b0a      	ldr	r3, [pc, #40]	@ (800bb74 <prvInitialiseTaskLists+0x7c>)
 800bb4a:	4a05      	ldr	r2, [pc, #20]	@ (800bb60 <prvInitialiseTaskLists+0x68>)
 800bb4c:	601a      	str	r2, [r3, #0]
}
 800bb4e:	bf00      	nop
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20005354 	.word	0x20005354
 800bb5c:	200057b4 	.word	0x200057b4
 800bb60:	200057c8 	.word	0x200057c8
 800bb64:	200057e4 	.word	0x200057e4
 800bb68:	200057f8 	.word	0x200057f8
 800bb6c:	20005810 	.word	0x20005810
 800bb70:	200057dc 	.word	0x200057dc
 800bb74:	200057e0 	.word	0x200057e0

0800bb78 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b082      	sub	sp, #8
 800bb7c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bb7e:	e019      	b.n	800bbb4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bb80:	f000 fde2 	bl	800c748 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb84:	4b10      	ldr	r3, [pc, #64]	@ (800bbc8 <prvCheckTasksWaitingTermination+0x50>)
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	68db      	ldr	r3, [r3, #12]
 800bb8a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	3304      	adds	r3, #4
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fcf9 	bl	800a588 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bb96:	4b0d      	ldr	r3, [pc, #52]	@ (800bbcc <prvCheckTasksWaitingTermination+0x54>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	4a0b      	ldr	r2, [pc, #44]	@ (800bbcc <prvCheckTasksWaitingTermination+0x54>)
 800bb9e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bba0:	4b0b      	ldr	r3, [pc, #44]	@ (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	3b01      	subs	r3, #1
 800bba6:	4a0a      	ldr	r2, [pc, #40]	@ (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bba8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bbaa:	f000 fdff 	bl	800c7ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f810 	bl	800bbd4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bbb4:	4b06      	ldr	r3, [pc, #24]	@ (800bbd0 <prvCheckTasksWaitingTermination+0x58>)
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1e1      	bne.n	800bb80 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bbbc:	bf00      	nop
 800bbbe:	bf00      	nop
 800bbc0:	3708      	adds	r7, #8
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	200057f8 	.word	0x200057f8
 800bbcc:	20005824 	.word	0x20005824
 800bbd0:	2000580c 	.word	0x2000580c

0800bbd4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d108      	bne.n	800bbf8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 ff9c 	bl	800cb28 <vPortFree>
				vPortFree( pxTCB );
 800bbf0:	6878      	ldr	r0, [r7, #4]
 800bbf2:	f000 ff99 	bl	800cb28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bbf6:	e019      	b.n	800bc2c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bbfe:	2b01      	cmp	r3, #1
 800bc00:	d103      	bne.n	800bc0a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 ff90 	bl	800cb28 <vPortFree>
	}
 800bc08:	e010      	b.n	800bc2c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800bc10:	2b02      	cmp	r3, #2
 800bc12:	d00b      	beq.n	800bc2c <prvDeleteTCB+0x58>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	60fb      	str	r3, [r7, #12]
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	e7fd      	b.n	800bc28 <prvDeleteTCB+0x54>
	}
 800bc2c:	bf00      	nop
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}

0800bc34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800bc6c <prvResetNextTaskUnblockTime+0x38>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d104      	bne.n	800bc4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bc44:	4b0a      	ldr	r3, [pc, #40]	@ (800bc70 <prvResetNextTaskUnblockTime+0x3c>)
 800bc46:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bc4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bc4c:	e008      	b.n	800bc60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc4e:	4b07      	ldr	r3, [pc, #28]	@ (800bc6c <prvResetNextTaskUnblockTime+0x38>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	68db      	ldr	r3, [r3, #12]
 800bc56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	4a04      	ldr	r2, [pc, #16]	@ (800bc70 <prvResetNextTaskUnblockTime+0x3c>)
 800bc5e:	6013      	str	r3, [r2, #0]
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	200057dc 	.word	0x200057dc
 800bc70:	20005844 	.word	0x20005844

0800bc74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bc7a:	4b0b      	ldr	r3, [pc, #44]	@ (800bca8 <xTaskGetSchedulerState+0x34>)
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d102      	bne.n	800bc88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bc82:	2301      	movs	r3, #1
 800bc84:	607b      	str	r3, [r7, #4]
 800bc86:	e008      	b.n	800bc9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc88:	4b08      	ldr	r3, [pc, #32]	@ (800bcac <xTaskGetSchedulerState+0x38>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d102      	bne.n	800bc96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bc90:	2302      	movs	r3, #2
 800bc92:	607b      	str	r3, [r7, #4]
 800bc94:	e001      	b.n	800bc9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bc96:	2300      	movs	r3, #0
 800bc98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bc9a:	687b      	ldr	r3, [r7, #4]
	}
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	370c      	adds	r7, #12
 800bca0:	46bd      	mov	sp, r7
 800bca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca6:	4770      	bx	lr
 800bca8:	20005830 	.word	0x20005830
 800bcac:	2000584c 	.word	0x2000584c

0800bcb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b086      	sub	sp, #24
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d058      	beq.n	800bd78 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bcc6:	4b2f      	ldr	r3, [pc, #188]	@ (800bd84 <xTaskPriorityDisinherit+0xd4>)
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	693a      	ldr	r2, [r7, #16]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d00b      	beq.n	800bce8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bcd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcd4:	f383 8811 	msr	BASEPRI, r3
 800bcd8:	f3bf 8f6f 	isb	sy
 800bcdc:	f3bf 8f4f 	dsb	sy
 800bce0:	60fb      	str	r3, [r7, #12]
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	e7fd      	b.n	800bce4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bce8:	693b      	ldr	r3, [r7, #16]
 800bcea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10b      	bne.n	800bd08 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bcf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcf4:	f383 8811 	msr	BASEPRI, r3
 800bcf8:	f3bf 8f6f 	isb	sy
 800bcfc:	f3bf 8f4f 	dsb	sy
 800bd00:	60bb      	str	r3, [r7, #8]
}
 800bd02:	bf00      	nop
 800bd04:	bf00      	nop
 800bd06:	e7fd      	b.n	800bd04 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd0c:	1e5a      	subs	r2, r3, #1
 800bd0e:	693b      	ldr	r3, [r7, #16]
 800bd10:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d02c      	beq.n	800bd78 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d128      	bne.n	800bd78 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	3304      	adds	r3, #4
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f7fe fc2c 	bl	800a588 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd3c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd48:	4b0f      	ldr	r3, [pc, #60]	@ (800bd88 <xTaskPriorityDisinherit+0xd8>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	429a      	cmp	r2, r3
 800bd4e:	d903      	bls.n	800bd58 <xTaskPriorityDisinherit+0xa8>
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd54:	4a0c      	ldr	r2, [pc, #48]	@ (800bd88 <xTaskPriorityDisinherit+0xd8>)
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	693b      	ldr	r3, [r7, #16]
 800bd5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd5c:	4613      	mov	r3, r2
 800bd5e:	009b      	lsls	r3, r3, #2
 800bd60:	4413      	add	r3, r2
 800bd62:	009b      	lsls	r3, r3, #2
 800bd64:	4a09      	ldr	r2, [pc, #36]	@ (800bd8c <xTaskPriorityDisinherit+0xdc>)
 800bd66:	441a      	add	r2, r3
 800bd68:	693b      	ldr	r3, [r7, #16]
 800bd6a:	3304      	adds	r3, #4
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	4610      	mov	r0, r2
 800bd70:	f7fe fbad 	bl	800a4ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bd74:	2301      	movs	r3, #1
 800bd76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bd78:	697b      	ldr	r3, [r7, #20]
	}
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	3718      	adds	r7, #24
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	bf00      	nop
 800bd84:	20005350 	.word	0x20005350
 800bd88:	2000582c 	.word	0x2000582c
 800bd8c:	20005354 	.word	0x20005354

0800bd90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd9a:	4b21      	ldr	r3, [pc, #132]	@ (800be20 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bda0:	4b20      	ldr	r3, [pc, #128]	@ (800be24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	3304      	adds	r3, #4
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7fe fbee 	bl	800a588 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdb2:	d10a      	bne.n	800bdca <prvAddCurrentTaskToDelayedList+0x3a>
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d007      	beq.n	800bdca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdba:	4b1a      	ldr	r3, [pc, #104]	@ (800be24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	3304      	adds	r3, #4
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4819      	ldr	r0, [pc, #100]	@ (800be28 <prvAddCurrentTaskToDelayedList+0x98>)
 800bdc4:	f7fe fb83 	bl	800a4ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdc8:	e026      	b.n	800be18 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4413      	add	r3, r2
 800bdd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdd2:	4b14      	ldr	r3, [pc, #80]	@ (800be24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	68ba      	ldr	r2, [r7, #8]
 800bdd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdda:	68ba      	ldr	r2, [r7, #8]
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d209      	bcs.n	800bdf6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bde2:	4b12      	ldr	r3, [pc, #72]	@ (800be2c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	4b0f      	ldr	r3, [pc, #60]	@ (800be24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	3304      	adds	r3, #4
 800bdec:	4619      	mov	r1, r3
 800bdee:	4610      	mov	r0, r2
 800bdf0:	f7fe fb91 	bl	800a516 <vListInsert>
}
 800bdf4:	e010      	b.n	800be18 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdf6:	4b0e      	ldr	r3, [pc, #56]	@ (800be30 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4b0a      	ldr	r3, [pc, #40]	@ (800be24 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	3304      	adds	r3, #4
 800be00:	4619      	mov	r1, r3
 800be02:	4610      	mov	r0, r2
 800be04:	f7fe fb87 	bl	800a516 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800be08:	4b0a      	ldr	r3, [pc, #40]	@ (800be34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d202      	bcs.n	800be18 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be12:	4a08      	ldr	r2, [pc, #32]	@ (800be34 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	6013      	str	r3, [r2, #0]
}
 800be18:	bf00      	nop
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	20005828 	.word	0x20005828
 800be24:	20005350 	.word	0x20005350
 800be28:	20005810 	.word	0x20005810
 800be2c:	200057e0 	.word	0x200057e0
 800be30:	200057dc 	.word	0x200057dc
 800be34:	20005844 	.word	0x20005844

0800be38 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b08a      	sub	sp, #40	@ 0x28
 800be3c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be3e:	2300      	movs	r3, #0
 800be40:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be42:	f000 fb13 	bl	800c46c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be46:	4b1d      	ldr	r3, [pc, #116]	@ (800bebc <xTimerCreateTimerTask+0x84>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d021      	beq.n	800be92 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be4e:	2300      	movs	r3, #0
 800be50:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be52:	2300      	movs	r3, #0
 800be54:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be56:	1d3a      	adds	r2, r7, #4
 800be58:	f107 0108 	add.w	r1, r7, #8
 800be5c:	f107 030c 	add.w	r3, r7, #12
 800be60:	4618      	mov	r0, r3
 800be62:	f7fe faed 	bl	800a440 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be66:	6879      	ldr	r1, [r7, #4]
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	9202      	str	r2, [sp, #8]
 800be6e:	9301      	str	r3, [sp, #4]
 800be70:	2302      	movs	r3, #2
 800be72:	9300      	str	r3, [sp, #0]
 800be74:	2300      	movs	r3, #0
 800be76:	460a      	mov	r2, r1
 800be78:	4911      	ldr	r1, [pc, #68]	@ (800bec0 <xTimerCreateTimerTask+0x88>)
 800be7a:	4812      	ldr	r0, [pc, #72]	@ (800bec4 <xTimerCreateTimerTask+0x8c>)
 800be7c:	f7ff f8a8 	bl	800afd0 <xTaskCreateStatic>
 800be80:	4603      	mov	r3, r0
 800be82:	4a11      	ldr	r2, [pc, #68]	@ (800bec8 <xTimerCreateTimerTask+0x90>)
 800be84:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be86:	4b10      	ldr	r3, [pc, #64]	@ (800bec8 <xTimerCreateTimerTask+0x90>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be8e:	2301      	movs	r3, #1
 800be90:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10b      	bne.n	800beb0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	613b      	str	r3, [r7, #16]
}
 800beaa:	bf00      	nop
 800beac:	bf00      	nop
 800beae:	e7fd      	b.n	800beac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800beb0:	697b      	ldr	r3, [r7, #20]
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3718      	adds	r7, #24
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
 800beba:	bf00      	nop
 800bebc:	20005880 	.word	0x20005880
 800bec0:	0801b410 	.word	0x0801b410
 800bec4:	0800c005 	.word	0x0800c005
 800bec8:	20005884 	.word	0x20005884

0800becc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b08a      	sub	sp, #40	@ 0x28
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
 800bed8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800beda:	2300      	movs	r3, #0
 800bedc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d10b      	bne.n	800befc <xTimerGenericCommand+0x30>
	__asm volatile
 800bee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	623b      	str	r3, [r7, #32]
}
 800bef6:	bf00      	nop
 800bef8:	bf00      	nop
 800befa:	e7fd      	b.n	800bef8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800befc:	4b19      	ldr	r3, [pc, #100]	@ (800bf64 <xTimerGenericCommand+0x98>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d02a      	beq.n	800bf5a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	dc18      	bgt.n	800bf48 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf16:	f7ff fead 	bl	800bc74 <xTaskGetSchedulerState>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d109      	bne.n	800bf34 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf20:	4b10      	ldr	r3, [pc, #64]	@ (800bf64 <xTimerGenericCommand+0x98>)
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	f107 0110 	add.w	r1, r7, #16
 800bf28:	2300      	movs	r3, #0
 800bf2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf2c:	f7fe fc60 	bl	800a7f0 <xQueueGenericSend>
 800bf30:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf32:	e012      	b.n	800bf5a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf34:	4b0b      	ldr	r3, [pc, #44]	@ (800bf64 <xTimerGenericCommand+0x98>)
 800bf36:	6818      	ldr	r0, [r3, #0]
 800bf38:	f107 0110 	add.w	r1, r7, #16
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	2200      	movs	r2, #0
 800bf40:	f7fe fc56 	bl	800a7f0 <xQueueGenericSend>
 800bf44:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf46:	e008      	b.n	800bf5a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf48:	4b06      	ldr	r3, [pc, #24]	@ (800bf64 <xTimerGenericCommand+0x98>)
 800bf4a:	6818      	ldr	r0, [r3, #0]
 800bf4c:	f107 0110 	add.w	r1, r7, #16
 800bf50:	2300      	movs	r3, #0
 800bf52:	683a      	ldr	r2, [r7, #0]
 800bf54:	f7fe fd4e 	bl	800a9f4 <xQueueGenericSendFromISR>
 800bf58:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf5c:	4618      	mov	r0, r3
 800bf5e:	3728      	adds	r7, #40	@ 0x28
 800bf60:	46bd      	mov	sp, r7
 800bf62:	bd80      	pop	{r7, pc}
 800bf64:	20005880 	.word	0x20005880

0800bf68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf68:	b580      	push	{r7, lr}
 800bf6a:	b088      	sub	sp, #32
 800bf6c:	af02      	add	r7, sp, #8
 800bf6e:	6078      	str	r0, [r7, #4]
 800bf70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf72:	4b23      	ldr	r3, [pc, #140]	@ (800c000 <prvProcessExpiredTimer+0x98>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	68db      	ldr	r3, [r3, #12]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	3304      	adds	r3, #4
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fe fb01 	bl	800a588 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf8c:	f003 0304 	and.w	r3, r3, #4
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d023      	beq.n	800bfdc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf94:	697b      	ldr	r3, [r7, #20]
 800bf96:	699a      	ldr	r2, [r3, #24]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	18d1      	adds	r1, r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	683a      	ldr	r2, [r7, #0]
 800bfa0:	6978      	ldr	r0, [r7, #20]
 800bfa2:	f000 f8d5 	bl	800c150 <prvInsertTimerInActiveList>
 800bfa6:	4603      	mov	r3, r0
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d020      	beq.n	800bfee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bfac:	2300      	movs	r3, #0
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	687a      	ldr	r2, [r7, #4]
 800bfb4:	2100      	movs	r1, #0
 800bfb6:	6978      	ldr	r0, [r7, #20]
 800bfb8:	f7ff ff88 	bl	800becc <xTimerGenericCommand>
 800bfbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d114      	bne.n	800bfee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bfc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	60fb      	str	r3, [r7, #12]
}
 800bfd6:	bf00      	nop
 800bfd8:	bf00      	nop
 800bfda:	e7fd      	b.n	800bfd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfdc:	697b      	ldr	r3, [r7, #20]
 800bfde:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfe2:	f023 0301 	bic.w	r3, r3, #1
 800bfe6:	b2da      	uxtb	r2, r3
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfee:	697b      	ldr	r3, [r7, #20]
 800bff0:	6a1b      	ldr	r3, [r3, #32]
 800bff2:	6978      	ldr	r0, [r7, #20]
 800bff4:	4798      	blx	r3
}
 800bff6:	bf00      	nop
 800bff8:	3718      	adds	r7, #24
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	20005878 	.word	0x20005878

0800c004 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c00c:	f107 0308 	add.w	r3, r7, #8
 800c010:	4618      	mov	r0, r3
 800c012:	f000 f859 	bl	800c0c8 <prvGetNextExpireTime>
 800c016:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	4619      	mov	r1, r3
 800c01c:	68f8      	ldr	r0, [r7, #12]
 800c01e:	f000 f805 	bl	800c02c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c022:	f000 f8d7 	bl	800c1d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c026:	bf00      	nop
 800c028:	e7f0      	b.n	800c00c <prvTimerTask+0x8>
	...

0800c02c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
 800c034:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c036:	f7ff fa0f 	bl	800b458 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c03a:	f107 0308 	add.w	r3, r7, #8
 800c03e:	4618      	mov	r0, r3
 800c040:	f000 f866 	bl	800c110 <prvSampleTimeNow>
 800c044:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d130      	bne.n	800c0ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <prvProcessTimerOrBlockTask+0x3c>
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	429a      	cmp	r2, r3
 800c058:	d806      	bhi.n	800c068 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c05a:	f7ff fa0b 	bl	800b474 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c05e:	68f9      	ldr	r1, [r7, #12]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f7ff ff81 	bl	800bf68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c066:	e024      	b.n	800c0b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c068:	683b      	ldr	r3, [r7, #0]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d008      	beq.n	800c080 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c06e:	4b13      	ldr	r3, [pc, #76]	@ (800c0bc <prvProcessTimerOrBlockTask+0x90>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d101      	bne.n	800c07c <prvProcessTimerOrBlockTask+0x50>
 800c078:	2301      	movs	r3, #1
 800c07a:	e000      	b.n	800c07e <prvProcessTimerOrBlockTask+0x52>
 800c07c:	2300      	movs	r3, #0
 800c07e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c080:	4b0f      	ldr	r3, [pc, #60]	@ (800c0c0 <prvProcessTimerOrBlockTask+0x94>)
 800c082:	6818      	ldr	r0, [r3, #0]
 800c084:	687a      	ldr	r2, [r7, #4]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	1ad3      	subs	r3, r2, r3
 800c08a:	683a      	ldr	r2, [r7, #0]
 800c08c:	4619      	mov	r1, r3
 800c08e:	f7fe ff6b 	bl	800af68 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c092:	f7ff f9ef 	bl	800b474 <xTaskResumeAll>
 800c096:	4603      	mov	r3, r0
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d10a      	bne.n	800c0b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c09c:	4b09      	ldr	r3, [pc, #36]	@ (800c0c4 <prvProcessTimerOrBlockTask+0x98>)
 800c09e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0a2:	601a      	str	r2, [r3, #0]
 800c0a4:	f3bf 8f4f 	dsb	sy
 800c0a8:	f3bf 8f6f 	isb	sy
}
 800c0ac:	e001      	b.n	800c0b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c0ae:	f7ff f9e1 	bl	800b474 <xTaskResumeAll>
}
 800c0b2:	bf00      	nop
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	2000587c 	.word	0x2000587c
 800c0c0:	20005880 	.word	0x20005880
 800c0c4:	e000ed04 	.word	0xe000ed04

0800c0c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b085      	sub	sp, #20
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0d0:	4b0e      	ldr	r3, [pc, #56]	@ (800c10c <prvGetNextExpireTime+0x44>)
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d101      	bne.n	800c0de <prvGetNextExpireTime+0x16>
 800c0da:	2201      	movs	r2, #1
 800c0dc:	e000      	b.n	800c0e0 <prvGetNextExpireTime+0x18>
 800c0de:	2200      	movs	r2, #0
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d105      	bne.n	800c0f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0ec:	4b07      	ldr	r3, [pc, #28]	@ (800c10c <prvGetNextExpireTime+0x44>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	e001      	b.n	800c0fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3714      	adds	r7, #20
 800c102:	46bd      	mov	sp, r7
 800c104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c108:	4770      	bx	lr
 800c10a:	bf00      	nop
 800c10c:	20005878 	.word	0x20005878

0800c110 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b084      	sub	sp, #16
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c118:	f7ff fa4a 	bl	800b5b0 <xTaskGetTickCount>
 800c11c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c11e:	4b0b      	ldr	r3, [pc, #44]	@ (800c14c <prvSampleTimeNow+0x3c>)
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68fa      	ldr	r2, [r7, #12]
 800c124:	429a      	cmp	r2, r3
 800c126:	d205      	bcs.n	800c134 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c128:	f000 f93a 	bl	800c3a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	601a      	str	r2, [r3, #0]
 800c132:	e002      	b.n	800c13a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2200      	movs	r2, #0
 800c138:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c13a:	4a04      	ldr	r2, [pc, #16]	@ (800c14c <prvSampleTimeNow+0x3c>)
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c140:	68fb      	ldr	r3, [r7, #12]
}
 800c142:	4618      	mov	r0, r3
 800c144:	3710      	adds	r7, #16
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}
 800c14a:	bf00      	nop
 800c14c:	20005888 	.word	0x20005888

0800c150 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b086      	sub	sp, #24
 800c154:	af00      	add	r7, sp, #0
 800c156:	60f8      	str	r0, [r7, #12]
 800c158:	60b9      	str	r1, [r7, #8]
 800c15a:	607a      	str	r2, [r7, #4]
 800c15c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c15e:	2300      	movs	r3, #0
 800c160:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	429a      	cmp	r2, r3
 800c174:	d812      	bhi.n	800c19c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	1ad2      	subs	r2, r2, r3
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	699b      	ldr	r3, [r3, #24]
 800c180:	429a      	cmp	r2, r3
 800c182:	d302      	bcc.n	800c18a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c184:	2301      	movs	r3, #1
 800c186:	617b      	str	r3, [r7, #20]
 800c188:	e01b      	b.n	800c1c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c18a:	4b10      	ldr	r3, [pc, #64]	@ (800c1cc <prvInsertTimerInActiveList+0x7c>)
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3304      	adds	r3, #4
 800c192:	4619      	mov	r1, r3
 800c194:	4610      	mov	r0, r2
 800c196:	f7fe f9be 	bl	800a516 <vListInsert>
 800c19a:	e012      	b.n	800c1c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c19c:	687a      	ldr	r2, [r7, #4]
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	429a      	cmp	r2, r3
 800c1a2:	d206      	bcs.n	800c1b2 <prvInsertTimerInActiveList+0x62>
 800c1a4:	68ba      	ldr	r2, [r7, #8]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	d302      	bcc.n	800c1b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c1ac:	2301      	movs	r3, #1
 800c1ae:	617b      	str	r3, [r7, #20]
 800c1b0:	e007      	b.n	800c1c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1b2:	4b07      	ldr	r3, [pc, #28]	@ (800c1d0 <prvInsertTimerInActiveList+0x80>)
 800c1b4:	681a      	ldr	r2, [r3, #0]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	3304      	adds	r3, #4
 800c1ba:	4619      	mov	r1, r3
 800c1bc:	4610      	mov	r0, r2
 800c1be:	f7fe f9aa 	bl	800a516 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1c2:	697b      	ldr	r3, [r7, #20]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3718      	adds	r7, #24
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	2000587c 	.word	0x2000587c
 800c1d0:	20005878 	.word	0x20005878

0800c1d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08e      	sub	sp, #56	@ 0x38
 800c1d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1da:	e0ce      	b.n	800c37a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	da19      	bge.n	800c216 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1e2:	1d3b      	adds	r3, r7, #4
 800c1e4:	3304      	adds	r3, #4
 800c1e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d10b      	bne.n	800c206 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	61fb      	str	r3, [r7, #28]
}
 800c200:	bf00      	nop
 800c202:	bf00      	nop
 800c204:	e7fd      	b.n	800c202 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c20c:	6850      	ldr	r0, [r2, #4]
 800c20e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c210:	6892      	ldr	r2, [r2, #8]
 800c212:	4611      	mov	r1, r2
 800c214:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f2c0 80ae 	blt.w	800c37a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c222:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c224:	695b      	ldr	r3, [r3, #20]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d004      	beq.n	800c234 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c22c:	3304      	adds	r3, #4
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe f9aa 	bl	800a588 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c234:	463b      	mov	r3, r7
 800c236:	4618      	mov	r0, r3
 800c238:	f7ff ff6a 	bl	800c110 <prvSampleTimeNow>
 800c23c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2b09      	cmp	r3, #9
 800c242:	f200 8097 	bhi.w	800c374 <prvProcessReceivedCommands+0x1a0>
 800c246:	a201      	add	r2, pc, #4	@ (adr r2, 800c24c <prvProcessReceivedCommands+0x78>)
 800c248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c24c:	0800c275 	.word	0x0800c275
 800c250:	0800c275 	.word	0x0800c275
 800c254:	0800c275 	.word	0x0800c275
 800c258:	0800c2eb 	.word	0x0800c2eb
 800c25c:	0800c2ff 	.word	0x0800c2ff
 800c260:	0800c34b 	.word	0x0800c34b
 800c264:	0800c275 	.word	0x0800c275
 800c268:	0800c275 	.word	0x0800c275
 800c26c:	0800c2eb 	.word	0x0800c2eb
 800c270:	0800c2ff 	.word	0x0800c2ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c276:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c27a:	f043 0301 	orr.w	r3, r3, #1
 800c27e:	b2da      	uxtb	r2, r3
 800c280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c282:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	18d1      	adds	r1, r2, r3
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c294:	f7ff ff5c 	bl	800c150 <prvInsertTimerInActiveList>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d06c      	beq.n	800c378 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c29e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a0:	6a1b      	ldr	r3, [r3, #32]
 800c2a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ac:	f003 0304 	and.w	r3, r3, #4
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d061      	beq.n	800c378 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2b8:	699b      	ldr	r3, [r3, #24]
 800c2ba:	441a      	add	r2, r3
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9300      	str	r3, [sp, #0]
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	2100      	movs	r1, #0
 800c2c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2c6:	f7ff fe01 	bl	800becc <xTimerGenericCommand>
 800c2ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2cc:	6a3b      	ldr	r3, [r7, #32]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d152      	bne.n	800c378 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c2d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d6:	f383 8811 	msr	BASEPRI, r3
 800c2da:	f3bf 8f6f 	isb	sy
 800c2de:	f3bf 8f4f 	dsb	sy
 800c2e2:	61bb      	str	r3, [r7, #24]
}
 800c2e4:	bf00      	nop
 800c2e6:	bf00      	nop
 800c2e8:	e7fd      	b.n	800c2e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2f0:	f023 0301 	bic.w	r3, r3, #1
 800c2f4:	b2da      	uxtb	r2, r3
 800c2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c2fc:	e03d      	b.n	800c37a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c304:	f043 0301 	orr.w	r3, r3, #1
 800c308:	b2da      	uxtb	r2, r3
 800c30a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c30c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c310:	68ba      	ldr	r2, [r7, #8]
 800c312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c314:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c318:	699b      	ldr	r3, [r3, #24]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d10b      	bne.n	800c336 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c31e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c322:	f383 8811 	msr	BASEPRI, r3
 800c326:	f3bf 8f6f 	isb	sy
 800c32a:	f3bf 8f4f 	dsb	sy
 800c32e:	617b      	str	r3, [r7, #20]
}
 800c330:	bf00      	nop
 800c332:	bf00      	nop
 800c334:	e7fd      	b.n	800c332 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c338:	699a      	ldr	r2, [r3, #24]
 800c33a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33c:	18d1      	adds	r1, r2, r3
 800c33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c342:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c344:	f7ff ff04 	bl	800c150 <prvInsertTimerInActiveList>
					break;
 800c348:	e017      	b.n	800c37a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c34a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c34c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c350:	f003 0302 	and.w	r3, r3, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d103      	bne.n	800c360 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c358:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c35a:	f000 fbe5 	bl	800cb28 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c35e:	e00c      	b.n	800c37a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c360:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c362:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c366:	f023 0301 	bic.w	r3, r3, #1
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c372:	e002      	b.n	800c37a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c374:	bf00      	nop
 800c376:	e000      	b.n	800c37a <prvProcessReceivedCommands+0x1a6>
					break;
 800c378:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c37a:	4b08      	ldr	r3, [pc, #32]	@ (800c39c <prvProcessReceivedCommands+0x1c8>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	1d39      	adds	r1, r7, #4
 800c380:	2200      	movs	r2, #0
 800c382:	4618      	mov	r0, r3
 800c384:	f7fe fbd4 	bl	800ab30 <xQueueReceive>
 800c388:	4603      	mov	r3, r0
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	f47f af26 	bne.w	800c1dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c390:	bf00      	nop
 800c392:	bf00      	nop
 800c394:	3730      	adds	r7, #48	@ 0x30
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}
 800c39a:	bf00      	nop
 800c39c:	20005880 	.word	0x20005880

0800c3a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b088      	sub	sp, #32
 800c3a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c3a6:	e049      	b.n	800c43c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3a8:	4b2e      	ldr	r3, [pc, #184]	@ (800c464 <prvSwitchTimerLists+0xc4>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68db      	ldr	r3, [r3, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3b2:	4b2c      	ldr	r3, [pc, #176]	@ (800c464 <prvSwitchTimerLists+0xc4>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68db      	ldr	r3, [r3, #12]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7fe f8e1 	bl	800a588 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3d4:	f003 0304 	and.w	r3, r3, #4
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d02f      	beq.n	800c43c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	4413      	add	r3, r2
 800c3e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3e6:	68ba      	ldr	r2, [r7, #8]
 800c3e8:	693b      	ldr	r3, [r7, #16]
 800c3ea:	429a      	cmp	r2, r3
 800c3ec:	d90e      	bls.n	800c40c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	68ba      	ldr	r2, [r7, #8]
 800c3f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	68fa      	ldr	r2, [r7, #12]
 800c3f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3fa:	4b1a      	ldr	r3, [pc, #104]	@ (800c464 <prvSwitchTimerLists+0xc4>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	3304      	adds	r3, #4
 800c402:	4619      	mov	r1, r3
 800c404:	4610      	mov	r0, r2
 800c406:	f7fe f886 	bl	800a516 <vListInsert>
 800c40a:	e017      	b.n	800c43c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c40c:	2300      	movs	r3, #0
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	2300      	movs	r3, #0
 800c412:	693a      	ldr	r2, [r7, #16]
 800c414:	2100      	movs	r1, #0
 800c416:	68f8      	ldr	r0, [r7, #12]
 800c418:	f7ff fd58 	bl	800becc <xTimerGenericCommand>
 800c41c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d10b      	bne.n	800c43c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c428:	f383 8811 	msr	BASEPRI, r3
 800c42c:	f3bf 8f6f 	isb	sy
 800c430:	f3bf 8f4f 	dsb	sy
 800c434:	603b      	str	r3, [r7, #0]
}
 800c436:	bf00      	nop
 800c438:	bf00      	nop
 800c43a:	e7fd      	b.n	800c438 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c43c:	4b09      	ldr	r3, [pc, #36]	@ (800c464 <prvSwitchTimerLists+0xc4>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1b0      	bne.n	800c3a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c446:	4b07      	ldr	r3, [pc, #28]	@ (800c464 <prvSwitchTimerLists+0xc4>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c44c:	4b06      	ldr	r3, [pc, #24]	@ (800c468 <prvSwitchTimerLists+0xc8>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a04      	ldr	r2, [pc, #16]	@ (800c464 <prvSwitchTimerLists+0xc4>)
 800c452:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c454:	4a04      	ldr	r2, [pc, #16]	@ (800c468 <prvSwitchTimerLists+0xc8>)
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	6013      	str	r3, [r2, #0]
}
 800c45a:	bf00      	nop
 800c45c:	3718      	adds	r7, #24
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	20005878 	.word	0x20005878
 800c468:	2000587c 	.word	0x2000587c

0800c46c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c472:	f000 f969 	bl	800c748 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c476:	4b15      	ldr	r3, [pc, #84]	@ (800c4cc <prvCheckForValidListAndQueue+0x60>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d120      	bne.n	800c4c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c47e:	4814      	ldr	r0, [pc, #80]	@ (800c4d0 <prvCheckForValidListAndQueue+0x64>)
 800c480:	f7fd fff8 	bl	800a474 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c484:	4813      	ldr	r0, [pc, #76]	@ (800c4d4 <prvCheckForValidListAndQueue+0x68>)
 800c486:	f7fd fff5 	bl	800a474 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c48a:	4b13      	ldr	r3, [pc, #76]	@ (800c4d8 <prvCheckForValidListAndQueue+0x6c>)
 800c48c:	4a10      	ldr	r2, [pc, #64]	@ (800c4d0 <prvCheckForValidListAndQueue+0x64>)
 800c48e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c490:	4b12      	ldr	r3, [pc, #72]	@ (800c4dc <prvCheckForValidListAndQueue+0x70>)
 800c492:	4a10      	ldr	r2, [pc, #64]	@ (800c4d4 <prvCheckForValidListAndQueue+0x68>)
 800c494:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c496:	2300      	movs	r3, #0
 800c498:	9300      	str	r3, [sp, #0]
 800c49a:	4b11      	ldr	r3, [pc, #68]	@ (800c4e0 <prvCheckForValidListAndQueue+0x74>)
 800c49c:	4a11      	ldr	r2, [pc, #68]	@ (800c4e4 <prvCheckForValidListAndQueue+0x78>)
 800c49e:	2110      	movs	r1, #16
 800c4a0:	200a      	movs	r0, #10
 800c4a2:	f7fe f905 	bl	800a6b0 <xQueueGenericCreateStatic>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	4a08      	ldr	r2, [pc, #32]	@ (800c4cc <prvCheckForValidListAndQueue+0x60>)
 800c4aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c4ac:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <prvCheckForValidListAndQueue+0x60>)
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d005      	beq.n	800c4c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4b4:	4b05      	ldr	r3, [pc, #20]	@ (800c4cc <prvCheckForValidListAndQueue+0x60>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	490b      	ldr	r1, [pc, #44]	@ (800c4e8 <prvCheckForValidListAndQueue+0x7c>)
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fe fd2a 	bl	800af14 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4c0:	f000 f974 	bl	800c7ac <vPortExitCritical>
}
 800c4c4:	bf00      	nop
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	bd80      	pop	{r7, pc}
 800c4ca:	bf00      	nop
 800c4cc:	20005880 	.word	0x20005880
 800c4d0:	20005850 	.word	0x20005850
 800c4d4:	20005864 	.word	0x20005864
 800c4d8:	20005878 	.word	0x20005878
 800c4dc:	2000587c 	.word	0x2000587c
 800c4e0:	2000592c 	.word	0x2000592c
 800c4e4:	2000588c 	.word	0x2000588c
 800c4e8:	0801b418 	.word	0x0801b418

0800c4ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	3b04      	subs	r3, #4
 800c4fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3b04      	subs	r3, #4
 800c50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	f023 0201 	bic.w	r2, r3, #1
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	3b04      	subs	r3, #4
 800c51a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c51c:	4a0c      	ldr	r2, [pc, #48]	@ (800c550 <pxPortInitialiseStack+0x64>)
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	3b14      	subs	r3, #20
 800c526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c528:	687a      	ldr	r2, [r7, #4]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	3b04      	subs	r3, #4
 800c532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f06f 0202 	mvn.w	r2, #2
 800c53a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	3b20      	subs	r3, #32
 800c540:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c542:	68fb      	ldr	r3, [r7, #12]
}
 800c544:	4618      	mov	r0, r3
 800c546:	3714      	adds	r7, #20
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	0800c555 	.word	0x0800c555

0800c554 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c554:	b480      	push	{r7}
 800c556:	b085      	sub	sp, #20
 800c558:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c55e:	4b13      	ldr	r3, [pc, #76]	@ (800c5ac <prvTaskExitError+0x58>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c566:	d00b      	beq.n	800c580 <prvTaskExitError+0x2c>
	__asm volatile
 800c568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c56c:	f383 8811 	msr	BASEPRI, r3
 800c570:	f3bf 8f6f 	isb	sy
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	60fb      	str	r3, [r7, #12]
}
 800c57a:	bf00      	nop
 800c57c:	bf00      	nop
 800c57e:	e7fd      	b.n	800c57c <prvTaskExitError+0x28>
	__asm volatile
 800c580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c584:	f383 8811 	msr	BASEPRI, r3
 800c588:	f3bf 8f6f 	isb	sy
 800c58c:	f3bf 8f4f 	dsb	sy
 800c590:	60bb      	str	r3, [r7, #8]
}
 800c592:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c594:	bf00      	nop
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d0fc      	beq.n	800c596 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c59c:	bf00      	nop
 800c59e:	bf00      	nop
 800c5a0:	3714      	adds	r7, #20
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a8:	4770      	bx	lr
 800c5aa:	bf00      	nop
 800c5ac:	20000010 	.word	0x20000010

0800c5b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5b0:	4b07      	ldr	r3, [pc, #28]	@ (800c5d0 <pxCurrentTCBConst2>)
 800c5b2:	6819      	ldr	r1, [r3, #0]
 800c5b4:	6808      	ldr	r0, [r1, #0]
 800c5b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5ba:	f380 8809 	msr	PSP, r0
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f04f 0000 	mov.w	r0, #0
 800c5c6:	f380 8811 	msr	BASEPRI, r0
 800c5ca:	4770      	bx	lr
 800c5cc:	f3af 8000 	nop.w

0800c5d0 <pxCurrentTCBConst2>:
 800c5d0:	20005350 	.word	0x20005350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5d4:	bf00      	nop
 800c5d6:	bf00      	nop

0800c5d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5d8:	4808      	ldr	r0, [pc, #32]	@ (800c5fc <prvPortStartFirstTask+0x24>)
 800c5da:	6800      	ldr	r0, [r0, #0]
 800c5dc:	6800      	ldr	r0, [r0, #0]
 800c5de:	f380 8808 	msr	MSP, r0
 800c5e2:	f04f 0000 	mov.w	r0, #0
 800c5e6:	f380 8814 	msr	CONTROL, r0
 800c5ea:	b662      	cpsie	i
 800c5ec:	b661      	cpsie	f
 800c5ee:	f3bf 8f4f 	dsb	sy
 800c5f2:	f3bf 8f6f 	isb	sy
 800c5f6:	df00      	svc	0
 800c5f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5fa:	bf00      	nop
 800c5fc:	e000ed08 	.word	0xe000ed08

0800c600 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c606:	4b47      	ldr	r3, [pc, #284]	@ (800c724 <xPortStartScheduler+0x124>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	4a47      	ldr	r2, [pc, #284]	@ (800c728 <xPortStartScheduler+0x128>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d10b      	bne.n	800c628 <xPortStartScheduler+0x28>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	60fb      	str	r3, [r7, #12]
}
 800c622:	bf00      	nop
 800c624:	bf00      	nop
 800c626:	e7fd      	b.n	800c624 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c628:	4b3e      	ldr	r3, [pc, #248]	@ (800c724 <xPortStartScheduler+0x124>)
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a3f      	ldr	r2, [pc, #252]	@ (800c72c <xPortStartScheduler+0x12c>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d10b      	bne.n	800c64a <xPortStartScheduler+0x4a>
	__asm volatile
 800c632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c636:	f383 8811 	msr	BASEPRI, r3
 800c63a:	f3bf 8f6f 	isb	sy
 800c63e:	f3bf 8f4f 	dsb	sy
 800c642:	613b      	str	r3, [r7, #16]
}
 800c644:	bf00      	nop
 800c646:	bf00      	nop
 800c648:	e7fd      	b.n	800c646 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c64a:	4b39      	ldr	r3, [pc, #228]	@ (800c730 <xPortStartScheduler+0x130>)
 800c64c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	22ff      	movs	r2, #255	@ 0xff
 800c65a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c65c:	697b      	ldr	r3, [r7, #20]
 800c65e:	781b      	ldrb	r3, [r3, #0]
 800c660:	b2db      	uxtb	r3, r3
 800c662:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c664:	78fb      	ldrb	r3, [r7, #3]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c66c:	b2da      	uxtb	r2, r3
 800c66e:	4b31      	ldr	r3, [pc, #196]	@ (800c734 <xPortStartScheduler+0x134>)
 800c670:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c672:	4b31      	ldr	r3, [pc, #196]	@ (800c738 <xPortStartScheduler+0x138>)
 800c674:	2207      	movs	r2, #7
 800c676:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c678:	e009      	b.n	800c68e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c67a:	4b2f      	ldr	r3, [pc, #188]	@ (800c738 <xPortStartScheduler+0x138>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	3b01      	subs	r3, #1
 800c680:	4a2d      	ldr	r2, [pc, #180]	@ (800c738 <xPortStartScheduler+0x138>)
 800c682:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c684:	78fb      	ldrb	r3, [r7, #3]
 800c686:	b2db      	uxtb	r3, r3
 800c688:	005b      	lsls	r3, r3, #1
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c68e:	78fb      	ldrb	r3, [r7, #3]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c696:	2b80      	cmp	r3, #128	@ 0x80
 800c698:	d0ef      	beq.n	800c67a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c69a:	4b27      	ldr	r3, [pc, #156]	@ (800c738 <xPortStartScheduler+0x138>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f1c3 0307 	rsb	r3, r3, #7
 800c6a2:	2b04      	cmp	r3, #4
 800c6a4:	d00b      	beq.n	800c6be <xPortStartScheduler+0xbe>
	__asm volatile
 800c6a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6aa:	f383 8811 	msr	BASEPRI, r3
 800c6ae:	f3bf 8f6f 	isb	sy
 800c6b2:	f3bf 8f4f 	dsb	sy
 800c6b6:	60bb      	str	r3, [r7, #8]
}
 800c6b8:	bf00      	nop
 800c6ba:	bf00      	nop
 800c6bc:	e7fd      	b.n	800c6ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6be:	4b1e      	ldr	r3, [pc, #120]	@ (800c738 <xPortStartScheduler+0x138>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c738 <xPortStartScheduler+0x138>)
 800c6c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c738 <xPortStartScheduler+0x138>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c6d0:	4a19      	ldr	r2, [pc, #100]	@ (800c738 <xPortStartScheduler+0x138>)
 800c6d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	b2da      	uxtb	r2, r3
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6dc:	4b17      	ldr	r3, [pc, #92]	@ (800c73c <xPortStartScheduler+0x13c>)
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	4a16      	ldr	r2, [pc, #88]	@ (800c73c <xPortStartScheduler+0x13c>)
 800c6e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c6e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6e8:	4b14      	ldr	r3, [pc, #80]	@ (800c73c <xPortStartScheduler+0x13c>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a13      	ldr	r2, [pc, #76]	@ (800c73c <xPortStartScheduler+0x13c>)
 800c6ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c6f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6f4:	f000 f8da 	bl	800c8ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6f8:	4b11      	ldr	r3, [pc, #68]	@ (800c740 <xPortStartScheduler+0x140>)
 800c6fa:	2200      	movs	r2, #0
 800c6fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6fe:	f000 f8f9 	bl	800c8f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c702:	4b10      	ldr	r3, [pc, #64]	@ (800c744 <xPortStartScheduler+0x144>)
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	4a0f      	ldr	r2, [pc, #60]	@ (800c744 <xPortStartScheduler+0x144>)
 800c708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c70c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c70e:	f7ff ff63 	bl	800c5d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c712:	f7ff f817 	bl	800b744 <vTaskSwitchContext>
	prvTaskExitError();
 800c716:	f7ff ff1d 	bl	800c554 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3718      	adds	r7, #24
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	e000ed00 	.word	0xe000ed00
 800c728:	410fc271 	.word	0x410fc271
 800c72c:	410fc270 	.word	0x410fc270
 800c730:	e000e400 	.word	0xe000e400
 800c734:	2000597c 	.word	0x2000597c
 800c738:	20005980 	.word	0x20005980
 800c73c:	e000ed20 	.word	0xe000ed20
 800c740:	20000010 	.word	0x20000010
 800c744:	e000ef34 	.word	0xe000ef34

0800c748 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c748:	b480      	push	{r7}
 800c74a:	b083      	sub	sp, #12
 800c74c:	af00      	add	r7, sp, #0
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	607b      	str	r3, [r7, #4]
}
 800c760:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c762:	4b10      	ldr	r3, [pc, #64]	@ (800c7a4 <vPortEnterCritical+0x5c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	3301      	adds	r3, #1
 800c768:	4a0e      	ldr	r2, [pc, #56]	@ (800c7a4 <vPortEnterCritical+0x5c>)
 800c76a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c76c:	4b0d      	ldr	r3, [pc, #52]	@ (800c7a4 <vPortEnterCritical+0x5c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d110      	bne.n	800c796 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c774:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a8 <vPortEnterCritical+0x60>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	b2db      	uxtb	r3, r3
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d00b      	beq.n	800c796 <vPortEnterCritical+0x4e>
	__asm volatile
 800c77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c782:	f383 8811 	msr	BASEPRI, r3
 800c786:	f3bf 8f6f 	isb	sy
 800c78a:	f3bf 8f4f 	dsb	sy
 800c78e:	603b      	str	r3, [r7, #0]
}
 800c790:	bf00      	nop
 800c792:	bf00      	nop
 800c794:	e7fd      	b.n	800c792 <vPortEnterCritical+0x4a>
	}
}
 800c796:	bf00      	nop
 800c798:	370c      	adds	r7, #12
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	20000010 	.word	0x20000010
 800c7a8:	e000ed04 	.word	0xe000ed04

0800c7ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c7ac:	b480      	push	{r7}
 800c7ae:	b083      	sub	sp, #12
 800c7b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7b2:	4b12      	ldr	r3, [pc, #72]	@ (800c7fc <vPortExitCritical+0x50>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d10b      	bne.n	800c7d2 <vPortExitCritical+0x26>
	__asm volatile
 800c7ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	607b      	str	r3, [r7, #4]
}
 800c7cc:	bf00      	nop
 800c7ce:	bf00      	nop
 800c7d0:	e7fd      	b.n	800c7ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c7d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7fc <vPortExitCritical+0x50>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	3b01      	subs	r3, #1
 800c7d8:	4a08      	ldr	r2, [pc, #32]	@ (800c7fc <vPortExitCritical+0x50>)
 800c7da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7dc:	4b07      	ldr	r3, [pc, #28]	@ (800c7fc <vPortExitCritical+0x50>)
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d105      	bne.n	800c7f0 <vPortExitCritical+0x44>
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	f383 8811 	msr	BASEPRI, r3
}
 800c7ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr
 800c7fc:	20000010 	.word	0x20000010

0800c800 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c800:	f3ef 8009 	mrs	r0, PSP
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	4b15      	ldr	r3, [pc, #84]	@ (800c860 <pxCurrentTCBConst>)
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	f01e 0f10 	tst.w	lr, #16
 800c810:	bf08      	it	eq
 800c812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81a:	6010      	str	r0, [r2, #0]
 800c81c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c820:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c824:	f380 8811 	msr	BASEPRI, r0
 800c828:	f3bf 8f4f 	dsb	sy
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f7fe ff88 	bl	800b744 <vTaskSwitchContext>
 800c834:	f04f 0000 	mov.w	r0, #0
 800c838:	f380 8811 	msr	BASEPRI, r0
 800c83c:	bc09      	pop	{r0, r3}
 800c83e:	6819      	ldr	r1, [r3, #0]
 800c840:	6808      	ldr	r0, [r1, #0]
 800c842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c846:	f01e 0f10 	tst.w	lr, #16
 800c84a:	bf08      	it	eq
 800c84c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c850:	f380 8809 	msr	PSP, r0
 800c854:	f3bf 8f6f 	isb	sy
 800c858:	4770      	bx	lr
 800c85a:	bf00      	nop
 800c85c:	f3af 8000 	nop.w

0800c860 <pxCurrentTCBConst>:
 800c860:	20005350 	.word	0x20005350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop

0800c868 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b082      	sub	sp, #8
 800c86c:	af00      	add	r7, sp, #0
	__asm volatile
 800c86e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c872:	f383 8811 	msr	BASEPRI, r3
 800c876:	f3bf 8f6f 	isb	sy
 800c87a:	f3bf 8f4f 	dsb	sy
 800c87e:	607b      	str	r3, [r7, #4]
}
 800c880:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c882:	f7fe fea5 	bl	800b5d0 <xTaskIncrementTick>
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d003      	beq.n	800c894 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c88c:	4b06      	ldr	r3, [pc, #24]	@ (800c8a8 <xPortSysTickHandler+0x40>)
 800c88e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c892:	601a      	str	r2, [r3, #0]
 800c894:	2300      	movs	r3, #0
 800c896:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	f383 8811 	msr	BASEPRI, r3
}
 800c89e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c8a0:	bf00      	nop
 800c8a2:	3708      	adds	r7, #8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	e000ed04 	.word	0xe000ed04

0800c8ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c8ac:	b480      	push	{r7}
 800c8ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e0 <vPortSetupTimerInterrupt+0x34>)
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c8e4 <vPortSetupTimerInterrupt+0x38>)
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c8e8 <vPortSetupTimerInterrupt+0x3c>)
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c8ec <vPortSetupTimerInterrupt+0x40>)
 800c8c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8c6:	099b      	lsrs	r3, r3, #6
 800c8c8:	4a09      	ldr	r2, [pc, #36]	@ (800c8f0 <vPortSetupTimerInterrupt+0x44>)
 800c8ca:	3b01      	subs	r3, #1
 800c8cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8ce:	4b04      	ldr	r3, [pc, #16]	@ (800c8e0 <vPortSetupTimerInterrupt+0x34>)
 800c8d0:	2207      	movs	r2, #7
 800c8d2:	601a      	str	r2, [r3, #0]
}
 800c8d4:	bf00      	nop
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
 800c8de:	bf00      	nop
 800c8e0:	e000e010 	.word	0xe000e010
 800c8e4:	e000e018 	.word	0xe000e018
 800c8e8:	20000004 	.word	0x20000004
 800c8ec:	10624dd3 	.word	0x10624dd3
 800c8f0:	e000e014 	.word	0xe000e014

0800c8f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c904 <vPortEnableVFP+0x10>
 800c8f8:	6801      	ldr	r1, [r0, #0]
 800c8fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c8fe:	6001      	str	r1, [r0, #0]
 800c900:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c902:	bf00      	nop
 800c904:	e000ed88 	.word	0xe000ed88

0800c908 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c908:	b480      	push	{r7}
 800c90a:	b085      	sub	sp, #20
 800c90c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c90e:	f3ef 8305 	mrs	r3, IPSR
 800c912:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2b0f      	cmp	r3, #15
 800c918:	d915      	bls.n	800c946 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c91a:	4a18      	ldr	r2, [pc, #96]	@ (800c97c <vPortValidateInterruptPriority+0x74>)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	4413      	add	r3, r2
 800c920:	781b      	ldrb	r3, [r3, #0]
 800c922:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c924:	4b16      	ldr	r3, [pc, #88]	@ (800c980 <vPortValidateInterruptPriority+0x78>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	7afa      	ldrb	r2, [r7, #11]
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d20b      	bcs.n	800c946 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c92e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c932:	f383 8811 	msr	BASEPRI, r3
 800c936:	f3bf 8f6f 	isb	sy
 800c93a:	f3bf 8f4f 	dsb	sy
 800c93e:	607b      	str	r3, [r7, #4]
}
 800c940:	bf00      	nop
 800c942:	bf00      	nop
 800c944:	e7fd      	b.n	800c942 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c946:	4b0f      	ldr	r3, [pc, #60]	@ (800c984 <vPortValidateInterruptPriority+0x7c>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c94e:	4b0e      	ldr	r3, [pc, #56]	@ (800c988 <vPortValidateInterruptPriority+0x80>)
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	429a      	cmp	r2, r3
 800c954:	d90b      	bls.n	800c96e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	603b      	str	r3, [r7, #0]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <vPortValidateInterruptPriority+0x62>
	}
 800c96e:	bf00      	nop
 800c970:	3714      	adds	r7, #20
 800c972:	46bd      	mov	sp, r7
 800c974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c978:	4770      	bx	lr
 800c97a:	bf00      	nop
 800c97c:	e000e3f0 	.word	0xe000e3f0
 800c980:	2000597c 	.word	0x2000597c
 800c984:	e000ed0c 	.word	0xe000ed0c
 800c988:	20005980 	.word	0x20005980

0800c98c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b08a      	sub	sp, #40	@ 0x28
 800c990:	af00      	add	r7, sp, #0
 800c992:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c994:	2300      	movs	r3, #0
 800c996:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c998:	f7fe fd5e 	bl	800b458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c99c:	4b5c      	ldr	r3, [pc, #368]	@ (800cb10 <pvPortMalloc+0x184>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d101      	bne.n	800c9a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c9a4:	f000 f924 	bl	800cbf0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c9a8:	4b5a      	ldr	r3, [pc, #360]	@ (800cb14 <pvPortMalloc+0x188>)
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	4013      	ands	r3, r2
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	f040 8095 	bne.w	800cae0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d01e      	beq.n	800c9fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c9bc:	2208      	movs	r2, #8
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f003 0307 	and.w	r3, r3, #7
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d015      	beq.n	800c9fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f023 0307 	bic.w	r3, r3, #7
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f003 0307 	and.w	r3, r3, #7
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00b      	beq.n	800c9fa <pvPortMalloc+0x6e>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	617b      	str	r3, [r7, #20]
}
 800c9f4:	bf00      	nop
 800c9f6:	bf00      	nop
 800c9f8:	e7fd      	b.n	800c9f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d06f      	beq.n	800cae0 <pvPortMalloc+0x154>
 800ca00:	4b45      	ldr	r3, [pc, #276]	@ (800cb18 <pvPortMalloc+0x18c>)
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d86a      	bhi.n	800cae0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ca0a:	4b44      	ldr	r3, [pc, #272]	@ (800cb1c <pvPortMalloc+0x190>)
 800ca0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ca0e:	4b43      	ldr	r3, [pc, #268]	@ (800cb1c <pvPortMalloc+0x190>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca14:	e004      	b.n	800ca20 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ca16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca22:	685b      	ldr	r3, [r3, #4]
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d903      	bls.n	800ca32 <pvPortMalloc+0xa6>
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1f1      	bne.n	800ca16 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca32:	4b37      	ldr	r3, [pc, #220]	@ (800cb10 <pvPortMalloc+0x184>)
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d051      	beq.n	800cae0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca3c:	6a3b      	ldr	r3, [r7, #32]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	2208      	movs	r2, #8
 800ca42:	4413      	add	r3, r2
 800ca44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca48:	681a      	ldr	r2, [r3, #0]
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	1ad2      	subs	r2, r2, r3
 800ca56:	2308      	movs	r3, #8
 800ca58:	005b      	lsls	r3, r3, #1
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d920      	bls.n	800caa0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	4413      	add	r3, r2
 800ca64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	f003 0307 	and.w	r3, r3, #7
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00b      	beq.n	800ca88 <pvPortMalloc+0xfc>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	613b      	str	r3, [r7, #16]
}
 800ca82:	bf00      	nop
 800ca84:	bf00      	nop
 800ca86:	e7fd      	b.n	800ca84 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	685a      	ldr	r2, [r3, #4]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	1ad2      	subs	r2, r2, r3
 800ca90:	69bb      	ldr	r3, [r7, #24]
 800ca92:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca9a:	69b8      	ldr	r0, [r7, #24]
 800ca9c:	f000 f90a 	bl	800ccb4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800caa0:	4b1d      	ldr	r3, [pc, #116]	@ (800cb18 <pvPortMalloc+0x18c>)
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa6:	685b      	ldr	r3, [r3, #4]
 800caa8:	1ad3      	subs	r3, r2, r3
 800caaa:	4a1b      	ldr	r2, [pc, #108]	@ (800cb18 <pvPortMalloc+0x18c>)
 800caac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800caae:	4b1a      	ldr	r3, [pc, #104]	@ (800cb18 <pvPortMalloc+0x18c>)
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	4b1b      	ldr	r3, [pc, #108]	@ (800cb20 <pvPortMalloc+0x194>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d203      	bcs.n	800cac2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caba:	4b17      	ldr	r3, [pc, #92]	@ (800cb18 <pvPortMalloc+0x18c>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	4a18      	ldr	r2, [pc, #96]	@ (800cb20 <pvPortMalloc+0x194>)
 800cac0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac4:	685a      	ldr	r2, [r3, #4]
 800cac6:	4b13      	ldr	r3, [pc, #76]	@ (800cb14 <pvPortMalloc+0x188>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	431a      	orrs	r2, r3
 800cacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cace:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cad6:	4b13      	ldr	r3, [pc, #76]	@ (800cb24 <pvPortMalloc+0x198>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	3301      	adds	r3, #1
 800cadc:	4a11      	ldr	r2, [pc, #68]	@ (800cb24 <pvPortMalloc+0x198>)
 800cade:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cae0:	f7fe fcc8 	bl	800b474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	f003 0307 	and.w	r3, r3, #7
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00b      	beq.n	800cb06 <pvPortMalloc+0x17a>
	__asm volatile
 800caee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caf2:	f383 8811 	msr	BASEPRI, r3
 800caf6:	f3bf 8f6f 	isb	sy
 800cafa:	f3bf 8f4f 	dsb	sy
 800cafe:	60fb      	str	r3, [r7, #12]
}
 800cb00:	bf00      	nop
 800cb02:	bf00      	nop
 800cb04:	e7fd      	b.n	800cb02 <pvPortMalloc+0x176>
	return pvReturn;
 800cb06:	69fb      	ldr	r3, [r7, #28]
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3728      	adds	r7, #40	@ 0x28
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	2000658c 	.word	0x2000658c
 800cb14:	200065a0 	.word	0x200065a0
 800cb18:	20006590 	.word	0x20006590
 800cb1c:	20006584 	.word	0x20006584
 800cb20:	20006594 	.word	0x20006594
 800cb24:	20006598 	.word	0x20006598

0800cb28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	b086      	sub	sp, #24
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d04f      	beq.n	800cbda <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb3a:	2308      	movs	r3, #8
 800cb3c:	425b      	negs	r3, r3
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	4413      	add	r3, r2
 800cb42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb44:	697b      	ldr	r3, [r7, #20]
 800cb46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	4b25      	ldr	r3, [pc, #148]	@ (800cbe4 <vPortFree+0xbc>)
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4013      	ands	r3, r2
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d10b      	bne.n	800cb6e <vPortFree+0x46>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	60fb      	str	r3, [r7, #12]
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	e7fd      	b.n	800cb6a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00b      	beq.n	800cb8e <vPortFree+0x66>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	60bb      	str	r3, [r7, #8]
}
 800cb88:	bf00      	nop
 800cb8a:	bf00      	nop
 800cb8c:	e7fd      	b.n	800cb8a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	685a      	ldr	r2, [r3, #4]
 800cb92:	4b14      	ldr	r3, [pc, #80]	@ (800cbe4 <vPortFree+0xbc>)
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	4013      	ands	r3, r2
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d01e      	beq.n	800cbda <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d11a      	bne.n	800cbda <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	685a      	ldr	r2, [r3, #4]
 800cba8:	4b0e      	ldr	r3, [pc, #56]	@ (800cbe4 <vPortFree+0xbc>)
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	43db      	mvns	r3, r3
 800cbae:	401a      	ands	r2, r3
 800cbb0:	693b      	ldr	r3, [r7, #16]
 800cbb2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cbb4:	f7fe fc50 	bl	800b458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	685a      	ldr	r2, [r3, #4]
 800cbbc:	4b0a      	ldr	r3, [pc, #40]	@ (800cbe8 <vPortFree+0xc0>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	4413      	add	r3, r2
 800cbc2:	4a09      	ldr	r2, [pc, #36]	@ (800cbe8 <vPortFree+0xc0>)
 800cbc4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbc6:	6938      	ldr	r0, [r7, #16]
 800cbc8:	f000 f874 	bl	800ccb4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cbcc:	4b07      	ldr	r3, [pc, #28]	@ (800cbec <vPortFree+0xc4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	3301      	adds	r3, #1
 800cbd2:	4a06      	ldr	r2, [pc, #24]	@ (800cbec <vPortFree+0xc4>)
 800cbd4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cbd6:	f7fe fc4d 	bl	800b474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbda:	bf00      	nop
 800cbdc:	3718      	adds	r7, #24
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	200065a0 	.word	0x200065a0
 800cbe8:	20006590 	.word	0x20006590
 800cbec:	2000659c 	.word	0x2000659c

0800cbf0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b085      	sub	sp, #20
 800cbf4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbf6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800cbfa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbfc:	4b27      	ldr	r3, [pc, #156]	@ (800cc9c <prvHeapInit+0xac>)
 800cbfe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f003 0307 	and.w	r3, r3, #7
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00c      	beq.n	800cc24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	3307      	adds	r3, #7
 800cc0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f023 0307 	bic.w	r3, r3, #7
 800cc16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc18:	68ba      	ldr	r2, [r7, #8]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	1ad3      	subs	r3, r2, r3
 800cc1e:	4a1f      	ldr	r2, [pc, #124]	@ (800cc9c <prvHeapInit+0xac>)
 800cc20:	4413      	add	r3, r2
 800cc22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc28:	4a1d      	ldr	r2, [pc, #116]	@ (800cca0 <prvHeapInit+0xb0>)
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc2e:	4b1c      	ldr	r3, [pc, #112]	@ (800cca0 <prvHeapInit+0xb0>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68ba      	ldr	r2, [r7, #8]
 800cc38:	4413      	add	r3, r2
 800cc3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc3c:	2208      	movs	r2, #8
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	1a9b      	subs	r3, r3, r2
 800cc42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f023 0307 	bic.w	r3, r3, #7
 800cc4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	4a15      	ldr	r2, [pc, #84]	@ (800cca4 <prvHeapInit+0xb4>)
 800cc50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc52:	4b14      	ldr	r3, [pc, #80]	@ (800cca4 <prvHeapInit+0xb4>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2200      	movs	r2, #0
 800cc58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc5a:	4b12      	ldr	r3, [pc, #72]	@ (800cca4 <prvHeapInit+0xb4>)
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	68fa      	ldr	r2, [r7, #12]
 800cc6a:	1ad2      	subs	r2, r2, r3
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc70:	4b0c      	ldr	r3, [pc, #48]	@ (800cca4 <prvHeapInit+0xb4>)
 800cc72:	681a      	ldr	r2, [r3, #0]
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	685b      	ldr	r3, [r3, #4]
 800cc7c:	4a0a      	ldr	r2, [pc, #40]	@ (800cca8 <prvHeapInit+0xb8>)
 800cc7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc80:	683b      	ldr	r3, [r7, #0]
 800cc82:	685b      	ldr	r3, [r3, #4]
 800cc84:	4a09      	ldr	r2, [pc, #36]	@ (800ccac <prvHeapInit+0xbc>)
 800cc86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc88:	4b09      	ldr	r3, [pc, #36]	@ (800ccb0 <prvHeapInit+0xc0>)
 800cc8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cc8e:	601a      	str	r2, [r3, #0]
}
 800cc90:	bf00      	nop
 800cc92:	3714      	adds	r7, #20
 800cc94:	46bd      	mov	sp, r7
 800cc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9a:	4770      	bx	lr
 800cc9c:	20005984 	.word	0x20005984
 800cca0:	20006584 	.word	0x20006584
 800cca4:	2000658c 	.word	0x2000658c
 800cca8:	20006594 	.word	0x20006594
 800ccac:	20006590 	.word	0x20006590
 800ccb0:	200065a0 	.word	0x200065a0

0800ccb4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b085      	sub	sp, #20
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccbc:	4b28      	ldr	r3, [pc, #160]	@ (800cd60 <prvInsertBlockIntoFreeList+0xac>)
 800ccbe:	60fb      	str	r3, [r7, #12]
 800ccc0:	e002      	b.n	800ccc8 <prvInsertBlockIntoFreeList+0x14>
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	60fb      	str	r3, [r7, #12]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	429a      	cmp	r2, r3
 800ccd0:	d8f7      	bhi.n	800ccc2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	685b      	ldr	r3, [r3, #4]
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	4413      	add	r3, r2
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	429a      	cmp	r2, r3
 800cce2:	d108      	bne.n	800ccf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	685a      	ldr	r2, [r3, #4]
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	685b      	ldr	r3, [r3, #4]
 800ccec:	441a      	add	r2, r3
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	68ba      	ldr	r2, [r7, #8]
 800cd00:	441a      	add	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	429a      	cmp	r2, r3
 800cd08:	d118      	bne.n	800cd3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681a      	ldr	r2, [r3, #0]
 800cd0e:	4b15      	ldr	r3, [pc, #84]	@ (800cd64 <prvInsertBlockIntoFreeList+0xb0>)
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d00d      	beq.n	800cd32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	685a      	ldr	r2, [r3, #4]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	441a      	add	r2, r3
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	601a      	str	r2, [r3, #0]
 800cd30:	e008      	b.n	800cd44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd32:	4b0c      	ldr	r3, [pc, #48]	@ (800cd64 <prvInsertBlockIntoFreeList+0xb0>)
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	601a      	str	r2, [r3, #0]
 800cd3a:	e003      	b.n	800cd44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	681a      	ldr	r2, [r3, #0]
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd44:	68fa      	ldr	r2, [r7, #12]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d002      	beq.n	800cd52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	687a      	ldr	r2, [r7, #4]
 800cd50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd52:	bf00      	nop
 800cd54:	3714      	adds	r7, #20
 800cd56:	46bd      	mov	sp, r7
 800cd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5c:	4770      	bx	lr
 800cd5e:	bf00      	nop
 800cd60:	20006584 	.word	0x20006584
 800cd64:	2000658c 	.word	0x2000658c

0800cd68 <rcl_get_zero_initialized_init_options>:
 800cd68:	2000      	movs	r0, #0
 800cd6a:	4770      	bx	lr

0800cd6c <rcl_init_options_init>:
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd70:	b097      	sub	sp, #92	@ 0x5c
 800cd72:	ae1d      	add	r6, sp, #116	@ 0x74
 800cd74:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d058      	beq.n	800ce2e <rcl_init_options_init+0xc2>
 800cd7c:	6803      	ldr	r3, [r0, #0]
 800cd7e:	4605      	mov	r5, r0
 800cd80:	b133      	cbz	r3, 800cd90 <rcl_init_options_init+0x24>
 800cd82:	2464      	movs	r4, #100	@ 0x64
 800cd84:	4620      	mov	r0, r4
 800cd86:	b017      	add	sp, #92	@ 0x5c
 800cd88:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800cd8c:	b004      	add	sp, #16
 800cd8e:	4770      	bx	lr
 800cd90:	4630      	mov	r0, r6
 800cd92:	f001 f92f 	bl	800dff4 <rcutils_allocator_is_valid>
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d049      	beq.n	800ce2e <rcl_init_options_init+0xc2>
 800cd9a:	46b4      	mov	ip, r6
 800cd9c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cda0:	ac11      	add	r4, sp, #68	@ 0x44
 800cda2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cda4:	f8dc 3000 	ldr.w	r3, [ip]
 800cda8:	6023      	str	r3, [r4, #0]
 800cdaa:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800cdac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cdae:	2050      	movs	r0, #80	@ 0x50
 800cdb0:	4798      	blx	r3
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	6028      	str	r0, [r5, #0]
 800cdb6:	2800      	cmp	r0, #0
 800cdb8:	d03b      	beq.n	800ce32 <rcl_init_options_init+0xc6>
 800cdba:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800cdbe:	4686      	mov	lr, r0
 800cdc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cdc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800cdc8:	f8dc 3000 	ldr.w	r3, [ip]
 800cdcc:	f8ce 3000 	str.w	r3, [lr]
 800cdd0:	a802      	add	r0, sp, #8
 800cdd2:	f001 f9a1 	bl	800e118 <rmw_get_zero_initialized_init_options>
 800cdd6:	f10d 0e08 	add.w	lr, sp, #8
 800cdda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cdde:	f104 0c18 	add.w	ip, r4, #24
 800cde2:	682f      	ldr	r7, [r5, #0]
 800cde4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cde8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cdec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdf0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cdf4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cdf8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cdfc:	ac20      	add	r4, sp, #128	@ 0x80
 800cdfe:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ce02:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ce06:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ce0a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ce0e:	f107 0018 	add.w	r0, r7, #24
 800ce12:	f001 f9af 	bl	800e174 <rmw_init_options_init>
 800ce16:	4604      	mov	r4, r0
 800ce18:	2800      	cmp	r0, #0
 800ce1a:	d0b3      	beq.n	800cd84 <rcl_init_options_init+0x18>
 800ce1c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800ce1e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ce20:	6828      	ldr	r0, [r5, #0]
 800ce22:	4798      	blx	r3
 800ce24:	4620      	mov	r0, r4
 800ce26:	f007 fbb5 	bl	8014594 <rcl_convert_rmw_ret_to_rcl_ret>
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	e7aa      	b.n	800cd84 <rcl_init_options_init+0x18>
 800ce2e:	240b      	movs	r4, #11
 800ce30:	e7a8      	b.n	800cd84 <rcl_init_options_init+0x18>
 800ce32:	240a      	movs	r4, #10
 800ce34:	e7a6      	b.n	800cd84 <rcl_init_options_init+0x18>
 800ce36:	bf00      	nop

0800ce38 <rcl_init_options_fini>:
 800ce38:	b530      	push	{r4, r5, lr}
 800ce3a:	b087      	sub	sp, #28
 800ce3c:	b1f0      	cbz	r0, 800ce7c <rcl_init_options_fini+0x44>
 800ce3e:	6803      	ldr	r3, [r0, #0]
 800ce40:	4604      	mov	r4, r0
 800ce42:	b1db      	cbz	r3, 800ce7c <rcl_init_options_fini+0x44>
 800ce44:	469c      	mov	ip, r3
 800ce46:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ce4a:	f10d 0e04 	add.w	lr, sp, #4
 800ce4e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ce52:	f8dc 3000 	ldr.w	r3, [ip]
 800ce56:	f8ce 3000 	str.w	r3, [lr]
 800ce5a:	a801      	add	r0, sp, #4
 800ce5c:	f001 f8ca 	bl	800dff4 <rcutils_allocator_is_valid>
 800ce60:	b160      	cbz	r0, 800ce7c <rcl_init_options_fini+0x44>
 800ce62:	6820      	ldr	r0, [r4, #0]
 800ce64:	3018      	adds	r0, #24
 800ce66:	f001 fa5b 	bl	800e320 <rmw_init_options_fini>
 800ce6a:	4605      	mov	r5, r0
 800ce6c:	b950      	cbnz	r0, 800ce84 <rcl_init_options_fini+0x4c>
 800ce6e:	6820      	ldr	r0, [r4, #0]
 800ce70:	9b02      	ldr	r3, [sp, #8]
 800ce72:	9905      	ldr	r1, [sp, #20]
 800ce74:	4798      	blx	r3
 800ce76:	4628      	mov	r0, r5
 800ce78:	b007      	add	sp, #28
 800ce7a:	bd30      	pop	{r4, r5, pc}
 800ce7c:	250b      	movs	r5, #11
 800ce7e:	4628      	mov	r0, r5
 800ce80:	b007      	add	sp, #28
 800ce82:	bd30      	pop	{r4, r5, pc}
 800ce84:	f007 fb86 	bl	8014594 <rcl_convert_rmw_ret_to_rcl_ret>
 800ce88:	4605      	mov	r5, r0
 800ce8a:	e7f8      	b.n	800ce7e <rcl_init_options_fini+0x46>

0800ce8c <rcl_init_options_copy>:
 800ce8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce90:	b094      	sub	sp, #80	@ 0x50
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d058      	beq.n	800cf48 <rcl_init_options_copy+0xbc>
 800ce96:	4604      	mov	r4, r0
 800ce98:	6800      	ldr	r0, [r0, #0]
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	d054      	beq.n	800cf48 <rcl_init_options_copy+0xbc>
 800ce9e:	460e      	mov	r6, r1
 800cea0:	f001 f8a8 	bl	800dff4 <rcutils_allocator_is_valid>
 800cea4:	2800      	cmp	r0, #0
 800cea6:	d04f      	beq.n	800cf48 <rcl_init_options_copy+0xbc>
 800cea8:	2e00      	cmp	r6, #0
 800ceaa:	d04d      	beq.n	800cf48 <rcl_init_options_copy+0xbc>
 800ceac:	6833      	ldr	r3, [r6, #0]
 800ceae:	b123      	cbz	r3, 800ceba <rcl_init_options_copy+0x2e>
 800ceb0:	2464      	movs	r4, #100	@ 0x64
 800ceb2:	4620      	mov	r0, r4
 800ceb4:	b014      	add	sp, #80	@ 0x50
 800ceb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ceba:	6827      	ldr	r7, [r4, #0]
 800cebc:	46bc      	mov	ip, r7
 800cebe:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cec2:	ad0f      	add	r5, sp, #60	@ 0x3c
 800cec4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800cec6:	f8dc 3000 	ldr.w	r3, [ip]
 800ceca:	f8d7 8000 	ldr.w	r8, [r7]
 800cece:	602b      	str	r3, [r5, #0]
 800ced0:	4619      	mov	r1, r3
 800ced2:	2050      	movs	r0, #80	@ 0x50
 800ced4:	47c0      	blx	r8
 800ced6:	4605      	mov	r5, r0
 800ced8:	6030      	str	r0, [r6, #0]
 800ceda:	b3d0      	cbz	r0, 800cf52 <rcl_init_options_copy+0xc6>
 800cedc:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800cee0:	4686      	mov	lr, r0
 800cee2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cee6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ceea:	f8dc 3000 	ldr.w	r3, [ip]
 800ceee:	f8ce 3000 	str.w	r3, [lr]
 800cef2:	4668      	mov	r0, sp
 800cef4:	f001 f910 	bl	800e118 <rmw_get_zero_initialized_init_options>
 800cef8:	46ee      	mov	lr, sp
 800cefa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cefe:	f105 0c18 	add.w	ip, r5, #24
 800cf02:	6824      	ldr	r4, [r4, #0]
 800cf04:	6835      	ldr	r5, [r6, #0]
 800cf06:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf12:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800cf16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cf1a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800cf1e:	e88c 0003 	stmia.w	ip, {r0, r1}
 800cf22:	f104 0018 	add.w	r0, r4, #24
 800cf26:	f105 0118 	add.w	r1, r5, #24
 800cf2a:	f001 f985 	bl	800e238 <rmw_init_options_copy>
 800cf2e:	4604      	mov	r4, r0
 800cf30:	2800      	cmp	r0, #0
 800cf32:	d0be      	beq.n	800ceb2 <rcl_init_options_copy+0x26>
 800cf34:	f001 f86c 	bl	800e010 <rcutils_get_error_string>
 800cf38:	f001 f882 	bl	800e040 <rcutils_reset_error>
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	f7ff ff7b 	bl	800ce38 <rcl_init_options_fini>
 800cf42:	b140      	cbz	r0, 800cf56 <rcl_init_options_copy+0xca>
 800cf44:	4604      	mov	r4, r0
 800cf46:	e7b4      	b.n	800ceb2 <rcl_init_options_copy+0x26>
 800cf48:	240b      	movs	r4, #11
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	b014      	add	sp, #80	@ 0x50
 800cf4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf52:	240a      	movs	r4, #10
 800cf54:	e7ad      	b.n	800ceb2 <rcl_init_options_copy+0x26>
 800cf56:	4620      	mov	r0, r4
 800cf58:	b014      	add	sp, #80	@ 0x50
 800cf5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf5e:	f007 bb19 	b.w	8014594 <rcl_convert_rmw_ret_to_rcl_ret>
 800cf62:	bf00      	nop

0800cf64 <rcl_init_options_set_domain_id>:
 800cf64:	b120      	cbz	r0, 800cf70 <rcl_init_options_set_domain_id+0xc>
 800cf66:	6803      	ldr	r3, [r0, #0]
 800cf68:	b113      	cbz	r3, 800cf70 <rcl_init_options_set_domain_id+0xc>
 800cf6a:	6259      	str	r1, [r3, #36]	@ 0x24
 800cf6c:	2000      	movs	r0, #0
 800cf6e:	4770      	bx	lr
 800cf70:	200b      	movs	r0, #11
 800cf72:	4770      	bx	lr

0800cf74 <rcl_get_zero_initialized_publisher>:
 800cf74:	4b01      	ldr	r3, [pc, #4]	@ (800cf7c <rcl_get_zero_initialized_publisher+0x8>)
 800cf76:	6818      	ldr	r0, [r3, #0]
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	0801b4a4 	.word	0x0801b4a4

0800cf80 <rcl_publisher_init>:
 800cf80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf84:	b088      	sub	sp, #32
 800cf86:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800cf88:	2d00      	cmp	r5, #0
 800cf8a:	d069      	beq.n	800d060 <rcl_publisher_init+0xe0>
 800cf8c:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800cf90:	4604      	mov	r4, r0
 800cf92:	4648      	mov	r0, r9
 800cf94:	460e      	mov	r6, r1
 800cf96:	4690      	mov	r8, r2
 800cf98:	461f      	mov	r7, r3
 800cf9a:	f001 f82b 	bl	800dff4 <rcutils_allocator_is_valid>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	d05e      	beq.n	800d060 <rcl_publisher_init+0xe0>
 800cfa2:	2c00      	cmp	r4, #0
 800cfa4:	d05c      	beq.n	800d060 <rcl_publisher_init+0xe0>
 800cfa6:	f8d4 a000 	ldr.w	sl, [r4]
 800cfaa:	f1ba 0f00 	cmp.w	sl, #0
 800cfae:	d004      	beq.n	800cfba <rcl_publisher_init+0x3a>
 800cfb0:	2764      	movs	r7, #100	@ 0x64
 800cfb2:	4638      	mov	r0, r7
 800cfb4:	b008      	add	sp, #32
 800cfb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f007 fdce 	bl	8014b5c <rcl_node_is_valid>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d052      	beq.n	800d06a <rcl_publisher_init+0xea>
 800cfc4:	f1b8 0f00 	cmp.w	r8, #0
 800cfc8:	d04a      	beq.n	800d060 <rcl_publisher_init+0xe0>
 800cfca:	2f00      	cmp	r7, #0
 800cfcc:	d048      	beq.n	800d060 <rcl_publisher_init+0xe0>
 800cfce:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800cfd2:	aa07      	add	r2, sp, #28
 800cfd4:	9205      	str	r2, [sp, #20]
 800cfd6:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800cfda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cfde:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800cfe2:	f8cd a01c 	str.w	sl, [sp, #28]
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	e899 000c 	ldmia.w	r9, {r2, r3}
 800cfec:	4630      	mov	r0, r6
 800cfee:	f007 fe09 	bl	8014c04 <rcl_node_resolve_name>
 800cff2:	4607      	mov	r7, r0
 800cff4:	2800      	cmp	r0, #0
 800cff6:	d14f      	bne.n	800d098 <rcl_publisher_init+0x118>
 800cff8:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800cffa:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800cffc:	20c8      	movs	r0, #200	@ 0xc8
 800cffe:	4798      	blx	r3
 800d000:	6020      	str	r0, [r4, #0]
 800d002:	2800      	cmp	r0, #0
 800d004:	d04e      	beq.n	800d0a4 <rcl_publisher_init+0x124>
 800d006:	4630      	mov	r0, r6
 800d008:	f007 fdca 	bl	8014ba0 <rcl_node_get_rmw_handle>
 800d00c:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d010:	9300      	str	r3, [sp, #0]
 800d012:	9a07      	ldr	r2, [sp, #28]
 800d014:	6827      	ldr	r7, [r4, #0]
 800d016:	462b      	mov	r3, r5
 800d018:	4641      	mov	r1, r8
 800d01a:	f001 fcad 	bl	800e978 <rmw_create_publisher>
 800d01e:	6823      	ldr	r3, [r4, #0]
 800d020:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800d024:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d028:	b370      	cbz	r0, 800d088 <rcl_publisher_init+0x108>
 800d02a:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800d02e:	f001 fd81 	bl	800eb34 <rmw_publisher_get_actual_qos>
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	4607      	mov	r7, r0
 800d036:	b9d0      	cbnz	r0, 800d06e <rcl_publisher_init+0xee>
 800d038:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800d03c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800d040:	4629      	mov	r1, r5
 800d042:	2270      	movs	r2, #112	@ 0x70
 800d044:	4618      	mov	r0, r3
 800d046:	f00d fb64 	bl	801a712 <memcpy>
 800d04a:	6832      	ldr	r2, [r6, #0]
 800d04c:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800d050:	9807      	ldr	r0, [sp, #28]
 800d052:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800d054:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d056:	4798      	blx	r3
 800d058:	4638      	mov	r0, r7
 800d05a:	b008      	add	sp, #32
 800d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d060:	270b      	movs	r7, #11
 800d062:	4638      	mov	r0, r7
 800d064:	b008      	add	sp, #32
 800d066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06a:	27c8      	movs	r7, #200	@ 0xc8
 800d06c:	e7a1      	b.n	800cfb2 <rcl_publisher_init+0x32>
 800d06e:	b18b      	cbz	r3, 800d094 <rcl_publisher_init+0x114>
 800d070:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d074:	b142      	cbz	r2, 800d088 <rcl_publisher_init+0x108>
 800d076:	4630      	mov	r0, r6
 800d078:	f007 fd92 	bl	8014ba0 <rcl_node_get_rmw_handle>
 800d07c:	6823      	ldr	r3, [r4, #0]
 800d07e:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800d082:	f001 fd67 	bl	800eb54 <rmw_destroy_publisher>
 800d086:	6823      	ldr	r3, [r4, #0]
 800d088:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800d08a:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800d08c:	4618      	mov	r0, r3
 800d08e:	4790      	blx	r2
 800d090:	2300      	movs	r3, #0
 800d092:	6023      	str	r3, [r4, #0]
 800d094:	2701      	movs	r7, #1
 800d096:	e7db      	b.n	800d050 <rcl_publisher_init+0xd0>
 800d098:	2867      	cmp	r0, #103	@ 0x67
 800d09a:	d0d9      	beq.n	800d050 <rcl_publisher_init+0xd0>
 800d09c:	2869      	cmp	r0, #105	@ 0x69
 800d09e:	d003      	beq.n	800d0a8 <rcl_publisher_init+0x128>
 800d0a0:	280a      	cmp	r0, #10
 800d0a2:	d1f7      	bne.n	800d094 <rcl_publisher_init+0x114>
 800d0a4:	270a      	movs	r7, #10
 800d0a6:	e7d3      	b.n	800d050 <rcl_publisher_init+0xd0>
 800d0a8:	2767      	movs	r7, #103	@ 0x67
 800d0aa:	e7d1      	b.n	800d050 <rcl_publisher_init+0xd0>

0800d0ac <rcl_publisher_get_default_options>:
 800d0ac:	b570      	push	{r4, r5, r6, lr}
 800d0ae:	4d14      	ldr	r5, [pc, #80]	@ (800d100 <rcl_publisher_get_default_options+0x54>)
 800d0b0:	4914      	ldr	r1, [pc, #80]	@ (800d104 <rcl_publisher_get_default_options+0x58>)
 800d0b2:	b088      	sub	sp, #32
 800d0b4:	4604      	mov	r4, r0
 800d0b6:	2250      	movs	r2, #80	@ 0x50
 800d0b8:	4628      	mov	r0, r5
 800d0ba:	f00d fb2a 	bl	801a712 <memcpy>
 800d0be:	a802      	add	r0, sp, #8
 800d0c0:	f000 ff8a 	bl	800dfd8 <rcutils_get_default_allocator>
 800d0c4:	f10d 0c08 	add.w	ip, sp, #8
 800d0c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d0cc:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800d0d0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d0d4:	466e      	mov	r6, sp
 800d0d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d0da:	f8ce 3000 	str.w	r3, [lr]
 800d0de:	4630      	mov	r0, r6
 800d0e0:	f001 f82a 	bl	800e138 <rmw_get_default_publisher_options>
 800d0e4:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d0e8:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800d0ec:	e883 0003 	stmia.w	r3, {r0, r1}
 800d0f0:	2270      	movs	r2, #112	@ 0x70
 800d0f2:	4629      	mov	r1, r5
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	f00d fb0c 	bl	801a712 <memcpy>
 800d0fa:	4620      	mov	r0, r4
 800d0fc:	b008      	add	sp, #32
 800d0fe:	bd70      	pop	{r4, r5, r6, pc}
 800d100:	200065a8 	.word	0x200065a8
 800d104:	0801b4a8 	.word	0x0801b4a8

0800d108 <rcl_publish>:
 800d108:	b1f8      	cbz	r0, 800d14a <rcl_publish+0x42>
 800d10a:	6803      	ldr	r3, [r0, #0]
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	4604      	mov	r4, r0
 800d110:	b1b3      	cbz	r3, 800d140 <rcl_publish+0x38>
 800d112:	4616      	mov	r6, r2
 800d114:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d118:	b192      	cbz	r2, 800d140 <rcl_publish+0x38>
 800d11a:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d11e:	460d      	mov	r5, r1
 800d120:	f007 fa56 	bl	80145d0 <rcl_context_is_valid>
 800d124:	b160      	cbz	r0, 800d140 <rcl_publish+0x38>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d12c:	b140      	cbz	r0, 800d140 <rcl_publish+0x38>
 800d12e:	b155      	cbz	r5, 800d146 <rcl_publish+0x3e>
 800d130:	4632      	mov	r2, r6
 800d132:	4629      	mov	r1, r5
 800d134:	f001 fbc0 	bl	800e8b8 <rmw_publish>
 800d138:	3800      	subs	r0, #0
 800d13a:	bf18      	it	ne
 800d13c:	2001      	movne	r0, #1
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
 800d140:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d144:	bd70      	pop	{r4, r5, r6, pc}
 800d146:	200b      	movs	r0, #11
 800d148:	bd70      	pop	{r4, r5, r6, pc}
 800d14a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800d14e:	4770      	bx	lr

0800d150 <rcl_publisher_is_valid>:
 800d150:	b1a0      	cbz	r0, 800d17c <rcl_publisher_is_valid+0x2c>
 800d152:	6803      	ldr	r3, [r0, #0]
 800d154:	b510      	push	{r4, lr}
 800d156:	4604      	mov	r4, r0
 800d158:	b173      	cbz	r3, 800d178 <rcl_publisher_is_valid+0x28>
 800d15a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800d15e:	b15a      	cbz	r2, 800d178 <rcl_publisher_is_valid+0x28>
 800d160:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800d164:	f007 fa34 	bl	80145d0 <rcl_context_is_valid>
 800d168:	b130      	cbz	r0, 800d178 <rcl_publisher_is_valid+0x28>
 800d16a:	6823      	ldr	r3, [r4, #0]
 800d16c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800d170:	3800      	subs	r0, #0
 800d172:	bf18      	it	ne
 800d174:	2001      	movne	r0, #1
 800d176:	bd10      	pop	{r4, pc}
 800d178:	2000      	movs	r0, #0
 800d17a:	bd10      	pop	{r4, pc}
 800d17c:	2000      	movs	r0, #0
 800d17e:	4770      	bx	lr

0800d180 <rcl_publisher_is_valid_except_context>:
 800d180:	b130      	cbz	r0, 800d190 <rcl_publisher_is_valid_except_context+0x10>
 800d182:	6800      	ldr	r0, [r0, #0]
 800d184:	b120      	cbz	r0, 800d190 <rcl_publisher_is_valid_except_context+0x10>
 800d186:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800d18a:	3800      	subs	r0, #0
 800d18c:	bf18      	it	ne
 800d18e:	2001      	movne	r0, #1
 800d190:	4770      	bx	lr
 800d192:	bf00      	nop

0800d194 <_rclc_check_for_new_data>:
 800d194:	2800      	cmp	r0, #0
 800d196:	d046      	beq.n	800d226 <_rclc_check_for_new_data+0x92>
 800d198:	b510      	push	{r4, lr}
 800d19a:	7802      	ldrb	r2, [r0, #0]
 800d19c:	b084      	sub	sp, #16
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2a0a      	cmp	r2, #10
 800d1a2:	d842      	bhi.n	800d22a <_rclc_check_for_new_data+0x96>
 800d1a4:	e8df f002 	tbb	[pc, r2]
 800d1a8:	14181212 	.word	0x14181212
 800d1ac:	06060614 	.word	0x06060614
 800d1b0:	2e1a      	.short	0x2e1a
 800d1b2:	16          	.byte	0x16
 800d1b3:	00          	.byte	0x00
 800d1b4:	6a0a      	ldr	r2, [r1, #32]
 800d1b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800d1b8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d1bc:	2000      	movs	r0, #0
 800d1be:	1a12      	subs	r2, r2, r0
 800d1c0:	bf18      	it	ne
 800d1c2:	2201      	movne	r2, #1
 800d1c4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800d1c8:	b004      	add	sp, #16
 800d1ca:	bd10      	pop	{r4, pc}
 800d1cc:	680a      	ldr	r2, [r1, #0]
 800d1ce:	e7f2      	b.n	800d1b6 <_rclc_check_for_new_data+0x22>
 800d1d0:	698a      	ldr	r2, [r1, #24]
 800d1d2:	e7f0      	b.n	800d1b6 <_rclc_check_for_new_data+0x22>
 800d1d4:	688a      	ldr	r2, [r1, #8]
 800d1d6:	e7ee      	b.n	800d1b6 <_rclc_check_for_new_data+0x22>
 800d1d8:	690a      	ldr	r2, [r1, #16]
 800d1da:	e7ec      	b.n	800d1b6 <_rclc_check_for_new_data+0x22>
 800d1dc:	685c      	ldr	r4, [r3, #4]
 800d1de:	4608      	mov	r0, r1
 800d1e0:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800d1e4:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800d1e8:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800d1ec:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800d1f6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800d1fa:	f104 0110 	add.w	r1, r4, #16
 800d1fe:	f009 f997 	bl	8016530 <rcl_action_client_wait_set_get_entities_ready>
 800d202:	e7e1      	b.n	800d1c8 <_rclc_check_for_new_data+0x34>
 800d204:	685c      	ldr	r4, [r3, #4]
 800d206:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800d20a:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800d20e:	e9cd 3200 	strd	r3, r2, [sp]
 800d212:	4608      	mov	r0, r1
 800d214:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800d218:	f104 0220 	add.w	r2, r4, #32
 800d21c:	f104 0110 	add.w	r1, r4, #16
 800d220:	f009 fb9e 	bl	8016960 <rcl_action_server_wait_set_get_entities_ready>
 800d224:	e7d0      	b.n	800d1c8 <_rclc_check_for_new_data+0x34>
 800d226:	200b      	movs	r0, #11
 800d228:	4770      	bx	lr
 800d22a:	2001      	movs	r0, #1
 800d22c:	e7cc      	b.n	800d1c8 <_rclc_check_for_new_data+0x34>
 800d22e:	bf00      	nop

0800d230 <_rclc_take_new_data>:
 800d230:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d232:	b09b      	sub	sp, #108	@ 0x6c
 800d234:	2800      	cmp	r0, #0
 800d236:	f000 8088 	beq.w	800d34a <_rclc_take_new_data+0x11a>
 800d23a:	7803      	ldrb	r3, [r0, #0]
 800d23c:	4604      	mov	r4, r0
 800d23e:	2b0a      	cmp	r3, #10
 800d240:	f200 8167 	bhi.w	800d512 <_rclc_take_new_data+0x2e2>
 800d244:	e8df f003 	tbb	[pc, r3]
 800d248:	44152d2d 	.word	0x44152d2d
 800d24c:	19191944 	.word	0x19191944
 800d250:	065a      	.short	0x065a
 800d252:	15          	.byte	0x15
 800d253:	00          	.byte	0x00
 800d254:	6840      	ldr	r0, [r0, #4]
 800d256:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	f040 80b2 	bne.w	800d3c4 <_rclc_take_new_data+0x194>
 800d260:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800d264:	2b00      	cmp	r3, #0
 800d266:	f040 80e4 	bne.w	800d432 <_rclc_take_new_data+0x202>
 800d26a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d16f      	bne.n	800d352 <_rclc_take_new_data+0x122>
 800d272:	2500      	movs	r5, #0
 800d274:	4628      	mov	r0, r5
 800d276:	b01b      	add	sp, #108	@ 0x6c
 800d278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d27a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d27c:	6a0b      	ldr	r3, [r1, #32]
 800d27e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d0f5      	beq.n	800d272 <_rclc_take_new_data+0x42>
 800d286:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d28a:	f104 0110 	add.w	r1, r4, #16
 800d28e:	f007 fd67 	bl	8014d60 <rcl_take_request>
 800d292:	4605      	mov	r5, r0
 800d294:	2800      	cmp	r0, #0
 800d296:	d0ec      	beq.n	800d272 <_rclc_take_new_data+0x42>
 800d298:	f240 2359 	movw	r3, #601	@ 0x259
 800d29c:	4298      	cmp	r0, r3
 800d29e:	d013      	beq.n	800d2c8 <_rclc_take_new_data+0x98>
 800d2a0:	e029      	b.n	800d2f6 <_rclc_take_new_data+0xc6>
 800d2a2:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d2a4:	680b      	ldr	r3, [r1, #0]
 800d2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0e1      	beq.n	800d272 <_rclc_take_new_data+0x42>
 800d2ae:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	aa0a      	add	r2, sp, #40	@ 0x28
 800d2b6:	f007 fdb5 	bl	8014e24 <rcl_take>
 800d2ba:	4605      	mov	r5, r0
 800d2bc:	2800      	cmp	r0, #0
 800d2be:	d0d9      	beq.n	800d274 <_rclc_take_new_data+0x44>
 800d2c0:	f240 1391 	movw	r3, #401	@ 0x191
 800d2c4:	4298      	cmp	r0, r3
 800d2c6:	d116      	bne.n	800d2f6 <_rclc_take_new_data+0xc6>
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800d2ce:	e7d1      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d2d0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800d2d2:	698b      	ldr	r3, [r1, #24]
 800d2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d0ca      	beq.n	800d272 <_rclc_take_new_data+0x42>
 800d2dc:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800d2e0:	f104 0110 	add.w	r1, r4, #16
 800d2e4:	f007 f904 	bl	80144f0 <rcl_take_response>
 800d2e8:	4605      	mov	r5, r0
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d0c1      	beq.n	800d272 <_rclc_take_new_data+0x42>
 800d2ee:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800d2f2:	4298      	cmp	r0, r3
 800d2f4:	d0be      	beq.n	800d274 <_rclc_take_new_data+0x44>
 800d2f6:	f000 fea3 	bl	800e040 <rcutils_reset_error>
 800d2fa:	e7bb      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d2fc:	6840      	ldr	r0, [r0, #4]
 800d2fe:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d302:	2b00      	cmp	r3, #0
 800d304:	d17d      	bne.n	800d402 <_rclc_take_new_data+0x1d2>
 800d306:	69c3      	ldr	r3, [r0, #28]
 800d308:	b11b      	cbz	r3, 800d312 <_rclc_take_new_data+0xe2>
 800d30a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d144      	bne.n	800d39c <_rclc_take_new_data+0x16c>
 800d312:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d316:	2b00      	cmp	r3, #0
 800d318:	f040 80ac 	bne.w	800d474 <_rclc_take_new_data+0x244>
 800d31c:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d320:	2b00      	cmp	r3, #0
 800d322:	d0a6      	beq.n	800d272 <_rclc_take_new_data+0x42>
 800d324:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800d326:	a90a      	add	r1, sp, #40	@ 0x28
 800d328:	3010      	adds	r0, #16
 800d32a:	f008 ffd9 	bl	80162e0 <rcl_action_take_result_response>
 800d32e:	4605      	mov	r5, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	d1e0      	bne.n	800d2f6 <_rclc_take_new_data+0xc6>
 800d334:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d338:	6860      	ldr	r0, [r4, #4]
 800d33a:	f009 fc35 	bl	8016ba8 <rclc_action_find_handle_by_result_request_sequence_number>
 800d33e:	2800      	cmp	r0, #0
 800d340:	d098      	beq.n	800d274 <_rclc_take_new_data+0x44>
 800d342:	2301      	movs	r3, #1
 800d344:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800d348:	e794      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d34a:	250b      	movs	r5, #11
 800d34c:	4628      	mov	r0, r5
 800d34e:	b01b      	add	sp, #108	@ 0x6c
 800d350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d352:	ae04      	add	r6, sp, #16
 800d354:	aa0a      	add	r2, sp, #40	@ 0x28
 800d356:	3010      	adds	r0, #16
 800d358:	4631      	mov	r1, r6
 800d35a:	f009 fa35 	bl	80167c8 <rcl_action_take_cancel_request>
 800d35e:	4605      	mov	r5, r0
 800d360:	2800      	cmp	r0, #0
 800d362:	d1c8      	bne.n	800d2f6 <_rclc_take_new_data+0xc6>
 800d364:	6860      	ldr	r0, [r4, #4]
 800d366:	a90a      	add	r1, sp, #40	@ 0x28
 800d368:	f009 fbdc 	bl	8016b24 <rclc_action_find_goal_handle_by_uuid>
 800d36c:	4607      	mov	r7, r0
 800d36e:	2800      	cmp	r0, #0
 800d370:	f000 80bb 	beq.w	800d4ea <_rclc_take_new_data+0x2ba>
 800d374:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800d378:	2101      	movs	r1, #1
 800d37a:	f009 fb5d 	bl	8016a38 <rcl_action_transition_goal_state>
 800d37e:	2803      	cmp	r0, #3
 800d380:	4684      	mov	ip, r0
 800d382:	f040 80a7 	bne.w	800d4d4 <_rclc_take_new_data+0x2a4>
 800d386:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800d388:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800d38c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d38e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800d392:	e884 0003 	stmia.w	r4, {r0, r1}
 800d396:	f887 c008 	strb.w	ip, [r7, #8]
 800d39a:	e76b      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d39c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d39e:	3010      	adds	r0, #16
 800d3a0:	f009 f81e 	bl	80163e0 <rcl_action_take_feedback>
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	2800      	cmp	r0, #0
 800d3a8:	d1a5      	bne.n	800d2f6 <_rclc_take_new_data+0xc6>
 800d3aa:	6860      	ldr	r0, [r4, #4]
 800d3ac:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d3ae:	f009 fbb9 	bl	8016b24 <rclc_action_find_goal_handle_by_uuid>
 800d3b2:	4603      	mov	r3, r0
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	f000 80a3 	beq.w	800d500 <_rclc_take_new_data+0x2d0>
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	6860      	ldr	r0, [r4, #4]
 800d3be:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800d3c2:	e7a6      	b.n	800d312 <_rclc_take_new_data+0xe2>
 800d3c4:	f009 fb88 	bl	8016ad8 <rclc_action_take_goal_handle>
 800d3c8:	4606      	mov	r6, r0
 800d3ca:	6860      	ldr	r0, [r4, #4]
 800d3cc:	2e00      	cmp	r6, #0
 800d3ce:	f43f af47 	beq.w	800d260 <_rclc_take_new_data+0x30>
 800d3d2:	6070      	str	r0, [r6, #4]
 800d3d4:	69f2      	ldr	r2, [r6, #28]
 800d3d6:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800d3da:	3010      	adds	r0, #16
 800d3dc:	f009 f93c 	bl	8016658 <rcl_action_take_goal_request>
 800d3e0:	4605      	mov	r5, r0
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	f040 808e 	bne.w	800d504 <_rclc_take_new_data+0x2d4>
 800d3e8:	69f7      	ldr	r7, [r6, #28]
 800d3ea:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d3ec:	7235      	strb	r5, [r6, #8]
 800d3ee:	f8c6 0009 	str.w	r0, [r6, #9]
 800d3f2:	f8c6 100d 	str.w	r1, [r6, #13]
 800d3f6:	6860      	ldr	r0, [r4, #4]
 800d3f8:	f8c6 2011 	str.w	r2, [r6, #17]
 800d3fc:	f8c6 3015 	str.w	r3, [r6, #21]
 800d400:	e72e      	b.n	800d260 <_rclc_take_new_data+0x30>
 800d402:	aa04      	add	r2, sp, #16
 800d404:	a90a      	add	r1, sp, #40	@ 0x28
 800d406:	3010      	adds	r0, #16
 800d408:	f008 fef2 	bl	80161f0 <rcl_action_take_goal_response>
 800d40c:	4605      	mov	r5, r0
 800d40e:	2800      	cmp	r0, #0
 800d410:	f47f af71 	bne.w	800d2f6 <_rclc_take_new_data+0xc6>
 800d414:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d418:	6860      	ldr	r0, [r4, #4]
 800d41a:	f009 fbb3 	bl	8016b84 <rclc_action_find_handle_by_goal_request_sequence_number>
 800d41e:	b130      	cbz	r0, 800d42e <_rclc_take_new_data+0x1fe>
 800d420:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800d424:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d428:	2201      	movs	r2, #1
 800d42a:	f880 2020 	strb.w	r2, [r0, #32]
 800d42e:	6860      	ldr	r0, [r4, #4]
 800d430:	e769      	b.n	800d306 <_rclc_take_new_data+0xd6>
 800d432:	aa04      	add	r2, sp, #16
 800d434:	3010      	adds	r0, #16
 800d436:	a90a      	add	r1, sp, #40	@ 0x28
 800d438:	f009 f986 	bl	8016748 <rcl_action_take_result_request>
 800d43c:	4605      	mov	r5, r0
 800d43e:	2800      	cmp	r0, #0
 800d440:	f47f af59 	bne.w	800d2f6 <_rclc_take_new_data+0xc6>
 800d444:	6860      	ldr	r0, [r4, #4]
 800d446:	a904      	add	r1, sp, #16
 800d448:	f009 fb6c 	bl	8016b24 <rclc_action_find_goal_handle_by_uuid>
 800d44c:	4607      	mov	r7, r0
 800d44e:	b160      	cbz	r0, 800d46a <_rclc_take_new_data+0x23a>
 800d450:	ad0a      	add	r5, sp, #40	@ 0x28
 800d452:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800d456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d458:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d45a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800d45e:	f04f 0c02 	mov.w	ip, #2
 800d462:	e886 0003 	stmia.w	r6, {r0, r1}
 800d466:	f887 c008 	strb.w	ip, [r7, #8]
 800d46a:	6860      	ldr	r0, [r4, #4]
 800d46c:	2300      	movs	r3, #0
 800d46e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800d472:	e6fa      	b.n	800d26a <_rclc_take_new_data+0x3a>
 800d474:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800d478:	a90a      	add	r1, sp, #40	@ 0x28
 800d47a:	3010      	adds	r0, #16
 800d47c:	f008 ff70 	bl	8016360 <rcl_action_take_cancel_response>
 800d480:	4605      	mov	r5, r0
 800d482:	2800      	cmp	r0, #0
 800d484:	f47f af37 	bne.w	800d2f6 <_rclc_take_new_data+0xc6>
 800d488:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d48c:	6860      	ldr	r0, [r4, #4]
 800d48e:	f009 fb9d 	bl	8016bcc <rclc_action_find_handle_by_cancel_request_sequence_number>
 800d492:	4606      	mov	r6, r0
 800d494:	6860      	ldr	r0, [r4, #4]
 800d496:	2e00      	cmp	r6, #0
 800d498:	f43f af40 	beq.w	800d31c <_rclc_take_new_data+0xec>
 800d49c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d49e:	2701      	movs	r7, #1
 800d4a0:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f43f af3a 	beq.w	800d31c <_rclc_take_new_data+0xec>
 800d4a8:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d4aa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800d4ae:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800d4b2:	f009 fb37 	bl	8016b24 <rclc_action_find_goal_handle_by_uuid>
 800d4b6:	b138      	cbz	r0, 800d4c8 <_rclc_take_new_data+0x298>
 800d4b8:	6860      	ldr	r0, [r4, #4]
 800d4ba:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d4bc:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800d4c0:	3501      	adds	r5, #1
 800d4c2:	42ab      	cmp	r3, r5
 800d4c4:	d8f0      	bhi.n	800d4a8 <_rclc_take_new_data+0x278>
 800d4c6:	e729      	b.n	800d31c <_rclc_take_new_data+0xec>
 800d4c8:	6860      	ldr	r0, [r4, #4]
 800d4ca:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800d4cc:	3501      	adds	r5, #1
 800d4ce:	42ab      	cmp	r3, r5
 800d4d0:	d8ea      	bhi.n	800d4a8 <_rclc_take_new_data+0x278>
 800d4d2:	e723      	b.n	800d31c <_rclc_take_new_data+0xec>
 800d4d4:	ab06      	add	r3, sp, #24
 800d4d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4d8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d4dc:	2103      	movs	r1, #3
 800d4de:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d4e2:	6860      	ldr	r0, [r4, #4]
 800d4e4:	f009 fbe8 	bl	8016cb8 <rclc_action_server_goal_cancel_reject>
 800d4e8:	e6c4      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d4ea:	ab06      	add	r3, sp, #24
 800d4ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d4ee:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d4f2:	2102      	movs	r1, #2
 800d4f4:	e896 000c 	ldmia.w	r6, {r2, r3}
 800d4f8:	6860      	ldr	r0, [r4, #4]
 800d4fa:	f009 fbdd 	bl	8016cb8 <rclc_action_server_goal_cancel_reject>
 800d4fe:	e6b9      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d500:	6860      	ldr	r0, [r4, #4]
 800d502:	e706      	b.n	800d312 <_rclc_take_new_data+0xe2>
 800d504:	6860      	ldr	r0, [r4, #4]
 800d506:	4631      	mov	r1, r6
 800d508:	f009 faf6 	bl	8016af8 <rclc_action_remove_used_goal_handle>
 800d50c:	f000 fd98 	bl	800e040 <rcutils_reset_error>
 800d510:	e6b0      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d512:	2501      	movs	r5, #1
 800d514:	e6ae      	b.n	800d274 <_rclc_take_new_data+0x44>
 800d516:	bf00      	nop

0800d518 <_rclc_execute.part.0>:
 800d518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d51a:	7803      	ldrb	r3, [r0, #0]
 800d51c:	b087      	sub	sp, #28
 800d51e:	4604      	mov	r4, r0
 800d520:	2b0a      	cmp	r3, #10
 800d522:	f200 8136 	bhi.w	800d792 <_rclc_execute.part.0+0x27a>
 800d526:	e8df f003 	tbb	[pc, r3]
 800d52a:	435e      	.short	0x435e
 800d52c:	06a1664f 	.word	0x06a1664f
 800d530:	6c1e0606 	.word	0x6c1e0606
 800d534:	59          	.byte	0x59
 800d535:	00          	.byte	0x00
 800d536:	2b06      	cmp	r3, #6
 800d538:	f000 8122 	beq.w	800d780 <_rclc_execute.part.0+0x268>
 800d53c:	2b07      	cmp	r3, #7
 800d53e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d540:	f040 8118 	bne.w	800d774 <_rclc_execute.part.0+0x25c>
 800d544:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800d548:	6880      	ldr	r0, [r0, #8]
 800d54a:	4798      	blx	r3
 800d54c:	f104 0110 	add.w	r1, r4, #16
 800d550:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800d552:	6860      	ldr	r0, [r4, #4]
 800d554:	f007 fc44 	bl	8014de0 <rcl_send_response>
 800d558:	2800      	cmp	r0, #0
 800d55a:	d033      	beq.n	800d5c4 <_rclc_execute.part.0+0xac>
 800d55c:	9005      	str	r0, [sp, #20]
 800d55e:	f000 fd6f 	bl	800e040 <rcutils_reset_error>
 800d562:	9805      	ldr	r0, [sp, #20]
 800d564:	e02e      	b.n	800d5c4 <_rclc_execute.part.0+0xac>
 800d566:	6840      	ldr	r0, [r0, #4]
 800d568:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	f000 8086 	beq.w	800d67e <_rclc_execute.part.0+0x166>
 800d572:	2600      	movs	r6, #0
 800d574:	2701      	movs	r7, #1
 800d576:	e004      	b.n	800d582 <_rclc_execute.part.0+0x6a>
 800d578:	f009 fa88 	bl	8016a8c <rclc_action_send_result_request>
 800d57c:	b998      	cbnz	r0, 800d5a6 <_rclc_execute.part.0+0x8e>
 800d57e:	722f      	strb	r7, [r5, #8]
 800d580:	6860      	ldr	r0, [r4, #4]
 800d582:	f009 fb35 	bl	8016bf0 <rclc_action_find_first_handle_with_goal_response>
 800d586:	4605      	mov	r5, r0
 800d588:	2800      	cmp	r0, #0
 800d58a:	d077      	beq.n	800d67c <_rclc_execute.part.0+0x164>
 800d58c:	6863      	ldr	r3, [r4, #4]
 800d58e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d590:	699b      	ldr	r3, [r3, #24]
 800d592:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800d596:	f885 6020 	strb.w	r6, [r5, #32]
 800d59a:	4798      	blx	r3
 800d59c:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1e8      	bne.n	800d578 <_rclc_execute.part.0+0x60>
 800d5a6:	6860      	ldr	r0, [r4, #4]
 800d5a8:	4629      	mov	r1, r5
 800d5aa:	f009 faa5 	bl	8016af8 <rclc_action_remove_used_goal_handle>
 800d5ae:	e7e7      	b.n	800d580 <_rclc_execute.part.0+0x68>
 800d5b0:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d5b4:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800d5b8:	2d00      	cmp	r5, #0
 800d5ba:	f000 80c9 	beq.w	800d750 <_rclc_execute.part.0+0x238>
 800d5be:	6880      	ldr	r0, [r0, #8]
 800d5c0:	4798      	blx	r3
 800d5c2:	2000      	movs	r0, #0
 800d5c4:	b007      	add	sp, #28
 800d5c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5c8:	6840      	ldr	r0, [r0, #4]
 800d5ca:	f007 ff3b 	bl	8015444 <rcl_timer_call>
 800d5ce:	f240 3321 	movw	r3, #801	@ 0x321
 800d5d2:	4298      	cmp	r0, r3
 800d5d4:	d004      	beq.n	800d5e0 <_rclc_execute.part.0+0xc8>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d0f4      	beq.n	800d5c4 <_rclc_execute.part.0+0xac>
 800d5da:	e7bf      	b.n	800d55c <_rclc_execute.part.0+0x44>
 800d5dc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5de:	4798      	blx	r3
 800d5e0:	2000      	movs	r0, #0
 800d5e2:	b007      	add	sp, #28
 800d5e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5e6:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800d5ea:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5ec:	b925      	cbnz	r5, 800d5f8 <_rclc_execute.part.0+0xe0>
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	4798      	blx	r3
 800d5f2:	4628      	mov	r0, r5
 800d5f4:	e7e6      	b.n	800d5c4 <_rclc_execute.part.0+0xac>
 800d5f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d5f8:	68a0      	ldr	r0, [r4, #8]
 800d5fa:	4798      	blx	r3
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	b007      	add	sp, #28
 800d600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d602:	6840      	ldr	r0, [r0, #4]
 800d604:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d608:	bb3b      	cbnz	r3, 800d65a <_rclc_execute.part.0+0x142>
 800d60a:	f890 3020 	ldrb.w	r3, [r0, #32]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d07b      	beq.n	800d70a <_rclc_execute.part.0+0x1f2>
 800d612:	f640 0634 	movw	r6, #2100	@ 0x834
 800d616:	2701      	movs	r7, #1
 800d618:	e007      	b.n	800d62a <_rclc_execute.part.0+0x112>
 800d61a:	4628      	mov	r0, r5
 800d61c:	f009 fb00 	bl	8016c20 <rclc_action_server_response_goal_request>
 800d620:	6860      	ldr	r0, [r4, #4]
 800d622:	4629      	mov	r1, r5
 800d624:	f009 fa68 	bl	8016af8 <rclc_action_remove_used_goal_handle>
 800d628:	6860      	ldr	r0, [r4, #4]
 800d62a:	2100      	movs	r1, #0
 800d62c:	f009 fa92 	bl	8016b54 <rclc_action_find_first_handle_by_status>
 800d630:	4605      	mov	r5, r0
 800d632:	2800      	cmp	r0, #0
 800d634:	d066      	beq.n	800d704 <_rclc_execute.part.0+0x1ec>
 800d636:	6863      	ldr	r3, [r4, #4]
 800d638:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d63a:	699b      	ldr	r3, [r3, #24]
 800d63c:	4798      	blx	r3
 800d63e:	42b0      	cmp	r0, r6
 800d640:	f04f 0100 	mov.w	r1, #0
 800d644:	d1e9      	bne.n	800d61a <_rclc_execute.part.0+0x102>
 800d646:	2101      	movs	r1, #1
 800d648:	4628      	mov	r0, r5
 800d64a:	f009 fae9 	bl	8016c20 <rclc_action_server_response_goal_request>
 800d64e:	722f      	strb	r7, [r5, #8]
 800d650:	e7ea      	b.n	800d628 <_rclc_execute.part.0+0x110>
 800d652:	6848      	ldr	r0, [r1, #4]
 800d654:	f009 fa50 	bl	8016af8 <rclc_action_remove_used_goal_handle>
 800d658:	6860      	ldr	r0, [r4, #4]
 800d65a:	f009 fa87 	bl	8016b6c <rclc_action_find_first_terminated_handle>
 800d65e:	4601      	mov	r1, r0
 800d660:	2800      	cmp	r0, #0
 800d662:	d1f6      	bne.n	800d652 <_rclc_execute.part.0+0x13a>
 800d664:	6860      	ldr	r0, [r4, #4]
 800d666:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800d66a:	e7ce      	b.n	800d60a <_rclc_execute.part.0+0xf2>
 800d66c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d66e:	6880      	ldr	r0, [r0, #8]
 800d670:	f104 0110 	add.w	r1, r4, #16
 800d674:	4798      	blx	r3
 800d676:	2000      	movs	r0, #0
 800d678:	b007      	add	sp, #28
 800d67a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d67c:	6860      	ldr	r0, [r4, #4]
 800d67e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800d682:	b18b      	cbz	r3, 800d6a8 <_rclc_execute.part.0+0x190>
 800d684:	68c5      	ldr	r5, [r0, #12]
 800d686:	b32d      	cbz	r5, 800d6d4 <_rclc_execute.part.0+0x1bc>
 800d688:	2600      	movs	r6, #0
 800d68a:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800d68e:	b143      	cbz	r3, 800d6a2 <_rclc_execute.part.0+0x18a>
 800d690:	69c3      	ldr	r3, [r0, #28]
 800d692:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800d696:	b123      	cbz	r3, 800d6a2 <_rclc_execute.part.0+0x18a>
 800d698:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d69a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d69c:	4628      	mov	r0, r5
 800d69e:	4798      	blx	r3
 800d6a0:	6860      	ldr	r0, [r4, #4]
 800d6a2:	682d      	ldr	r5, [r5, #0]
 800d6a4:	2d00      	cmp	r5, #0
 800d6a6:	d1f0      	bne.n	800d68a <_rclc_execute.part.0+0x172>
 800d6a8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800d6ac:	b193      	cbz	r3, 800d6d4 <_rclc_execute.part.0+0x1bc>
 800d6ae:	68c5      	ldr	r5, [r0, #12]
 800d6b0:	b185      	cbz	r5, 800d6d4 <_rclc_execute.part.0+0x1bc>
 800d6b2:	2600      	movs	r6, #0
 800d6b4:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800d6b8:	b14b      	cbz	r3, 800d6ce <_rclc_execute.part.0+0x1b6>
 800d6ba:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800d6bc:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800d6c0:	b12b      	cbz	r3, 800d6ce <_rclc_execute.part.0+0x1b6>
 800d6c2:	4628      	mov	r0, r5
 800d6c4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800d6c8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d6ca:	4798      	blx	r3
 800d6cc:	6860      	ldr	r0, [r4, #4]
 800d6ce:	682d      	ldr	r5, [r5, #0]
 800d6d0:	2d00      	cmp	r5, #0
 800d6d2:	d1ef      	bne.n	800d6b4 <_rclc_execute.part.0+0x19c>
 800d6d4:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d081      	beq.n	800d5e0 <_rclc_execute.part.0+0xc8>
 800d6dc:	2700      	movs	r7, #0
 800d6de:	e00b      	b.n	800d6f8 <_rclc_execute.part.0+0x1e0>
 800d6e0:	6863      	ldr	r3, [r4, #4]
 800d6e2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d6e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d6e6:	6a1e      	ldr	r6, [r3, #32]
 800d6e8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800d6ec:	47b0      	blx	r6
 800d6ee:	6860      	ldr	r0, [r4, #4]
 800d6f0:	4629      	mov	r1, r5
 800d6f2:	f009 fa01 	bl	8016af8 <rclc_action_remove_used_goal_handle>
 800d6f6:	6860      	ldr	r0, [r4, #4]
 800d6f8:	f009 fa86 	bl	8016c08 <rclc_action_find_first_handle_with_result_response>
 800d6fc:	4605      	mov	r5, r0
 800d6fe:	2800      	cmp	r0, #0
 800d700:	d1ee      	bne.n	800d6e0 <_rclc_execute.part.0+0x1c8>
 800d702:	e76d      	b.n	800d5e0 <_rclc_execute.part.0+0xc8>
 800d704:	6860      	ldr	r0, [r4, #4]
 800d706:	f880 5020 	strb.w	r5, [r0, #32]
 800d70a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f43f af66 	beq.w	800d5e0 <_rclc_execute.part.0+0xc8>
 800d714:	68c5      	ldr	r5, [r0, #12]
 800d716:	b1b5      	cbz	r5, 800d746 <_rclc_execute.part.0+0x22e>
 800d718:	2602      	movs	r6, #2
 800d71a:	e001      	b.n	800d720 <_rclc_execute.part.0+0x208>
 800d71c:	682d      	ldr	r5, [r5, #0]
 800d71e:	b195      	cbz	r5, 800d746 <_rclc_execute.part.0+0x22e>
 800d720:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800d724:	2b03      	cmp	r3, #3
 800d726:	d1f9      	bne.n	800d71c <_rclc_execute.part.0+0x204>
 800d728:	69c3      	ldr	r3, [r0, #28]
 800d72a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d72c:	4628      	mov	r0, r5
 800d72e:	4798      	blx	r3
 800d730:	4603      	mov	r3, r0
 800d732:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800d736:	4628      	mov	r0, r5
 800d738:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800d73c:	b163      	cbz	r3, 800d758 <_rclc_execute.part.0+0x240>
 800d73e:	f009 fa8f 	bl	8016c60 <rclc_action_server_goal_cancel_accept>
 800d742:	6860      	ldr	r0, [r4, #4]
 800d744:	e7ea      	b.n	800d71c <_rclc_execute.part.0+0x204>
 800d746:	2300      	movs	r3, #0
 800d748:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800d74c:	4618      	mov	r0, r3
 800d74e:	e739      	b.n	800d5c4 <_rclc_execute.part.0+0xac>
 800d750:	4628      	mov	r0, r5
 800d752:	4798      	blx	r3
 800d754:	4628      	mov	r0, r5
 800d756:	e735      	b.n	800d5c4 <_rclc_execute.part.0+0xac>
 800d758:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800d75a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800d75e:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800d762:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d766:	6860      	ldr	r0, [r4, #4]
 800d768:	2101      	movs	r1, #1
 800d76a:	f009 faa5 	bl	8016cb8 <rclc_action_server_goal_cancel_reject>
 800d76e:	722e      	strb	r6, [r5, #8]
 800d770:	6860      	ldr	r0, [r4, #4]
 800d772:	e7d3      	b.n	800d71c <_rclc_execute.part.0+0x204>
 800d774:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800d776:	6880      	ldr	r0, [r0, #8]
 800d778:	4798      	blx	r3
 800d77a:	f104 0110 	add.w	r1, r4, #16
 800d77e:	e6e7      	b.n	800d550 <_rclc_execute.part.0+0x38>
 800d780:	f100 0110 	add.w	r1, r0, #16
 800d784:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800d786:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800d788:	6880      	ldr	r0, [r0, #8]
 800d78a:	9105      	str	r1, [sp, #20]
 800d78c:	4798      	blx	r3
 800d78e:	9905      	ldr	r1, [sp, #20]
 800d790:	e6de      	b.n	800d550 <_rclc_execute.part.0+0x38>
 800d792:	2001      	movs	r0, #1
 800d794:	e716      	b.n	800d5c4 <_rclc_execute.part.0+0xac>
 800d796:	bf00      	nop

0800d798 <rclc_executor_trigger_any>:
 800d798:	2800      	cmp	r0, #0
 800d79a:	d03f      	beq.n	800d81c <rclc_executor_trigger_any+0x84>
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d03e      	beq.n	800d81e <rclc_executor_trigger_any+0x86>
 800d7a0:	4603      	mov	r3, r0
 800d7a2:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	2800      	cmp	r0, #0
 800d7aa:	d037      	beq.n	800d81c <rclc_executor_trigger_any+0x84>
 800d7ac:	b430      	push	{r4, r5}
 800d7ae:	f893 c000 	ldrb.w	ip, [r3]
 800d7b2:	f1bc 0f08 	cmp.w	ip, #8
 800d7b6:	d11e      	bne.n	800d7f6 <rclc_executor_trigger_any+0x5e>
 800d7b8:	685c      	ldr	r4, [r3, #4]
 800d7ba:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800d7bc:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800d7c0:	d105      	bne.n	800d7ce <rclc_executor_trigger_any+0x36>
 800d7c2:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800d7c6:	b910      	cbnz	r0, 800d7ce <rclc_executor_trigger_any+0x36>
 800d7c8:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800d7cc:	b128      	cbz	r0, 800d7da <rclc_executor_trigger_any+0x42>
 800d7ce:	bc30      	pop	{r4, r5}
 800d7d0:	4770      	bx	lr
 800d7d2:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800d7d6:	2800      	cmp	r0, #0
 800d7d8:	d1f9      	bne.n	800d7ce <rclc_executor_trigger_any+0x36>
 800d7da:	3201      	adds	r2, #1
 800d7dc:	4291      	cmp	r1, r2
 800d7de:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d7e2:	d018      	beq.n	800d816 <rclc_executor_trigger_any+0x7e>
 800d7e4:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	d0f0      	beq.n	800d7ce <rclc_executor_trigger_any+0x36>
 800d7ec:	f893 c000 	ldrb.w	ip, [r3]
 800d7f0:	f1bc 0f08 	cmp.w	ip, #8
 800d7f4:	d0e0      	beq.n	800d7b8 <rclc_executor_trigger_any+0x20>
 800d7f6:	f1bc 0f09 	cmp.w	ip, #9
 800d7fa:	d1ea      	bne.n	800d7d2 <rclc_executor_trigger_any+0x3a>
 800d7fc:	685c      	ldr	r4, [r3, #4]
 800d7fe:	6a25      	ldr	r5, [r4, #32]
 800d800:	2d00      	cmp	r5, #0
 800d802:	d1e4      	bne.n	800d7ce <rclc_executor_trigger_any+0x36>
 800d804:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800d808:	2800      	cmp	r0, #0
 800d80a:	d1e0      	bne.n	800d7ce <rclc_executor_trigger_any+0x36>
 800d80c:	3201      	adds	r2, #1
 800d80e:	4291      	cmp	r1, r2
 800d810:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800d814:	d1e6      	bne.n	800d7e4 <rclc_executor_trigger_any+0x4c>
 800d816:	2000      	movs	r0, #0
 800d818:	bc30      	pop	{r4, r5}
 800d81a:	4770      	bx	lr
 800d81c:	4770      	bx	lr
 800d81e:	4608      	mov	r0, r1
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop

0800d824 <rclc_executor_get_zero_initialized_executor>:
 800d824:	b510      	push	{r4, lr}
 800d826:	4903      	ldr	r1, [pc, #12]	@ (800d834 <rclc_executor_get_zero_initialized_executor+0x10>)
 800d828:	4604      	mov	r4, r0
 800d82a:	2288      	movs	r2, #136	@ 0x88
 800d82c:	f00c ff71 	bl	801a712 <memcpy>
 800d830:	4620      	mov	r0, r4
 800d832:	bd10      	pop	{r4, pc}
 800d834:	0801b4f8 	.word	0x0801b4f8

0800d838 <rclc_executor_init>:
 800d838:	2800      	cmp	r0, #0
 800d83a:	d05f      	beq.n	800d8fc <rclc_executor_init+0xc4>
 800d83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d840:	460c      	mov	r4, r1
 800d842:	b0b0      	sub	sp, #192	@ 0xc0
 800d844:	2900      	cmp	r1, #0
 800d846:	d051      	beq.n	800d8ec <rclc_executor_init+0xb4>
 800d848:	4605      	mov	r5, r0
 800d84a:	4618      	mov	r0, r3
 800d84c:	4616      	mov	r6, r2
 800d84e:	461f      	mov	r7, r3
 800d850:	f000 fbd0 	bl	800dff4 <rcutils_allocator_is_valid>
 800d854:	2800      	cmp	r0, #0
 800d856:	d049      	beq.n	800d8ec <rclc_executor_init+0xb4>
 800d858:	2e00      	cmp	r6, #0
 800d85a:	d047      	beq.n	800d8ec <rclc_executor_init+0xb4>
 800d85c:	492c      	ldr	r1, [pc, #176]	@ (800d910 <rclc_executor_init+0xd8>)
 800d85e:	2288      	movs	r2, #136	@ 0x88
 800d860:	a80e      	add	r0, sp, #56	@ 0x38
 800d862:	f00c ff56 	bl	801a712 <memcpy>
 800d866:	a90e      	add	r1, sp, #56	@ 0x38
 800d868:	2288      	movs	r2, #136	@ 0x88
 800d86a:	4628      	mov	r0, r5
 800d86c:	f00c ff51 	bl	801a712 <memcpy>
 800d870:	602c      	str	r4, [r5, #0]
 800d872:	4668      	mov	r0, sp
 800d874:	60ae      	str	r6, [r5, #8]
 800d876:	466c      	mov	r4, sp
 800d878:	f007 feec 	bl	8015654 <rcl_get_zero_initialized_wait_set>
 800d87c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d87e:	f105 0c14 	add.w	ip, r5, #20
 800d882:	f8d7 8000 	ldr.w	r8, [r7]
 800d886:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d88a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d88c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d892:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d896:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800d908 <rclc_executor_init+0xd0>
 800d89a:	6823      	ldr	r3, [r4, #0]
 800d89c:	f8cc 3000 	str.w	r3, [ip]
 800d8a0:	6939      	ldr	r1, [r7, #16]
 800d8a2:	612f      	str	r7, [r5, #16]
 800d8a4:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800d8a8:	01b0      	lsls	r0, r6, #6
 800d8aa:	47c0      	blx	r8
 800d8ac:	6068      	str	r0, [r5, #4]
 800d8ae:	b338      	cbz	r0, 800d900 <rclc_executor_init+0xc8>
 800d8b0:	2400      	movs	r4, #0
 800d8b2:	e000      	b.n	800d8b6 <rclc_executor_init+0x7e>
 800d8b4:	6868      	ldr	r0, [r5, #4]
 800d8b6:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800d8ba:	4631      	mov	r1, r6
 800d8bc:	3401      	adds	r4, #1
 800d8be:	f000 fa6b 	bl	800dd98 <rclc_executor_handle_init>
 800d8c2:	42a6      	cmp	r6, r4
 800d8c4:	d1f6      	bne.n	800d8b4 <rclc_executor_init+0x7c>
 800d8c6:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800d8ca:	f000 fa59 	bl	800dd80 <rclc_executor_handle_counters_zero_init>
 800d8ce:	4a11      	ldr	r2, [pc, #68]	@ (800d914 <rclc_executor_init+0xdc>)
 800d8d0:	686b      	ldr	r3, [r5, #4]
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800d8d8:	b163      	cbz	r3, 800d8f4 <rclc_executor_init+0xbc>
 800d8da:	692b      	ldr	r3, [r5, #16]
 800d8dc:	b153      	cbz	r3, 800d8f4 <rclc_executor_init+0xbc>
 800d8de:	68ab      	ldr	r3, [r5, #8]
 800d8e0:	b143      	cbz	r3, 800d8f4 <rclc_executor_init+0xbc>
 800d8e2:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800d8e6:	b030      	add	sp, #192	@ 0xc0
 800d8e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8ec:	200b      	movs	r0, #11
 800d8ee:	b030      	add	sp, #192	@ 0xc0
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	b030      	add	sp, #192	@ 0xc0
 800d8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8fc:	200b      	movs	r0, #11
 800d8fe:	4770      	bx	lr
 800d900:	200a      	movs	r0, #10
 800d902:	e7f4      	b.n	800d8ee <rclc_executor_init+0xb6>
 800d904:	f3af 8000 	nop.w
 800d908:	3b9aca00 	.word	0x3b9aca00
 800d90c:	00000000 	.word	0x00000000
 800d910:	0801b4f8 	.word	0x0801b4f8
 800d914:	0800d799 	.word	0x0800d799

0800d918 <rclc_executor_add_timer>:
 800d918:	b300      	cbz	r0, 800d95c <rclc_executor_add_timer+0x44>
 800d91a:	b1f9      	cbz	r1, 800d95c <rclc_executor_add_timer+0x44>
 800d91c:	b538      	push	{r3, r4, r5, lr}
 800d91e:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800d922:	4293      	cmp	r3, r2
 800d924:	4604      	mov	r4, r0
 800d926:	d301      	bcc.n	800d92c <rclc_executor_add_timer+0x14>
 800d928:	2001      	movs	r0, #1
 800d92a:	bd38      	pop	{r3, r4, r5, pc}
 800d92c:	6840      	ldr	r0, [r0, #4]
 800d92e:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800d932:	019d      	lsls	r5, r3, #6
 800d934:	6051      	str	r1, [r2, #4]
 800d936:	2102      	movs	r1, #2
 800d938:	5341      	strh	r1, [r0, r5]
 800d93a:	3301      	adds	r3, #1
 800d93c:	2000      	movs	r0, #0
 800d93e:	2101      	movs	r1, #1
 800d940:	f104 0514 	add.w	r5, r4, #20
 800d944:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800d946:	8711      	strh	r1, [r2, #56]	@ 0x38
 800d948:	4628      	mov	r0, r5
 800d94a:	60e3      	str	r3, [r4, #12]
 800d94c:	f007 fe96 	bl	801567c <rcl_wait_set_is_valid>
 800d950:	b930      	cbnz	r0, 800d960 <rclc_executor_add_timer+0x48>
 800d952:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800d954:	3301      	adds	r3, #1
 800d956:	2000      	movs	r0, #0
 800d958:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800d95a:	bd38      	pop	{r3, r4, r5, pc}
 800d95c:	200b      	movs	r0, #11
 800d95e:	4770      	bx	lr
 800d960:	4628      	mov	r0, r5
 800d962:	f007 fe91 	bl	8015688 <rcl_wait_set_fini>
 800d966:	2800      	cmp	r0, #0
 800d968:	d0f3      	beq.n	800d952 <rclc_executor_add_timer+0x3a>
 800d96a:	bd38      	pop	{r3, r4, r5, pc}

0800d96c <rclc_executor_prepare>:
 800d96c:	2800      	cmp	r0, #0
 800d96e:	d044      	beq.n	800d9fa <rclc_executor_prepare+0x8e>
 800d970:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d972:	f100 0514 	add.w	r5, r0, #20
 800d976:	b09b      	sub	sp, #108	@ 0x6c
 800d978:	4604      	mov	r4, r0
 800d97a:	4628      	mov	r0, r5
 800d97c:	f007 fe7e 	bl	801567c <rcl_wait_set_is_valid>
 800d980:	b110      	cbz	r0, 800d988 <rclc_executor_prepare+0x1c>
 800d982:	2000      	movs	r0, #0
 800d984:	b01b      	add	sp, #108	@ 0x6c
 800d986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d988:	4628      	mov	r0, r5
 800d98a:	f007 fe7d 	bl	8015688 <rcl_wait_set_fini>
 800d98e:	2800      	cmp	r0, #0
 800d990:	d130      	bne.n	800d9f4 <rclc_executor_prepare+0x88>
 800d992:	a80c      	add	r0, sp, #48	@ 0x30
 800d994:	f007 fe5e 	bl	8015654 <rcl_get_zero_initialized_wait_set>
 800d998:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800d99c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d9a0:	46ae      	mov	lr, r5
 800d9a2:	6927      	ldr	r7, [r4, #16]
 800d9a4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d9a8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d9ac:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d9b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d9b4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d9b8:	f8dc 3000 	ldr.w	r3, [ip]
 800d9bc:	f8ce 3000 	str.w	r3, [lr]
 800d9c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d9c2:	ae04      	add	r6, sp, #16
 800d9c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	6822      	ldr	r2, [r4, #0]
 800d9ca:	6033      	str	r3, [r6, #0]
 800d9cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d9ce:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800d9d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800d9d4:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800d9d8:	e9cd 2100 	strd	r2, r1, [sp]
 800d9dc:	4628      	mov	r0, r5
 800d9de:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800d9e0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d9e2:	f008 f94f 	bl	8015c84 <rcl_wait_set_init>
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	d0cc      	beq.n	800d984 <rclc_executor_prepare+0x18>
 800d9ea:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d9ec:	f000 fb28 	bl	800e040 <rcutils_reset_error>
 800d9f0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800d9f2:	e7c7      	b.n	800d984 <rclc_executor_prepare+0x18>
 800d9f4:	f000 fb24 	bl	800e040 <rcutils_reset_error>
 800d9f8:	e7cb      	b.n	800d992 <rclc_executor_prepare+0x26>
 800d9fa:	200b      	movs	r0, #11
 800d9fc:	4770      	bx	lr
 800d9fe:	bf00      	nop

0800da00 <rclc_executor_spin_some.part.0>:
 800da00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da04:	f100 0614 	add.w	r6, r0, #20
 800da08:	b083      	sub	sp, #12
 800da0a:	4691      	mov	r9, r2
 800da0c:	4698      	mov	r8, r3
 800da0e:	4605      	mov	r5, r0
 800da10:	f7ff ffac 	bl	800d96c <rclc_executor_prepare>
 800da14:	4630      	mov	r0, r6
 800da16:	f007 ff03 	bl	8015820 <rcl_wait_set_clear>
 800da1a:	4607      	mov	r7, r0
 800da1c:	2800      	cmp	r0, #0
 800da1e:	f040 80ed 	bne.w	800dbfc <rclc_executor_spin_some.part.0+0x1fc>
 800da22:	68ab      	ldr	r3, [r5, #8]
 800da24:	4604      	mov	r4, r0
 800da26:	b303      	cbz	r3, 800da6a <rclc_executor_spin_some.part.0+0x6a>
 800da28:	6869      	ldr	r1, [r5, #4]
 800da2a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800da2e:	01a2      	lsls	r2, r4, #6
 800da30:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800da34:	b1cb      	cbz	r3, 800da6a <rclc_executor_spin_some.part.0+0x6a>
 800da36:	5c8b      	ldrb	r3, [r1, r2]
 800da38:	2b0a      	cmp	r3, #10
 800da3a:	f200 80d8 	bhi.w	800dbee <rclc_executor_spin_some.part.0+0x1ee>
 800da3e:	e8df f003 	tbb	[pc, r3]
 800da42:	9c9c      	.short	0x9c9c
 800da44:	068c8ca7 	.word	0x068c8ca7
 800da48:	bdc90606 	.word	0xbdc90606
 800da4c:	b2          	.byte	0xb2
 800da4d:	00          	.byte	0x00
 800da4e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800da52:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800da56:	4630      	mov	r0, r6
 800da58:	f008 fa2a 	bl	8015eb0 <rcl_wait_set_add_service>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	f040 8086 	bne.w	800db6e <rclc_executor_spin_some.part.0+0x16e>
 800da62:	68ab      	ldr	r3, [r5, #8]
 800da64:	3401      	adds	r4, #1
 800da66:	429c      	cmp	r4, r3
 800da68:	d3de      	bcc.n	800da28 <rclc_executor_spin_some.part.0+0x28>
 800da6a:	4643      	mov	r3, r8
 800da6c:	464a      	mov	r2, r9
 800da6e:	4630      	mov	r0, r6
 800da70:	f008 fa4a 	bl	8015f08 <rcl_wait>
 800da74:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800da78:	2b00      	cmp	r3, #0
 800da7a:	f000 80c7 	beq.w	800dc0c <rclc_executor_spin_some.part.0+0x20c>
 800da7e:	2b01      	cmp	r3, #1
 800da80:	f040 80b5 	bne.w	800dbee <rclc_executor_spin_some.part.0+0x1ee>
 800da84:	68ab      	ldr	r3, [r5, #8]
 800da86:	2b00      	cmp	r3, #0
 800da88:	f000 8159 	beq.w	800dd3e <rclc_executor_spin_some.part.0+0x33e>
 800da8c:	2400      	movs	r4, #0
 800da8e:	46a0      	mov	r8, r4
 800da90:	f240 1991 	movw	r9, #401	@ 0x191
 800da94:	e00a      	b.n	800daac <rclc_executor_spin_some.part.0+0xac>
 800da96:	f7ff fb7d 	bl	800d194 <_rclc_check_for_new_data>
 800da9a:	4604      	mov	r4, r0
 800da9c:	b110      	cbz	r0, 800daa4 <rclc_executor_spin_some.part.0+0xa4>
 800da9e:	4548      	cmp	r0, r9
 800daa0:	f040 80b2 	bne.w	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800daa4:	68ab      	ldr	r3, [r5, #8]
 800daa6:	4598      	cmp	r8, r3
 800daa8:	f080 8126 	bcs.w	800dcf8 <rclc_executor_spin_some.part.0+0x2f8>
 800daac:	686a      	ldr	r2, [r5, #4]
 800daae:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800dab2:	4631      	mov	r1, r6
 800dab4:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800dab8:	f108 0801 	add.w	r8, r8, #1
 800dabc:	f1bc 0f00 	cmp.w	ip, #0
 800dac0:	d1e9      	bne.n	800da96 <rclc_executor_spin_some.part.0+0x96>
 800dac2:	4619      	mov	r1, r3
 800dac4:	4610      	mov	r0, r2
 800dac6:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800daca:	4798      	blx	r3
 800dacc:	2800      	cmp	r0, #0
 800dace:	f000 809b 	beq.w	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800dad2:	68ab      	ldr	r3, [r5, #8]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 8097 	beq.w	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800dada:	f04f 0800 	mov.w	r8, #0
 800dade:	f240 1991 	movw	r9, #401	@ 0x191
 800dae2:	e009      	b.n	800daf8 <rclc_executor_spin_some.part.0+0xf8>
 800dae4:	f7ff fba4 	bl	800d230 <_rclc_take_new_data>
 800dae8:	4604      	mov	r4, r0
 800daea:	b110      	cbz	r0, 800daf2 <rclc_executor_spin_some.part.0+0xf2>
 800daec:	4548      	cmp	r0, r9
 800daee:	f040 808b 	bne.w	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800daf2:	68ab      	ldr	r3, [r5, #8]
 800daf4:	4598      	cmp	r8, r3
 800daf6:	d209      	bcs.n	800db0c <rclc_executor_spin_some.part.0+0x10c>
 800daf8:	6868      	ldr	r0, [r5, #4]
 800dafa:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dafe:	4631      	mov	r1, r6
 800db00:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800db04:	f108 0801 	add.w	r8, r8, #1
 800db08:	2a00      	cmp	r2, #0
 800db0a:	d1eb      	bne.n	800dae4 <rclc_executor_spin_some.part.0+0xe4>
 800db0c:	2600      	movs	r6, #0
 800db0e:	b97b      	cbnz	r3, 800db30 <rclc_executor_spin_some.part.0+0x130>
 800db10:	e07a      	b.n	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800db12:	f812 200c 	ldrb.w	r2, [r2, ip]
 800db16:	2a08      	cmp	r2, #8
 800db18:	f000 80fd 	beq.w	800dd16 <rclc_executor_spin_some.part.0+0x316>
 800db1c:	2a09      	cmp	r2, #9
 800db1e:	f000 80ef 	beq.w	800dd00 <rclc_executor_spin_some.part.0+0x300>
 800db22:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800db26:	b98a      	cbnz	r2, 800db4c <rclc_executor_spin_some.part.0+0x14c>
 800db28:	3601      	adds	r6, #1
 800db2a:	429e      	cmp	r6, r3
 800db2c:	d262      	bcs.n	800dbf4 <rclc_executor_spin_some.part.0+0x1f4>
 800db2e:	2400      	movs	r4, #0
 800db30:	686a      	ldr	r2, [r5, #4]
 800db32:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800db36:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800db3a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800db3e:	2900      	cmp	r1, #0
 800db40:	d062      	beq.n	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800db42:	7841      	ldrb	r1, [r0, #1]
 800db44:	2900      	cmp	r1, #0
 800db46:	d0e4      	beq.n	800db12 <rclc_executor_spin_some.part.0+0x112>
 800db48:	2901      	cmp	r1, #1
 800db4a:	d1ed      	bne.n	800db28 <rclc_executor_spin_some.part.0+0x128>
 800db4c:	f7ff fce4 	bl	800d518 <_rclc_execute.part.0>
 800db50:	2800      	cmp	r0, #0
 800db52:	f040 80b6 	bne.w	800dcc2 <rclc_executor_spin_some.part.0+0x2c2>
 800db56:	68ab      	ldr	r3, [r5, #8]
 800db58:	e7e6      	b.n	800db28 <rclc_executor_spin_some.part.0+0x128>
 800db5a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800db5e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800db62:	4630      	mov	r0, r6
 800db64:	f008 f978 	bl	8015e58 <rcl_wait_set_add_client>
 800db68:	2800      	cmp	r0, #0
 800db6a:	f43f af7a 	beq.w	800da62 <rclc_executor_spin_some.part.0+0x62>
 800db6e:	9001      	str	r0, [sp, #4]
 800db70:	f000 fa66 	bl	800e040 <rcutils_reset_error>
 800db74:	9801      	ldr	r0, [sp, #4]
 800db76:	4607      	mov	r7, r0
 800db78:	e03c      	b.n	800dbf4 <rclc_executor_spin_some.part.0+0x1f4>
 800db7a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800db7e:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800db82:	4630      	mov	r0, r6
 800db84:	f007 fe20 	bl	80157c8 <rcl_wait_set_add_subscription>
 800db88:	2800      	cmp	r0, #0
 800db8a:	f43f af6a 	beq.w	800da62 <rclc_executor_spin_some.part.0+0x62>
 800db8e:	e7ee      	b.n	800db6e <rclc_executor_spin_some.part.0+0x16e>
 800db90:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800db94:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800db98:	4630      	mov	r0, r6
 800db9a:	f008 f92d 	bl	8015df8 <rcl_wait_set_add_timer>
 800db9e:	2800      	cmp	r0, #0
 800dba0:	f43f af5f 	beq.w	800da62 <rclc_executor_spin_some.part.0+0x62>
 800dba4:	e7e3      	b.n	800db6e <rclc_executor_spin_some.part.0+0x16e>
 800dba6:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dbaa:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dbae:	4630      	mov	r0, r6
 800dbb0:	f008 f8f6 	bl	8015da0 <rcl_wait_set_add_guard_condition>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	f43f af54 	beq.w	800da62 <rclc_executor_spin_some.part.0+0x62>
 800dbba:	e7d8      	b.n	800db6e <rclc_executor_spin_some.part.0+0x16e>
 800dbbc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dbc0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dbc4:	3110      	adds	r1, #16
 800dbc6:	4630      	mov	r0, r6
 800dbc8:	f008 fe76 	bl	80168b8 <rcl_action_wait_set_add_action_server>
 800dbcc:	2800      	cmp	r0, #0
 800dbce:	f43f af48 	beq.w	800da62 <rclc_executor_spin_some.part.0+0x62>
 800dbd2:	e7cc      	b.n	800db6e <rclc_executor_spin_some.part.0+0x16e>
 800dbd4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800dbd8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800dbdc:	3110      	adds	r1, #16
 800dbde:	2300      	movs	r3, #0
 800dbe0:	4630      	mov	r0, r6
 800dbe2:	f008 fc41 	bl	8016468 <rcl_action_wait_set_add_action_client>
 800dbe6:	2800      	cmp	r0, #0
 800dbe8:	f43f af3b 	beq.w	800da62 <rclc_executor_spin_some.part.0+0x62>
 800dbec:	e7bf      	b.n	800db6e <rclc_executor_spin_some.part.0+0x16e>
 800dbee:	f000 fa27 	bl	800e040 <rcutils_reset_error>
 800dbf2:	2701      	movs	r7, #1
 800dbf4:	4638      	mov	r0, r7
 800dbf6:	b003      	add	sp, #12
 800dbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfc:	f000 fa20 	bl	800e040 <rcutils_reset_error>
 800dc00:	4638      	mov	r0, r7
 800dc02:	b003      	add	sp, #12
 800dc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc08:	4627      	mov	r7, r4
 800dc0a:	e7f3      	b.n	800dbf4 <rclc_executor_spin_some.part.0+0x1f4>
 800dc0c:	68ab      	ldr	r3, [r5, #8]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	f000 8092 	beq.w	800dd38 <rclc_executor_spin_some.part.0+0x338>
 800dc14:	2400      	movs	r4, #0
 800dc16:	46a0      	mov	r8, r4
 800dc18:	f240 1991 	movw	r9, #401	@ 0x191
 800dc1c:	e008      	b.n	800dc30 <rclc_executor_spin_some.part.0+0x230>
 800dc1e:	f7ff fab9 	bl	800d194 <_rclc_check_for_new_data>
 800dc22:	4604      	mov	r4, r0
 800dc24:	b108      	cbz	r0, 800dc2a <rclc_executor_spin_some.part.0+0x22a>
 800dc26:	4548      	cmp	r0, r9
 800dc28:	d1ee      	bne.n	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800dc2a:	68ab      	ldr	r3, [r5, #8]
 800dc2c:	4598      	cmp	r8, r3
 800dc2e:	d265      	bcs.n	800dcfc <rclc_executor_spin_some.part.0+0x2fc>
 800dc30:	686a      	ldr	r2, [r5, #4]
 800dc32:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800dc36:	4631      	mov	r1, r6
 800dc38:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800dc3c:	f108 0801 	add.w	r8, r8, #1
 800dc40:	f1bc 0f00 	cmp.w	ip, #0
 800dc44:	d1eb      	bne.n	800dc1e <rclc_executor_spin_some.part.0+0x21e>
 800dc46:	4619      	mov	r1, r3
 800dc48:	4610      	mov	r0, r2
 800dc4a:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800dc4e:	4798      	blx	r3
 800dc50:	2800      	cmp	r0, #0
 800dc52:	d0d9      	beq.n	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800dc54:	68ab      	ldr	r3, [r5, #8]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d0d6      	beq.n	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800dc5a:	f04f 0800 	mov.w	r8, #0
 800dc5e:	f240 1991 	movw	r9, #401	@ 0x191
 800dc62:	f240 2a59 	movw	sl, #601	@ 0x259
 800dc66:	e00e      	b.n	800dc86 <rclc_executor_spin_some.part.0+0x286>
 800dc68:	f813 300b 	ldrb.w	r3, [r3, fp]
 800dc6c:	2b08      	cmp	r3, #8
 800dc6e:	d033      	beq.n	800dcd8 <rclc_executor_spin_some.part.0+0x2d8>
 800dc70:	2b09      	cmp	r3, #9
 800dc72:	d028      	beq.n	800dcc6 <rclc_executor_spin_some.part.0+0x2c6>
 800dc74:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800dc78:	b9fb      	cbnz	r3, 800dcba <rclc_executor_spin_some.part.0+0x2ba>
 800dc7a:	68ab      	ldr	r3, [r5, #8]
 800dc7c:	f108 0801 	add.w	r8, r8, #1
 800dc80:	4598      	cmp	r8, r3
 800dc82:	d2b7      	bcs.n	800dbf4 <rclc_executor_spin_some.part.0+0x1f4>
 800dc84:	2400      	movs	r4, #0
 800dc86:	6868      	ldr	r0, [r5, #4]
 800dc88:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800dc8c:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800dc90:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d0b7      	beq.n	800dc08 <rclc_executor_spin_some.part.0+0x208>
 800dc98:	4631      	mov	r1, r6
 800dc9a:	f7ff fac9 	bl	800d230 <_rclc_take_new_data>
 800dc9e:	b118      	cbz	r0, 800dca8 <rclc_executor_spin_some.part.0+0x2a8>
 800dca0:	4548      	cmp	r0, r9
 800dca2:	d001      	beq.n	800dca8 <rclc_executor_spin_some.part.0+0x2a8>
 800dca4:	4550      	cmp	r0, sl
 800dca6:	d10c      	bne.n	800dcc2 <rclc_executor_spin_some.part.0+0x2c2>
 800dca8:	686b      	ldr	r3, [r5, #4]
 800dcaa:	eb13 000b 	adds.w	r0, r3, fp
 800dcae:	d021      	beq.n	800dcf4 <rclc_executor_spin_some.part.0+0x2f4>
 800dcb0:	7842      	ldrb	r2, [r0, #1]
 800dcb2:	2a00      	cmp	r2, #0
 800dcb4:	d0d8      	beq.n	800dc68 <rclc_executor_spin_some.part.0+0x268>
 800dcb6:	2a01      	cmp	r2, #1
 800dcb8:	d1df      	bne.n	800dc7a <rclc_executor_spin_some.part.0+0x27a>
 800dcba:	f7ff fc2d 	bl	800d518 <_rclc_execute.part.0>
 800dcbe:	2800      	cmp	r0, #0
 800dcc0:	d0db      	beq.n	800dc7a <rclc_executor_spin_some.part.0+0x27a>
 800dcc2:	4607      	mov	r7, r0
 800dcc4:	e796      	b.n	800dbf4 <rclc_executor_spin_some.part.0+0x1f4>
 800dcc6:	6843      	ldr	r3, [r0, #4]
 800dcc8:	6a1a      	ldr	r2, [r3, #32]
 800dcca:	2a00      	cmp	r2, #0
 800dccc:	d1f5      	bne.n	800dcba <rclc_executor_spin_some.part.0+0x2ba>
 800dcce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d0d1      	beq.n	800dc7a <rclc_executor_spin_some.part.0+0x27a>
 800dcd6:	e7f0      	b.n	800dcba <rclc_executor_spin_some.part.0+0x2ba>
 800dcd8:	6843      	ldr	r3, [r0, #4]
 800dcda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800dcdc:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800dce0:	d1eb      	bne.n	800dcba <rclc_executor_spin_some.part.0+0x2ba>
 800dce2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800dce6:	2a00      	cmp	r2, #0
 800dce8:	d1e7      	bne.n	800dcba <rclc_executor_spin_some.part.0+0x2ba>
 800dcea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d0c3      	beq.n	800dc7a <rclc_executor_spin_some.part.0+0x27a>
 800dcf2:	e7e2      	b.n	800dcba <rclc_executor_spin_some.part.0+0x2ba>
 800dcf4:	270b      	movs	r7, #11
 800dcf6:	e77d      	b.n	800dbf4 <rclc_executor_spin_some.part.0+0x1f4>
 800dcf8:	686a      	ldr	r2, [r5, #4]
 800dcfa:	e6e2      	b.n	800dac2 <rclc_executor_spin_some.part.0+0xc2>
 800dcfc:	686a      	ldr	r2, [r5, #4]
 800dcfe:	e7a2      	b.n	800dc46 <rclc_executor_spin_some.part.0+0x246>
 800dd00:	6842      	ldr	r2, [r0, #4]
 800dd02:	6a11      	ldr	r1, [r2, #32]
 800dd04:	2900      	cmp	r1, #0
 800dd06:	f47f af21 	bne.w	800db4c <rclc_executor_spin_some.part.0+0x14c>
 800dd0a:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800dd0e:	2a00      	cmp	r2, #0
 800dd10:	f43f af0a 	beq.w	800db28 <rclc_executor_spin_some.part.0+0x128>
 800dd14:	e71a      	b.n	800db4c <rclc_executor_spin_some.part.0+0x14c>
 800dd16:	6842      	ldr	r2, [r0, #4]
 800dd18:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800dd1a:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800dd1e:	f47f af15 	bne.w	800db4c <rclc_executor_spin_some.part.0+0x14c>
 800dd22:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800dd26:	2900      	cmp	r1, #0
 800dd28:	f47f af10 	bne.w	800db4c <rclc_executor_spin_some.part.0+0x14c>
 800dd2c:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800dd30:	2a00      	cmp	r2, #0
 800dd32:	f43f aef9 	beq.w	800db28 <rclc_executor_spin_some.part.0+0x128>
 800dd36:	e709      	b.n	800db4c <rclc_executor_spin_some.part.0+0x14c>
 800dd38:	686a      	ldr	r2, [r5, #4]
 800dd3a:	461c      	mov	r4, r3
 800dd3c:	e783      	b.n	800dc46 <rclc_executor_spin_some.part.0+0x246>
 800dd3e:	686a      	ldr	r2, [r5, #4]
 800dd40:	461c      	mov	r4, r3
 800dd42:	e6be      	b.n	800dac2 <rclc_executor_spin_some.part.0+0xc2>

0800dd44 <rclc_executor_spin>:
 800dd44:	b1d0      	cbz	r0, 800dd7c <rclc_executor_spin+0x38>
 800dd46:	b510      	push	{r4, lr}
 800dd48:	4604      	mov	r4, r0
 800dd4a:	b082      	sub	sp, #8
 800dd4c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800dd50:	6820      	ldr	r0, [r4, #0]
 800dd52:	e9cd 2300 	strd	r2, r3, [sp]
 800dd56:	f006 fc3b 	bl	80145d0 <rcl_context_is_valid>
 800dd5a:	4601      	mov	r1, r0
 800dd5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dd60:	4620      	mov	r0, r4
 800dd62:	b131      	cbz	r1, 800dd72 <rclc_executor_spin+0x2e>
 800dd64:	f7ff fe4c 	bl	800da00 <rclc_executor_spin_some.part.0>
 800dd68:	f030 0302 	bics.w	r3, r0, #2
 800dd6c:	d0ee      	beq.n	800dd4c <rclc_executor_spin+0x8>
 800dd6e:	b002      	add	sp, #8
 800dd70:	bd10      	pop	{r4, pc}
 800dd72:	f000 f965 	bl	800e040 <rcutils_reset_error>
 800dd76:	2001      	movs	r0, #1
 800dd78:	b002      	add	sp, #8
 800dd7a:	bd10      	pop	{r4, pc}
 800dd7c:	200b      	movs	r0, #11
 800dd7e:	4770      	bx	lr

0800dd80 <rclc_executor_handle_counters_zero_init>:
 800dd80:	b130      	cbz	r0, 800dd90 <rclc_executor_handle_counters_zero_init+0x10>
 800dd82:	b508      	push	{r3, lr}
 800dd84:	2220      	movs	r2, #32
 800dd86:	2100      	movs	r1, #0
 800dd88:	f00c fbfa 	bl	801a580 <memset>
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	bd08      	pop	{r3, pc}
 800dd90:	200b      	movs	r0, #11
 800dd92:	4770      	bx	lr
 800dd94:	0000      	movs	r0, r0
	...

0800dd98 <rclc_executor_handle_init>:
 800dd98:	b168      	cbz	r0, 800ddb6 <rclc_executor_handle_init+0x1e>
 800dd9a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800ddc0 <rclc_executor_handle_init+0x28>
 800dd9e:	2300      	movs	r3, #0
 800dda0:	220b      	movs	r2, #11
 800dda2:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800dda6:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800ddaa:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800ddae:	8002      	strh	r2, [r0, #0]
 800ddb0:	8703      	strh	r3, [r0, #56]	@ 0x38
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	4770      	bx	lr
 800ddb6:	200b      	movs	r0, #11
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	f3af 8000 	nop.w
	...

0800ddc8 <rclc_support_init_with_options>:
 800ddc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddcc:	b083      	sub	sp, #12
 800ddce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ddd0:	b340      	cbz	r0, 800de24 <rclc_support_init_with_options+0x5c>
 800ddd2:	461d      	mov	r5, r3
 800ddd4:	b333      	cbz	r3, 800de24 <rclc_support_init_with_options+0x5c>
 800ddd6:	b32e      	cbz	r6, 800de24 <rclc_support_init_with_options+0x5c>
 800ddd8:	46e9      	mov	r9, sp
 800ddda:	4604      	mov	r4, r0
 800dddc:	4648      	mov	r0, r9
 800ddde:	460f      	mov	r7, r1
 800dde0:	4690      	mov	r8, r2
 800dde2:	f006 fbeb 	bl	80145bc <rcl_get_zero_initialized_context>
 800dde6:	e899 0003 	ldmia.w	r9, {r0, r1}
 800ddea:	462a      	mov	r2, r5
 800ddec:	e884 0003 	stmia.w	r4, {r0, r1}
 800ddf0:	4623      	mov	r3, r4
 800ddf2:	4641      	mov	r1, r8
 800ddf4:	4638      	mov	r0, r7
 800ddf6:	f006 fc51 	bl	801469c <rcl_init>
 800ddfa:	4605      	mov	r5, r0
 800ddfc:	b960      	cbnz	r0, 800de18 <rclc_support_init_with_options+0x50>
 800ddfe:	60a6      	str	r6, [r4, #8]
 800de00:	4632      	mov	r2, r6
 800de02:	f104 010c 	add.w	r1, r4, #12
 800de06:	2003      	movs	r0, #3
 800de08:	f007 f88c 	bl	8014f24 <rcl_clock_init>
 800de0c:	4605      	mov	r5, r0
 800de0e:	b918      	cbnz	r0, 800de18 <rclc_support_init_with_options+0x50>
 800de10:	4628      	mov	r0, r5
 800de12:	b003      	add	sp, #12
 800de14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de18:	f000 f912 	bl	800e040 <rcutils_reset_error>
 800de1c:	4628      	mov	r0, r5
 800de1e:	b003      	add	sp, #12
 800de20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de24:	250b      	movs	r5, #11
 800de26:	4628      	mov	r0, r5
 800de28:	b003      	add	sp, #12
 800de2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de2e:	bf00      	nop

0800de30 <rclc_node_init_default>:
 800de30:	b3b8      	cbz	r0, 800dea2 <rclc_node_init_default+0x72>
 800de32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800de36:	460d      	mov	r5, r1
 800de38:	b0a1      	sub	sp, #132	@ 0x84
 800de3a:	b329      	cbz	r1, 800de88 <rclc_node_init_default+0x58>
 800de3c:	4616      	mov	r6, r2
 800de3e:	b31a      	cbz	r2, 800de88 <rclc_node_init_default+0x58>
 800de40:	461f      	mov	r7, r3
 800de42:	b30b      	cbz	r3, 800de88 <rclc_node_init_default+0x58>
 800de44:	f10d 0810 	add.w	r8, sp, #16
 800de48:	4604      	mov	r4, r0
 800de4a:	4640      	mov	r0, r8
 800de4c:	f006 fd36 	bl	80148bc <rcl_get_zero_initialized_node>
 800de50:	e898 0003 	ldmia.w	r8, {r0, r1}
 800de54:	f10d 0918 	add.w	r9, sp, #24
 800de58:	e884 0003 	stmia.w	r4, {r0, r1}
 800de5c:	4648      	mov	r0, r9
 800de5e:	f006 fea5 	bl	8014bac <rcl_node_get_default_options>
 800de62:	4640      	mov	r0, r8
 800de64:	f006 fd2a 	bl	80148bc <rcl_get_zero_initialized_node>
 800de68:	f8cd 9000 	str.w	r9, [sp]
 800de6c:	e898 0003 	ldmia.w	r8, {r0, r1}
 800de70:	463b      	mov	r3, r7
 800de72:	e884 0003 	stmia.w	r4, {r0, r1}
 800de76:	4632      	mov	r2, r6
 800de78:	4629      	mov	r1, r5
 800de7a:	4620      	mov	r0, r4
 800de7c:	f006 fd28 	bl	80148d0 <rcl_node_init>
 800de80:	b930      	cbnz	r0, 800de90 <rclc_node_init_default+0x60>
 800de82:	b021      	add	sp, #132	@ 0x84
 800de84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de88:	200b      	movs	r0, #11
 800de8a:	b021      	add	sp, #132	@ 0x84
 800de8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de90:	9003      	str	r0, [sp, #12]
 800de92:	f000 f8d5 	bl	800e040 <rcutils_reset_error>
 800de96:	f000 f8d3 	bl	800e040 <rcutils_reset_error>
 800de9a:	9803      	ldr	r0, [sp, #12]
 800de9c:	b021      	add	sp, #132	@ 0x84
 800de9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dea2:	200b      	movs	r0, #11
 800dea4:	4770      	bx	lr
 800dea6:	bf00      	nop

0800dea8 <rclc_publisher_init_default>:
 800dea8:	b368      	cbz	r0, 800df06 <rclc_publisher_init_default+0x5e>
 800deaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800deae:	460d      	mov	r5, r1
 800deb0:	b0a0      	sub	sp, #128	@ 0x80
 800deb2:	b321      	cbz	r1, 800defe <rclc_publisher_init_default+0x56>
 800deb4:	4616      	mov	r6, r2
 800deb6:	b312      	cbz	r2, 800defe <rclc_publisher_init_default+0x56>
 800deb8:	461f      	mov	r7, r3
 800deba:	b303      	cbz	r3, 800defe <rclc_publisher_init_default+0x56>
 800debc:	4604      	mov	r4, r0
 800debe:	f7ff f859 	bl	800cf74 <rcl_get_zero_initialized_publisher>
 800dec2:	f10d 0810 	add.w	r8, sp, #16
 800dec6:	6020      	str	r0, [r4, #0]
 800dec8:	4640      	mov	r0, r8
 800deca:	f7ff f8ef 	bl	800d0ac <rcl_publisher_get_default_options>
 800dece:	490f      	ldr	r1, [pc, #60]	@ (800df0c <rclc_publisher_init_default+0x64>)
 800ded0:	2250      	movs	r2, #80	@ 0x50
 800ded2:	4640      	mov	r0, r8
 800ded4:	f00c fc1d 	bl	801a712 <memcpy>
 800ded8:	f8cd 8000 	str.w	r8, [sp]
 800dedc:	463b      	mov	r3, r7
 800dede:	4632      	mov	r2, r6
 800dee0:	4629      	mov	r1, r5
 800dee2:	4620      	mov	r0, r4
 800dee4:	f7ff f84c 	bl	800cf80 <rcl_publisher_init>
 800dee8:	b910      	cbnz	r0, 800def0 <rclc_publisher_init_default+0x48>
 800deea:	b020      	add	sp, #128	@ 0x80
 800deec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800def0:	9003      	str	r0, [sp, #12]
 800def2:	f000 f8a5 	bl	800e040 <rcutils_reset_error>
 800def6:	9803      	ldr	r0, [sp, #12]
 800def8:	b020      	add	sp, #128	@ 0x80
 800defa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800defe:	200b      	movs	r0, #11
 800df00:	b020      	add	sp, #128	@ 0x80
 800df02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df06:	200b      	movs	r0, #11
 800df08:	4770      	bx	lr
 800df0a:	bf00      	nop
 800df0c:	0801b580 	.word	0x0801b580

0800df10 <rclc_timer_init_default>:
 800df10:	b360      	cbz	r0, 800df6c <rclc_timer_init_default+0x5c>
 800df12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df16:	460e      	mov	r6, r1
 800df18:	b08a      	sub	sp, #40	@ 0x28
 800df1a:	b319      	cbz	r1, 800df64 <rclc_timer_init_default+0x54>
 800df1c:	4690      	mov	r8, r2
 800df1e:	461f      	mov	r7, r3
 800df20:	4605      	mov	r5, r0
 800df22:	f007 f9dd 	bl	80152e0 <rcl_get_zero_initialized_timer>
 800df26:	68b4      	ldr	r4, [r6, #8]
 800df28:	6028      	str	r0, [r5, #0]
 800df2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df2c:	f10d 0c0c 	add.w	ip, sp, #12
 800df30:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df34:	6823      	ldr	r3, [r4, #0]
 800df36:	f8cc 3000 	str.w	r3, [ip]
 800df3a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800df3c:	9302      	str	r3, [sp, #8]
 800df3e:	e9cd 8700 	strd	r8, r7, [sp]
 800df42:	4628      	mov	r0, r5
 800df44:	4632      	mov	r2, r6
 800df46:	f106 010c 	add.w	r1, r6, #12
 800df4a:	f007 f9d1 	bl	80152f0 <rcl_timer_init>
 800df4e:	b910      	cbnz	r0, 800df56 <rclc_timer_init_default+0x46>
 800df50:	b00a      	add	sp, #40	@ 0x28
 800df52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df56:	9009      	str	r0, [sp, #36]	@ 0x24
 800df58:	f000 f872 	bl	800e040 <rcutils_reset_error>
 800df5c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df5e:	b00a      	add	sp, #40	@ 0x28
 800df60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df64:	200b      	movs	r0, #11
 800df66:	b00a      	add	sp, #40	@ 0x28
 800df68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6c:	200b      	movs	r0, #11
 800df6e:	4770      	bx	lr

0800df70 <__default_zero_allocate>:
 800df70:	f00b be16 	b.w	8019ba0 <calloc>

0800df74 <__default_reallocate>:
 800df74:	f00b bfb4 	b.w	8019ee0 <realloc>

0800df78 <__default_deallocate>:
 800df78:	f00b be90 	b.w	8019c9c <free>

0800df7c <__default_allocate>:
 800df7c:	f00b be86 	b.w	8019c8c <malloc>

0800df80 <rcutils_get_zero_initialized_allocator>:
 800df80:	b510      	push	{r4, lr}
 800df82:	4c05      	ldr	r4, [pc, #20]	@ (800df98 <rcutils_get_zero_initialized_allocator+0x18>)
 800df84:	4686      	mov	lr, r0
 800df86:	4684      	mov	ip, r0
 800df88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800df8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800df8e:	6823      	ldr	r3, [r4, #0]
 800df90:	f8cc 3000 	str.w	r3, [ip]
 800df94:	4670      	mov	r0, lr
 800df96:	bd10      	pop	{r4, pc}
 800df98:	0801b5d0 	.word	0x0801b5d0

0800df9c <rcutils_set_default_allocator>:
 800df9c:	b1a8      	cbz	r0, 800dfca <rcutils_set_default_allocator+0x2e>
 800df9e:	6802      	ldr	r2, [r0, #0]
 800dfa0:	b1a2      	cbz	r2, 800dfcc <rcutils_set_default_allocator+0x30>
 800dfa2:	6841      	ldr	r1, [r0, #4]
 800dfa4:	b1a1      	cbz	r1, 800dfd0 <rcutils_set_default_allocator+0x34>
 800dfa6:	b410      	push	{r4}
 800dfa8:	68c4      	ldr	r4, [r0, #12]
 800dfaa:	b164      	cbz	r4, 800dfc6 <rcutils_set_default_allocator+0x2a>
 800dfac:	6880      	ldr	r0, [r0, #8]
 800dfae:	b138      	cbz	r0, 800dfc0 <rcutils_set_default_allocator+0x24>
 800dfb0:	4b08      	ldr	r3, [pc, #32]	@ (800dfd4 <rcutils_set_default_allocator+0x38>)
 800dfb2:	601a      	str	r2, [r3, #0]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800dfba:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800dfbe:	2001      	movs	r0, #1
 800dfc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dfc4:	4770      	bx	lr
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	e7fa      	b.n	800dfc0 <rcutils_set_default_allocator+0x24>
 800dfca:	4770      	bx	lr
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4770      	bx	lr
 800dfd0:	4608      	mov	r0, r1
 800dfd2:	4770      	bx	lr
 800dfd4:	20000014 	.word	0x20000014

0800dfd8 <rcutils_get_default_allocator>:
 800dfd8:	b510      	push	{r4, lr}
 800dfda:	4c05      	ldr	r4, [pc, #20]	@ (800dff0 <rcutils_get_default_allocator+0x18>)
 800dfdc:	4686      	mov	lr, r0
 800dfde:	4684      	mov	ip, r0
 800dfe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dfe2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800dfe6:	6823      	ldr	r3, [r4, #0]
 800dfe8:	f8cc 3000 	str.w	r3, [ip]
 800dfec:	4670      	mov	r0, lr
 800dfee:	bd10      	pop	{r4, pc}
 800dff0:	20000014 	.word	0x20000014

0800dff4 <rcutils_allocator_is_valid>:
 800dff4:	b158      	cbz	r0, 800e00e <rcutils_allocator_is_valid+0x1a>
 800dff6:	6803      	ldr	r3, [r0, #0]
 800dff8:	b143      	cbz	r3, 800e00c <rcutils_allocator_is_valid+0x18>
 800dffa:	6843      	ldr	r3, [r0, #4]
 800dffc:	b133      	cbz	r3, 800e00c <rcutils_allocator_is_valid+0x18>
 800dffe:	68c3      	ldr	r3, [r0, #12]
 800e000:	b123      	cbz	r3, 800e00c <rcutils_allocator_is_valid+0x18>
 800e002:	6880      	ldr	r0, [r0, #8]
 800e004:	3800      	subs	r0, #0
 800e006:	bf18      	it	ne
 800e008:	2001      	movne	r0, #1
 800e00a:	4770      	bx	lr
 800e00c:	4618      	mov	r0, r3
 800e00e:	4770      	bx	lr

0800e010 <rcutils_get_error_string>:
 800e010:	4b06      	ldr	r3, [pc, #24]	@ (800e02c <rcutils_get_error_string+0x1c>)
 800e012:	781b      	ldrb	r3, [r3, #0]
 800e014:	b13b      	cbz	r3, 800e026 <rcutils_get_error_string+0x16>
 800e016:	4b06      	ldr	r3, [pc, #24]	@ (800e030 <rcutils_get_error_string+0x20>)
 800e018:	781a      	ldrb	r2, [r3, #0]
 800e01a:	b90a      	cbnz	r2, 800e020 <rcutils_get_error_string+0x10>
 800e01c:	2201      	movs	r2, #1
 800e01e:	701a      	strb	r2, [r3, #0]
 800e020:	4b04      	ldr	r3, [pc, #16]	@ (800e034 <rcutils_get_error_string+0x24>)
 800e022:	7818      	ldrb	r0, [r3, #0]
 800e024:	4770      	bx	lr
 800e026:	4b04      	ldr	r3, [pc, #16]	@ (800e038 <rcutils_get_error_string+0x28>)
 800e028:	7818      	ldrb	r0, [r3, #0]
 800e02a:	4770      	bx	lr
 800e02c:	20006618 	.word	0x20006618
 800e030:	20006631 	.word	0x20006631
 800e034:	20006630 	.word	0x20006630
 800e038:	0801b5e4 	.word	0x0801b5e4
 800e03c:	00000000 	.word	0x00000000

0800e040 <rcutils_reset_error>:
 800e040:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800e060 <rcutils_reset_error+0x20>
 800e044:	4a08      	ldr	r2, [pc, #32]	@ (800e068 <rcutils_reset_error+0x28>)
 800e046:	4809      	ldr	r0, [pc, #36]	@ (800e06c <rcutils_reset_error+0x2c>)
 800e048:	4909      	ldr	r1, [pc, #36]	@ (800e070 <rcutils_reset_error+0x30>)
 800e04a:	2300      	movs	r3, #0
 800e04c:	8013      	strh	r3, [r2, #0]
 800e04e:	ed82 7b02 	vstr	d7, [r2, #8]
 800e052:	4a08      	ldr	r2, [pc, #32]	@ (800e074 <rcutils_reset_error+0x34>)
 800e054:	7003      	strb	r3, [r0, #0]
 800e056:	700b      	strb	r3, [r1, #0]
 800e058:	7013      	strb	r3, [r2, #0]
 800e05a:	4770      	bx	lr
 800e05c:	f3af 8000 	nop.w
	...
 800e068:	20006620 	.word	0x20006620
 800e06c:	20006631 	.word	0x20006631
 800e070:	20006630 	.word	0x20006630
 800e074:	20006618 	.word	0x20006618

0800e078 <rcutils_system_time_now>:
 800e078:	b308      	cbz	r0, 800e0be <rcutils_system_time_now+0x46>
 800e07a:	b570      	push	{r4, r5, r6, lr}
 800e07c:	b084      	sub	sp, #16
 800e07e:	4604      	mov	r4, r0
 800e080:	4669      	mov	r1, sp
 800e082:	2001      	movs	r0, #1
 800e084:	f7f4 fa24 	bl	80024d0 <clock_gettime>
 800e088:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e08c:	2d00      	cmp	r5, #0
 800e08e:	db13      	blt.n	800e0b8 <rcutils_system_time_now+0x40>
 800e090:	9902      	ldr	r1, [sp, #8]
 800e092:	2900      	cmp	r1, #0
 800e094:	db0d      	blt.n	800e0b2 <rcutils_system_time_now+0x3a>
 800e096:	4e0b      	ldr	r6, [pc, #44]	@ (800e0c4 <rcutils_system_time_now+0x4c>)
 800e098:	fba3 3206 	umull	r3, r2, r3, r6
 800e09c:	185b      	adds	r3, r3, r1
 800e09e:	fb06 2205 	mla	r2, r6, r5, r2
 800e0a2:	f04f 0000 	mov.w	r0, #0
 800e0a6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e0aa:	e9c4 3200 	strd	r3, r2, [r4]
 800e0ae:	b004      	add	sp, #16
 800e0b0:	bd70      	pop	{r4, r5, r6, pc}
 800e0b2:	ea53 0205 	orrs.w	r2, r3, r5
 800e0b6:	d1ee      	bne.n	800e096 <rcutils_system_time_now+0x1e>
 800e0b8:	2002      	movs	r0, #2
 800e0ba:	b004      	add	sp, #16
 800e0bc:	bd70      	pop	{r4, r5, r6, pc}
 800e0be:	200b      	movs	r0, #11
 800e0c0:	4770      	bx	lr
 800e0c2:	bf00      	nop
 800e0c4:	3b9aca00 	.word	0x3b9aca00

0800e0c8 <rcutils_steady_time_now>:
 800e0c8:	b308      	cbz	r0, 800e10e <rcutils_steady_time_now+0x46>
 800e0ca:	b570      	push	{r4, r5, r6, lr}
 800e0cc:	b084      	sub	sp, #16
 800e0ce:	4604      	mov	r4, r0
 800e0d0:	4669      	mov	r1, sp
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	f7f4 f9fc 	bl	80024d0 <clock_gettime>
 800e0d8:	e9dd 3500 	ldrd	r3, r5, [sp]
 800e0dc:	2d00      	cmp	r5, #0
 800e0de:	db13      	blt.n	800e108 <rcutils_steady_time_now+0x40>
 800e0e0:	9902      	ldr	r1, [sp, #8]
 800e0e2:	2900      	cmp	r1, #0
 800e0e4:	db0d      	blt.n	800e102 <rcutils_steady_time_now+0x3a>
 800e0e6:	4e0b      	ldr	r6, [pc, #44]	@ (800e114 <rcutils_steady_time_now+0x4c>)
 800e0e8:	fba3 3206 	umull	r3, r2, r3, r6
 800e0ec:	185b      	adds	r3, r3, r1
 800e0ee:	fb06 2205 	mla	r2, r6, r5, r2
 800e0f2:	f04f 0000 	mov.w	r0, #0
 800e0f6:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800e0fa:	e9c4 3200 	strd	r3, r2, [r4]
 800e0fe:	b004      	add	sp, #16
 800e100:	bd70      	pop	{r4, r5, r6, pc}
 800e102:	ea53 0205 	orrs.w	r2, r3, r5
 800e106:	d1ee      	bne.n	800e0e6 <rcutils_steady_time_now+0x1e>
 800e108:	2002      	movs	r0, #2
 800e10a:	b004      	add	sp, #16
 800e10c:	bd70      	pop	{r4, r5, r6, pc}
 800e10e:	200b      	movs	r0, #11
 800e110:	4770      	bx	lr
 800e112:	bf00      	nop
 800e114:	3b9aca00 	.word	0x3b9aca00

0800e118 <rmw_get_zero_initialized_init_options>:
 800e118:	b510      	push	{r4, lr}
 800e11a:	2238      	movs	r2, #56	@ 0x38
 800e11c:	4604      	mov	r4, r0
 800e11e:	2100      	movs	r1, #0
 800e120:	f00c fa2e 	bl	801a580 <memset>
 800e124:	f104 0010 	add.w	r0, r4, #16
 800e128:	f000 f80a 	bl	800e140 <rmw_get_default_security_options>
 800e12c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e130:	60e3      	str	r3, [r4, #12]
 800e132:	4620      	mov	r0, r4
 800e134:	bd10      	pop	{r4, pc}
 800e136:	bf00      	nop

0800e138 <rmw_get_default_publisher_options>:
 800e138:	2200      	movs	r2, #0
 800e13a:	6002      	str	r2, [r0, #0]
 800e13c:	7102      	strb	r2, [r0, #4]
 800e13e:	4770      	bx	lr

0800e140 <rmw_get_default_security_options>:
 800e140:	2200      	movs	r2, #0
 800e142:	7002      	strb	r2, [r0, #0]
 800e144:	6042      	str	r2, [r0, #4]
 800e146:	4770      	bx	lr

0800e148 <rmw_uros_set_custom_transport>:
 800e148:	b470      	push	{r4, r5, r6}
 800e14a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800e14e:	b162      	cbz	r2, 800e16a <rmw_uros_set_custom_transport+0x22>
 800e150:	b15b      	cbz	r3, 800e16a <rmw_uros_set_custom_transport+0x22>
 800e152:	b155      	cbz	r5, 800e16a <rmw_uros_set_custom_transport+0x22>
 800e154:	b14e      	cbz	r6, 800e16a <rmw_uros_set_custom_transport+0x22>
 800e156:	4c06      	ldr	r4, [pc, #24]	@ (800e170 <rmw_uros_set_custom_transport+0x28>)
 800e158:	7020      	strb	r0, [r4, #0]
 800e15a:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800e15e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e162:	6166      	str	r6, [r4, #20]
 800e164:	2000      	movs	r0, #0
 800e166:	bc70      	pop	{r4, r5, r6}
 800e168:	4770      	bx	lr
 800e16a:	200b      	movs	r0, #11
 800e16c:	bc70      	pop	{r4, r5, r6}
 800e16e:	4770      	bx	lr
 800e170:	20006634 	.word	0x20006634

0800e174 <rmw_init_options_init>:
 800e174:	b084      	sub	sp, #16
 800e176:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e178:	b083      	sub	sp, #12
 800e17a:	ad09      	add	r5, sp, #36	@ 0x24
 800e17c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800e180:	b130      	cbz	r0, 800e190 <rmw_init_options_init+0x1c>
 800e182:	4604      	mov	r4, r0
 800e184:	4628      	mov	r0, r5
 800e186:	f7ff ff35 	bl	800dff4 <rcutils_allocator_is_valid>
 800e18a:	b108      	cbz	r0, 800e190 <rmw_init_options_init+0x1c>
 800e18c:	68a6      	ldr	r6, [r4, #8]
 800e18e:	b12e      	cbz	r6, 800e19c <rmw_init_options_init+0x28>
 800e190:	200b      	movs	r0, #11
 800e192:	b003      	add	sp, #12
 800e194:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e198:	b004      	add	sp, #16
 800e19a:	4770      	bx	lr
 800e19c:	2200      	movs	r2, #0
 800e19e:	2300      	movs	r3, #0
 800e1a0:	e9c4 2300 	strd	r2, r3, [r4]
 800e1a4:	4b20      	ldr	r3, [pc, #128]	@ (800e228 <rmw_init_options_init+0xb4>)
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	60a3      	str	r3, [r4, #8]
 800e1aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1ac:	f104 0c20 	add.w	ip, r4, #32
 800e1b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e1b4:	466f      	mov	r7, sp
 800e1b6:	682b      	ldr	r3, [r5, #0]
 800e1b8:	f8cc 3000 	str.w	r3, [ip]
 800e1bc:	4638      	mov	r0, r7
 800e1be:	61e6      	str	r6, [r4, #28]
 800e1c0:	60e6      	str	r6, [r4, #12]
 800e1c2:	f7ff ffbd 	bl	800e140 <rmw_get_default_security_options>
 800e1c6:	e897 0003 	ldmia.w	r7, {r0, r1}
 800e1ca:	f104 0310 	add.w	r3, r4, #16
 800e1ce:	e883 0003 	stmia.w	r3, {r0, r1}
 800e1d2:	2203      	movs	r2, #3
 800e1d4:	4815      	ldr	r0, [pc, #84]	@ (800e22c <rmw_init_options_init+0xb8>)
 800e1d6:	4916      	ldr	r1, [pc, #88]	@ (800e230 <rmw_init_options_init+0xbc>)
 800e1d8:	7626      	strb	r6, [r4, #24]
 800e1da:	f000 fee9 	bl	800efb0 <rmw_uxrce_init_init_options_impl_memory>
 800e1de:	4813      	ldr	r0, [pc, #76]	@ (800e22c <rmw_init_options_init+0xb8>)
 800e1e0:	f009 fb8e 	bl	8017900 <get_memory>
 800e1e4:	b1f0      	cbz	r0, 800e224 <rmw_init_options_init+0xb0>
 800e1e6:	4a13      	ldr	r2, [pc, #76]	@ (800e234 <rmw_init_options_init+0xc0>)
 800e1e8:	6883      	ldr	r3, [r0, #8]
 800e1ea:	6851      	ldr	r1, [r2, #4]
 800e1ec:	7810      	ldrb	r0, [r2, #0]
 800e1ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1f0:	7418      	strb	r0, [r3, #16]
 800e1f2:	6159      	str	r1, [r3, #20]
 800e1f4:	68d1      	ldr	r1, [r2, #12]
 800e1f6:	61d9      	str	r1, [r3, #28]
 800e1f8:	6911      	ldr	r1, [r2, #16]
 800e1fa:	6219      	str	r1, [r3, #32]
 800e1fc:	6951      	ldr	r1, [r2, #20]
 800e1fe:	6892      	ldr	r2, [r2, #8]
 800e200:	619a      	str	r2, [r3, #24]
 800e202:	6259      	str	r1, [r3, #36]	@ 0x24
 800e204:	f004 ffee 	bl	80131e4 <uxr_nanos>
 800e208:	f00b fdfe 	bl	8019e08 <srand>
 800e20c:	f00b fe2a 	bl	8019e64 <rand>
 800e210:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e212:	6298      	str	r0, [r3, #40]	@ 0x28
 800e214:	2800      	cmp	r0, #0
 800e216:	d0f9      	beq.n	800e20c <rmw_init_options_init+0x98>
 800e218:	2000      	movs	r0, #0
 800e21a:	b003      	add	sp, #12
 800e21c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e220:	b004      	add	sp, #16
 800e222:	4770      	bx	lr
 800e224:	2001      	movs	r0, #1
 800e226:	e7b4      	b.n	800e192 <rmw_init_options_init+0x1e>
 800e228:	0801bfd8 	.word	0x0801bfd8
 800e22c:	2000af4c 	.word	0x2000af4c
 800e230:	200067e8 	.word	0x200067e8
 800e234:	20006634 	.word	0x20006634

0800e238 <rmw_init_options_copy>:
 800e238:	b570      	push	{r4, r5, r6, lr}
 800e23a:	b088      	sub	sp, #32
 800e23c:	b160      	cbz	r0, 800e258 <rmw_init_options_copy+0x20>
 800e23e:	460d      	mov	r5, r1
 800e240:	b151      	cbz	r1, 800e258 <rmw_init_options_copy+0x20>
 800e242:	4604      	mov	r4, r0
 800e244:	6880      	ldr	r0, [r0, #8]
 800e246:	b128      	cbz	r0, 800e254 <rmw_init_options_copy+0x1c>
 800e248:	4b33      	ldr	r3, [pc, #204]	@ (800e318 <rmw_init_options_copy+0xe0>)
 800e24a:	6819      	ldr	r1, [r3, #0]
 800e24c:	f7f1 ffe8 	bl	8000220 <strcmp>
 800e250:	2800      	cmp	r0, #0
 800e252:	d154      	bne.n	800e2fe <rmw_init_options_copy+0xc6>
 800e254:	68ab      	ldr	r3, [r5, #8]
 800e256:	b11b      	cbz	r3, 800e260 <rmw_init_options_copy+0x28>
 800e258:	240b      	movs	r4, #11
 800e25a:	4620      	mov	r0, r4
 800e25c:	b008      	add	sp, #32
 800e25e:	bd70      	pop	{r4, r5, r6, pc}
 800e260:	4623      	mov	r3, r4
 800e262:	462a      	mov	r2, r5
 800e264:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800e268:	f8d3 c000 	ldr.w	ip, [r3]
 800e26c:	6858      	ldr	r0, [r3, #4]
 800e26e:	6899      	ldr	r1, [r3, #8]
 800e270:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800e274:	f8c2 e00c 	str.w	lr, [r2, #12]
 800e278:	3310      	adds	r3, #16
 800e27a:	42b3      	cmp	r3, r6
 800e27c:	f8c2 c000 	str.w	ip, [r2]
 800e280:	6050      	str	r0, [r2, #4]
 800e282:	6091      	str	r1, [r2, #8]
 800e284:	f102 0210 	add.w	r2, r2, #16
 800e288:	d1ee      	bne.n	800e268 <rmw_init_options_copy+0x30>
 800e28a:	6819      	ldr	r1, [r3, #0]
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	6053      	str	r3, [r2, #4]
 800e290:	6011      	str	r1, [r2, #0]
 800e292:	f104 0e20 	add.w	lr, r4, #32
 800e296:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e29a:	f10d 0c0c 	add.w	ip, sp, #12
 800e29e:	4666      	mov	r6, ip
 800e2a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2a4:	f8de 3000 	ldr.w	r3, [lr]
 800e2a8:	f8cc 3000 	str.w	r3, [ip]
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	f7ff fea1 	bl	800dff4 <rcutils_allocator_is_valid>
 800e2b2:	2800      	cmp	r0, #0
 800e2b4:	d0d0      	beq.n	800e258 <rmw_init_options_copy+0x20>
 800e2b6:	ab08      	add	r3, sp, #32
 800e2b8:	e913 0003 	ldmdb	r3, {r0, r1}
 800e2bc:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e2c0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e2c4:	69e0      	ldr	r0, [r4, #28]
 800e2c6:	f008 feed 	bl	80170a4 <rcutils_strdup>
 800e2ca:	61e8      	str	r0, [r5, #28]
 800e2cc:	69e3      	ldr	r3, [r4, #28]
 800e2ce:	b103      	cbz	r3, 800e2d2 <rmw_init_options_copy+0x9a>
 800e2d0:	b1f8      	cbz	r0, 800e312 <rmw_init_options_copy+0xda>
 800e2d2:	4812      	ldr	r0, [pc, #72]	@ (800e31c <rmw_init_options_copy+0xe4>)
 800e2d4:	f009 fb14 	bl	8017900 <get_memory>
 800e2d8:	b1a8      	cbz	r0, 800e306 <rmw_init_options_copy+0xce>
 800e2da:	6883      	ldr	r3, [r0, #8]
 800e2dc:	636b      	str	r3, [r5, #52]	@ 0x34
 800e2de:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e2e0:	f102 0c10 	add.w	ip, r2, #16
 800e2e4:	f103 0510 	add.w	r5, r3, #16
 800e2e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e2ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e2ee:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800e2f2:	2400      	movs	r4, #0
 800e2f4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800e2f8:	4620      	mov	r0, r4
 800e2fa:	b008      	add	sp, #32
 800e2fc:	bd70      	pop	{r4, r5, r6, pc}
 800e2fe:	240c      	movs	r4, #12
 800e300:	4620      	mov	r0, r4
 800e302:	b008      	add	sp, #32
 800e304:	bd70      	pop	{r4, r5, r6, pc}
 800e306:	9b04      	ldr	r3, [sp, #16]
 800e308:	9907      	ldr	r1, [sp, #28]
 800e30a:	69e8      	ldr	r0, [r5, #28]
 800e30c:	4798      	blx	r3
 800e30e:	2401      	movs	r4, #1
 800e310:	e7a3      	b.n	800e25a <rmw_init_options_copy+0x22>
 800e312:	240a      	movs	r4, #10
 800e314:	e7a1      	b.n	800e25a <rmw_init_options_copy+0x22>
 800e316:	bf00      	nop
 800e318:	0801bfd8 	.word	0x0801bfd8
 800e31c:	2000af4c 	.word	0x2000af4c

0800e320 <rmw_init_options_fini>:
 800e320:	2800      	cmp	r0, #0
 800e322:	d041      	beq.n	800e3a8 <rmw_init_options_fini+0x88>
 800e324:	b510      	push	{r4, lr}
 800e326:	4604      	mov	r4, r0
 800e328:	b08e      	sub	sp, #56	@ 0x38
 800e32a:	3020      	adds	r0, #32
 800e32c:	f7ff fe62 	bl	800dff4 <rcutils_allocator_is_valid>
 800e330:	b380      	cbz	r0, 800e394 <rmw_init_options_fini+0x74>
 800e332:	68a0      	ldr	r0, [r4, #8]
 800e334:	b120      	cbz	r0, 800e340 <rmw_init_options_fini+0x20>
 800e336:	4b1e      	ldr	r3, [pc, #120]	@ (800e3b0 <rmw_init_options_fini+0x90>)
 800e338:	6819      	ldr	r1, [r3, #0]
 800e33a:	f7f1 ff71 	bl	8000220 <strcmp>
 800e33e:	bb88      	cbnz	r0, 800e3a4 <rmw_init_options_fini+0x84>
 800e340:	4b1c      	ldr	r3, [pc, #112]	@ (800e3b4 <rmw_init_options_fini+0x94>)
 800e342:	6819      	ldr	r1, [r3, #0]
 800e344:	b351      	cbz	r1, 800e39c <rmw_init_options_fini+0x7c>
 800e346:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800e348:	e001      	b.n	800e34e <rmw_init_options_fini+0x2e>
 800e34a:	6849      	ldr	r1, [r1, #4]
 800e34c:	b331      	cbz	r1, 800e39c <rmw_init_options_fini+0x7c>
 800e34e:	688b      	ldr	r3, [r1, #8]
 800e350:	429a      	cmp	r2, r3
 800e352:	d1fa      	bne.n	800e34a <rmw_init_options_fini+0x2a>
 800e354:	4817      	ldr	r0, [pc, #92]	@ (800e3b4 <rmw_init_options_fini+0x94>)
 800e356:	f009 fae3 	bl	8017920 <put_memory>
 800e35a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e35c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e35e:	69e0      	ldr	r0, [r4, #28]
 800e360:	4798      	blx	r3
 800e362:	4668      	mov	r0, sp
 800e364:	f7ff fed8 	bl	800e118 <rmw_get_zero_initialized_init_options>
 800e368:	46ee      	mov	lr, sp
 800e36a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e36e:	46a4      	mov	ip, r4
 800e370:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e374:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e378:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e37c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e380:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e384:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e388:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e38c:	2300      	movs	r3, #0
 800e38e:	4618      	mov	r0, r3
 800e390:	b00e      	add	sp, #56	@ 0x38
 800e392:	bd10      	pop	{r4, pc}
 800e394:	230b      	movs	r3, #11
 800e396:	4618      	mov	r0, r3
 800e398:	b00e      	add	sp, #56	@ 0x38
 800e39a:	bd10      	pop	{r4, pc}
 800e39c:	2301      	movs	r3, #1
 800e39e:	4618      	mov	r0, r3
 800e3a0:	b00e      	add	sp, #56	@ 0x38
 800e3a2:	bd10      	pop	{r4, pc}
 800e3a4:	230c      	movs	r3, #12
 800e3a6:	e7f2      	b.n	800e38e <rmw_init_options_fini+0x6e>
 800e3a8:	230b      	movs	r3, #11
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	4770      	bx	lr
 800e3ae:	bf00      	nop
 800e3b0:	0801bfd8 	.word	0x0801bfd8
 800e3b4:	2000af4c 	.word	0x2000af4c

0800e3b8 <rmw_init>:
 800e3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3bc:	b083      	sub	sp, #12
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f000 80d3 	beq.w	800e56a <rmw_init+0x1b2>
 800e3c4:	460e      	mov	r6, r1
 800e3c6:	2900      	cmp	r1, #0
 800e3c8:	f000 80cf 	beq.w	800e56a <rmw_init+0x1b2>
 800e3cc:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e3ce:	4605      	mov	r5, r0
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	f000 80ca 	beq.w	800e56a <rmw_init+0x1b2>
 800e3d6:	4b78      	ldr	r3, [pc, #480]	@ (800e5b8 <rmw_init+0x200>)
 800e3d8:	6880      	ldr	r0, [r0, #8]
 800e3da:	681f      	ldr	r7, [r3, #0]
 800e3dc:	b128      	cbz	r0, 800e3ea <rmw_init+0x32>
 800e3de:	4639      	mov	r1, r7
 800e3e0:	f7f1 ff1e 	bl	8000220 <strcmp>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f040 80ca 	bne.w	800e57e <rmw_init+0x1c6>
 800e3ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e3ee:	4c73      	ldr	r4, [pc, #460]	@ (800e5bc <rmw_init+0x204>)
 800e3f0:	4973      	ldr	r1, [pc, #460]	@ (800e5c0 <rmw_init+0x208>)
 800e3f2:	4874      	ldr	r0, [pc, #464]	@ (800e5c4 <rmw_init+0x20c>)
 800e3f4:	60b7      	str	r7, [r6, #8]
 800e3f6:	e9c6 2300 	strd	r2, r3, [r6]
 800e3fa:	68eb      	ldr	r3, [r5, #12]
 800e3fc:	64b3      	str	r3, [r6, #72]	@ 0x48
 800e3fe:	2201      	movs	r2, #1
 800e400:	f000 fd76 	bl	800eef0 <rmw_uxrce_init_session_memory>
 800e404:	4620      	mov	r0, r4
 800e406:	4970      	ldr	r1, [pc, #448]	@ (800e5c8 <rmw_init+0x210>)
 800e408:	2204      	movs	r2, #4
 800e40a:	f000 fdb1 	bl	800ef70 <rmw_uxrce_init_static_input_buffer_memory>
 800e40e:	f04f 0800 	mov.w	r8, #0
 800e412:	486c      	ldr	r0, [pc, #432]	@ (800e5c4 <rmw_init+0x20c>)
 800e414:	f884 800d 	strb.w	r8, [r4, #13]
 800e418:	f009 fa72 	bl	8017900 <get_memory>
 800e41c:	2800      	cmp	r0, #0
 800e41e:	f000 80a9 	beq.w	800e574 <rmw_init+0x1bc>
 800e422:	6884      	ldr	r4, [r0, #8]
 800e424:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800e426:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800e428:	f890 c010 	ldrb.w	ip, [r0, #16]
 800e42c:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800e430:	9101      	str	r1, [sp, #4]
 800e432:	6a00      	ldr	r0, [r0, #32]
 800e434:	9000      	str	r0, [sp, #0]
 800e436:	f104 0910 	add.w	r9, r4, #16
 800e43a:	4661      	mov	r1, ip
 800e43c:	4648      	mov	r0, r9
 800e43e:	f002 fe53 	bl	80110e8 <uxr_set_custom_transport_callbacks>
 800e442:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800e446:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e44a:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800e44e:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800e452:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800e456:	495d      	ldr	r1, [pc, #372]	@ (800e5cc <rmw_init+0x214>)
 800e458:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800e45c:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800e460:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800e464:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800e468:	4859      	ldr	r0, [pc, #356]	@ (800e5d0 <rmw_init+0x218>)
 800e46a:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800e46e:	2201      	movs	r2, #1
 800e470:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800e472:	f000 fd1d 	bl	800eeb0 <rmw_uxrce_init_node_memory>
 800e476:	4957      	ldr	r1, [pc, #348]	@ (800e5d4 <rmw_init+0x21c>)
 800e478:	4857      	ldr	r0, [pc, #348]	@ (800e5d8 <rmw_init+0x220>)
 800e47a:	2205      	movs	r2, #5
 800e47c:	f000 fcf8 	bl	800ee70 <rmw_uxrce_init_subscription_memory>
 800e480:	4956      	ldr	r1, [pc, #344]	@ (800e5dc <rmw_init+0x224>)
 800e482:	4857      	ldr	r0, [pc, #348]	@ (800e5e0 <rmw_init+0x228>)
 800e484:	220a      	movs	r2, #10
 800e486:	f000 fcd3 	bl	800ee30 <rmw_uxrce_init_publisher_memory>
 800e48a:	4956      	ldr	r1, [pc, #344]	@ (800e5e4 <rmw_init+0x22c>)
 800e48c:	4856      	ldr	r0, [pc, #344]	@ (800e5e8 <rmw_init+0x230>)
 800e48e:	2201      	movs	r2, #1
 800e490:	f000 fc8e 	bl	800edb0 <rmw_uxrce_init_service_memory>
 800e494:	4955      	ldr	r1, [pc, #340]	@ (800e5ec <rmw_init+0x234>)
 800e496:	4856      	ldr	r0, [pc, #344]	@ (800e5f0 <rmw_init+0x238>)
 800e498:	2201      	movs	r2, #1
 800e49a:	f000 fca9 	bl	800edf0 <rmw_uxrce_init_client_memory>
 800e49e:	4955      	ldr	r1, [pc, #340]	@ (800e5f4 <rmw_init+0x23c>)
 800e4a0:	4855      	ldr	r0, [pc, #340]	@ (800e5f8 <rmw_init+0x240>)
 800e4a2:	220f      	movs	r2, #15
 800e4a4:	f000 fd44 	bl	800ef30 <rmw_uxrce_init_topic_memory>
 800e4a8:	4954      	ldr	r1, [pc, #336]	@ (800e5fc <rmw_init+0x244>)
 800e4aa:	4855      	ldr	r0, [pc, #340]	@ (800e600 <rmw_init+0x248>)
 800e4ac:	2203      	movs	r2, #3
 800e4ae:	f000 fd7f 	bl	800efb0 <rmw_uxrce_init_init_options_impl_memory>
 800e4b2:	4954      	ldr	r1, [pc, #336]	@ (800e604 <rmw_init+0x24c>)
 800e4b4:	4854      	ldr	r0, [pc, #336]	@ (800e608 <rmw_init+0x250>)
 800e4b6:	2204      	movs	r2, #4
 800e4b8:	f000 fd9a 	bl	800eff0 <rmw_uxrce_init_wait_set_memory>
 800e4bc:	4953      	ldr	r1, [pc, #332]	@ (800e60c <rmw_init+0x254>)
 800e4be:	4854      	ldr	r0, [pc, #336]	@ (800e610 <rmw_init+0x258>)
 800e4c0:	2204      	movs	r2, #4
 800e4c2:	f000 fdb5 	bl	800f030 <rmw_uxrce_init_guard_condition_memory>
 800e4c6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800e4c8:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800e4ca:	4642      	mov	r2, r8
 800e4cc:	f000 fc38 	bl	800ed40 <rmw_uxrce_transport_init>
 800e4d0:	4607      	mov	r7, r0
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d158      	bne.n	800e588 <rmw_init+0x1d0>
 800e4d6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e4d8:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800e4dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e4de:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800e4e2:	4628      	mov	r0, r5
 800e4e4:	f002 fffc 	bl	80114e0 <uxr_init_session>
 800e4e8:	494a      	ldr	r1, [pc, #296]	@ (800e614 <rmw_init+0x25c>)
 800e4ea:	4622      	mov	r2, r4
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	f003 f81b 	bl	8011528 <uxr_set_topic_callback>
 800e4f2:	4949      	ldr	r1, [pc, #292]	@ (800e618 <rmw_init+0x260>)
 800e4f4:	463a      	mov	r2, r7
 800e4f6:	4628      	mov	r0, r5
 800e4f8:	f003 f812 	bl	8011520 <uxr_set_status_callback>
 800e4fc:	4947      	ldr	r1, [pc, #284]	@ (800e61c <rmw_init+0x264>)
 800e4fe:	463a      	mov	r2, r7
 800e500:	4628      	mov	r0, r5
 800e502:	f003 f815 	bl	8011530 <uxr_set_request_callback>
 800e506:	4946      	ldr	r1, [pc, #280]	@ (800e620 <rmw_init+0x268>)
 800e508:	463a      	mov	r2, r7
 800e50a:	4628      	mov	r0, r5
 800e50c:	f003 f814 	bl	8011538 <uxr_set_reply_callback>
 800e510:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e514:	2304      	movs	r3, #4
 800e516:	0092      	lsls	r2, r2, #2
 800e518:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800e51c:	4628      	mov	r0, r5
 800e51e:	f003 f849 	bl	80115b4 <uxr_create_input_reliable_stream>
 800e522:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e526:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800e52a:	0092      	lsls	r2, r2, #2
 800e52c:	2304      	movs	r3, #4
 800e52e:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800e532:	4628      	mov	r0, r5
 800e534:	f003 f816 	bl	8011564 <uxr_create_output_reliable_stream>
 800e538:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800e53c:	4628      	mov	r0, r5
 800e53e:	f003 f833 	bl	80115a8 <uxr_create_input_best_effort_stream>
 800e542:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800e546:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800e54a:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800e54e:	3114      	adds	r1, #20
 800e550:	4628      	mov	r0, r5
 800e552:	f002 fff5 	bl	8011540 <uxr_create_output_best_effort_stream>
 800e556:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800e55a:	4628      	mov	r0, r5
 800e55c:	f003 fdd4 	bl	8012108 <uxr_create_session>
 800e560:	b1f8      	cbz	r0, 800e5a2 <rmw_init+0x1ea>
 800e562:	4638      	mov	r0, r7
 800e564:	b003      	add	sp, #12
 800e566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e56a:	270b      	movs	r7, #11
 800e56c:	4638      	mov	r0, r7
 800e56e:	b003      	add	sp, #12
 800e570:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e574:	2701      	movs	r7, #1
 800e576:	4638      	mov	r0, r7
 800e578:	b003      	add	sp, #12
 800e57a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e57e:	270c      	movs	r7, #12
 800e580:	4638      	mov	r0, r7
 800e582:	b003      	add	sp, #12
 800e584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e588:	4648      	mov	r0, r9
 800e58a:	f002 fdef 	bl	801116c <uxr_close_custom_transport>
 800e58e:	480d      	ldr	r0, [pc, #52]	@ (800e5c4 <rmw_init+0x20c>)
 800e590:	4621      	mov	r1, r4
 800e592:	f009 f9c5 	bl	8017920 <put_memory>
 800e596:	4638      	mov	r0, r7
 800e598:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800e59c:	b003      	add	sp, #12
 800e59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5a2:	4648      	mov	r0, r9
 800e5a4:	f002 fde2 	bl	801116c <uxr_close_custom_transport>
 800e5a8:	4806      	ldr	r0, [pc, #24]	@ (800e5c4 <rmw_init+0x20c>)
 800e5aa:	4621      	mov	r1, r4
 800e5ac:	f009 f9b8 	bl	8017920 <put_memory>
 800e5b0:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800e5b2:	2701      	movs	r7, #1
 800e5b4:	e7d5      	b.n	800e562 <rmw_init+0x1aa>
 800e5b6:	bf00      	nop
 800e5b8:	0801bfd8 	.word	0x0801bfd8
 800e5bc:	2000af9c 	.word	0x2000af9c
 800e5c0:	20007248 	.word	0x20007248
 800e5c4:	2000af8c 	.word	0x2000af8c
 800e5c8:	200087f0 	.word	0x200087f0
 800e5cc:	2000686c 	.word	0x2000686c
 800e5d0:	2000af5c 	.word	0x2000af5c
 800e5d4:	2000a8f0 	.word	0x2000a8f0
 800e5d8:	2000afac 	.word	0x2000afac
 800e5dc:	20006910 	.word	0x20006910
 800e5e0:	2000af6c 	.word	0x2000af6c
 800e5e4:	20007180 	.word	0x20007180
 800e5e8:	2000af7c 	.word	0x2000af7c
 800e5ec:	200066a0 	.word	0x200066a0
 800e5f0:	2000668c 	.word	0x2000668c
 800e5f4:	2000ad28 	.word	0x2000ad28
 800e5f8:	2000afbc 	.word	0x2000afbc
 800e5fc:	200067e8 	.word	0x200067e8
 800e600:	2000af4c 	.word	0x2000af4c
 800e604:	2000aecc 	.word	0x2000aecc
 800e608:	2000afcc 	.word	0x2000afcc
 800e60c:	20006768 	.word	0x20006768
 800e610:	2000af3c 	.word	0x2000af3c
 800e614:	08017739 	.word	0x08017739
 800e618:	08017731 	.word	0x08017731
 800e61c:	080177d1 	.word	0x080177d1
 800e620:	0801786d 	.word	0x0801786d

0800e624 <rmw_context_fini>:
 800e624:	4b17      	ldr	r3, [pc, #92]	@ (800e684 <rmw_context_fini+0x60>)
 800e626:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	681c      	ldr	r4, [r3, #0]
 800e62c:	4605      	mov	r5, r0
 800e62e:	b334      	cbz	r4, 800e67e <rmw_context_fini+0x5a>
 800e630:	2600      	movs	r6, #0
 800e632:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800e636:	6902      	ldr	r2, [r0, #16]
 800e638:	428a      	cmp	r2, r1
 800e63a:	d018      	beq.n	800e66e <rmw_context_fini+0x4a>
 800e63c:	2c00      	cmp	r4, #0
 800e63e:	d1f8      	bne.n	800e632 <rmw_context_fini+0xe>
 800e640:	b189      	cbz	r1, 800e666 <rmw_context_fini+0x42>
 800e642:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800e646:	789b      	ldrb	r3, [r3, #2]
 800e648:	2b01      	cmp	r3, #1
 800e64a:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800e64e:	bf14      	ite	ne
 800e650:	210a      	movne	r1, #10
 800e652:	2100      	moveq	r1, #0
 800e654:	f003 fd30 	bl	80120b8 <uxr_delete_session_retries>
 800e658:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e65a:	f000 fd09 	bl	800f070 <rmw_uxrce_fini_session_memory>
 800e65e:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800e660:	3010      	adds	r0, #16
 800e662:	f002 fd83 	bl	801116c <uxr_close_custom_transport>
 800e666:	2300      	movs	r3, #0
 800e668:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800e66a:	4630      	mov	r0, r6
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
 800e66e:	3018      	adds	r0, #24
 800e670:	f000 f89c 	bl	800e7ac <rmw_destroy_node>
 800e674:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800e676:	4606      	mov	r6, r0
 800e678:	2c00      	cmp	r4, #0
 800e67a:	d1da      	bne.n	800e632 <rmw_context_fini+0xe>
 800e67c:	e7e0      	b.n	800e640 <rmw_context_fini+0x1c>
 800e67e:	4626      	mov	r6, r4
 800e680:	e7de      	b.n	800e640 <rmw_context_fini+0x1c>
 800e682:	bf00      	nop
 800e684:	2000af5c 	.word	0x2000af5c

0800e688 <create_node>:
 800e688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e68c:	b083      	sub	sp, #12
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d05f      	beq.n	800e752 <create_node+0xca>
 800e692:	4606      	mov	r6, r0
 800e694:	4835      	ldr	r0, [pc, #212]	@ (800e76c <create_node+0xe4>)
 800e696:	460f      	mov	r7, r1
 800e698:	4690      	mov	r8, r2
 800e69a:	461d      	mov	r5, r3
 800e69c:	f009 f930 	bl	8017900 <get_memory>
 800e6a0:	2800      	cmp	r0, #0
 800e6a2:	d056      	beq.n	800e752 <create_node+0xca>
 800e6a4:	6884      	ldr	r4, [r0, #8]
 800e6a6:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800e6a8:	6123      	str	r3, [r4, #16]
 800e6aa:	f009 f991 	bl	80179d0 <rmw_get_implementation_identifier>
 800e6ae:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800e6b2:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800e6b6:	f8c4 9020 	str.w	r9, [r4, #32]
 800e6ba:	4630      	mov	r0, r6
 800e6bc:	f7f1 fdba 	bl	8000234 <strlen>
 800e6c0:	1c42      	adds	r2, r0, #1
 800e6c2:	2a3c      	cmp	r2, #60	@ 0x3c
 800e6c4:	f104 0518 	add.w	r5, r4, #24
 800e6c8:	d840      	bhi.n	800e74c <create_node+0xc4>
 800e6ca:	4648      	mov	r0, r9
 800e6cc:	4631      	mov	r1, r6
 800e6ce:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800e6d2:	f00c f81e 	bl	801a712 <memcpy>
 800e6d6:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800e6da:	4638      	mov	r0, r7
 800e6dc:	f7f1 fdaa 	bl	8000234 <strlen>
 800e6e0:	1c42      	adds	r2, r0, #1
 800e6e2:	2a3c      	cmp	r2, #60	@ 0x3c
 800e6e4:	d832      	bhi.n	800e74c <create_node+0xc4>
 800e6e6:	4639      	mov	r1, r7
 800e6e8:	4648      	mov	r0, r9
 800e6ea:	f00c f812 	bl	801a712 <memcpy>
 800e6ee:	6923      	ldr	r3, [r4, #16]
 800e6f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800e6f4:	2101      	movs	r1, #1
 800e6f6:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800e6fa:	1842      	adds	r2, r0, r1
 800e6fc:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800e700:	f002 fd38 	bl	8011174 <uxr_object_id>
 800e704:	6160      	str	r0, [r4, #20]
 800e706:	783b      	ldrb	r3, [r7, #0]
 800e708:	2b2f      	cmp	r3, #47	@ 0x2f
 800e70a:	d127      	bne.n	800e75c <create_node+0xd4>
 800e70c:	787b      	ldrb	r3, [r7, #1]
 800e70e:	bb2b      	cbnz	r3, 800e75c <create_node+0xd4>
 800e710:	4a17      	ldr	r2, [pc, #92]	@ (800e770 <create_node+0xe8>)
 800e712:	4818      	ldr	r0, [pc, #96]	@ (800e774 <create_node+0xec>)
 800e714:	4633      	mov	r3, r6
 800e716:	213c      	movs	r1, #60	@ 0x3c
 800e718:	f00b fdbe 	bl	801a298 <sniprintf>
 800e71c:	6920      	ldr	r0, [r4, #16]
 800e71e:	4915      	ldr	r1, [pc, #84]	@ (800e774 <create_node+0xec>)
 800e720:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800e724:	9100      	str	r1, [sp, #0]
 800e726:	2106      	movs	r1, #6
 800e728:	9101      	str	r1, [sp, #4]
 800e72a:	6811      	ldr	r1, [r2, #0]
 800e72c:	6962      	ldr	r2, [r4, #20]
 800e72e:	fa1f f388 	uxth.w	r3, r8
 800e732:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e736:	f002 fb4d 	bl	8010dd4 <uxr_buffer_create_participant_bin>
 800e73a:	4602      	mov	r2, r0
 800e73c:	6920      	ldr	r0, [r4, #16]
 800e73e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800e742:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800e746:	f000 fe09 	bl	800f35c <run_xrce_session>
 800e74a:	b918      	cbnz	r0, 800e754 <create_node+0xcc>
 800e74c:	4628      	mov	r0, r5
 800e74e:	f000 fc95 	bl	800f07c <rmw_uxrce_fini_node_memory>
 800e752:	2500      	movs	r5, #0
 800e754:	4628      	mov	r0, r5
 800e756:	b003      	add	sp, #12
 800e758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e75c:	4a06      	ldr	r2, [pc, #24]	@ (800e778 <create_node+0xf0>)
 800e75e:	9600      	str	r6, [sp, #0]
 800e760:	463b      	mov	r3, r7
 800e762:	213c      	movs	r1, #60	@ 0x3c
 800e764:	4803      	ldr	r0, [pc, #12]	@ (800e774 <create_node+0xec>)
 800e766:	f00b fd97 	bl	801a298 <sniprintf>
 800e76a:	e7d7      	b.n	800e71c <create_node+0x94>
 800e76c:	2000af5c 	.word	0x2000af5c
 800e770:	0801b624 	.word	0x0801b624
 800e774:	20006650 	.word	0x20006650
 800e778:	0801b5e8 	.word	0x0801b5e8

0800e77c <rmw_create_node>:
 800e77c:	b199      	cbz	r1, 800e7a6 <rmw_create_node+0x2a>
 800e77e:	780b      	ldrb	r3, [r1, #0]
 800e780:	468c      	mov	ip, r1
 800e782:	b183      	cbz	r3, 800e7a6 <rmw_create_node+0x2a>
 800e784:	b410      	push	{r4}
 800e786:	4614      	mov	r4, r2
 800e788:	b14a      	cbz	r2, 800e79e <rmw_create_node+0x22>
 800e78a:	7813      	ldrb	r3, [r2, #0]
 800e78c:	b13b      	cbz	r3, 800e79e <rmw_create_node+0x22>
 800e78e:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800e790:	4603      	mov	r3, r0
 800e792:	4621      	mov	r1, r4
 800e794:	4660      	mov	r0, ip
 800e796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e79a:	f7ff bf75 	b.w	800e688 <create_node>
 800e79e:	2000      	movs	r0, #0
 800e7a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7a4:	4770      	bx	lr
 800e7a6:	2000      	movs	r0, #0
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop

0800e7ac <rmw_destroy_node>:
 800e7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7ae:	b328      	cbz	r0, 800e7fc <rmw_destroy_node+0x50>
 800e7b0:	4607      	mov	r7, r0
 800e7b2:	6800      	ldr	r0, [r0, #0]
 800e7b4:	b120      	cbz	r0, 800e7c0 <rmw_destroy_node+0x14>
 800e7b6:	4b36      	ldr	r3, [pc, #216]	@ (800e890 <rmw_destroy_node+0xe4>)
 800e7b8:	6819      	ldr	r1, [r3, #0]
 800e7ba:	f7f1 fd31 	bl	8000220 <strcmp>
 800e7be:	b9e8      	cbnz	r0, 800e7fc <rmw_destroy_node+0x50>
 800e7c0:	687d      	ldr	r5, [r7, #4]
 800e7c2:	b1dd      	cbz	r5, 800e7fc <rmw_destroy_node+0x50>
 800e7c4:	4b33      	ldr	r3, [pc, #204]	@ (800e894 <rmw_destroy_node+0xe8>)
 800e7c6:	681c      	ldr	r4, [r3, #0]
 800e7c8:	2c00      	cmp	r4, #0
 800e7ca:	d05f      	beq.n	800e88c <rmw_destroy_node+0xe0>
 800e7cc:	2600      	movs	r6, #0
 800e7ce:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e7d2:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800e7d6:	429d      	cmp	r5, r3
 800e7d8:	d013      	beq.n	800e802 <rmw_destroy_node+0x56>
 800e7da:	2c00      	cmp	r4, #0
 800e7dc:	d1f7      	bne.n	800e7ce <rmw_destroy_node+0x22>
 800e7de:	4b2e      	ldr	r3, [pc, #184]	@ (800e898 <rmw_destroy_node+0xec>)
 800e7e0:	681c      	ldr	r4, [r3, #0]
 800e7e2:	b1c4      	cbz	r4, 800e816 <rmw_destroy_node+0x6a>
 800e7e4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e7e8:	6a0b      	ldr	r3, [r1, #32]
 800e7ea:	429d      	cmp	r5, r3
 800e7ec:	d1f9      	bne.n	800e7e2 <rmw_destroy_node+0x36>
 800e7ee:	317c      	adds	r1, #124	@ 0x7c
 800e7f0:	4638      	mov	r0, r7
 800e7f2:	f000 fa45 	bl	800ec80 <rmw_destroy_subscription>
 800e7f6:	2801      	cmp	r0, #1
 800e7f8:	4606      	mov	r6, r0
 800e7fa:	d1f2      	bne.n	800e7e2 <rmw_destroy_node+0x36>
 800e7fc:	2601      	movs	r6, #1
 800e7fe:	4630      	mov	r0, r6
 800e800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e802:	3184      	adds	r1, #132	@ 0x84
 800e804:	4638      	mov	r0, r7
 800e806:	f000 f9a5 	bl	800eb54 <rmw_destroy_publisher>
 800e80a:	2801      	cmp	r0, #1
 800e80c:	4606      	mov	r6, r0
 800e80e:	d0f5      	beq.n	800e7fc <rmw_destroy_node+0x50>
 800e810:	2c00      	cmp	r4, #0
 800e812:	d1dc      	bne.n	800e7ce <rmw_destroy_node+0x22>
 800e814:	e7e3      	b.n	800e7de <rmw_destroy_node+0x32>
 800e816:	4b21      	ldr	r3, [pc, #132]	@ (800e89c <rmw_destroy_node+0xf0>)
 800e818:	681c      	ldr	r4, [r3, #0]
 800e81a:	b16c      	cbz	r4, 800e838 <rmw_destroy_node+0x8c>
 800e81c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e820:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e822:	429d      	cmp	r5, r3
 800e824:	d1f9      	bne.n	800e81a <rmw_destroy_node+0x6e>
 800e826:	317c      	adds	r1, #124	@ 0x7c
 800e828:	4638      	mov	r0, r7
 800e82a:	f000 f9e5 	bl	800ebf8 <rmw_destroy_service>
 800e82e:	2801      	cmp	r0, #1
 800e830:	4606      	mov	r6, r0
 800e832:	d0e3      	beq.n	800e7fc <rmw_destroy_node+0x50>
 800e834:	2c00      	cmp	r4, #0
 800e836:	d1f1      	bne.n	800e81c <rmw_destroy_node+0x70>
 800e838:	4b19      	ldr	r3, [pc, #100]	@ (800e8a0 <rmw_destroy_node+0xf4>)
 800e83a:	681c      	ldr	r4, [r3, #0]
 800e83c:	b16c      	cbz	r4, 800e85a <rmw_destroy_node+0xae>
 800e83e:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800e842:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800e844:	429d      	cmp	r5, r3
 800e846:	d1f9      	bne.n	800e83c <rmw_destroy_node+0x90>
 800e848:	317c      	adds	r1, #124	@ 0x7c
 800e84a:	4638      	mov	r0, r7
 800e84c:	f009 f87c 	bl	8017948 <rmw_destroy_client>
 800e850:	2801      	cmp	r0, #1
 800e852:	4606      	mov	r6, r0
 800e854:	d0d2      	beq.n	800e7fc <rmw_destroy_node+0x50>
 800e856:	2c00      	cmp	r4, #0
 800e858:	d1f1      	bne.n	800e83e <rmw_destroy_node+0x92>
 800e85a:	6928      	ldr	r0, [r5, #16]
 800e85c:	696a      	ldr	r2, [r5, #20]
 800e85e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800e862:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e866:	6819      	ldr	r1, [r3, #0]
 800e868:	f002 fa68 	bl	8010d3c <uxr_buffer_delete_entity>
 800e86c:	4602      	mov	r2, r0
 800e86e:	6928      	ldr	r0, [r5, #16]
 800e870:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800e874:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800e878:	f000 fd70 	bl	800f35c <run_xrce_session>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	bf08      	it	eq
 800e880:	2602      	moveq	r6, #2
 800e882:	4638      	mov	r0, r7
 800e884:	f000 fbfa 	bl	800f07c <rmw_uxrce_fini_node_memory>
 800e888:	4630      	mov	r0, r6
 800e88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e88c:	4626      	mov	r6, r4
 800e88e:	e7a6      	b.n	800e7de <rmw_destroy_node+0x32>
 800e890:	0801bfd8 	.word	0x0801bfd8
 800e894:	2000af6c 	.word	0x2000af6c
 800e898:	2000afac 	.word	0x2000afac
 800e89c:	2000af7c 	.word	0x2000af7c
 800e8a0:	2000668c 	.word	0x2000668c

0800e8a4 <rmw_node_get_graph_guard_condition>:
 800e8a4:	6843      	ldr	r3, [r0, #4]
 800e8a6:	6918      	ldr	r0, [r3, #16]
 800e8a8:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800e8ac:	4770      	bx	lr
 800e8ae:	bf00      	nop

0800e8b0 <flush_session>:
 800e8b0:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800e8b2:	f003 ba65 	b.w	8011d80 <uxr_run_session_until_confirm_delivery>
 800e8b6:	bf00      	nop

0800e8b8 <rmw_publish>:
 800e8b8:	2800      	cmp	r0, #0
 800e8ba:	d053      	beq.n	800e964 <rmw_publish+0xac>
 800e8bc:	b570      	push	{r4, r5, r6, lr}
 800e8be:	460d      	mov	r5, r1
 800e8c0:	b08e      	sub	sp, #56	@ 0x38
 800e8c2:	2900      	cmp	r1, #0
 800e8c4:	d04b      	beq.n	800e95e <rmw_publish+0xa6>
 800e8c6:	4604      	mov	r4, r0
 800e8c8:	6800      	ldr	r0, [r0, #0]
 800e8ca:	f000 fdc7 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d045      	beq.n	800e95e <rmw_publish+0xa6>
 800e8d2:	6866      	ldr	r6, [r4, #4]
 800e8d4:	2e00      	cmp	r6, #0
 800e8d6:	d042      	beq.n	800e95e <rmw_publish+0xa6>
 800e8d8:	69b4      	ldr	r4, [r6, #24]
 800e8da:	4628      	mov	r0, r5
 800e8dc:	6923      	ldr	r3, [r4, #16]
 800e8de:	4798      	blx	r3
 800e8e0:	69f3      	ldr	r3, [r6, #28]
 800e8e2:	9005      	str	r0, [sp, #20]
 800e8e4:	b113      	cbz	r3, 800e8ec <rmw_publish+0x34>
 800e8e6:	a805      	add	r0, sp, #20
 800e8e8:	4798      	blx	r3
 800e8ea:	9805      	ldr	r0, [sp, #20]
 800e8ec:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e8f0:	691b      	ldr	r3, [r3, #16]
 800e8f2:	9000      	str	r0, [sp, #0]
 800e8f4:	6972      	ldr	r2, [r6, #20]
 800e8f6:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e8f8:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800e8fc:	ab06      	add	r3, sp, #24
 800e8fe:	f004 fd11 	bl	8013324 <uxr_prepare_output_stream>
 800e902:	b1d8      	cbz	r0, 800e93c <rmw_publish+0x84>
 800e904:	68a3      	ldr	r3, [r4, #8]
 800e906:	a906      	add	r1, sp, #24
 800e908:	4628      	mov	r0, r5
 800e90a:	4798      	blx	r3
 800e90c:	6a33      	ldr	r3, [r6, #32]
 800e90e:	4604      	mov	r4, r0
 800e910:	b10b      	cbz	r3, 800e916 <rmw_publish+0x5e>
 800e912:	a806      	add	r0, sp, #24
 800e914:	4798      	blx	r3
 800e916:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800e91a:	2b01      	cmp	r3, #1
 800e91c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e920:	d022      	beq.n	800e968 <rmw_publish+0xb0>
 800e922:	6918      	ldr	r0, [r3, #16]
 800e924:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800e926:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e92a:	f003 fa29 	bl	8011d80 <uxr_run_session_until_confirm_delivery>
 800e92e:	4020      	ands	r0, r4
 800e930:	b2c4      	uxtb	r4, r0
 800e932:	f084 0001 	eor.w	r0, r4, #1
 800e936:	b2c0      	uxtb	r0, r0
 800e938:	b00e      	add	sp, #56	@ 0x38
 800e93a:	bd70      	pop	{r4, r5, r6, pc}
 800e93c:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800e940:	6918      	ldr	r0, [r3, #16]
 800e942:	9b05      	ldr	r3, [sp, #20]
 800e944:	9300      	str	r3, [sp, #0]
 800e946:	4b0b      	ldr	r3, [pc, #44]	@ (800e974 <rmw_publish+0xbc>)
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	9602      	str	r6, [sp, #8]
 800e94c:	6972      	ldr	r2, [r6, #20]
 800e94e:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800e950:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e954:	ab06      	add	r3, sp, #24
 800e956:	f004 fd15 	bl	8013384 <uxr_prepare_output_stream_fragmented>
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d1d2      	bne.n	800e904 <rmw_publish+0x4c>
 800e95e:	2001      	movs	r0, #1
 800e960:	b00e      	add	sp, #56	@ 0x38
 800e962:	bd70      	pop	{r4, r5, r6, pc}
 800e964:	2001      	movs	r0, #1
 800e966:	4770      	bx	lr
 800e968:	6918      	ldr	r0, [r3, #16]
 800e96a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e96e:	f002 fe47 	bl	8011600 <uxr_flash_output_streams>
 800e972:	e7de      	b.n	800e932 <rmw_publish+0x7a>
 800e974:	0800e8b1 	.word	0x0800e8b1

0800e978 <rmw_create_publisher>:
 800e978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e97c:	b087      	sub	sp, #28
 800e97e:	2800      	cmp	r0, #0
 800e980:	f000 80cc 	beq.w	800eb1c <rmw_create_publisher+0x1a4>
 800e984:	460e      	mov	r6, r1
 800e986:	2900      	cmp	r1, #0
 800e988:	f000 80c8 	beq.w	800eb1c <rmw_create_publisher+0x1a4>
 800e98c:	4604      	mov	r4, r0
 800e98e:	6800      	ldr	r0, [r0, #0]
 800e990:	4615      	mov	r5, r2
 800e992:	4698      	mov	r8, r3
 800e994:	f000 fd62 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800e998:	2800      	cmp	r0, #0
 800e99a:	f000 80bf 	beq.w	800eb1c <rmw_create_publisher+0x1a4>
 800e99e:	2d00      	cmp	r5, #0
 800e9a0:	f000 80bc 	beq.w	800eb1c <rmw_create_publisher+0x1a4>
 800e9a4:	782b      	ldrb	r3, [r5, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	f000 80b8 	beq.w	800eb1c <rmw_create_publisher+0x1a4>
 800e9ac:	f1b8 0f00 	cmp.w	r8, #0
 800e9b0:	f000 80b4 	beq.w	800eb1c <rmw_create_publisher+0x1a4>
 800e9b4:	485c      	ldr	r0, [pc, #368]	@ (800eb28 <rmw_create_publisher+0x1b0>)
 800e9b6:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800e9ba:	f008 ffa1 	bl	8017900 <get_memory>
 800e9be:	2800      	cmp	r0, #0
 800e9c0:	f000 80ac 	beq.w	800eb1c <rmw_create_publisher+0x1a4>
 800e9c4:	6884      	ldr	r4, [r0, #8]
 800e9c6:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800e9ca:	f009 f801 	bl	80179d0 <rmw_get_implementation_identifier>
 800e9ce:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800e9d2:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800e9d6:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800e9da:	4628      	mov	r0, r5
 800e9dc:	f7f1 fc2a 	bl	8000234 <strlen>
 800e9e0:	3001      	adds	r0, #1
 800e9e2:	283c      	cmp	r0, #60	@ 0x3c
 800e9e4:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800e9e8:	f200 8091 	bhi.w	800eb0e <rmw_create_publisher+0x196>
 800e9ec:	4a4f      	ldr	r2, [pc, #316]	@ (800eb2c <rmw_create_publisher+0x1b4>)
 800e9ee:	462b      	mov	r3, r5
 800e9f0:	213c      	movs	r1, #60	@ 0x3c
 800e9f2:	4650      	mov	r0, sl
 800e9f4:	f00b fc50 	bl	801a298 <sniprintf>
 800e9f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800e9fc:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800e9fe:	4641      	mov	r1, r8
 800ea00:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800ea04:	2250      	movs	r2, #80	@ 0x50
 800ea06:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800ea0a:	f00b fe82 	bl	801a712 <memcpy>
 800ea0e:	f898 3008 	ldrb.w	r3, [r8, #8]
 800ea12:	4947      	ldr	r1, [pc, #284]	@ (800eb30 <rmw_create_publisher+0x1b8>)
 800ea14:	2b02      	cmp	r3, #2
 800ea16:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea1a:	bf0c      	ite	eq
 800ea1c:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800ea20:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800ea24:	67a3      	str	r3, [r4, #120]	@ 0x78
 800ea26:	2300      	movs	r3, #0
 800ea28:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800ea2c:	4630      	mov	r0, r6
 800ea2e:	f000 fd23 	bl	800f478 <get_message_typesupport_handle>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	d06b      	beq.n	800eb0e <rmw_create_publisher+0x196>
 800ea36:	6842      	ldr	r2, [r0, #4]
 800ea38:	61a2      	str	r2, [r4, #24]
 800ea3a:	2a00      	cmp	r2, #0
 800ea3c:	d067      	beq.n	800eb0e <rmw_create_publisher+0x196>
 800ea3e:	4629      	mov	r1, r5
 800ea40:	4643      	mov	r3, r8
 800ea42:	4648      	mov	r0, r9
 800ea44:	f008 ffca 	bl	80179dc <create_topic>
 800ea48:	6260      	str	r0, [r4, #36]	@ 0x24
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d063      	beq.n	800eb16 <rmw_create_publisher+0x19e>
 800ea4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ea56:	2103      	movs	r1, #3
 800ea58:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ea5c:	1c42      	adds	r2, r0, #1
 800ea5e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ea62:	f002 fb87 	bl	8011174 <uxr_object_id>
 800ea66:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ea6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ea6e:	6120      	str	r0, [r4, #16]
 800ea70:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ea74:	6910      	ldr	r0, [r2, #16]
 800ea76:	2506      	movs	r5, #6
 800ea78:	9500      	str	r5, [sp, #0]
 800ea7a:	6819      	ldr	r1, [r3, #0]
 800ea7c:	6922      	ldr	r2, [r4, #16]
 800ea7e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ea82:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ea86:	f002 fa0d 	bl	8010ea4 <uxr_buffer_create_publisher_bin>
 800ea8a:	4602      	mov	r2, r0
 800ea8c:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ea90:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ea94:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ea98:	f000 fc60 	bl	800f35c <run_xrce_session>
 800ea9c:	b3b8      	cbz	r0, 800eb0e <rmw_create_publisher+0x196>
 800ea9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eaa2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800eaa6:	2105      	movs	r1, #5
 800eaa8:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800eaac:	1c42      	adds	r2, r0, #1
 800eaae:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800eab2:	f002 fb5f 	bl	8011174 <uxr_object_id>
 800eab6:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eaba:	6160      	str	r0, [r4, #20]
 800eabc:	691e      	ldr	r6, [r3, #16]
 800eabe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800eac2:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800eac6:	f10d 0a10 	add.w	sl, sp, #16
 800eaca:	4641      	mov	r1, r8
 800eacc:	4650      	mov	r0, sl
 800eace:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800ead2:	f000 fc5f 	bl	800f394 <convert_qos_profile>
 800ead6:	9503      	str	r5, [sp, #12]
 800ead8:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800eadc:	9001      	str	r0, [sp, #4]
 800eade:	f8ad 1008 	strh.w	r1, [sp, #8]
 800eae2:	f8db 3010 	ldr.w	r3, [fp, #16]
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800eaec:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800eaf0:	f8d8 1000 	ldr.w	r1, [r8]
 800eaf4:	4630      	mov	r0, r6
 800eaf6:	f002 fa05 	bl	8010f04 <uxr_buffer_create_datawriter_bin>
 800eafa:	4602      	mov	r2, r0
 800eafc:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800eb00:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800eb04:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800eb08:	f000 fc28 	bl	800f35c <run_xrce_session>
 800eb0c:	b938      	cbnz	r0, 800eb1e <rmw_create_publisher+0x1a6>
 800eb0e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eb10:	b108      	cbz	r0, 800eb16 <rmw_create_publisher+0x19e>
 800eb12:	f000 fb23 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 800eb16:	4638      	mov	r0, r7
 800eb18:	f000 fac8 	bl	800f0ac <rmw_uxrce_fini_publisher_memory>
 800eb1c:	2700      	movs	r7, #0
 800eb1e:	4638      	mov	r0, r7
 800eb20:	b007      	add	sp, #28
 800eb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb26:	bf00      	nop
 800eb28:	2000af6c 	.word	0x2000af6c
 800eb2c:	0801b624 	.word	0x0801b624
 800eb30:	0801b5f0 	.word	0x0801b5f0

0800eb34 <rmw_publisher_get_actual_qos>:
 800eb34:	b150      	cbz	r0, 800eb4c <rmw_publisher_get_actual_qos+0x18>
 800eb36:	b508      	push	{r3, lr}
 800eb38:	460b      	mov	r3, r1
 800eb3a:	b149      	cbz	r1, 800eb50 <rmw_publisher_get_actual_qos+0x1c>
 800eb3c:	6841      	ldr	r1, [r0, #4]
 800eb3e:	2250      	movs	r2, #80	@ 0x50
 800eb40:	3128      	adds	r1, #40	@ 0x28
 800eb42:	4618      	mov	r0, r3
 800eb44:	f00b fde5 	bl	801a712 <memcpy>
 800eb48:	2000      	movs	r0, #0
 800eb4a:	bd08      	pop	{r3, pc}
 800eb4c:	200b      	movs	r0, #11
 800eb4e:	4770      	bx	lr
 800eb50:	200b      	movs	r0, #11
 800eb52:	bd08      	pop	{r3, pc}

0800eb54 <rmw_destroy_publisher>:
 800eb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb56:	b128      	cbz	r0, 800eb64 <rmw_destroy_publisher+0x10>
 800eb58:	4604      	mov	r4, r0
 800eb5a:	6800      	ldr	r0, [r0, #0]
 800eb5c:	460d      	mov	r5, r1
 800eb5e:	f000 fc7d 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800eb62:	b910      	cbnz	r0, 800eb6a <rmw_destroy_publisher+0x16>
 800eb64:	2401      	movs	r4, #1
 800eb66:	4620      	mov	r0, r4
 800eb68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb6a:	6863      	ldr	r3, [r4, #4]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d0f9      	beq.n	800eb64 <rmw_destroy_publisher+0x10>
 800eb70:	2d00      	cmp	r5, #0
 800eb72:	d0f7      	beq.n	800eb64 <rmw_destroy_publisher+0x10>
 800eb74:	6828      	ldr	r0, [r5, #0]
 800eb76:	f000 fc71 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800eb7a:	2800      	cmp	r0, #0
 800eb7c:	d0f2      	beq.n	800eb64 <rmw_destroy_publisher+0x10>
 800eb7e:	686c      	ldr	r4, [r5, #4]
 800eb80:	2c00      	cmp	r4, #0
 800eb82:	d0ef      	beq.n	800eb64 <rmw_destroy_publisher+0x10>
 800eb84:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800eb86:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800eb8a:	f008 ff77 	bl	8017a7c <destroy_topic>
 800eb8e:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eb92:	6962      	ldr	r2, [r4, #20]
 800eb94:	6918      	ldr	r0, [r3, #16]
 800eb96:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800eb9a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800eb9e:	6819      	ldr	r1, [r3, #0]
 800eba0:	f002 f8cc 	bl	8010d3c <uxr_buffer_delete_entity>
 800eba4:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800eba8:	6922      	ldr	r2, [r4, #16]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ebb0:	4604      	mov	r4, r0
 800ebb2:	6809      	ldr	r1, [r1, #0]
 800ebb4:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ebb8:	f002 f8c0 	bl	8010d3c <uxr_buffer_delete_entity>
 800ebbc:	693e      	ldr	r6, [r7, #16]
 800ebbe:	4622      	mov	r2, r4
 800ebc0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ebc4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ebc8:	4604      	mov	r4, r0
 800ebca:	4630      	mov	r0, r6
 800ebcc:	f000 fbc6 	bl	800f35c <run_xrce_session>
 800ebd0:	693e      	ldr	r6, [r7, #16]
 800ebd2:	4622      	mov	r2, r4
 800ebd4:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ebd8:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ebdc:	4604      	mov	r4, r0
 800ebde:	4630      	mov	r0, r6
 800ebe0:	f000 fbbc 	bl	800f35c <run_xrce_session>
 800ebe4:	b12c      	cbz	r4, 800ebf2 <rmw_destroy_publisher+0x9e>
 800ebe6:	b120      	cbz	r0, 800ebf2 <rmw_destroy_publisher+0x9e>
 800ebe8:	2400      	movs	r4, #0
 800ebea:	4628      	mov	r0, r5
 800ebec:	f000 fa5e 	bl	800f0ac <rmw_uxrce_fini_publisher_memory>
 800ebf0:	e7b9      	b.n	800eb66 <rmw_destroy_publisher+0x12>
 800ebf2:	2402      	movs	r4, #2
 800ebf4:	e7f9      	b.n	800ebea <rmw_destroy_publisher+0x96>
 800ebf6:	bf00      	nop

0800ebf8 <rmw_destroy_service>:
 800ebf8:	b570      	push	{r4, r5, r6, lr}
 800ebfa:	b128      	cbz	r0, 800ec08 <rmw_destroy_service+0x10>
 800ebfc:	4604      	mov	r4, r0
 800ebfe:	6800      	ldr	r0, [r0, #0]
 800ec00:	460d      	mov	r5, r1
 800ec02:	f000 fc2b 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800ec06:	b910      	cbnz	r0, 800ec0e <rmw_destroy_service+0x16>
 800ec08:	2401      	movs	r4, #1
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	bd70      	pop	{r4, r5, r6, pc}
 800ec0e:	6863      	ldr	r3, [r4, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d0f9      	beq.n	800ec08 <rmw_destroy_service+0x10>
 800ec14:	2d00      	cmp	r5, #0
 800ec16:	d0f7      	beq.n	800ec08 <rmw_destroy_service+0x10>
 800ec18:	6828      	ldr	r0, [r5, #0]
 800ec1a:	f000 fc1f 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	d0f2      	beq.n	800ec08 <rmw_destroy_service+0x10>
 800ec22:	686e      	ldr	r6, [r5, #4]
 800ec24:	2e00      	cmp	r6, #0
 800ec26:	d0ef      	beq.n	800ec08 <rmw_destroy_service+0x10>
 800ec28:	6864      	ldr	r4, [r4, #4]
 800ec2a:	6932      	ldr	r2, [r6, #16]
 800ec2c:	6920      	ldr	r0, [r4, #16]
 800ec2e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec32:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec36:	6819      	ldr	r1, [r3, #0]
 800ec38:	f002 facc 	bl	80111d4 <uxr_buffer_cancel_data>
 800ec3c:	4602      	mov	r2, r0
 800ec3e:	6920      	ldr	r0, [r4, #16]
 800ec40:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec44:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec48:	f000 fb88 	bl	800f35c <run_xrce_session>
 800ec4c:	6920      	ldr	r0, [r4, #16]
 800ec4e:	6932      	ldr	r2, [r6, #16]
 800ec50:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ec54:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ec58:	6819      	ldr	r1, [r3, #0]
 800ec5a:	f002 f86f 	bl	8010d3c <uxr_buffer_delete_entity>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	6920      	ldr	r0, [r4, #16]
 800ec62:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800ec66:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ec6a:	f000 fb77 	bl	800f35c <run_xrce_session>
 800ec6e:	2800      	cmp	r0, #0
 800ec70:	4628      	mov	r0, r5
 800ec72:	bf14      	ite	ne
 800ec74:	2400      	movne	r4, #0
 800ec76:	2402      	moveq	r4, #2
 800ec78:	f000 fa44 	bl	800f104 <rmw_uxrce_fini_service_memory>
 800ec7c:	e7c5      	b.n	800ec0a <rmw_destroy_service+0x12>
 800ec7e:	bf00      	nop

0800ec80 <rmw_destroy_subscription>:
 800ec80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec82:	b128      	cbz	r0, 800ec90 <rmw_destroy_subscription+0x10>
 800ec84:	4604      	mov	r4, r0
 800ec86:	6800      	ldr	r0, [r0, #0]
 800ec88:	460d      	mov	r5, r1
 800ec8a:	f000 fbe7 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800ec8e:	b910      	cbnz	r0, 800ec96 <rmw_destroy_subscription+0x16>
 800ec90:	2401      	movs	r4, #1
 800ec92:	4620      	mov	r0, r4
 800ec94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec96:	6863      	ldr	r3, [r4, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d0f9      	beq.n	800ec90 <rmw_destroy_subscription+0x10>
 800ec9c:	2d00      	cmp	r5, #0
 800ec9e:	d0f7      	beq.n	800ec90 <rmw_destroy_subscription+0x10>
 800eca0:	6828      	ldr	r0, [r5, #0]
 800eca2:	f000 fbdb 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 800eca6:	2800      	cmp	r0, #0
 800eca8:	d0f2      	beq.n	800ec90 <rmw_destroy_subscription+0x10>
 800ecaa:	686c      	ldr	r4, [r5, #4]
 800ecac:	2c00      	cmp	r4, #0
 800ecae:	d0ef      	beq.n	800ec90 <rmw_destroy_subscription+0x10>
 800ecb0:	6a26      	ldr	r6, [r4, #32]
 800ecb2:	6962      	ldr	r2, [r4, #20]
 800ecb4:	6930      	ldr	r0, [r6, #16]
 800ecb6:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ecba:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ecbe:	6819      	ldr	r1, [r3, #0]
 800ecc0:	f002 fa88 	bl	80111d4 <uxr_buffer_cancel_data>
 800ecc4:	4602      	mov	r2, r0
 800ecc6:	6930      	ldr	r0, [r6, #16]
 800ecc8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800eccc:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800ecd0:	f000 fb44 	bl	800f35c <run_xrce_session>
 800ecd4:	69e0      	ldr	r0, [r4, #28]
 800ecd6:	f008 fed1 	bl	8017a7c <destroy_topic>
 800ecda:	6a23      	ldr	r3, [r4, #32]
 800ecdc:	6962      	ldr	r2, [r4, #20]
 800ecde:	6918      	ldr	r0, [r3, #16]
 800ece0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800ece4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ece8:	6819      	ldr	r1, [r3, #0]
 800ecea:	f002 f827 	bl	8010d3c <uxr_buffer_delete_entity>
 800ecee:	6a23      	ldr	r3, [r4, #32]
 800ecf0:	6922      	ldr	r2, [r4, #16]
 800ecf2:	691b      	ldr	r3, [r3, #16]
 800ecf4:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800ecf8:	4604      	mov	r4, r0
 800ecfa:	6809      	ldr	r1, [r1, #0]
 800ecfc:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800ed00:	f002 f81c 	bl	8010d3c <uxr_buffer_delete_entity>
 800ed04:	6937      	ldr	r7, [r6, #16]
 800ed06:	4622      	mov	r2, r4
 800ed08:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800ed0c:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800ed10:	4604      	mov	r4, r0
 800ed12:	4638      	mov	r0, r7
 800ed14:	f000 fb22 	bl	800f35c <run_xrce_session>
 800ed18:	6936      	ldr	r6, [r6, #16]
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800ed20:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800ed24:	4604      	mov	r4, r0
 800ed26:	4630      	mov	r0, r6
 800ed28:	f000 fb18 	bl	800f35c <run_xrce_session>
 800ed2c:	b12c      	cbz	r4, 800ed3a <rmw_destroy_subscription+0xba>
 800ed2e:	b120      	cbz	r0, 800ed3a <rmw_destroy_subscription+0xba>
 800ed30:	2400      	movs	r4, #0
 800ed32:	4628      	mov	r0, r5
 800ed34:	f000 f9d0 	bl	800f0d8 <rmw_uxrce_fini_subscription_memory>
 800ed38:	e7ab      	b.n	800ec92 <rmw_destroy_subscription+0x12>
 800ed3a:	2402      	movs	r4, #2
 800ed3c:	e7f9      	b.n	800ed32 <rmw_destroy_subscription+0xb2>
 800ed3e:	bf00      	nop

0800ed40 <rmw_uxrce_transport_init>:
 800ed40:	b508      	push	{r3, lr}
 800ed42:	b108      	cbz	r0, 800ed48 <rmw_uxrce_transport_init+0x8>
 800ed44:	f100 0210 	add.w	r2, r0, #16
 800ed48:	b139      	cbz	r1, 800ed5a <rmw_uxrce_transport_init+0x1a>
 800ed4a:	6949      	ldr	r1, [r1, #20]
 800ed4c:	4610      	mov	r0, r2
 800ed4e:	f002 f9d9 	bl	8011104 <uxr_init_custom_transport>
 800ed52:	f080 0001 	eor.w	r0, r0, #1
 800ed56:	b2c0      	uxtb	r0, r0
 800ed58:	bd08      	pop	{r3, pc}
 800ed5a:	4b04      	ldr	r3, [pc, #16]	@ (800ed6c <rmw_uxrce_transport_init+0x2c>)
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	6859      	ldr	r1, [r3, #4]
 800ed60:	f002 f9d0 	bl	8011104 <uxr_init_custom_transport>
 800ed64:	f080 0001 	eor.w	r0, r0, #1
 800ed68:	b2c0      	uxtb	r0, r0
 800ed6a:	bd08      	pop	{r3, pc}
 800ed6c:	20006634 	.word	0x20006634

0800ed70 <rmw_uros_epoch_nanos>:
 800ed70:	4b05      	ldr	r3, [pc, #20]	@ (800ed88 <rmw_uros_epoch_nanos+0x18>)
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	b123      	cbz	r3, 800ed80 <rmw_uros_epoch_nanos+0x10>
 800ed76:	6898      	ldr	r0, [r3, #8]
 800ed78:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed7c:	f002 bc36 	b.w	80115ec <uxr_epoch_nanos>
 800ed80:	2000      	movs	r0, #0
 800ed82:	2100      	movs	r1, #0
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop
 800ed88:	2000af8c 	.word	0x2000af8c

0800ed8c <rmw_uros_sync_session>:
 800ed8c:	b508      	push	{r3, lr}
 800ed8e:	4b07      	ldr	r3, [pc, #28]	@ (800edac <rmw_uros_sync_session+0x20>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	b14b      	cbz	r3, 800eda8 <rmw_uros_sync_session+0x1c>
 800ed94:	4601      	mov	r1, r0
 800ed96:	6898      	ldr	r0, [r3, #8]
 800ed98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ed9c:	f003 f868 	bl	8011e70 <uxr_sync_session>
 800eda0:	f080 0001 	eor.w	r0, r0, #1
 800eda4:	b2c0      	uxtb	r0, r0
 800eda6:	bd08      	pop	{r3, pc}
 800eda8:	2001      	movs	r0, #1
 800edaa:	bd08      	pop	{r3, pc}
 800edac:	2000af8c 	.word	0x2000af8c

0800edb0 <rmw_uxrce_init_service_memory>:
 800edb0:	b1e2      	cbz	r2, 800edec <rmw_uxrce_init_service_memory+0x3c>
 800edb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edb6:	7b05      	ldrb	r5, [r0, #12]
 800edb8:	4606      	mov	r6, r0
 800edba:	b9ad      	cbnz	r5, 800ede8 <rmw_uxrce_init_service_memory+0x38>
 800edbc:	23c8      	movs	r3, #200	@ 0xc8
 800edbe:	e9c0 5500 	strd	r5, r5, [r0]
 800edc2:	6083      	str	r3, [r0, #8]
 800edc4:	f240 1301 	movw	r3, #257	@ 0x101
 800edc8:	4617      	mov	r7, r2
 800edca:	8183      	strh	r3, [r0, #12]
 800edcc:	460c      	mov	r4, r1
 800edce:	46a8      	mov	r8, r5
 800edd0:	4621      	mov	r1, r4
 800edd2:	4630      	mov	r0, r6
 800edd4:	3501      	adds	r5, #1
 800edd6:	f008 fda3 	bl	8017920 <put_memory>
 800edda:	42af      	cmp	r7, r5
 800eddc:	60a4      	str	r4, [r4, #8]
 800edde:	f884 800c 	strb.w	r8, [r4, #12]
 800ede2:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ede6:	d1f3      	bne.n	800edd0 <rmw_uxrce_init_service_memory+0x20>
 800ede8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edec:	4770      	bx	lr
 800edee:	bf00      	nop

0800edf0 <rmw_uxrce_init_client_memory>:
 800edf0:	b1e2      	cbz	r2, 800ee2c <rmw_uxrce_init_client_memory+0x3c>
 800edf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edf6:	7b05      	ldrb	r5, [r0, #12]
 800edf8:	4606      	mov	r6, r0
 800edfa:	b9ad      	cbnz	r5, 800ee28 <rmw_uxrce_init_client_memory+0x38>
 800edfc:	23c8      	movs	r3, #200	@ 0xc8
 800edfe:	e9c0 5500 	strd	r5, r5, [r0]
 800ee02:	6083      	str	r3, [r0, #8]
 800ee04:	f240 1301 	movw	r3, #257	@ 0x101
 800ee08:	4617      	mov	r7, r2
 800ee0a:	8183      	strh	r3, [r0, #12]
 800ee0c:	460c      	mov	r4, r1
 800ee0e:	46a8      	mov	r8, r5
 800ee10:	4621      	mov	r1, r4
 800ee12:	4630      	mov	r0, r6
 800ee14:	3501      	adds	r5, #1
 800ee16:	f008 fd83 	bl	8017920 <put_memory>
 800ee1a:	42af      	cmp	r7, r5
 800ee1c:	60a4      	str	r4, [r4, #8]
 800ee1e:	f884 800c 	strb.w	r8, [r4, #12]
 800ee22:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800ee26:	d1f3      	bne.n	800ee10 <rmw_uxrce_init_client_memory+0x20>
 800ee28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee2c:	4770      	bx	lr
 800ee2e:	bf00      	nop

0800ee30 <rmw_uxrce_init_publisher_memory>:
 800ee30:	b1e2      	cbz	r2, 800ee6c <rmw_uxrce_init_publisher_memory+0x3c>
 800ee32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee36:	7b05      	ldrb	r5, [r0, #12]
 800ee38:	4606      	mov	r6, r0
 800ee3a:	b9ad      	cbnz	r5, 800ee68 <rmw_uxrce_init_publisher_memory+0x38>
 800ee3c:	23d8      	movs	r3, #216	@ 0xd8
 800ee3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ee42:	6083      	str	r3, [r0, #8]
 800ee44:	f240 1301 	movw	r3, #257	@ 0x101
 800ee48:	4617      	mov	r7, r2
 800ee4a:	8183      	strh	r3, [r0, #12]
 800ee4c:	460c      	mov	r4, r1
 800ee4e:	46a8      	mov	r8, r5
 800ee50:	4621      	mov	r1, r4
 800ee52:	4630      	mov	r0, r6
 800ee54:	3501      	adds	r5, #1
 800ee56:	f008 fd63 	bl	8017920 <put_memory>
 800ee5a:	42af      	cmp	r7, r5
 800ee5c:	60a4      	str	r4, [r4, #8]
 800ee5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ee62:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800ee66:	d1f3      	bne.n	800ee50 <rmw_uxrce_init_publisher_memory+0x20>
 800ee68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee6c:	4770      	bx	lr
 800ee6e:	bf00      	nop

0800ee70 <rmw_uxrce_init_subscription_memory>:
 800ee70:	b1e2      	cbz	r2, 800eeac <rmw_uxrce_init_subscription_memory+0x3c>
 800ee72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee76:	7b05      	ldrb	r5, [r0, #12]
 800ee78:	4606      	mov	r6, r0
 800ee7a:	b9ad      	cbnz	r5, 800eea8 <rmw_uxrce_init_subscription_memory+0x38>
 800ee7c:	23d8      	movs	r3, #216	@ 0xd8
 800ee7e:	e9c0 5500 	strd	r5, r5, [r0]
 800ee82:	6083      	str	r3, [r0, #8]
 800ee84:	f240 1301 	movw	r3, #257	@ 0x101
 800ee88:	4617      	mov	r7, r2
 800ee8a:	8183      	strh	r3, [r0, #12]
 800ee8c:	460c      	mov	r4, r1
 800ee8e:	46a8      	mov	r8, r5
 800ee90:	4621      	mov	r1, r4
 800ee92:	4630      	mov	r0, r6
 800ee94:	3501      	adds	r5, #1
 800ee96:	f008 fd43 	bl	8017920 <put_memory>
 800ee9a:	42af      	cmp	r7, r5
 800ee9c:	60a4      	str	r4, [r4, #8]
 800ee9e:	f884 800c 	strb.w	r8, [r4, #12]
 800eea2:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800eea6:	d1f3      	bne.n	800ee90 <rmw_uxrce_init_subscription_memory+0x20>
 800eea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeac:	4770      	bx	lr
 800eeae:	bf00      	nop

0800eeb0 <rmw_uxrce_init_node_memory>:
 800eeb0:	b1e2      	cbz	r2, 800eeec <rmw_uxrce_init_node_memory+0x3c>
 800eeb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eeb6:	7b05      	ldrb	r5, [r0, #12]
 800eeb8:	4606      	mov	r6, r0
 800eeba:	b9ad      	cbnz	r5, 800eee8 <rmw_uxrce_init_node_memory+0x38>
 800eebc:	23a4      	movs	r3, #164	@ 0xa4
 800eebe:	e9c0 5500 	strd	r5, r5, [r0]
 800eec2:	6083      	str	r3, [r0, #8]
 800eec4:	f240 1301 	movw	r3, #257	@ 0x101
 800eec8:	4617      	mov	r7, r2
 800eeca:	8183      	strh	r3, [r0, #12]
 800eecc:	460c      	mov	r4, r1
 800eece:	46a8      	mov	r8, r5
 800eed0:	4621      	mov	r1, r4
 800eed2:	4630      	mov	r0, r6
 800eed4:	3501      	adds	r5, #1
 800eed6:	f008 fd23 	bl	8017920 <put_memory>
 800eeda:	42af      	cmp	r7, r5
 800eedc:	60a4      	str	r4, [r4, #8]
 800eede:	f884 800c 	strb.w	r8, [r4, #12]
 800eee2:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800eee6:	d1f3      	bne.n	800eed0 <rmw_uxrce_init_node_memory+0x20>
 800eee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop

0800eef0 <rmw_uxrce_init_session_memory>:
 800eef0:	b1ea      	cbz	r2, 800ef2e <rmw_uxrce_init_session_memory+0x3e>
 800eef2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eef6:	7b05      	ldrb	r5, [r0, #12]
 800eef8:	4606      	mov	r6, r0
 800eefa:	b9b5      	cbnz	r5, 800ef2a <rmw_uxrce_init_session_memory+0x3a>
 800eefc:	e9c0 5500 	strd	r5, r5, [r0]
 800ef00:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800ef04:	f240 1301 	movw	r3, #257	@ 0x101
 800ef08:	4617      	mov	r7, r2
 800ef0a:	f8c0 8008 	str.w	r8, [r0, #8]
 800ef0e:	460c      	mov	r4, r1
 800ef10:	8183      	strh	r3, [r0, #12]
 800ef12:	46a9      	mov	r9, r5
 800ef14:	4621      	mov	r1, r4
 800ef16:	4630      	mov	r0, r6
 800ef18:	3501      	adds	r5, #1
 800ef1a:	f008 fd01 	bl	8017920 <put_memory>
 800ef1e:	42af      	cmp	r7, r5
 800ef20:	60a4      	str	r4, [r4, #8]
 800ef22:	f884 900c 	strb.w	r9, [r4, #12]
 800ef26:	4444      	add	r4, r8
 800ef28:	d1f4      	bne.n	800ef14 <rmw_uxrce_init_session_memory+0x24>
 800ef2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef2e:	4770      	bx	lr

0800ef30 <rmw_uxrce_init_topic_memory>:
 800ef30:	b1e2      	cbz	r2, 800ef6c <rmw_uxrce_init_topic_memory+0x3c>
 800ef32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef36:	7b05      	ldrb	r5, [r0, #12]
 800ef38:	4606      	mov	r6, r0
 800ef3a:	b9ad      	cbnz	r5, 800ef68 <rmw_uxrce_init_topic_memory+0x38>
 800ef3c:	231c      	movs	r3, #28
 800ef3e:	e9c0 5500 	strd	r5, r5, [r0]
 800ef42:	6083      	str	r3, [r0, #8]
 800ef44:	f240 1301 	movw	r3, #257	@ 0x101
 800ef48:	4617      	mov	r7, r2
 800ef4a:	8183      	strh	r3, [r0, #12]
 800ef4c:	460c      	mov	r4, r1
 800ef4e:	46a8      	mov	r8, r5
 800ef50:	4621      	mov	r1, r4
 800ef52:	4630      	mov	r0, r6
 800ef54:	3501      	adds	r5, #1
 800ef56:	f008 fce3 	bl	8017920 <put_memory>
 800ef5a:	42af      	cmp	r7, r5
 800ef5c:	60a4      	str	r4, [r4, #8]
 800ef5e:	f884 800c 	strb.w	r8, [r4, #12]
 800ef62:	f104 041c 	add.w	r4, r4, #28
 800ef66:	d1f3      	bne.n	800ef50 <rmw_uxrce_init_topic_memory+0x20>
 800ef68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ef6c:	4770      	bx	lr
 800ef6e:	bf00      	nop

0800ef70 <rmw_uxrce_init_static_input_buffer_memory>:
 800ef70:	b1ea      	cbz	r2, 800efae <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800ef72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef76:	7b05      	ldrb	r5, [r0, #12]
 800ef78:	4606      	mov	r6, r0
 800ef7a:	b9b5      	cbnz	r5, 800efaa <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800ef7c:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800ef80:	e9c0 5500 	strd	r5, r5, [r0]
 800ef84:	6083      	str	r3, [r0, #8]
 800ef86:	f240 1301 	movw	r3, #257	@ 0x101
 800ef8a:	4617      	mov	r7, r2
 800ef8c:	8183      	strh	r3, [r0, #12]
 800ef8e:	460c      	mov	r4, r1
 800ef90:	46a8      	mov	r8, r5
 800ef92:	4621      	mov	r1, r4
 800ef94:	4630      	mov	r0, r6
 800ef96:	3501      	adds	r5, #1
 800ef98:	f008 fcc2 	bl	8017920 <put_memory>
 800ef9c:	42af      	cmp	r7, r5
 800ef9e:	60a4      	str	r4, [r4, #8]
 800efa0:	f884 800c 	strb.w	r8, [r4, #12]
 800efa4:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800efa8:	d1f3      	bne.n	800ef92 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800efaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efae:	4770      	bx	lr

0800efb0 <rmw_uxrce_init_init_options_impl_memory>:
 800efb0:	b1e2      	cbz	r2, 800efec <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800efb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efb6:	7b05      	ldrb	r5, [r0, #12]
 800efb8:	4606      	mov	r6, r0
 800efba:	b9ad      	cbnz	r5, 800efe8 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800efbc:	232c      	movs	r3, #44	@ 0x2c
 800efbe:	e9c0 5500 	strd	r5, r5, [r0]
 800efc2:	6083      	str	r3, [r0, #8]
 800efc4:	f240 1301 	movw	r3, #257	@ 0x101
 800efc8:	4617      	mov	r7, r2
 800efca:	8183      	strh	r3, [r0, #12]
 800efcc:	460c      	mov	r4, r1
 800efce:	46a8      	mov	r8, r5
 800efd0:	4621      	mov	r1, r4
 800efd2:	4630      	mov	r0, r6
 800efd4:	3501      	adds	r5, #1
 800efd6:	f008 fca3 	bl	8017920 <put_memory>
 800efda:	42af      	cmp	r7, r5
 800efdc:	60a4      	str	r4, [r4, #8]
 800efde:	f884 800c 	strb.w	r8, [r4, #12]
 800efe2:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800efe6:	d1f3      	bne.n	800efd0 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	4770      	bx	lr
 800efee:	bf00      	nop

0800eff0 <rmw_uxrce_init_wait_set_memory>:
 800eff0:	b1e2      	cbz	r2, 800f02c <rmw_uxrce_init_wait_set_memory+0x3c>
 800eff2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	7b05      	ldrb	r5, [r0, #12]
 800eff8:	4606      	mov	r6, r0
 800effa:	b9ad      	cbnz	r5, 800f028 <rmw_uxrce_init_wait_set_memory+0x38>
 800effc:	231c      	movs	r3, #28
 800effe:	e9c0 5500 	strd	r5, r5, [r0]
 800f002:	6083      	str	r3, [r0, #8]
 800f004:	f240 1301 	movw	r3, #257	@ 0x101
 800f008:	4617      	mov	r7, r2
 800f00a:	8183      	strh	r3, [r0, #12]
 800f00c:	460c      	mov	r4, r1
 800f00e:	46a8      	mov	r8, r5
 800f010:	4621      	mov	r1, r4
 800f012:	4630      	mov	r0, r6
 800f014:	3501      	adds	r5, #1
 800f016:	f008 fc83 	bl	8017920 <put_memory>
 800f01a:	42af      	cmp	r7, r5
 800f01c:	60a4      	str	r4, [r4, #8]
 800f01e:	f884 800c 	strb.w	r8, [r4, #12]
 800f022:	f104 041c 	add.w	r4, r4, #28
 800f026:	d1f3      	bne.n	800f010 <rmw_uxrce_init_wait_set_memory+0x20>
 800f028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f02c:	4770      	bx	lr
 800f02e:	bf00      	nop

0800f030 <rmw_uxrce_init_guard_condition_memory>:
 800f030:	b1e2      	cbz	r2, 800f06c <rmw_uxrce_init_guard_condition_memory+0x3c>
 800f032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f036:	7b05      	ldrb	r5, [r0, #12]
 800f038:	4606      	mov	r6, r0
 800f03a:	b9ad      	cbnz	r5, 800f068 <rmw_uxrce_init_guard_condition_memory+0x38>
 800f03c:	2320      	movs	r3, #32
 800f03e:	e9c0 5500 	strd	r5, r5, [r0]
 800f042:	6083      	str	r3, [r0, #8]
 800f044:	f240 1301 	movw	r3, #257	@ 0x101
 800f048:	4617      	mov	r7, r2
 800f04a:	8183      	strh	r3, [r0, #12]
 800f04c:	460c      	mov	r4, r1
 800f04e:	46a8      	mov	r8, r5
 800f050:	4621      	mov	r1, r4
 800f052:	4630      	mov	r0, r6
 800f054:	3501      	adds	r5, #1
 800f056:	f008 fc63 	bl	8017920 <put_memory>
 800f05a:	42af      	cmp	r7, r5
 800f05c:	60a4      	str	r4, [r4, #8]
 800f05e:	f884 800c 	strb.w	r8, [r4, #12]
 800f062:	f104 0420 	add.w	r4, r4, #32
 800f066:	d1f3      	bne.n	800f050 <rmw_uxrce_init_guard_condition_memory+0x20>
 800f068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f06c:	4770      	bx	lr
 800f06e:	bf00      	nop

0800f070 <rmw_uxrce_fini_session_memory>:
 800f070:	4601      	mov	r1, r0
 800f072:	4801      	ldr	r0, [pc, #4]	@ (800f078 <rmw_uxrce_fini_session_memory+0x8>)
 800f074:	f008 bc54 	b.w	8017920 <put_memory>
 800f078:	2000af8c 	.word	0x2000af8c

0800f07c <rmw_uxrce_fini_node_memory>:
 800f07c:	b538      	push	{r3, r4, r5, lr}
 800f07e:	4604      	mov	r4, r0
 800f080:	6800      	ldr	r0, [r0, #0]
 800f082:	b128      	cbz	r0, 800f090 <rmw_uxrce_fini_node_memory+0x14>
 800f084:	4b07      	ldr	r3, [pc, #28]	@ (800f0a4 <rmw_uxrce_fini_node_memory+0x28>)
 800f086:	6819      	ldr	r1, [r3, #0]
 800f088:	f7f1 f8ca 	bl	8000220 <strcmp>
 800f08c:	b940      	cbnz	r0, 800f0a0 <rmw_uxrce_fini_node_memory+0x24>
 800f08e:	6020      	str	r0, [r4, #0]
 800f090:	6861      	ldr	r1, [r4, #4]
 800f092:	b129      	cbz	r1, 800f0a0 <rmw_uxrce_fini_node_memory+0x24>
 800f094:	2500      	movs	r5, #0
 800f096:	4804      	ldr	r0, [pc, #16]	@ (800f0a8 <rmw_uxrce_fini_node_memory+0x2c>)
 800f098:	610d      	str	r5, [r1, #16]
 800f09a:	f008 fc41 	bl	8017920 <put_memory>
 800f09e:	6065      	str	r5, [r4, #4]
 800f0a0:	bd38      	pop	{r3, r4, r5, pc}
 800f0a2:	bf00      	nop
 800f0a4:	0801bfd8 	.word	0x0801bfd8
 800f0a8:	2000af5c 	.word	0x2000af5c

0800f0ac <rmw_uxrce_fini_publisher_memory>:
 800f0ac:	b510      	push	{r4, lr}
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	6800      	ldr	r0, [r0, #0]
 800f0b2:	b128      	cbz	r0, 800f0c0 <rmw_uxrce_fini_publisher_memory+0x14>
 800f0b4:	4b06      	ldr	r3, [pc, #24]	@ (800f0d0 <rmw_uxrce_fini_publisher_memory+0x24>)
 800f0b6:	6819      	ldr	r1, [r3, #0]
 800f0b8:	f7f1 f8b2 	bl	8000220 <strcmp>
 800f0bc:	b938      	cbnz	r0, 800f0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800f0be:	6020      	str	r0, [r4, #0]
 800f0c0:	6861      	ldr	r1, [r4, #4]
 800f0c2:	b121      	cbz	r1, 800f0ce <rmw_uxrce_fini_publisher_memory+0x22>
 800f0c4:	4803      	ldr	r0, [pc, #12]	@ (800f0d4 <rmw_uxrce_fini_publisher_memory+0x28>)
 800f0c6:	f008 fc2b 	bl	8017920 <put_memory>
 800f0ca:	2300      	movs	r3, #0
 800f0cc:	6063      	str	r3, [r4, #4]
 800f0ce:	bd10      	pop	{r4, pc}
 800f0d0:	0801bfd8 	.word	0x0801bfd8
 800f0d4:	2000af6c 	.word	0x2000af6c

0800f0d8 <rmw_uxrce_fini_subscription_memory>:
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	4604      	mov	r4, r0
 800f0dc:	6800      	ldr	r0, [r0, #0]
 800f0de:	b128      	cbz	r0, 800f0ec <rmw_uxrce_fini_subscription_memory+0x14>
 800f0e0:	4b06      	ldr	r3, [pc, #24]	@ (800f0fc <rmw_uxrce_fini_subscription_memory+0x24>)
 800f0e2:	6819      	ldr	r1, [r3, #0]
 800f0e4:	f7f1 f89c 	bl	8000220 <strcmp>
 800f0e8:	b938      	cbnz	r0, 800f0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800f0ea:	6020      	str	r0, [r4, #0]
 800f0ec:	6861      	ldr	r1, [r4, #4]
 800f0ee:	b121      	cbz	r1, 800f0fa <rmw_uxrce_fini_subscription_memory+0x22>
 800f0f0:	4803      	ldr	r0, [pc, #12]	@ (800f100 <rmw_uxrce_fini_subscription_memory+0x28>)
 800f0f2:	f008 fc15 	bl	8017920 <put_memory>
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	6063      	str	r3, [r4, #4]
 800f0fa:	bd10      	pop	{r4, pc}
 800f0fc:	0801bfd8 	.word	0x0801bfd8
 800f100:	2000afac 	.word	0x2000afac

0800f104 <rmw_uxrce_fini_service_memory>:
 800f104:	b510      	push	{r4, lr}
 800f106:	4604      	mov	r4, r0
 800f108:	6800      	ldr	r0, [r0, #0]
 800f10a:	b128      	cbz	r0, 800f118 <rmw_uxrce_fini_service_memory+0x14>
 800f10c:	4b06      	ldr	r3, [pc, #24]	@ (800f128 <rmw_uxrce_fini_service_memory+0x24>)
 800f10e:	6819      	ldr	r1, [r3, #0]
 800f110:	f7f1 f886 	bl	8000220 <strcmp>
 800f114:	b938      	cbnz	r0, 800f126 <rmw_uxrce_fini_service_memory+0x22>
 800f116:	6020      	str	r0, [r4, #0]
 800f118:	6861      	ldr	r1, [r4, #4]
 800f11a:	b121      	cbz	r1, 800f126 <rmw_uxrce_fini_service_memory+0x22>
 800f11c:	4803      	ldr	r0, [pc, #12]	@ (800f12c <rmw_uxrce_fini_service_memory+0x28>)
 800f11e:	f008 fbff 	bl	8017920 <put_memory>
 800f122:	2300      	movs	r3, #0
 800f124:	6063      	str	r3, [r4, #4]
 800f126:	bd10      	pop	{r4, pc}
 800f128:	0801bfd8 	.word	0x0801bfd8
 800f12c:	2000af7c 	.word	0x2000af7c

0800f130 <rmw_uxrce_fini_client_memory>:
 800f130:	b510      	push	{r4, lr}
 800f132:	4604      	mov	r4, r0
 800f134:	6800      	ldr	r0, [r0, #0]
 800f136:	b128      	cbz	r0, 800f144 <rmw_uxrce_fini_client_memory+0x14>
 800f138:	4b06      	ldr	r3, [pc, #24]	@ (800f154 <rmw_uxrce_fini_client_memory+0x24>)
 800f13a:	6819      	ldr	r1, [r3, #0]
 800f13c:	f7f1 f870 	bl	8000220 <strcmp>
 800f140:	b938      	cbnz	r0, 800f152 <rmw_uxrce_fini_client_memory+0x22>
 800f142:	6020      	str	r0, [r4, #0]
 800f144:	6861      	ldr	r1, [r4, #4]
 800f146:	b121      	cbz	r1, 800f152 <rmw_uxrce_fini_client_memory+0x22>
 800f148:	4803      	ldr	r0, [pc, #12]	@ (800f158 <rmw_uxrce_fini_client_memory+0x28>)
 800f14a:	f008 fbe9 	bl	8017920 <put_memory>
 800f14e:	2300      	movs	r3, #0
 800f150:	6063      	str	r3, [r4, #4]
 800f152:	bd10      	pop	{r4, pc}
 800f154:	0801bfd8 	.word	0x0801bfd8
 800f158:	2000668c 	.word	0x2000668c

0800f15c <rmw_uxrce_fini_topic_memory>:
 800f15c:	b510      	push	{r4, lr}
 800f15e:	4604      	mov	r4, r0
 800f160:	4621      	mov	r1, r4
 800f162:	4803      	ldr	r0, [pc, #12]	@ (800f170 <rmw_uxrce_fini_topic_memory+0x14>)
 800f164:	f008 fbdc 	bl	8017920 <put_memory>
 800f168:	2300      	movs	r3, #0
 800f16a:	61a3      	str	r3, [r4, #24]
 800f16c:	bd10      	pop	{r4, pc}
 800f16e:	bf00      	nop
 800f170:	2000afbc 	.word	0x2000afbc

0800f174 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800f174:	b082      	sub	sp, #8
 800f176:	b530      	push	{r4, r5, lr}
 800f178:	4925      	ldr	r1, [pc, #148]	@ (800f210 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f17a:	680d      	ldr	r5, [r1, #0]
 800f17c:	ac03      	add	r4, sp, #12
 800f17e:	e884 000c 	stmia.w	r4, {r2, r3}
 800f182:	461c      	mov	r4, r3
 800f184:	2d00      	cmp	r5, #0
 800f186:	d041      	beq.n	800f20c <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800f188:	462b      	mov	r3, r5
 800f18a:	2100      	movs	r1, #0
 800f18c:	689a      	ldr	r2, [r3, #8]
 800f18e:	685b      	ldr	r3, [r3, #4]
 800f190:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800f194:	4290      	cmp	r0, r2
 800f196:	bf08      	it	eq
 800f198:	3101      	addeq	r1, #1
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1f6      	bne.n	800f18c <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800f19e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800f1a2:	2b02      	cmp	r3, #2
 800f1a4:	d029      	beq.n	800f1fa <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800f1a6:	d907      	bls.n	800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1a8:	2b03      	cmp	r3, #3
 800f1aa:	d005      	beq.n	800f1b8 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f1b2:	4608      	mov	r0, r1
 800f1b4:	b002      	add	sp, #8
 800f1b6:	4770      	bx	lr
 800f1b8:	b314      	cbz	r4, 800f200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1ba:	428c      	cmp	r4, r1
 800f1bc:	d820      	bhi.n	800f200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1be:	2d00      	cmp	r5, #0
 800f1c0:	d0f4      	beq.n	800f1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f1c2:	2100      	movs	r1, #0
 800f1c4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800f1c8:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800f1cc:	e002      	b.n	800f1d4 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800f1ce:	686d      	ldr	r5, [r5, #4]
 800f1d0:	2d00      	cmp	r5, #0
 800f1d2:	d0ec      	beq.n	800f1ae <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800f1d4:	68ab      	ldr	r3, [r5, #8]
 800f1d6:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800f1da:	4290      	cmp	r0, r2
 800f1dc:	d1f7      	bne.n	800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1de:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800f1e2:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800f1e6:	4562      	cmp	r2, ip
 800f1e8:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800f1ec:	eb73 0e04 	sbcs.w	lr, r3, r4
 800f1f0:	daed      	bge.n	800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1f2:	4694      	mov	ip, r2
 800f1f4:	461c      	mov	r4, r3
 800f1f6:	4629      	mov	r1, r5
 800f1f8:	e7e9      	b.n	800f1ce <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800f1fa:	b10c      	cbz	r4, 800f200 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800f1fc:	428c      	cmp	r4, r1
 800f1fe:	d9d5      	bls.n	800f1ac <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800f200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f204:	4802      	ldr	r0, [pc, #8]	@ (800f210 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800f206:	b002      	add	sp, #8
 800f208:	f008 bb7a 	b.w	8017900 <get_memory>
 800f20c:	4629      	mov	r1, r5
 800f20e:	e7c6      	b.n	800f19e <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800f210:	2000af9c 	.word	0x2000af9c

0800f214 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800f214:	4b11      	ldr	r3, [pc, #68]	@ (800f25c <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	b530      	push	{r4, r5, lr}
 800f21a:	b1e3      	cbz	r3, 800f256 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800f21c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800f220:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800f224:	2400      	movs	r4, #0
 800f226:	e001      	b.n	800f22c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f228:	685b      	ldr	r3, [r3, #4]
 800f22a:	b193      	cbz	r3, 800f252 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800f22c:	689a      	ldr	r2, [r3, #8]
 800f22e:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800f232:	4288      	cmp	r0, r1
 800f234:	d1f8      	bne.n	800f228 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f236:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800f23a:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800f23e:	4571      	cmp	r1, lr
 800f240:	eb72 050c 	sbcs.w	r5, r2, ip
 800f244:	daf0      	bge.n	800f228 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800f246:	461c      	mov	r4, r3
 800f248:	685b      	ldr	r3, [r3, #4]
 800f24a:	468e      	mov	lr, r1
 800f24c:	4694      	mov	ip, r2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d1ec      	bne.n	800f22c <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800f252:	4620      	mov	r0, r4
 800f254:	bd30      	pop	{r4, r5, pc}
 800f256:	461c      	mov	r4, r3
 800f258:	4620      	mov	r0, r4
 800f25a:	bd30      	pop	{r4, r5, pc}
 800f25c:	2000af9c 	.word	0x2000af9c

0800f260 <rmw_uxrce_clean_expired_static_input_buffer>:
 800f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	4b3c      	ldr	r3, [pc, #240]	@ (800f358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f266:	ed2d 8b06 	vpush	{d8-d10}
 800f26a:	681f      	ldr	r7, [r3, #0]
 800f26c:	b08d      	sub	sp, #52	@ 0x34
 800f26e:	f7ff fd7f 	bl	800ed70 <rmw_uros_epoch_nanos>
 800f272:	2f00      	cmp	r7, #0
 800f274:	d05d      	beq.n	800f332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f276:	46b8      	mov	r8, r7
 800f278:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800f340 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800f27c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f280:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f284:	2b04      	cmp	r3, #4
 800f286:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800f348 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800f28a:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800f350 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800f28e:	4681      	mov	r9, r0
 800f290:	468a      	mov	sl, r1
 800f292:	ac04      	add	r4, sp, #16
 800f294:	d03f      	beq.n	800f316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f296:	2b05      	cmp	r3, #5
 800f298:	d044      	beq.n	800f324 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800f29a:	2b03      	cmp	r3, #3
 800f29c:	d03b      	beq.n	800f316 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800f29e:	ed8d 8b04 	vstr	d8, [sp, #16]
 800f2a2:	ed8d ab06 	vstr	d10, [sp, #24]
 800f2a6:	ed8d 8b08 	vstr	d8, [sp, #32]
 800f2aa:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800f2ae:	ab08      	add	r3, sp, #32
 800f2b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f2b2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800f2b6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2ba:	f008 f86d 	bl	8017398 <rmw_time_equal>
 800f2be:	b118      	cbz	r0, 800f2c8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800f2c0:	ed8d 9b04 	vstr	d9, [sp, #16]
 800f2c4:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f2c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800f2cc:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800f2d0:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800f2d4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800f2d8:	f008 f8b2 	bl	8017440 <rmw_time_total_nsec>
 800f2dc:	1830      	adds	r0, r6, r0
 800f2de:	eb47 0101 	adc.w	r1, r7, r1
 800f2e2:	4548      	cmp	r0, r9
 800f2e4:	eb71 030a 	sbcs.w	r3, r1, sl
 800f2e8:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800f2ec:	db05      	blt.n	800f2fa <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800f2ee:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800f2f2:	4591      	cmp	r9, r2
 800f2f4:	eb7a 0303 	sbcs.w	r3, sl, r3
 800f2f8:	da03      	bge.n	800f302 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800f2fa:	4817      	ldr	r0, [pc, #92]	@ (800f358 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800f2fc:	4641      	mov	r1, r8
 800f2fe:	f008 fb0f 	bl	8017920 <put_memory>
 800f302:	f1bb 0f00 	cmp.w	fp, #0
 800f306:	d014      	beq.n	800f332 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800f308:	46d8      	mov	r8, fp
 800f30a:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800f30e:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800f312:	2b04      	cmp	r3, #4
 800f314:	d1bf      	bne.n	800f296 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800f316:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f31a:	3340      	adds	r3, #64	@ 0x40
 800f31c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f31e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f322:	e7c0      	b.n	800f2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f324:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800f328:	3348      	adds	r3, #72	@ 0x48
 800f32a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f32c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f330:	e7b9      	b.n	800f2a6 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800f332:	b00d      	add	sp, #52	@ 0x34
 800f334:	ecbd 8b06 	vpop	{d8-d10}
 800f338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f33c:	f3af 8000 	nop.w
	...
 800f348:	00000001 	.word	0x00000001
 800f34c:	00000000 	.word	0x00000000
 800f350:	0000001e 	.word	0x0000001e
 800f354:	00000000 	.word	0x00000000
 800f358:	2000af9c 	.word	0x2000af9c

0800f35c <run_xrce_session>:
 800f35c:	b510      	push	{r4, lr}
 800f35e:	788c      	ldrb	r4, [r1, #2]
 800f360:	b086      	sub	sp, #24
 800f362:	2c01      	cmp	r4, #1
 800f364:	f8ad 200e 	strh.w	r2, [sp, #14]
 800f368:	d00c      	beq.n	800f384 <run_xrce_session+0x28>
 800f36a:	4619      	mov	r1, r3
 800f36c:	2301      	movs	r3, #1
 800f36e:	9300      	str	r3, [sp, #0]
 800f370:	f10d 020e 	add.w	r2, sp, #14
 800f374:	f10d 0317 	add.w	r3, sp, #23
 800f378:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f37c:	f002 fd26 	bl	8011dcc <uxr_run_session_until_all_status>
 800f380:	b006      	add	sp, #24
 800f382:	bd10      	pop	{r4, pc}
 800f384:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800f388:	f002 f93a 	bl	8011600 <uxr_flash_output_streams>
 800f38c:	4620      	mov	r0, r4
 800f38e:	b006      	add	sp, #24
 800f390:	bd10      	pop	{r4, pc}
 800f392:	bf00      	nop

0800f394 <convert_qos_profile>:
 800f394:	7a4a      	ldrb	r2, [r1, #9]
 800f396:	f891 c008 	ldrb.w	ip, [r1, #8]
 800f39a:	2a02      	cmp	r2, #2
 800f39c:	bf18      	it	ne
 800f39e:	2200      	movne	r2, #0
 800f3a0:	7002      	strb	r2, [r0, #0]
 800f3a2:	780a      	ldrb	r2, [r1, #0]
 800f3a4:	8889      	ldrh	r1, [r1, #4]
 800f3a6:	8081      	strh	r1, [r0, #4]
 800f3a8:	f1ac 0c02 	sub.w	ip, ip, #2
 800f3ac:	f1a2 0202 	sub.w	r2, r2, #2
 800f3b0:	fabc fc8c 	clz	ip, ip
 800f3b4:	fab2 f282 	clz	r2, r2
 800f3b8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800f3bc:	0952      	lsrs	r2, r2, #5
 800f3be:	f880 c001 	strb.w	ip, [r0, #1]
 800f3c2:	7082      	strb	r2, [r0, #2]
 800f3c4:	4770      	bx	lr
 800f3c6:	bf00      	nop

0800f3c8 <generate_type_name>:
 800f3c8:	b530      	push	{r4, r5, lr}
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	700b      	strb	r3, [r1, #0]
 800f3ce:	6803      	ldr	r3, [r0, #0]
 800f3d0:	b087      	sub	sp, #28
 800f3d2:	4614      	mov	r4, r2
 800f3d4:	b1d3      	cbz	r3, 800f40c <generate_type_name+0x44>
 800f3d6:	4a0f      	ldr	r2, [pc, #60]	@ (800f414 <generate_type_name+0x4c>)
 800f3d8:	4615      	mov	r5, r2
 800f3da:	9203      	str	r2, [sp, #12]
 800f3dc:	9500      	str	r5, [sp, #0]
 800f3de:	6842      	ldr	r2, [r0, #4]
 800f3e0:	480d      	ldr	r0, [pc, #52]	@ (800f418 <generate_type_name+0x50>)
 800f3e2:	9001      	str	r0, [sp, #4]
 800f3e4:	4608      	mov	r0, r1
 800f3e6:	490d      	ldr	r1, [pc, #52]	@ (800f41c <generate_type_name+0x54>)
 800f3e8:	9204      	str	r2, [sp, #16]
 800f3ea:	9105      	str	r1, [sp, #20]
 800f3ec:	9102      	str	r1, [sp, #8]
 800f3ee:	4a0c      	ldr	r2, [pc, #48]	@ (800f420 <generate_type_name+0x58>)
 800f3f0:	4621      	mov	r1, r4
 800f3f2:	f00a ff51 	bl	801a298 <sniprintf>
 800f3f6:	2800      	cmp	r0, #0
 800f3f8:	db05      	blt.n	800f406 <generate_type_name+0x3e>
 800f3fa:	4284      	cmp	r4, r0
 800f3fc:	bfd4      	ite	le
 800f3fe:	2000      	movle	r0, #0
 800f400:	2001      	movgt	r0, #1
 800f402:	b007      	add	sp, #28
 800f404:	bd30      	pop	{r4, r5, pc}
 800f406:	2000      	movs	r0, #0
 800f408:	b007      	add	sp, #28
 800f40a:	bd30      	pop	{r4, r5, pc}
 800f40c:	4b05      	ldr	r3, [pc, #20]	@ (800f424 <generate_type_name+0x5c>)
 800f40e:	4a01      	ldr	r2, [pc, #4]	@ (800f414 <generate_type_name+0x4c>)
 800f410:	461d      	mov	r5, r3
 800f412:	e7e2      	b.n	800f3da <generate_type_name+0x12>
 800f414:	0801b614 	.word	0x0801b614
 800f418:	0801b62c 	.word	0x0801b62c
 800f41c:	0801b628 	.word	0x0801b628
 800f420:	0801b618 	.word	0x0801b618
 800f424:	0801bba4 	.word	0x0801bba4

0800f428 <generate_topic_name>:
 800f428:	b510      	push	{r4, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	4614      	mov	r4, r2
 800f42e:	9000      	str	r0, [sp, #0]
 800f430:	4b08      	ldr	r3, [pc, #32]	@ (800f454 <generate_topic_name+0x2c>)
 800f432:	4a09      	ldr	r2, [pc, #36]	@ (800f458 <generate_topic_name+0x30>)
 800f434:	4608      	mov	r0, r1
 800f436:	4621      	mov	r1, r4
 800f438:	f00a ff2e 	bl	801a298 <sniprintf>
 800f43c:	2800      	cmp	r0, #0
 800f43e:	db05      	blt.n	800f44c <generate_topic_name+0x24>
 800f440:	4284      	cmp	r4, r0
 800f442:	bfd4      	ite	le
 800f444:	2000      	movle	r0, #0
 800f446:	2001      	movgt	r0, #1
 800f448:	b002      	add	sp, #8
 800f44a:	bd10      	pop	{r4, pc}
 800f44c:	2000      	movs	r0, #0
 800f44e:	b002      	add	sp, #8
 800f450:	bd10      	pop	{r4, pc}
 800f452:	bf00      	nop
 800f454:	0801bc4c 	.word	0x0801bc4c
 800f458:	0801b630 	.word	0x0801b630

0800f45c <is_uxrce_rmw_identifier_valid>:
 800f45c:	b510      	push	{r4, lr}
 800f45e:	4604      	mov	r4, r0
 800f460:	b140      	cbz	r0, 800f474 <is_uxrce_rmw_identifier_valid+0x18>
 800f462:	f008 fab5 	bl	80179d0 <rmw_get_implementation_identifier>
 800f466:	4601      	mov	r1, r0
 800f468:	4620      	mov	r0, r4
 800f46a:	f7f0 fed9 	bl	8000220 <strcmp>
 800f46e:	fab0 f080 	clz	r0, r0
 800f472:	0940      	lsrs	r0, r0, #5
 800f474:	bd10      	pop	{r4, pc}
 800f476:	bf00      	nop

0800f478 <get_message_typesupport_handle>:
 800f478:	6883      	ldr	r3, [r0, #8]
 800f47a:	4718      	bx	r3

0800f47c <get_message_typesupport_handle_function>:
 800f47c:	b510      	push	{r4, lr}
 800f47e:	4604      	mov	r4, r0
 800f480:	6800      	ldr	r0, [r0, #0]
 800f482:	f7f0 fecd 	bl	8000220 <strcmp>
 800f486:	2800      	cmp	r0, #0
 800f488:	bf0c      	ite	eq
 800f48a:	4620      	moveq	r0, r4
 800f48c:	2000      	movne	r0, #0
 800f48e:	bd10      	pop	{r4, pc}

0800f490 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800f490:	4b04      	ldr	r3, [pc, #16]	@ (800f4a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800f492:	681a      	ldr	r2, [r3, #0]
 800f494:	b10a      	cbz	r2, 800f49a <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xa>
 800f496:	4803      	ldr	r0, [pc, #12]	@ (800f4a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800f498:	4770      	bx	lr
 800f49a:	4a03      	ldr	r2, [pc, #12]	@ (800f4a8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x18>)
 800f49c:	4801      	ldr	r0, [pc, #4]	@ (800f4a4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>)
 800f49e:	6812      	ldr	r2, [r2, #0]
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	4770      	bx	lr
 800f4a4:	20000030 	.word	0x20000030
 800f4a8:	20000194 	.word	0x20000194

0800f4ac <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800f4ac:	4a02      	ldr	r2, [pc, #8]	@ (800f4b8 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0xc>)
 800f4ae:	4b03      	ldr	r3, [pc, #12]	@ (800f4bc <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x10>)
 800f4b0:	6812      	ldr	r2, [r2, #0]
 800f4b2:	601a      	str	r2, [r3, #0]
 800f4b4:	4770      	bx	lr
 800f4b6:	bf00      	nop
 800f4b8:	20000194 	.word	0x20000194
 800f4bc:	20000030 	.word	0x20000030

0800f4c0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__size_function__Float64MultiArray__data>:
 800f4c0:	6840      	ldr	r0, [r0, #4]
 800f4c2:	4770      	bx	lr

0800f4c4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float64MultiArray__data>:
 800f4c4:	6800      	ldr	r0, [r0, #0]
 800f4c6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f4ca:	4770      	bx	lr

0800f4cc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float64MultiArray__data>:
 800f4cc:	6803      	ldr	r3, [r0, #0]
 800f4ce:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f4d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d6:	e9c2 0100 	strd	r0, r1, [r2]
 800f4da:	4770      	bx	lr

0800f4dc <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__assign_function__Float64MultiArray__data>:
 800f4dc:	6803      	ldr	r3, [r0, #0]
 800f4de:	ed92 7b00 	vldr	d7, [r2]
 800f4e2:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800f4e6:	ed81 7b00 	vstr	d7, [r1]
 800f4ea:	4770      	bx	lr

0800f4ec <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_init_function>:
 800f4ec:	f008 be7e 	b.w	80181ec <std_msgs__msg__Float64MultiArray__init>

0800f4f0 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__Float64MultiArray_fini_function>:
 800f4f0:	f008 bea0 	b.w	8018234 <std_msgs__msg__Float64MultiArray__fini>

0800f4f4 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__resize_function__Float64MultiArray__data>:
 800f4f4:	b510      	push	{r4, lr}
 800f4f6:	b082      	sub	sp, #8
 800f4f8:	4604      	mov	r4, r0
 800f4fa:	9101      	str	r1, [sp, #4]
 800f4fc:	f008 fe34 	bl	8018168 <rosidl_runtime_c__double__Sequence__fini>
 800f500:	9901      	ldr	r1, [sp, #4]
 800f502:	4620      	mov	r0, r4
 800f504:	b002      	add	sp, #8
 800f506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f50a:	f008 be15 	b.w	8018138 <rosidl_runtime_c__double__Sequence__init>
 800f50e:	bf00      	nop

0800f510 <std_msgs__msg__Float64MultiArray__rosidl_typesupport_introspection_c__get_function__Float64MultiArray__data>:
 800f510:	6800      	ldr	r0, [r0, #0]
 800f512:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
 800f516:	4770      	bx	lr

0800f518 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800f518:	b508      	push	{r3, lr}
 800f51a:	f000 f857 	bl	800f5cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f51e:	4b06      	ldr	r3, [pc, #24]	@ (800f538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800f520:	4906      	ldr	r1, [pc, #24]	@ (800f53c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x24>)
 800f522:	681a      	ldr	r2, [r3, #0]
 800f524:	60c8      	str	r0, [r1, #12]
 800f526:	b10a      	cbz	r2, 800f52c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x14>
 800f528:	4803      	ldr	r0, [pc, #12]	@ (800f538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800f52a:	bd08      	pop	{r3, pc}
 800f52c:	4a04      	ldr	r2, [pc, #16]	@ (800f540 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x28>)
 800f52e:	4802      	ldr	r0, [pc, #8]	@ (800f538 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x20>)
 800f530:	6812      	ldr	r2, [r2, #0]
 800f532:	601a      	str	r2, [r3, #0]
 800f534:	bd08      	pop	{r3, pc}
 800f536:	bf00      	nop
 800f538:	200000b4 	.word	0x200000b4
 800f53c:	2000003c 	.word	0x2000003c
 800f540:	20000198 	.word	0x20000198

0800f544 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 800f544:	6840      	ldr	r0, [r0, #4]
 800f546:	4770      	bx	lr

0800f548 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 800f548:	6800      	ldr	r0, [r0, #0]
 800f54a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f54e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f552:	4770      	bx	lr

0800f554 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 800f554:	6803      	ldr	r3, [r0, #0]
 800f556:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f55a:	b500      	push	{lr}
 800f55c:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 800f560:	4694      	mov	ip, r2
 800f562:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f566:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f56a:	f8de 3000 	ldr.w	r3, [lr]
 800f56e:	f8cc 3000 	str.w	r3, [ip]
 800f572:	f85d fb04 	ldr.w	pc, [sp], #4
 800f576:	bf00      	nop

0800f578 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 800f578:	6803      	ldr	r3, [r0, #0]
 800f57a:	b500      	push	{lr}
 800f57c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f580:	4696      	mov	lr, r2
 800f582:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 800f586:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f58a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f58e:	f8de 3000 	ldr.w	r3, [lr]
 800f592:	f8cc 3000 	str.w	r3, [ip]
 800f596:	f85d fb04 	ldr.w	pc, [sp], #4
 800f59a:	bf00      	nop

0800f59c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 800f59c:	f008 bee0 	b.w	8018360 <std_msgs__msg__MultiArrayLayout__init>

0800f5a0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 800f5a0:	f008 bef0 	b.w	8018384 <std_msgs__msg__MultiArrayLayout__fini>

0800f5a4 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 800f5a4:	b510      	push	{r4, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	4604      	mov	r4, r0
 800f5aa:	9101      	str	r1, [sp, #4]
 800f5ac:	f008 feb0 	bl	8018310 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 800f5b0:	9901      	ldr	r1, [sp, #4]
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	b002      	add	sp, #8
 800f5b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5ba:	f008 bea5 	b.w	8018308 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 800f5be:	bf00      	nop

0800f5c0 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 800f5c0:	6800      	ldr	r0, [r0, #0]
 800f5c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800f5c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800f5ca:	4770      	bx	lr

0800f5cc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800f5cc:	b508      	push	{r3, lr}
 800f5ce:	f008 fee1 	bl	8018394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f5d2:	4b06      	ldr	r3, [pc, #24]	@ (800f5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800f5d4:	4906      	ldr	r1, [pc, #24]	@ (800f5f0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	60c8      	str	r0, [r1, #12]
 800f5da:	b10a      	cbz	r2, 800f5e0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 800f5dc:	4803      	ldr	r0, [pc, #12]	@ (800f5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800f5de:	bd08      	pop	{r3, pc}
 800f5e0:	4a04      	ldr	r2, [pc, #16]	@ (800f5f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 800f5e2:	4802      	ldr	r0, [pc, #8]	@ (800f5ec <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 800f5e4:	6812      	ldr	r2, [r2, #0]
 800f5e6:	601a      	str	r2, [r3, #0]
 800f5e8:	bd08      	pop	{r3, pc}
 800f5ea:	bf00      	nop
 800f5ec:	20000138 	.word	0x20000138
 800f5f0:	200000c0 	.word	0x200000c0
 800f5f4:	20000198 	.word	0x20000198

0800f5f8 <_Float64MultiArray__max_serialized_size>:
 800f5f8:	b500      	push	{lr}
 800f5fa:	b083      	sub	sp, #12
 800f5fc:	2301      	movs	r3, #1
 800f5fe:	2100      	movs	r1, #0
 800f600:	f10d 0007 	add.w	r0, sp, #7
 800f604:	f88d 3007 	strb.w	r3, [sp, #7]
 800f608:	f000 f91c 	bl	800f844 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f60c:	b003      	add	sp, #12
 800f60e:	f85d fb04 	ldr.w	pc, [sp], #4
 800f612:	bf00      	nop

0800f614 <get_serialized_size_std_msgs__msg__Float64MultiArray>:
 800f614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f616:	4604      	mov	r4, r0
 800f618:	b160      	cbz	r0, 800f634 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>
 800f61a:	460d      	mov	r5, r1
 800f61c:	f000 f8b6 	bl	800f78c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f620:	182e      	adds	r6, r5, r0
 800f622:	4630      	mov	r0, r6
 800f624:	2104      	movs	r1, #4
 800f626:	6967      	ldr	r7, [r4, #20]
 800f628:	f001 fa98 	bl	8010b5c <ucdr_alignment>
 800f62c:	1d03      	adds	r3, r0, #4
 800f62e:	441e      	add	r6, r3
 800f630:	b90f      	cbnz	r7, 800f636 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x22>
 800f632:	1b70      	subs	r0, r6, r5
 800f634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f636:	4630      	mov	r0, r6
 800f638:	2108      	movs	r1, #8
 800f63a:	f001 fa8f 	bl	8010b5c <ucdr_alignment>
 800f63e:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800f642:	181e      	adds	r6, r3, r0
 800f644:	1b70      	subs	r0, r6, r5
 800f646:	e7f5      	b.n	800f634 <get_serialized_size_std_msgs__msg__Float64MultiArray+0x20>

0800f648 <_Float64MultiArray__cdr_deserialize>:
 800f648:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f64a:	460c      	mov	r4, r1
 800f64c:	b083      	sub	sp, #12
 800f64e:	b1d1      	cbz	r1, 800f686 <_Float64MultiArray__cdr_deserialize+0x3e>
 800f650:	4606      	mov	r6, r0
 800f652:	f000 f901 	bl	800f858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f656:	6843      	ldr	r3, [r0, #4]
 800f658:	4621      	mov	r1, r4
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	4630      	mov	r0, r6
 800f65e:	4798      	blx	r3
 800f660:	69a7      	ldr	r7, [r4, #24]
 800f662:	6921      	ldr	r1, [r4, #16]
 800f664:	ab01      	add	r3, sp, #4
 800f666:	463a      	mov	r2, r7
 800f668:	4630      	mov	r0, r6
 800f66a:	f001 fb4d 	bl	8010d08 <ucdr_deserialize_sequence_double>
 800f66e:	9b01      	ldr	r3, [sp, #4]
 800f670:	4605      	mov	r5, r0
 800f672:	b920      	cbnz	r0, 800f67e <_Float64MultiArray__cdr_deserialize+0x36>
 800f674:	429f      	cmp	r7, r3
 800f676:	d30a      	bcc.n	800f68e <_Float64MultiArray__cdr_deserialize+0x46>
 800f678:	4628      	mov	r0, r5
 800f67a:	b003      	add	sp, #12
 800f67c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f67e:	4628      	mov	r0, r5
 800f680:	6163      	str	r3, [r4, #20]
 800f682:	b003      	add	sp, #12
 800f684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f686:	460d      	mov	r5, r1
 800f688:	4628      	mov	r0, r5
 800f68a:	b003      	add	sp, #12
 800f68c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f68e:	2301      	movs	r3, #1
 800f690:	75b0      	strb	r0, [r6, #22]
 800f692:	7573      	strb	r3, [r6, #21]
 800f694:	4630      	mov	r0, r6
 800f696:	6165      	str	r5, [r4, #20]
 800f698:	2108      	movs	r1, #8
 800f69a:	f001 fa75 	bl	8010b88 <ucdr_align_to>
 800f69e:	9901      	ldr	r1, [sp, #4]
 800f6a0:	4630      	mov	r0, r6
 800f6a2:	00c9      	lsls	r1, r1, #3
 800f6a4:	f001 faa6 	bl	8010bf4 <ucdr_advance_buffer>
 800f6a8:	4628      	mov	r0, r5
 800f6aa:	b003      	add	sp, #12
 800f6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f6ae:	bf00      	nop

0800f6b0 <_Float64MultiArray__cdr_serialize>:
 800f6b0:	b180      	cbz	r0, 800f6d4 <_Float64MultiArray__cdr_serialize+0x24>
 800f6b2:	b538      	push	{r3, r4, r5, lr}
 800f6b4:	460d      	mov	r5, r1
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	f000 f8ce 	bl	800f858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 800f6bc:	6843      	ldr	r3, [r0, #4]
 800f6be:	4629      	mov	r1, r5
 800f6c0:	689b      	ldr	r3, [r3, #8]
 800f6c2:	4620      	mov	r0, r4
 800f6c4:	4798      	blx	r3
 800f6c6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800f6ca:	4628      	mov	r0, r5
 800f6cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6d0:	f001 bb08 	b.w	8010ce4 <ucdr_serialize_sequence_double>
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop

0800f6d8 <_Float64MultiArray__get_serialized_size>:
 800f6d8:	b570      	push	{r4, r5, r6, lr}
 800f6da:	4604      	mov	r4, r0
 800f6dc:	b150      	cbz	r0, 800f6f4 <_Float64MultiArray__get_serialized_size+0x1c>
 800f6de:	2100      	movs	r1, #0
 800f6e0:	f000 f854 	bl	800f78c <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 800f6e4:	2104      	movs	r1, #4
 800f6e6:	6966      	ldr	r6, [r4, #20]
 800f6e8:	4605      	mov	r5, r0
 800f6ea:	f001 fa37 	bl	8010b5c <ucdr_alignment>
 800f6ee:	4428      	add	r0, r5
 800f6f0:	1d04      	adds	r4, r0, #4
 800f6f2:	b90e      	cbnz	r6, 800f6f8 <_Float64MultiArray__get_serialized_size+0x20>
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	bd70      	pop	{r4, r5, r6, pc}
 800f6f8:	4620      	mov	r0, r4
 800f6fa:	2108      	movs	r1, #8
 800f6fc:	f001 fa2e 	bl	8010b5c <ucdr_alignment>
 800f700:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800f704:	4404      	add	r4, r0
 800f706:	4620      	mov	r0, r4
 800f708:	bd70      	pop	{r4, r5, r6, pc}
 800f70a:	bf00      	nop

0800f70c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray>:
 800f70c:	4800      	ldr	r0, [pc, #0]	@ (800f710 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float64MultiArray+0x4>)
 800f70e:	4770      	bx	lr
 800f710:	20000144 	.word	0x20000144

0800f714 <_MultiArrayLayout__max_serialized_size>:
 800f714:	b508      	push	{r3, lr}
 800f716:	2104      	movs	r1, #4
 800f718:	2000      	movs	r0, #0
 800f71a:	f001 fa1f 	bl	8010b5c <ucdr_alignment>
 800f71e:	3004      	adds	r0, #4
 800f720:	bd08      	pop	{r3, pc}
 800f722:	bf00      	nop

0800f724 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 800f724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f728:	4689      	mov	r9, r1
 800f72a:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800f72e:	4607      	mov	r7, r0
 800f730:	2104      	movs	r1, #4
 800f732:	4648      	mov	r0, r9
 800f734:	f001 fa12 	bl	8010b5c <ucdr_alignment>
 800f738:	f109 0304 	add.w	r3, r9, #4
 800f73c:	18c6      	adds	r6, r0, r3
 800f73e:	f1b8 0f00 	cmp.w	r8, #0
 800f742:	d018      	beq.n	800f776 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 800f744:	2500      	movs	r5, #0
 800f746:	f008 fec3 	bl	80184d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f74a:	683a      	ldr	r2, [r7, #0]
 800f74c:	6843      	ldr	r3, [r0, #4]
 800f74e:	eb05 0085 	add.w	r0, r5, r5, lsl #2
 800f752:	4631      	mov	r1, r6
 800f754:	695b      	ldr	r3, [r3, #20]
 800f756:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f75a:	4798      	blx	r3
 800f75c:	4604      	mov	r4, r0
 800f75e:	2c04      	cmp	r4, #4
 800f760:	4621      	mov	r1, r4
 800f762:	4630      	mov	r0, r6
 800f764:	bf28      	it	cs
 800f766:	2104      	movcs	r1, #4
 800f768:	f001 f9f8 	bl	8010b5c <ucdr_alignment>
 800f76c:	3501      	adds	r5, #1
 800f76e:	4404      	add	r4, r0
 800f770:	45a8      	cmp	r8, r5
 800f772:	4426      	add	r6, r4
 800f774:	d1e7      	bne.n	800f746 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 800f776:	2104      	movs	r1, #4
 800f778:	4630      	mov	r0, r6
 800f77a:	f001 f9ef 	bl	8010b5c <ucdr_alignment>
 800f77e:	f1c9 0904 	rsb	r9, r9, #4
 800f782:	444e      	add	r6, r9
 800f784:	4430      	add	r0, r6
 800f786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f78a:	bf00      	nop

0800f78c <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800f78c:	b108      	cbz	r0, 800f792 <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 800f78e:	f7ff bfc9 	b.w	800f724 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800f792:	4770      	bx	lr

0800f794 <_MultiArrayLayout__get_serialized_size>:
 800f794:	b110      	cbz	r0, 800f79c <_MultiArrayLayout__get_serialized_size+0x8>
 800f796:	2100      	movs	r1, #0
 800f798:	f7ff bfc4 	b.w	800f724 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 800f79c:	4770      	bx	lr
 800f79e:	bf00      	nop

0800f7a0 <_MultiArrayLayout__cdr_deserialize>:
 800f7a0:	b349      	cbz	r1, 800f7f6 <_MultiArrayLayout__cdr_deserialize+0x56>
 800f7a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f7a4:	460e      	mov	r6, r1
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	a901      	add	r1, sp, #4
 800f7aa:	4607      	mov	r7, r0
 800f7ac:	f000 fbcc 	bl	800ff48 <ucdr_deserialize_uint32_t>
 800f7b0:	9b01      	ldr	r3, [sp, #4]
 800f7b2:	68b2      	ldr	r2, [r6, #8]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d31b      	bcc.n	800f7f0 <_MultiArrayLayout__cdr_deserialize+0x50>
 800f7b8:	6073      	str	r3, [r6, #4]
 800f7ba:	b18b      	cbz	r3, 800f7e0 <_MultiArrayLayout__cdr_deserialize+0x40>
 800f7bc:	2400      	movs	r4, #0
 800f7be:	4625      	mov	r5, r4
 800f7c0:	e002      	b.n	800f7c8 <_MultiArrayLayout__cdr_deserialize+0x28>
 800f7c2:	9b01      	ldr	r3, [sp, #4]
 800f7c4:	429d      	cmp	r5, r3
 800f7c6:	d20b      	bcs.n	800f7e0 <_MultiArrayLayout__cdr_deserialize+0x40>
 800f7c8:	f008 fe82 	bl	80184d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f7cc:	6831      	ldr	r1, [r6, #0]
 800f7ce:	6843      	ldr	r3, [r0, #4]
 800f7d0:	4421      	add	r1, r4
 800f7d2:	68db      	ldr	r3, [r3, #12]
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	4798      	blx	r3
 800f7d8:	3501      	adds	r5, #1
 800f7da:	3414      	adds	r4, #20
 800f7dc:	2800      	cmp	r0, #0
 800f7de:	d1f0      	bne.n	800f7c2 <_MultiArrayLayout__cdr_deserialize+0x22>
 800f7e0:	f106 010c 	add.w	r1, r6, #12
 800f7e4:	4638      	mov	r0, r7
 800f7e6:	b003      	add	sp, #12
 800f7e8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f7ec:	f000 bbac 	b.w	800ff48 <ucdr_deserialize_uint32_t>
 800f7f0:	2000      	movs	r0, #0
 800f7f2:	b003      	add	sp, #12
 800f7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7f6:	2000      	movs	r0, #0
 800f7f8:	4770      	bx	lr
 800f7fa:	bf00      	nop

0800f7fc <_MultiArrayLayout__cdr_serialize>:
 800f7fc:	b308      	cbz	r0, 800f842 <_MultiArrayLayout__cdr_serialize+0x46>
 800f7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f800:	6847      	ldr	r7, [r0, #4]
 800f802:	460e      	mov	r6, r1
 800f804:	4605      	mov	r5, r0
 800f806:	4608      	mov	r0, r1
 800f808:	4639      	mov	r1, r7
 800f80a:	f000 fa6d 	bl	800fce8 <ucdr_serialize_uint32_t>
 800f80e:	b190      	cbz	r0, 800f836 <_MultiArrayLayout__cdr_serialize+0x3a>
 800f810:	b18f      	cbz	r7, 800f836 <_MultiArrayLayout__cdr_serialize+0x3a>
 800f812:	2400      	movs	r4, #0
 800f814:	e001      	b.n	800f81a <_MultiArrayLayout__cdr_serialize+0x1e>
 800f816:	42a7      	cmp	r7, r4
 800f818:	d00d      	beq.n	800f836 <_MultiArrayLayout__cdr_serialize+0x3a>
 800f81a:	f008 fe59 	bl	80184d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 800f81e:	682a      	ldr	r2, [r5, #0]
 800f820:	6843      	ldr	r3, [r0, #4]
 800f822:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	4631      	mov	r1, r6
 800f82a:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800f82e:	3401      	adds	r4, #1
 800f830:	4798      	blx	r3
 800f832:	2800      	cmp	r0, #0
 800f834:	d1ef      	bne.n	800f816 <_MultiArrayLayout__cdr_serialize+0x1a>
 800f836:	68e9      	ldr	r1, [r5, #12]
 800f838:	4630      	mov	r0, r6
 800f83a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f83e:	f000 ba53 	b.w	800fce8 <ucdr_serialize_uint32_t>
 800f842:	4770      	bx	lr

0800f844 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 800f844:	b508      	push	{r3, lr}
 800f846:	4603      	mov	r3, r0
 800f848:	2200      	movs	r2, #0
 800f84a:	4608      	mov	r0, r1
 800f84c:	701a      	strb	r2, [r3, #0]
 800f84e:	2104      	movs	r1, #4
 800f850:	f001 f984 	bl	8010b5c <ucdr_alignment>
 800f854:	3004      	adds	r0, #4
 800f856:	bd08      	pop	{r3, pc}

0800f858 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 800f858:	4800      	ldr	r0, [pc, #0]	@ (800f85c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 800f85a:	4770      	bx	lr
 800f85c:	2000016c 	.word	0x2000016c

0800f860 <ucdr_serialize_bool>:
 800f860:	b538      	push	{r3, r4, r5, lr}
 800f862:	460d      	mov	r5, r1
 800f864:	2101      	movs	r1, #1
 800f866:	4604      	mov	r4, r0
 800f868:	f001 f92c 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800f86c:	b148      	cbz	r0, 800f882 <ucdr_serialize_bool+0x22>
 800f86e:	68a3      	ldr	r3, [r4, #8]
 800f870:	701d      	strb	r5, [r3, #0]
 800f872:	68a2      	ldr	r2, [r4, #8]
 800f874:	6923      	ldr	r3, [r4, #16]
 800f876:	2101      	movs	r1, #1
 800f878:	440a      	add	r2, r1
 800f87a:	440b      	add	r3, r1
 800f87c:	60a2      	str	r2, [r4, #8]
 800f87e:	6123      	str	r3, [r4, #16]
 800f880:	7561      	strb	r1, [r4, #21]
 800f882:	7da0      	ldrb	r0, [r4, #22]
 800f884:	f080 0001 	eor.w	r0, r0, #1
 800f888:	bd38      	pop	{r3, r4, r5, pc}
 800f88a:	bf00      	nop

0800f88c <ucdr_deserialize_bool>:
 800f88c:	b538      	push	{r3, r4, r5, lr}
 800f88e:	460d      	mov	r5, r1
 800f890:	2101      	movs	r1, #1
 800f892:	4604      	mov	r4, r0
 800f894:	f001 f916 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800f898:	b160      	cbz	r0, 800f8b4 <ucdr_deserialize_bool+0x28>
 800f89a:	68a2      	ldr	r2, [r4, #8]
 800f89c:	6923      	ldr	r3, [r4, #16]
 800f89e:	f812 1b01 	ldrb.w	r1, [r2], #1
 800f8a2:	3900      	subs	r1, #0
 800f8a4:	bf18      	it	ne
 800f8a6:	2101      	movne	r1, #1
 800f8a8:	7029      	strb	r1, [r5, #0]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	2101      	movs	r1, #1
 800f8ae:	60a2      	str	r2, [r4, #8]
 800f8b0:	6123      	str	r3, [r4, #16]
 800f8b2:	7561      	strb	r1, [r4, #21]
 800f8b4:	7da0      	ldrb	r0, [r4, #22]
 800f8b6:	f080 0001 	eor.w	r0, r0, #1
 800f8ba:	bd38      	pop	{r3, r4, r5, pc}

0800f8bc <ucdr_serialize_uint8_t>:
 800f8bc:	b538      	push	{r3, r4, r5, lr}
 800f8be:	460d      	mov	r5, r1
 800f8c0:	2101      	movs	r1, #1
 800f8c2:	4604      	mov	r4, r0
 800f8c4:	f001 f8fe 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800f8c8:	b148      	cbz	r0, 800f8de <ucdr_serialize_uint8_t+0x22>
 800f8ca:	68a3      	ldr	r3, [r4, #8]
 800f8cc:	701d      	strb	r5, [r3, #0]
 800f8ce:	68a2      	ldr	r2, [r4, #8]
 800f8d0:	6923      	ldr	r3, [r4, #16]
 800f8d2:	2101      	movs	r1, #1
 800f8d4:	440a      	add	r2, r1
 800f8d6:	440b      	add	r3, r1
 800f8d8:	60a2      	str	r2, [r4, #8]
 800f8da:	6123      	str	r3, [r4, #16]
 800f8dc:	7561      	strb	r1, [r4, #21]
 800f8de:	7da0      	ldrb	r0, [r4, #22]
 800f8e0:	f080 0001 	eor.w	r0, r0, #1
 800f8e4:	bd38      	pop	{r3, r4, r5, pc}
 800f8e6:	bf00      	nop

0800f8e8 <ucdr_deserialize_uint8_t>:
 800f8e8:	b538      	push	{r3, r4, r5, lr}
 800f8ea:	460d      	mov	r5, r1
 800f8ec:	2101      	movs	r1, #1
 800f8ee:	4604      	mov	r4, r0
 800f8f0:	f001 f8e8 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800f8f4:	b150      	cbz	r0, 800f90c <ucdr_deserialize_uint8_t+0x24>
 800f8f6:	68a3      	ldr	r3, [r4, #8]
 800f8f8:	781b      	ldrb	r3, [r3, #0]
 800f8fa:	702b      	strb	r3, [r5, #0]
 800f8fc:	68a2      	ldr	r2, [r4, #8]
 800f8fe:	6923      	ldr	r3, [r4, #16]
 800f900:	2101      	movs	r1, #1
 800f902:	440a      	add	r2, r1
 800f904:	440b      	add	r3, r1
 800f906:	60a2      	str	r2, [r4, #8]
 800f908:	6123      	str	r3, [r4, #16]
 800f90a:	7561      	strb	r1, [r4, #21]
 800f90c:	7da0      	ldrb	r0, [r4, #22]
 800f90e:	f080 0001 	eor.w	r0, r0, #1
 800f912:	bd38      	pop	{r3, r4, r5, pc}

0800f914 <ucdr_serialize_uint16_t>:
 800f914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f918:	b082      	sub	sp, #8
 800f91a:	460b      	mov	r3, r1
 800f91c:	2102      	movs	r1, #2
 800f91e:	4604      	mov	r4, r0
 800f920:	f8ad 3006 	strh.w	r3, [sp, #6]
 800f924:	f001 f922 	bl	8010b6c <ucdr_buffer_alignment>
 800f928:	4601      	mov	r1, r0
 800f92a:	4620      	mov	r0, r4
 800f92c:	7d67      	ldrb	r7, [r4, #21]
 800f92e:	f001 f961 	bl	8010bf4 <ucdr_advance_buffer>
 800f932:	2102      	movs	r1, #2
 800f934:	4620      	mov	r0, r4
 800f936:	f001 f8b9 	bl	8010aac <ucdr_check_buffer_available_for>
 800f93a:	bb78      	cbnz	r0, 800f99c <ucdr_serialize_uint16_t+0x88>
 800f93c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800f940:	42ab      	cmp	r3, r5
 800f942:	d926      	bls.n	800f992 <ucdr_serialize_uint16_t+0x7e>
 800f944:	1b5e      	subs	r6, r3, r5
 800f946:	60a3      	str	r3, [r4, #8]
 800f948:	6923      	ldr	r3, [r4, #16]
 800f94a:	f1c6 0802 	rsb	r8, r6, #2
 800f94e:	4433      	add	r3, r6
 800f950:	6123      	str	r3, [r4, #16]
 800f952:	4641      	mov	r1, r8
 800f954:	4620      	mov	r0, r4
 800f956:	f001 f8b5 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d03b      	beq.n	800f9d6 <ucdr_serialize_uint16_t+0xc2>
 800f95e:	7d23      	ldrb	r3, [r4, #20]
 800f960:	2b01      	cmp	r3, #1
 800f962:	d04a      	beq.n	800f9fa <ucdr_serialize_uint16_t+0xe6>
 800f964:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f968:	702b      	strb	r3, [r5, #0]
 800f96a:	2e00      	cmp	r6, #0
 800f96c:	d040      	beq.n	800f9f0 <ucdr_serialize_uint16_t+0xdc>
 800f96e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800f972:	706b      	strb	r3, [r5, #1]
 800f974:	6923      	ldr	r3, [r4, #16]
 800f976:	68a2      	ldr	r2, [r4, #8]
 800f978:	7da0      	ldrb	r0, [r4, #22]
 800f97a:	3302      	adds	r3, #2
 800f97c:	1b9e      	subs	r6, r3, r6
 800f97e:	4442      	add	r2, r8
 800f980:	2302      	movs	r3, #2
 800f982:	f080 0001 	eor.w	r0, r0, #1
 800f986:	60a2      	str	r2, [r4, #8]
 800f988:	6126      	str	r6, [r4, #16]
 800f98a:	7563      	strb	r3, [r4, #21]
 800f98c:	b002      	add	sp, #8
 800f98e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f992:	2102      	movs	r1, #2
 800f994:	4620      	mov	r0, r4
 800f996:	f001 f895 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800f99a:	b190      	cbz	r0, 800f9c2 <ucdr_serialize_uint16_t+0xae>
 800f99c:	7d23      	ldrb	r3, [r4, #20]
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	68a3      	ldr	r3, [r4, #8]
 800f9a2:	d014      	beq.n	800f9ce <ucdr_serialize_uint16_t+0xba>
 800f9a4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800f9a8:	701a      	strb	r2, [r3, #0]
 800f9aa:	68a3      	ldr	r3, [r4, #8]
 800f9ac:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9b0:	705a      	strb	r2, [r3, #1]
 800f9b2:	68a2      	ldr	r2, [r4, #8]
 800f9b4:	6923      	ldr	r3, [r4, #16]
 800f9b6:	3202      	adds	r2, #2
 800f9b8:	3302      	adds	r3, #2
 800f9ba:	2102      	movs	r1, #2
 800f9bc:	60a2      	str	r2, [r4, #8]
 800f9be:	6123      	str	r3, [r4, #16]
 800f9c0:	7561      	strb	r1, [r4, #21]
 800f9c2:	7da0      	ldrb	r0, [r4, #22]
 800f9c4:	f080 0001 	eor.w	r0, r0, #1
 800f9c8:	b002      	add	sp, #8
 800f9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9ce:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800f9d2:	801a      	strh	r2, [r3, #0]
 800f9d4:	e7ed      	b.n	800f9b2 <ucdr_serialize_uint16_t+0x9e>
 800f9d6:	68a2      	ldr	r2, [r4, #8]
 800f9d8:	6923      	ldr	r3, [r4, #16]
 800f9da:	7da0      	ldrb	r0, [r4, #22]
 800f9dc:	7567      	strb	r7, [r4, #21]
 800f9de:	1b92      	subs	r2, r2, r6
 800f9e0:	1b9b      	subs	r3, r3, r6
 800f9e2:	f080 0001 	eor.w	r0, r0, #1
 800f9e6:	60a2      	str	r2, [r4, #8]
 800f9e8:	6123      	str	r3, [r4, #16]
 800f9ea:	b002      	add	sp, #8
 800f9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9f0:	68a3      	ldr	r3, [r4, #8]
 800f9f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800f9f6:	701a      	strb	r2, [r3, #0]
 800f9f8:	e7bc      	b.n	800f974 <ucdr_serialize_uint16_t+0x60>
 800f9fa:	4628      	mov	r0, r5
 800f9fc:	f10d 0506 	add.w	r5, sp, #6
 800fa00:	4629      	mov	r1, r5
 800fa02:	4632      	mov	r2, r6
 800fa04:	f00a fe85 	bl	801a712 <memcpy>
 800fa08:	68a0      	ldr	r0, [r4, #8]
 800fa0a:	4642      	mov	r2, r8
 800fa0c:	19a9      	adds	r1, r5, r6
 800fa0e:	f00a fe80 	bl	801a712 <memcpy>
 800fa12:	e7af      	b.n	800f974 <ucdr_serialize_uint16_t+0x60>

0800fa14 <ucdr_serialize_endian_uint16_t>:
 800fa14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa18:	b083      	sub	sp, #12
 800fa1a:	460d      	mov	r5, r1
 800fa1c:	2102      	movs	r1, #2
 800fa1e:	4604      	mov	r4, r0
 800fa20:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fa24:	f001 f8a2 	bl	8010b6c <ucdr_buffer_alignment>
 800fa28:	4601      	mov	r1, r0
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fa30:	f001 f8e0 	bl	8010bf4 <ucdr_advance_buffer>
 800fa34:	2102      	movs	r1, #2
 800fa36:	4620      	mov	r0, r4
 800fa38:	f001 f838 	bl	8010aac <ucdr_check_buffer_available_for>
 800fa3c:	bb70      	cbnz	r0, 800fa9c <ucdr_serialize_endian_uint16_t+0x88>
 800fa3e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fa42:	42be      	cmp	r6, r7
 800fa44:	d925      	bls.n	800fa92 <ucdr_serialize_endian_uint16_t+0x7e>
 800fa46:	6923      	ldr	r3, [r4, #16]
 800fa48:	60a6      	str	r6, [r4, #8]
 800fa4a:	1bf6      	subs	r6, r6, r7
 800fa4c:	4433      	add	r3, r6
 800fa4e:	f1c6 0902 	rsb	r9, r6, #2
 800fa52:	6123      	str	r3, [r4, #16]
 800fa54:	4649      	mov	r1, r9
 800fa56:	4620      	mov	r0, r4
 800fa58:	f001 f834 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fa5c:	2800      	cmp	r0, #0
 800fa5e:	d039      	beq.n	800fad4 <ucdr_serialize_endian_uint16_t+0xc0>
 800fa60:	2d01      	cmp	r5, #1
 800fa62:	d04a      	beq.n	800fafa <ucdr_serialize_endian_uint16_t+0xe6>
 800fa64:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fa68:	703b      	strb	r3, [r7, #0]
 800fa6a:	2e00      	cmp	r6, #0
 800fa6c:	d040      	beq.n	800faf0 <ucdr_serialize_endian_uint16_t+0xdc>
 800fa6e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fa72:	707b      	strb	r3, [r7, #1]
 800fa74:	6923      	ldr	r3, [r4, #16]
 800fa76:	68a2      	ldr	r2, [r4, #8]
 800fa78:	7da0      	ldrb	r0, [r4, #22]
 800fa7a:	3302      	adds	r3, #2
 800fa7c:	444a      	add	r2, r9
 800fa7e:	1b9b      	subs	r3, r3, r6
 800fa80:	2102      	movs	r1, #2
 800fa82:	f080 0001 	eor.w	r0, r0, #1
 800fa86:	60a2      	str	r2, [r4, #8]
 800fa88:	6123      	str	r3, [r4, #16]
 800fa8a:	7561      	strb	r1, [r4, #21]
 800fa8c:	b003      	add	sp, #12
 800fa8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa92:	2102      	movs	r1, #2
 800fa94:	4620      	mov	r0, r4
 800fa96:	f001 f815 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fa9a:	b188      	cbz	r0, 800fac0 <ucdr_serialize_endian_uint16_t+0xac>
 800fa9c:	2d01      	cmp	r5, #1
 800fa9e:	68a3      	ldr	r3, [r4, #8]
 800faa0:	d014      	beq.n	800facc <ucdr_serialize_endian_uint16_t+0xb8>
 800faa2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800faa6:	701a      	strb	r2, [r3, #0]
 800faa8:	68a3      	ldr	r3, [r4, #8]
 800faaa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800faae:	705a      	strb	r2, [r3, #1]
 800fab0:	68a2      	ldr	r2, [r4, #8]
 800fab2:	6923      	ldr	r3, [r4, #16]
 800fab4:	3202      	adds	r2, #2
 800fab6:	3302      	adds	r3, #2
 800fab8:	2102      	movs	r1, #2
 800faba:	60a2      	str	r2, [r4, #8]
 800fabc:	6123      	str	r3, [r4, #16]
 800fabe:	7561      	strb	r1, [r4, #21]
 800fac0:	7da0      	ldrb	r0, [r4, #22]
 800fac2:	f080 0001 	eor.w	r0, r0, #1
 800fac6:	b003      	add	sp, #12
 800fac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800facc:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800fad0:	801a      	strh	r2, [r3, #0]
 800fad2:	e7ed      	b.n	800fab0 <ucdr_serialize_endian_uint16_t+0x9c>
 800fad4:	68a2      	ldr	r2, [r4, #8]
 800fad6:	6923      	ldr	r3, [r4, #16]
 800fad8:	7da0      	ldrb	r0, [r4, #22]
 800fada:	f884 8015 	strb.w	r8, [r4, #21]
 800fade:	1b92      	subs	r2, r2, r6
 800fae0:	1b9b      	subs	r3, r3, r6
 800fae2:	f080 0001 	eor.w	r0, r0, #1
 800fae6:	60a2      	str	r2, [r4, #8]
 800fae8:	6123      	str	r3, [r4, #16]
 800faea:	b003      	add	sp, #12
 800faec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faf0:	68a3      	ldr	r3, [r4, #8]
 800faf2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800faf6:	701a      	strb	r2, [r3, #0]
 800faf8:	e7bc      	b.n	800fa74 <ucdr_serialize_endian_uint16_t+0x60>
 800fafa:	f10d 0506 	add.w	r5, sp, #6
 800fafe:	4629      	mov	r1, r5
 800fb00:	4632      	mov	r2, r6
 800fb02:	4638      	mov	r0, r7
 800fb04:	f00a fe05 	bl	801a712 <memcpy>
 800fb08:	68a0      	ldr	r0, [r4, #8]
 800fb0a:	464a      	mov	r2, r9
 800fb0c:	19a9      	adds	r1, r5, r6
 800fb0e:	f00a fe00 	bl	801a712 <memcpy>
 800fb12:	e7af      	b.n	800fa74 <ucdr_serialize_endian_uint16_t+0x60>

0800fb14 <ucdr_deserialize_uint16_t>:
 800fb14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fb18:	460d      	mov	r5, r1
 800fb1a:	2102      	movs	r1, #2
 800fb1c:	4604      	mov	r4, r0
 800fb1e:	f001 f825 	bl	8010b6c <ucdr_buffer_alignment>
 800fb22:	4601      	mov	r1, r0
 800fb24:	4620      	mov	r0, r4
 800fb26:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fb2a:	f001 f863 	bl	8010bf4 <ucdr_advance_buffer>
 800fb2e:	2102      	movs	r1, #2
 800fb30:	4620      	mov	r0, r4
 800fb32:	f000 ffbb 	bl	8010aac <ucdr_check_buffer_available_for>
 800fb36:	bb60      	cbnz	r0, 800fb92 <ucdr_deserialize_uint16_t+0x7e>
 800fb38:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800fb3c:	42be      	cmp	r6, r7
 800fb3e:	d923      	bls.n	800fb88 <ucdr_deserialize_uint16_t+0x74>
 800fb40:	6923      	ldr	r3, [r4, #16]
 800fb42:	60a6      	str	r6, [r4, #8]
 800fb44:	1bf6      	subs	r6, r6, r7
 800fb46:	4433      	add	r3, r6
 800fb48:	f1c6 0902 	rsb	r9, r6, #2
 800fb4c:	6123      	str	r3, [r4, #16]
 800fb4e:	4649      	mov	r1, r9
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 ffb7 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fb56:	2800      	cmp	r0, #0
 800fb58:	d034      	beq.n	800fbc4 <ucdr_deserialize_uint16_t+0xb0>
 800fb5a:	7d23      	ldrb	r3, [r4, #20]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d042      	beq.n	800fbe6 <ucdr_deserialize_uint16_t+0xd2>
 800fb60:	787b      	ldrb	r3, [r7, #1]
 800fb62:	702b      	strb	r3, [r5, #0]
 800fb64:	2e00      	cmp	r6, #0
 800fb66:	d03a      	beq.n	800fbde <ucdr_deserialize_uint16_t+0xca>
 800fb68:	783b      	ldrb	r3, [r7, #0]
 800fb6a:	706b      	strb	r3, [r5, #1]
 800fb6c:	6923      	ldr	r3, [r4, #16]
 800fb6e:	68a2      	ldr	r2, [r4, #8]
 800fb70:	7da0      	ldrb	r0, [r4, #22]
 800fb72:	2102      	movs	r1, #2
 800fb74:	3302      	adds	r3, #2
 800fb76:	444a      	add	r2, r9
 800fb78:	1b9b      	subs	r3, r3, r6
 800fb7a:	7561      	strb	r1, [r4, #21]
 800fb7c:	60a2      	str	r2, [r4, #8]
 800fb7e:	6123      	str	r3, [r4, #16]
 800fb80:	f080 0001 	eor.w	r0, r0, #1
 800fb84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fb88:	2102      	movs	r1, #2
 800fb8a:	4620      	mov	r0, r4
 800fb8c:	f000 ff9a 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fb90:	b180      	cbz	r0, 800fbb4 <ucdr_deserialize_uint16_t+0xa0>
 800fb92:	7d23      	ldrb	r3, [r4, #20]
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	68a3      	ldr	r3, [r4, #8]
 800fb98:	d011      	beq.n	800fbbe <ucdr_deserialize_uint16_t+0xaa>
 800fb9a:	785b      	ldrb	r3, [r3, #1]
 800fb9c:	702b      	strb	r3, [r5, #0]
 800fb9e:	68a3      	ldr	r3, [r4, #8]
 800fba0:	781b      	ldrb	r3, [r3, #0]
 800fba2:	706b      	strb	r3, [r5, #1]
 800fba4:	68a2      	ldr	r2, [r4, #8]
 800fba6:	6923      	ldr	r3, [r4, #16]
 800fba8:	3202      	adds	r2, #2
 800fbaa:	3302      	adds	r3, #2
 800fbac:	2102      	movs	r1, #2
 800fbae:	60a2      	str	r2, [r4, #8]
 800fbb0:	6123      	str	r3, [r4, #16]
 800fbb2:	7561      	strb	r1, [r4, #21]
 800fbb4:	7da0      	ldrb	r0, [r4, #22]
 800fbb6:	f080 0001 	eor.w	r0, r0, #1
 800fbba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbbe:	881b      	ldrh	r3, [r3, #0]
 800fbc0:	802b      	strh	r3, [r5, #0]
 800fbc2:	e7ef      	b.n	800fba4 <ucdr_deserialize_uint16_t+0x90>
 800fbc4:	68a2      	ldr	r2, [r4, #8]
 800fbc6:	6923      	ldr	r3, [r4, #16]
 800fbc8:	7da0      	ldrb	r0, [r4, #22]
 800fbca:	f884 8015 	strb.w	r8, [r4, #21]
 800fbce:	1b92      	subs	r2, r2, r6
 800fbd0:	1b9b      	subs	r3, r3, r6
 800fbd2:	60a2      	str	r2, [r4, #8]
 800fbd4:	6123      	str	r3, [r4, #16]
 800fbd6:	f080 0001 	eor.w	r0, r0, #1
 800fbda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fbde:	68a3      	ldr	r3, [r4, #8]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	706b      	strb	r3, [r5, #1]
 800fbe4:	e7c2      	b.n	800fb6c <ucdr_deserialize_uint16_t+0x58>
 800fbe6:	4639      	mov	r1, r7
 800fbe8:	4632      	mov	r2, r6
 800fbea:	4628      	mov	r0, r5
 800fbec:	f00a fd91 	bl	801a712 <memcpy>
 800fbf0:	68a1      	ldr	r1, [r4, #8]
 800fbf2:	464a      	mov	r2, r9
 800fbf4:	19a8      	adds	r0, r5, r6
 800fbf6:	f00a fd8c 	bl	801a712 <memcpy>
 800fbfa:	e7b7      	b.n	800fb6c <ucdr_deserialize_uint16_t+0x58>

0800fbfc <ucdr_deserialize_endian_uint16_t>:
 800fbfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc00:	460e      	mov	r6, r1
 800fc02:	2102      	movs	r1, #2
 800fc04:	4604      	mov	r4, r0
 800fc06:	4615      	mov	r5, r2
 800fc08:	f000 ffb0 	bl	8010b6c <ucdr_buffer_alignment>
 800fc0c:	4601      	mov	r1, r0
 800fc0e:	4620      	mov	r0, r4
 800fc10:	f894 9015 	ldrb.w	r9, [r4, #21]
 800fc14:	f000 ffee 	bl	8010bf4 <ucdr_advance_buffer>
 800fc18:	2102      	movs	r1, #2
 800fc1a:	4620      	mov	r0, r4
 800fc1c:	f000 ff46 	bl	8010aac <ucdr_check_buffer_available_for>
 800fc20:	bb70      	cbnz	r0, 800fc80 <ucdr_deserialize_endian_uint16_t+0x84>
 800fc22:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800fc26:	4547      	cmp	r7, r8
 800fc28:	d925      	bls.n	800fc76 <ucdr_deserialize_endian_uint16_t+0x7a>
 800fc2a:	6923      	ldr	r3, [r4, #16]
 800fc2c:	60a7      	str	r7, [r4, #8]
 800fc2e:	eba7 0708 	sub.w	r7, r7, r8
 800fc32:	443b      	add	r3, r7
 800fc34:	f1c7 0a02 	rsb	sl, r7, #2
 800fc38:	6123      	str	r3, [r4, #16]
 800fc3a:	4651      	mov	r1, sl
 800fc3c:	4620      	mov	r0, r4
 800fc3e:	f000 ff41 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fc42:	2800      	cmp	r0, #0
 800fc44:	d034      	beq.n	800fcb0 <ucdr_deserialize_endian_uint16_t+0xb4>
 800fc46:	2e01      	cmp	r6, #1
 800fc48:	d043      	beq.n	800fcd2 <ucdr_deserialize_endian_uint16_t+0xd6>
 800fc4a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800fc4e:	702b      	strb	r3, [r5, #0]
 800fc50:	2f00      	cmp	r7, #0
 800fc52:	d03a      	beq.n	800fcca <ucdr_deserialize_endian_uint16_t+0xce>
 800fc54:	f898 3000 	ldrb.w	r3, [r8]
 800fc58:	706b      	strb	r3, [r5, #1]
 800fc5a:	6923      	ldr	r3, [r4, #16]
 800fc5c:	68a2      	ldr	r2, [r4, #8]
 800fc5e:	7da0      	ldrb	r0, [r4, #22]
 800fc60:	2102      	movs	r1, #2
 800fc62:	3302      	adds	r3, #2
 800fc64:	4452      	add	r2, sl
 800fc66:	1bdb      	subs	r3, r3, r7
 800fc68:	7561      	strb	r1, [r4, #21]
 800fc6a:	60a2      	str	r2, [r4, #8]
 800fc6c:	6123      	str	r3, [r4, #16]
 800fc6e:	f080 0001 	eor.w	r0, r0, #1
 800fc72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc76:	2102      	movs	r1, #2
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f000 ff23 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fc7e:	b178      	cbz	r0, 800fca0 <ucdr_deserialize_endian_uint16_t+0xa4>
 800fc80:	2e01      	cmp	r6, #1
 800fc82:	68a3      	ldr	r3, [r4, #8]
 800fc84:	d011      	beq.n	800fcaa <ucdr_deserialize_endian_uint16_t+0xae>
 800fc86:	785b      	ldrb	r3, [r3, #1]
 800fc88:	702b      	strb	r3, [r5, #0]
 800fc8a:	68a3      	ldr	r3, [r4, #8]
 800fc8c:	781b      	ldrb	r3, [r3, #0]
 800fc8e:	706b      	strb	r3, [r5, #1]
 800fc90:	68a2      	ldr	r2, [r4, #8]
 800fc92:	6923      	ldr	r3, [r4, #16]
 800fc94:	3202      	adds	r2, #2
 800fc96:	3302      	adds	r3, #2
 800fc98:	2102      	movs	r1, #2
 800fc9a:	60a2      	str	r2, [r4, #8]
 800fc9c:	6123      	str	r3, [r4, #16]
 800fc9e:	7561      	strb	r1, [r4, #21]
 800fca0:	7da0      	ldrb	r0, [r4, #22]
 800fca2:	f080 0001 	eor.w	r0, r0, #1
 800fca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcaa:	881b      	ldrh	r3, [r3, #0]
 800fcac:	802b      	strh	r3, [r5, #0]
 800fcae:	e7ef      	b.n	800fc90 <ucdr_deserialize_endian_uint16_t+0x94>
 800fcb0:	68a2      	ldr	r2, [r4, #8]
 800fcb2:	6923      	ldr	r3, [r4, #16]
 800fcb4:	7da0      	ldrb	r0, [r4, #22]
 800fcb6:	f884 9015 	strb.w	r9, [r4, #21]
 800fcba:	1bd2      	subs	r2, r2, r7
 800fcbc:	1bdb      	subs	r3, r3, r7
 800fcbe:	60a2      	str	r2, [r4, #8]
 800fcc0:	6123      	str	r3, [r4, #16]
 800fcc2:	f080 0001 	eor.w	r0, r0, #1
 800fcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcca:	68a3      	ldr	r3, [r4, #8]
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	706b      	strb	r3, [r5, #1]
 800fcd0:	e7c3      	b.n	800fc5a <ucdr_deserialize_endian_uint16_t+0x5e>
 800fcd2:	4641      	mov	r1, r8
 800fcd4:	463a      	mov	r2, r7
 800fcd6:	4628      	mov	r0, r5
 800fcd8:	f00a fd1b 	bl	801a712 <memcpy>
 800fcdc:	68a1      	ldr	r1, [r4, #8]
 800fcde:	4652      	mov	r2, sl
 800fce0:	19e8      	adds	r0, r5, r7
 800fce2:	f00a fd16 	bl	801a712 <memcpy>
 800fce6:	e7b8      	b.n	800fc5a <ucdr_deserialize_endian_uint16_t+0x5e>

0800fce8 <ucdr_serialize_uint32_t>:
 800fce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcec:	b082      	sub	sp, #8
 800fcee:	4604      	mov	r4, r0
 800fcf0:	9101      	str	r1, [sp, #4]
 800fcf2:	2104      	movs	r1, #4
 800fcf4:	f000 ff3a 	bl	8010b6c <ucdr_buffer_alignment>
 800fcf8:	4601      	mov	r1, r0
 800fcfa:	4620      	mov	r0, r4
 800fcfc:	7d67      	ldrb	r7, [r4, #21]
 800fcfe:	f000 ff79 	bl	8010bf4 <ucdr_advance_buffer>
 800fd02:	2104      	movs	r1, #4
 800fd04:	4620      	mov	r0, r4
 800fd06:	f000 fed1 	bl	8010aac <ucdr_check_buffer_available_for>
 800fd0a:	2800      	cmp	r0, #0
 800fd0c:	d139      	bne.n	800fd82 <ucdr_serialize_uint32_t+0x9a>
 800fd0e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800fd12:	42ab      	cmp	r3, r5
 800fd14:	d930      	bls.n	800fd78 <ucdr_serialize_uint32_t+0x90>
 800fd16:	1b5e      	subs	r6, r3, r5
 800fd18:	60a3      	str	r3, [r4, #8]
 800fd1a:	6923      	ldr	r3, [r4, #16]
 800fd1c:	f1c6 0804 	rsb	r8, r6, #4
 800fd20:	4433      	add	r3, r6
 800fd22:	6123      	str	r3, [r4, #16]
 800fd24:	4641      	mov	r1, r8
 800fd26:	4620      	mov	r0, r4
 800fd28:	f000 fecc 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d04c      	beq.n	800fdca <ucdr_serialize_uint32_t+0xe2>
 800fd30:	7d23      	ldrb	r3, [r4, #20]
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d063      	beq.n	800fdfe <ucdr_serialize_uint32_t+0x116>
 800fd36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fd3a:	702b      	strb	r3, [r5, #0]
 800fd3c:	2e00      	cmp	r6, #0
 800fd3e:	d051      	beq.n	800fde4 <ucdr_serialize_uint32_t+0xfc>
 800fd40:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fd44:	706b      	strb	r3, [r5, #1]
 800fd46:	2e01      	cmp	r6, #1
 800fd48:	d050      	beq.n	800fdec <ucdr_serialize_uint32_t+0x104>
 800fd4a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fd4e:	70ab      	strb	r3, [r5, #2]
 800fd50:	2e02      	cmp	r6, #2
 800fd52:	d04f      	beq.n	800fdf4 <ucdr_serialize_uint32_t+0x10c>
 800fd54:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fd58:	70eb      	strb	r3, [r5, #3]
 800fd5a:	6923      	ldr	r3, [r4, #16]
 800fd5c:	68a2      	ldr	r2, [r4, #8]
 800fd5e:	7da0      	ldrb	r0, [r4, #22]
 800fd60:	3304      	adds	r3, #4
 800fd62:	1b9e      	subs	r6, r3, r6
 800fd64:	4442      	add	r2, r8
 800fd66:	2304      	movs	r3, #4
 800fd68:	f080 0001 	eor.w	r0, r0, #1
 800fd6c:	60a2      	str	r2, [r4, #8]
 800fd6e:	6126      	str	r6, [r4, #16]
 800fd70:	7563      	strb	r3, [r4, #21]
 800fd72:	b002      	add	sp, #8
 800fd74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd78:	2104      	movs	r1, #4
 800fd7a:	4620      	mov	r0, r4
 800fd7c:	f000 fea2 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fd80:	b1d0      	cbz	r0, 800fdb8 <ucdr_serialize_uint32_t+0xd0>
 800fd82:	7d23      	ldrb	r3, [r4, #20]
 800fd84:	2b01      	cmp	r3, #1
 800fd86:	68a3      	ldr	r3, [r4, #8]
 800fd88:	d01c      	beq.n	800fdc4 <ucdr_serialize_uint32_t+0xdc>
 800fd8a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800fd8e:	701a      	strb	r2, [r3, #0]
 800fd90:	68a3      	ldr	r3, [r4, #8]
 800fd92:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fd96:	705a      	strb	r2, [r3, #1]
 800fd98:	68a3      	ldr	r3, [r4, #8]
 800fd9a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fd9e:	709a      	strb	r2, [r3, #2]
 800fda0:	68a3      	ldr	r3, [r4, #8]
 800fda2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fda6:	70da      	strb	r2, [r3, #3]
 800fda8:	68a2      	ldr	r2, [r4, #8]
 800fdaa:	6923      	ldr	r3, [r4, #16]
 800fdac:	3204      	adds	r2, #4
 800fdae:	3304      	adds	r3, #4
 800fdb0:	2104      	movs	r1, #4
 800fdb2:	60a2      	str	r2, [r4, #8]
 800fdb4:	6123      	str	r3, [r4, #16]
 800fdb6:	7561      	strb	r1, [r4, #21]
 800fdb8:	7da0      	ldrb	r0, [r4, #22]
 800fdba:	f080 0001 	eor.w	r0, r0, #1
 800fdbe:	b002      	add	sp, #8
 800fdc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdc4:	9a01      	ldr	r2, [sp, #4]
 800fdc6:	601a      	str	r2, [r3, #0]
 800fdc8:	e7ee      	b.n	800fda8 <ucdr_serialize_uint32_t+0xc0>
 800fdca:	68a2      	ldr	r2, [r4, #8]
 800fdcc:	6923      	ldr	r3, [r4, #16]
 800fdce:	7da0      	ldrb	r0, [r4, #22]
 800fdd0:	7567      	strb	r7, [r4, #21]
 800fdd2:	1b92      	subs	r2, r2, r6
 800fdd4:	1b9b      	subs	r3, r3, r6
 800fdd6:	f080 0001 	eor.w	r0, r0, #1
 800fdda:	60a2      	str	r2, [r4, #8]
 800fddc:	6123      	str	r3, [r4, #16]
 800fdde:	b002      	add	sp, #8
 800fde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fde4:	68a3      	ldr	r3, [r4, #8]
 800fde6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fdea:	701a      	strb	r2, [r3, #0]
 800fdec:	68a3      	ldr	r3, [r4, #8]
 800fdee:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fdf2:	701a      	strb	r2, [r3, #0]
 800fdf4:	68a3      	ldr	r3, [r4, #8]
 800fdf6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fdfa:	701a      	strb	r2, [r3, #0]
 800fdfc:	e7ad      	b.n	800fd5a <ucdr_serialize_uint32_t+0x72>
 800fdfe:	4628      	mov	r0, r5
 800fe00:	ad01      	add	r5, sp, #4
 800fe02:	4629      	mov	r1, r5
 800fe04:	4632      	mov	r2, r6
 800fe06:	f00a fc84 	bl	801a712 <memcpy>
 800fe0a:	68a0      	ldr	r0, [r4, #8]
 800fe0c:	4642      	mov	r2, r8
 800fe0e:	19a9      	adds	r1, r5, r6
 800fe10:	f00a fc7f 	bl	801a712 <memcpy>
 800fe14:	e7a1      	b.n	800fd5a <ucdr_serialize_uint32_t+0x72>
 800fe16:	bf00      	nop

0800fe18 <ucdr_serialize_endian_uint32_t>:
 800fe18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fe1c:	b083      	sub	sp, #12
 800fe1e:	460d      	mov	r5, r1
 800fe20:	2104      	movs	r1, #4
 800fe22:	4604      	mov	r4, r0
 800fe24:	9201      	str	r2, [sp, #4]
 800fe26:	f000 fea1 	bl	8010b6c <ucdr_buffer_alignment>
 800fe2a:	4601      	mov	r1, r0
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800fe32:	f000 fedf 	bl	8010bf4 <ucdr_advance_buffer>
 800fe36:	2104      	movs	r1, #4
 800fe38:	4620      	mov	r0, r4
 800fe3a:	f000 fe37 	bl	8010aac <ucdr_check_buffer_available_for>
 800fe3e:	2800      	cmp	r0, #0
 800fe40:	d138      	bne.n	800feb4 <ucdr_serialize_endian_uint32_t+0x9c>
 800fe42:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800fe46:	42b7      	cmp	r7, r6
 800fe48:	d92f      	bls.n	800feaa <ucdr_serialize_endian_uint32_t+0x92>
 800fe4a:	6923      	ldr	r3, [r4, #16]
 800fe4c:	60a7      	str	r7, [r4, #8]
 800fe4e:	1bbf      	subs	r7, r7, r6
 800fe50:	443b      	add	r3, r7
 800fe52:	f1c7 0904 	rsb	r9, r7, #4
 800fe56:	6123      	str	r3, [r4, #16]
 800fe58:	4649      	mov	r1, r9
 800fe5a:	4620      	mov	r0, r4
 800fe5c:	f000 fe32 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	d04a      	beq.n	800fefa <ucdr_serialize_endian_uint32_t+0xe2>
 800fe64:	2d01      	cmp	r5, #1
 800fe66:	d063      	beq.n	800ff30 <ucdr_serialize_endian_uint32_t+0x118>
 800fe68:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800fe6c:	7033      	strb	r3, [r6, #0]
 800fe6e:	2f00      	cmp	r7, #0
 800fe70:	d051      	beq.n	800ff16 <ucdr_serialize_endian_uint32_t+0xfe>
 800fe72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fe76:	7073      	strb	r3, [r6, #1]
 800fe78:	2f01      	cmp	r7, #1
 800fe7a:	d050      	beq.n	800ff1e <ucdr_serialize_endian_uint32_t+0x106>
 800fe7c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800fe80:	70b3      	strb	r3, [r6, #2]
 800fe82:	2f02      	cmp	r7, #2
 800fe84:	d04f      	beq.n	800ff26 <ucdr_serialize_endian_uint32_t+0x10e>
 800fe86:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fe8a:	70f3      	strb	r3, [r6, #3]
 800fe8c:	6923      	ldr	r3, [r4, #16]
 800fe8e:	68a2      	ldr	r2, [r4, #8]
 800fe90:	7da0      	ldrb	r0, [r4, #22]
 800fe92:	3304      	adds	r3, #4
 800fe94:	444a      	add	r2, r9
 800fe96:	1bdb      	subs	r3, r3, r7
 800fe98:	2104      	movs	r1, #4
 800fe9a:	f080 0001 	eor.w	r0, r0, #1
 800fe9e:	60a2      	str	r2, [r4, #8]
 800fea0:	6123      	str	r3, [r4, #16]
 800fea2:	7561      	strb	r1, [r4, #21]
 800fea4:	b003      	add	sp, #12
 800fea6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800feaa:	2104      	movs	r1, #4
 800feac:	4620      	mov	r0, r4
 800feae:	f000 fe09 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800feb2:	b1c8      	cbz	r0, 800fee8 <ucdr_serialize_endian_uint32_t+0xd0>
 800feb4:	2d01      	cmp	r5, #1
 800feb6:	68a3      	ldr	r3, [r4, #8]
 800feb8:	d01c      	beq.n	800fef4 <ucdr_serialize_endian_uint32_t+0xdc>
 800feba:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800febe:	701a      	strb	r2, [r3, #0]
 800fec0:	68a3      	ldr	r3, [r4, #8]
 800fec2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800fec6:	705a      	strb	r2, [r3, #1]
 800fec8:	68a3      	ldr	r3, [r4, #8]
 800feca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800fece:	709a      	strb	r2, [r3, #2]
 800fed0:	68a3      	ldr	r3, [r4, #8]
 800fed2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800fed6:	70da      	strb	r2, [r3, #3]
 800fed8:	68a2      	ldr	r2, [r4, #8]
 800feda:	6923      	ldr	r3, [r4, #16]
 800fedc:	3204      	adds	r2, #4
 800fede:	3304      	adds	r3, #4
 800fee0:	2104      	movs	r1, #4
 800fee2:	60a2      	str	r2, [r4, #8]
 800fee4:	6123      	str	r3, [r4, #16]
 800fee6:	7561      	strb	r1, [r4, #21]
 800fee8:	7da0      	ldrb	r0, [r4, #22]
 800feea:	f080 0001 	eor.w	r0, r0, #1
 800feee:	b003      	add	sp, #12
 800fef0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fef4:	9a01      	ldr	r2, [sp, #4]
 800fef6:	601a      	str	r2, [r3, #0]
 800fef8:	e7ee      	b.n	800fed8 <ucdr_serialize_endian_uint32_t+0xc0>
 800fefa:	68a2      	ldr	r2, [r4, #8]
 800fefc:	6923      	ldr	r3, [r4, #16]
 800fefe:	7da0      	ldrb	r0, [r4, #22]
 800ff00:	f884 8015 	strb.w	r8, [r4, #21]
 800ff04:	1bd2      	subs	r2, r2, r7
 800ff06:	1bdb      	subs	r3, r3, r7
 800ff08:	f080 0001 	eor.w	r0, r0, #1
 800ff0c:	60a2      	str	r2, [r4, #8]
 800ff0e:	6123      	str	r3, [r4, #16]
 800ff10:	b003      	add	sp, #12
 800ff12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff16:	68a3      	ldr	r3, [r4, #8]
 800ff18:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ff1c:	701a      	strb	r2, [r3, #0]
 800ff1e:	68a3      	ldr	r3, [r4, #8]
 800ff20:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ff24:	701a      	strb	r2, [r3, #0]
 800ff26:	68a3      	ldr	r3, [r4, #8]
 800ff28:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ff2c:	701a      	strb	r2, [r3, #0]
 800ff2e:	e7ad      	b.n	800fe8c <ucdr_serialize_endian_uint32_t+0x74>
 800ff30:	ad01      	add	r5, sp, #4
 800ff32:	4629      	mov	r1, r5
 800ff34:	463a      	mov	r2, r7
 800ff36:	4630      	mov	r0, r6
 800ff38:	f00a fbeb 	bl	801a712 <memcpy>
 800ff3c:	68a0      	ldr	r0, [r4, #8]
 800ff3e:	464a      	mov	r2, r9
 800ff40:	19e9      	adds	r1, r5, r7
 800ff42:	f00a fbe6 	bl	801a712 <memcpy>
 800ff46:	e7a1      	b.n	800fe8c <ucdr_serialize_endian_uint32_t+0x74>

0800ff48 <ucdr_deserialize_uint32_t>:
 800ff48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff4c:	460d      	mov	r5, r1
 800ff4e:	2104      	movs	r1, #4
 800ff50:	4604      	mov	r4, r0
 800ff52:	f000 fe0b 	bl	8010b6c <ucdr_buffer_alignment>
 800ff56:	4601      	mov	r1, r0
 800ff58:	4620      	mov	r0, r4
 800ff5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ff5e:	f000 fe49 	bl	8010bf4 <ucdr_advance_buffer>
 800ff62:	2104      	movs	r1, #4
 800ff64:	4620      	mov	r0, r4
 800ff66:	f000 fda1 	bl	8010aac <ucdr_check_buffer_available_for>
 800ff6a:	2800      	cmp	r0, #0
 800ff6c:	d138      	bne.n	800ffe0 <ucdr_deserialize_uint32_t+0x98>
 800ff6e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800ff72:	42b7      	cmp	r7, r6
 800ff74:	d92f      	bls.n	800ffd6 <ucdr_deserialize_uint32_t+0x8e>
 800ff76:	6923      	ldr	r3, [r4, #16]
 800ff78:	60a7      	str	r7, [r4, #8]
 800ff7a:	1bbf      	subs	r7, r7, r6
 800ff7c:	443b      	add	r3, r7
 800ff7e:	f1c7 0904 	rsb	r9, r7, #4
 800ff82:	6123      	str	r3, [r4, #16]
 800ff84:	4649      	mov	r1, r9
 800ff86:	4620      	mov	r0, r4
 800ff88:	f000 fd9c 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800ff8c:	2800      	cmp	r0, #0
 800ff8e:	d046      	beq.n	801001e <ucdr_deserialize_uint32_t+0xd6>
 800ff90:	7d23      	ldrb	r3, [r4, #20]
 800ff92:	2b01      	cmp	r3, #1
 800ff94:	d05c      	beq.n	8010050 <ucdr_deserialize_uint32_t+0x108>
 800ff96:	78f3      	ldrb	r3, [r6, #3]
 800ff98:	702b      	strb	r3, [r5, #0]
 800ff9a:	2f00      	cmp	r7, #0
 800ff9c:	d04c      	beq.n	8010038 <ucdr_deserialize_uint32_t+0xf0>
 800ff9e:	78b3      	ldrb	r3, [r6, #2]
 800ffa0:	706b      	strb	r3, [r5, #1]
 800ffa2:	2f01      	cmp	r7, #1
 800ffa4:	f105 0302 	add.w	r3, r5, #2
 800ffa8:	d04a      	beq.n	8010040 <ucdr_deserialize_uint32_t+0xf8>
 800ffaa:	7873      	ldrb	r3, [r6, #1]
 800ffac:	70ab      	strb	r3, [r5, #2]
 800ffae:	2f02      	cmp	r7, #2
 800ffb0:	f105 0303 	add.w	r3, r5, #3
 800ffb4:	d048      	beq.n	8010048 <ucdr_deserialize_uint32_t+0x100>
 800ffb6:	7833      	ldrb	r3, [r6, #0]
 800ffb8:	70eb      	strb	r3, [r5, #3]
 800ffba:	6923      	ldr	r3, [r4, #16]
 800ffbc:	68a2      	ldr	r2, [r4, #8]
 800ffbe:	7da0      	ldrb	r0, [r4, #22]
 800ffc0:	2104      	movs	r1, #4
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	444a      	add	r2, r9
 800ffc6:	1bdb      	subs	r3, r3, r7
 800ffc8:	7561      	strb	r1, [r4, #21]
 800ffca:	60a2      	str	r2, [r4, #8]
 800ffcc:	6123      	str	r3, [r4, #16]
 800ffce:	f080 0001 	eor.w	r0, r0, #1
 800ffd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffd6:	2104      	movs	r1, #4
 800ffd8:	4620      	mov	r0, r4
 800ffda:	f000 fd73 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 800ffde:	b1b0      	cbz	r0, 801000e <ucdr_deserialize_uint32_t+0xc6>
 800ffe0:	7d23      	ldrb	r3, [r4, #20]
 800ffe2:	2b01      	cmp	r3, #1
 800ffe4:	68a3      	ldr	r3, [r4, #8]
 800ffe6:	d017      	beq.n	8010018 <ucdr_deserialize_uint32_t+0xd0>
 800ffe8:	78db      	ldrb	r3, [r3, #3]
 800ffea:	702b      	strb	r3, [r5, #0]
 800ffec:	68a3      	ldr	r3, [r4, #8]
 800ffee:	789b      	ldrb	r3, [r3, #2]
 800fff0:	706b      	strb	r3, [r5, #1]
 800fff2:	68a3      	ldr	r3, [r4, #8]
 800fff4:	785b      	ldrb	r3, [r3, #1]
 800fff6:	70ab      	strb	r3, [r5, #2]
 800fff8:	68a3      	ldr	r3, [r4, #8]
 800fffa:	781b      	ldrb	r3, [r3, #0]
 800fffc:	70eb      	strb	r3, [r5, #3]
 800fffe:	68a2      	ldr	r2, [r4, #8]
 8010000:	6923      	ldr	r3, [r4, #16]
 8010002:	3204      	adds	r2, #4
 8010004:	3304      	adds	r3, #4
 8010006:	2104      	movs	r1, #4
 8010008:	60a2      	str	r2, [r4, #8]
 801000a:	6123      	str	r3, [r4, #16]
 801000c:	7561      	strb	r1, [r4, #21]
 801000e:	7da0      	ldrb	r0, [r4, #22]
 8010010:	f080 0001 	eor.w	r0, r0, #1
 8010014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	602b      	str	r3, [r5, #0]
 801001c:	e7ef      	b.n	800fffe <ucdr_deserialize_uint32_t+0xb6>
 801001e:	68a2      	ldr	r2, [r4, #8]
 8010020:	6923      	ldr	r3, [r4, #16]
 8010022:	7da0      	ldrb	r0, [r4, #22]
 8010024:	f884 8015 	strb.w	r8, [r4, #21]
 8010028:	1bd2      	subs	r2, r2, r7
 801002a:	1bdb      	subs	r3, r3, r7
 801002c:	60a2      	str	r2, [r4, #8]
 801002e:	6123      	str	r3, [r4, #16]
 8010030:	f080 0001 	eor.w	r0, r0, #1
 8010034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010038:	68a3      	ldr	r3, [r4, #8]
 801003a:	789b      	ldrb	r3, [r3, #2]
 801003c:	706b      	strb	r3, [r5, #1]
 801003e:	1cab      	adds	r3, r5, #2
 8010040:	68a2      	ldr	r2, [r4, #8]
 8010042:	7852      	ldrb	r2, [r2, #1]
 8010044:	f803 2b01 	strb.w	r2, [r3], #1
 8010048:	68a2      	ldr	r2, [r4, #8]
 801004a:	7812      	ldrb	r2, [r2, #0]
 801004c:	701a      	strb	r2, [r3, #0]
 801004e:	e7b4      	b.n	800ffba <ucdr_deserialize_uint32_t+0x72>
 8010050:	4631      	mov	r1, r6
 8010052:	463a      	mov	r2, r7
 8010054:	4628      	mov	r0, r5
 8010056:	f00a fb5c 	bl	801a712 <memcpy>
 801005a:	68a1      	ldr	r1, [r4, #8]
 801005c:	464a      	mov	r2, r9
 801005e:	19e8      	adds	r0, r5, r7
 8010060:	f00a fb57 	bl	801a712 <memcpy>
 8010064:	e7a9      	b.n	800ffba <ucdr_deserialize_uint32_t+0x72>
 8010066:	bf00      	nop

08010068 <ucdr_deserialize_endian_uint32_t>:
 8010068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801006c:	460e      	mov	r6, r1
 801006e:	2104      	movs	r1, #4
 8010070:	4604      	mov	r4, r0
 8010072:	4615      	mov	r5, r2
 8010074:	f000 fd7a 	bl	8010b6c <ucdr_buffer_alignment>
 8010078:	4601      	mov	r1, r0
 801007a:	4620      	mov	r0, r4
 801007c:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010080:	f000 fdb8 	bl	8010bf4 <ucdr_advance_buffer>
 8010084:	2104      	movs	r1, #4
 8010086:	4620      	mov	r0, r4
 8010088:	f000 fd10 	bl	8010aac <ucdr_check_buffer_available_for>
 801008c:	2800      	cmp	r0, #0
 801008e:	d13c      	bne.n	801010a <ucdr_deserialize_endian_uint32_t+0xa2>
 8010090:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8010094:	42bb      	cmp	r3, r7
 8010096:	d933      	bls.n	8010100 <ucdr_deserialize_endian_uint32_t+0x98>
 8010098:	eba3 0807 	sub.w	r8, r3, r7
 801009c:	60a3      	str	r3, [r4, #8]
 801009e:	6923      	ldr	r3, [r4, #16]
 80100a0:	f1c8 0a04 	rsb	sl, r8, #4
 80100a4:	4443      	add	r3, r8
 80100a6:	6123      	str	r3, [r4, #16]
 80100a8:	4651      	mov	r1, sl
 80100aa:	4620      	mov	r0, r4
 80100ac:	f000 fd0a 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80100b0:	2800      	cmp	r0, #0
 80100b2:	d048      	beq.n	8010146 <ucdr_deserialize_endian_uint32_t+0xde>
 80100b4:	2e01      	cmp	r6, #1
 80100b6:	d061      	beq.n	801017c <ucdr_deserialize_endian_uint32_t+0x114>
 80100b8:	78fb      	ldrb	r3, [r7, #3]
 80100ba:	702b      	strb	r3, [r5, #0]
 80100bc:	f1b8 0f00 	cmp.w	r8, #0
 80100c0:	d050      	beq.n	8010164 <ucdr_deserialize_endian_uint32_t+0xfc>
 80100c2:	78bb      	ldrb	r3, [r7, #2]
 80100c4:	706b      	strb	r3, [r5, #1]
 80100c6:	f1b8 0f01 	cmp.w	r8, #1
 80100ca:	f105 0302 	add.w	r3, r5, #2
 80100ce:	d04d      	beq.n	801016c <ucdr_deserialize_endian_uint32_t+0x104>
 80100d0:	787b      	ldrb	r3, [r7, #1]
 80100d2:	70ab      	strb	r3, [r5, #2]
 80100d4:	f1b8 0f02 	cmp.w	r8, #2
 80100d8:	f105 0303 	add.w	r3, r5, #3
 80100dc:	d04a      	beq.n	8010174 <ucdr_deserialize_endian_uint32_t+0x10c>
 80100de:	783b      	ldrb	r3, [r7, #0]
 80100e0:	70eb      	strb	r3, [r5, #3]
 80100e2:	6923      	ldr	r3, [r4, #16]
 80100e4:	68a2      	ldr	r2, [r4, #8]
 80100e6:	7da0      	ldrb	r0, [r4, #22]
 80100e8:	2104      	movs	r1, #4
 80100ea:	3304      	adds	r3, #4
 80100ec:	4452      	add	r2, sl
 80100ee:	eba3 0308 	sub.w	r3, r3, r8
 80100f2:	7561      	strb	r1, [r4, #21]
 80100f4:	60a2      	str	r2, [r4, #8]
 80100f6:	6123      	str	r3, [r4, #16]
 80100f8:	f080 0001 	eor.w	r0, r0, #1
 80100fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010100:	2104      	movs	r1, #4
 8010102:	4620      	mov	r0, r4
 8010104:	f000 fcde 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 8010108:	b1a8      	cbz	r0, 8010136 <ucdr_deserialize_endian_uint32_t+0xce>
 801010a:	2e01      	cmp	r6, #1
 801010c:	68a3      	ldr	r3, [r4, #8]
 801010e:	d017      	beq.n	8010140 <ucdr_deserialize_endian_uint32_t+0xd8>
 8010110:	78db      	ldrb	r3, [r3, #3]
 8010112:	702b      	strb	r3, [r5, #0]
 8010114:	68a3      	ldr	r3, [r4, #8]
 8010116:	789b      	ldrb	r3, [r3, #2]
 8010118:	706b      	strb	r3, [r5, #1]
 801011a:	68a3      	ldr	r3, [r4, #8]
 801011c:	785b      	ldrb	r3, [r3, #1]
 801011e:	70ab      	strb	r3, [r5, #2]
 8010120:	68a3      	ldr	r3, [r4, #8]
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	70eb      	strb	r3, [r5, #3]
 8010126:	68a2      	ldr	r2, [r4, #8]
 8010128:	6923      	ldr	r3, [r4, #16]
 801012a:	3204      	adds	r2, #4
 801012c:	3304      	adds	r3, #4
 801012e:	2104      	movs	r1, #4
 8010130:	60a2      	str	r2, [r4, #8]
 8010132:	6123      	str	r3, [r4, #16]
 8010134:	7561      	strb	r1, [r4, #21]
 8010136:	7da0      	ldrb	r0, [r4, #22]
 8010138:	f080 0001 	eor.w	r0, r0, #1
 801013c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	602b      	str	r3, [r5, #0]
 8010144:	e7ef      	b.n	8010126 <ucdr_deserialize_endian_uint32_t+0xbe>
 8010146:	68a2      	ldr	r2, [r4, #8]
 8010148:	6923      	ldr	r3, [r4, #16]
 801014a:	7da0      	ldrb	r0, [r4, #22]
 801014c:	f884 9015 	strb.w	r9, [r4, #21]
 8010150:	eba2 0208 	sub.w	r2, r2, r8
 8010154:	eba3 0308 	sub.w	r3, r3, r8
 8010158:	60a2      	str	r2, [r4, #8]
 801015a:	6123      	str	r3, [r4, #16]
 801015c:	f080 0001 	eor.w	r0, r0, #1
 8010160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010164:	68a3      	ldr	r3, [r4, #8]
 8010166:	789b      	ldrb	r3, [r3, #2]
 8010168:	706b      	strb	r3, [r5, #1]
 801016a:	1cab      	adds	r3, r5, #2
 801016c:	68a2      	ldr	r2, [r4, #8]
 801016e:	7852      	ldrb	r2, [r2, #1]
 8010170:	f803 2b01 	strb.w	r2, [r3], #1
 8010174:	68a2      	ldr	r2, [r4, #8]
 8010176:	7812      	ldrb	r2, [r2, #0]
 8010178:	701a      	strb	r2, [r3, #0]
 801017a:	e7b2      	b.n	80100e2 <ucdr_deserialize_endian_uint32_t+0x7a>
 801017c:	4639      	mov	r1, r7
 801017e:	4642      	mov	r2, r8
 8010180:	4628      	mov	r0, r5
 8010182:	f00a fac6 	bl	801a712 <memcpy>
 8010186:	68a1      	ldr	r1, [r4, #8]
 8010188:	4652      	mov	r2, sl
 801018a:	eb05 0008 	add.w	r0, r5, r8
 801018e:	f00a fac0 	bl	801a712 <memcpy>
 8010192:	e7a6      	b.n	80100e2 <ucdr_deserialize_endian_uint32_t+0x7a>

08010194 <ucdr_serialize_uint64_t>:
 8010194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010198:	2108      	movs	r1, #8
 801019a:	b082      	sub	sp, #8
 801019c:	4604      	mov	r4, r0
 801019e:	e9cd 2300 	strd	r2, r3, [sp]
 80101a2:	f000 fce3 	bl	8010b6c <ucdr_buffer_alignment>
 80101a6:	4601      	mov	r1, r0
 80101a8:	4620      	mov	r0, r4
 80101aa:	7d67      	ldrb	r7, [r4, #21]
 80101ac:	f000 fd22 	bl	8010bf4 <ucdr_advance_buffer>
 80101b0:	2108      	movs	r1, #8
 80101b2:	4620      	mov	r0, r4
 80101b4:	f000 fc7a 	bl	8010aac <ucdr_check_buffer_available_for>
 80101b8:	2800      	cmp	r0, #0
 80101ba:	d14e      	bne.n	801025a <ucdr_serialize_uint64_t+0xc6>
 80101bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	d945      	bls.n	8010250 <ucdr_serialize_uint64_t+0xbc>
 80101c4:	1b5e      	subs	r6, r3, r5
 80101c6:	60a3      	str	r3, [r4, #8]
 80101c8:	6923      	ldr	r3, [r4, #16]
 80101ca:	f1c6 0808 	rsb	r8, r6, #8
 80101ce:	4433      	add	r3, r6
 80101d0:	6123      	str	r3, [r4, #16]
 80101d2:	4641      	mov	r1, r8
 80101d4:	4620      	mov	r0, r4
 80101d6:	f000 fc75 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80101da:	2800      	cmp	r0, #0
 80101dc:	d074      	beq.n	80102c8 <ucdr_serialize_uint64_t+0x134>
 80101de:	7d23      	ldrb	r3, [r4, #20]
 80101e0:	2b01      	cmp	r3, #1
 80101e2:	f000 809b 	beq.w	801031c <ucdr_serialize_uint64_t+0x188>
 80101e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80101ea:	702b      	strb	r3, [r5, #0]
 80101ec:	2e00      	cmp	r6, #0
 80101ee:	d078      	beq.n	80102e2 <ucdr_serialize_uint64_t+0x14e>
 80101f0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80101f4:	706b      	strb	r3, [r5, #1]
 80101f6:	2e01      	cmp	r6, #1
 80101f8:	d077      	beq.n	80102ea <ucdr_serialize_uint64_t+0x156>
 80101fa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80101fe:	70ab      	strb	r3, [r5, #2]
 8010200:	2e02      	cmp	r6, #2
 8010202:	d076      	beq.n	80102f2 <ucdr_serialize_uint64_t+0x15e>
 8010204:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8010208:	70eb      	strb	r3, [r5, #3]
 801020a:	2e03      	cmp	r6, #3
 801020c:	d075      	beq.n	80102fa <ucdr_serialize_uint64_t+0x166>
 801020e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8010212:	712b      	strb	r3, [r5, #4]
 8010214:	2e04      	cmp	r6, #4
 8010216:	d074      	beq.n	8010302 <ucdr_serialize_uint64_t+0x16e>
 8010218:	f89d 3002 	ldrb.w	r3, [sp, #2]
 801021c:	716b      	strb	r3, [r5, #5]
 801021e:	2e05      	cmp	r6, #5
 8010220:	d073      	beq.n	801030a <ucdr_serialize_uint64_t+0x176>
 8010222:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010226:	71ab      	strb	r3, [r5, #6]
 8010228:	2e06      	cmp	r6, #6
 801022a:	d072      	beq.n	8010312 <ucdr_serialize_uint64_t+0x17e>
 801022c:	f89d 3000 	ldrb.w	r3, [sp]
 8010230:	71eb      	strb	r3, [r5, #7]
 8010232:	6923      	ldr	r3, [r4, #16]
 8010234:	68a2      	ldr	r2, [r4, #8]
 8010236:	7da0      	ldrb	r0, [r4, #22]
 8010238:	3308      	adds	r3, #8
 801023a:	1b9e      	subs	r6, r3, r6
 801023c:	4442      	add	r2, r8
 801023e:	2308      	movs	r3, #8
 8010240:	f080 0001 	eor.w	r0, r0, #1
 8010244:	60a2      	str	r2, [r4, #8]
 8010246:	6126      	str	r6, [r4, #16]
 8010248:	7563      	strb	r3, [r4, #21]
 801024a:	b002      	add	sp, #8
 801024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010250:	2108      	movs	r1, #8
 8010252:	4620      	mov	r0, r4
 8010254:	f000 fc36 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 8010258:	b350      	cbz	r0, 80102b0 <ucdr_serialize_uint64_t+0x11c>
 801025a:	7d23      	ldrb	r3, [r4, #20]
 801025c:	2b01      	cmp	r3, #1
 801025e:	d02d      	beq.n	80102bc <ucdr_serialize_uint64_t+0x128>
 8010260:	68a3      	ldr	r3, [r4, #8]
 8010262:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8010266:	701a      	strb	r2, [r3, #0]
 8010268:	68a3      	ldr	r3, [r4, #8]
 801026a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801026e:	705a      	strb	r2, [r3, #1]
 8010270:	68a3      	ldr	r3, [r4, #8]
 8010272:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010276:	709a      	strb	r2, [r3, #2]
 8010278:	68a3      	ldr	r3, [r4, #8]
 801027a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801027e:	70da      	strb	r2, [r3, #3]
 8010280:	68a3      	ldr	r3, [r4, #8]
 8010282:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010286:	711a      	strb	r2, [r3, #4]
 8010288:	68a3      	ldr	r3, [r4, #8]
 801028a:	f89d 2002 	ldrb.w	r2, [sp, #2]
 801028e:	715a      	strb	r2, [r3, #5]
 8010290:	68a3      	ldr	r3, [r4, #8]
 8010292:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010296:	719a      	strb	r2, [r3, #6]
 8010298:	68a3      	ldr	r3, [r4, #8]
 801029a:	f89d 2000 	ldrb.w	r2, [sp]
 801029e:	71da      	strb	r2, [r3, #7]
 80102a0:	68a2      	ldr	r2, [r4, #8]
 80102a2:	6923      	ldr	r3, [r4, #16]
 80102a4:	3208      	adds	r2, #8
 80102a6:	3308      	adds	r3, #8
 80102a8:	2108      	movs	r1, #8
 80102aa:	60a2      	str	r2, [r4, #8]
 80102ac:	6123      	str	r3, [r4, #16]
 80102ae:	7561      	strb	r1, [r4, #21]
 80102b0:	7da0      	ldrb	r0, [r4, #22]
 80102b2:	f080 0001 	eor.w	r0, r0, #1
 80102b6:	b002      	add	sp, #8
 80102b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102bc:	466b      	mov	r3, sp
 80102be:	cb03      	ldmia	r3!, {r0, r1}
 80102c0:	68a3      	ldr	r3, [r4, #8]
 80102c2:	6018      	str	r0, [r3, #0]
 80102c4:	6059      	str	r1, [r3, #4]
 80102c6:	e7eb      	b.n	80102a0 <ucdr_serialize_uint64_t+0x10c>
 80102c8:	68a2      	ldr	r2, [r4, #8]
 80102ca:	6923      	ldr	r3, [r4, #16]
 80102cc:	7da0      	ldrb	r0, [r4, #22]
 80102ce:	7567      	strb	r7, [r4, #21]
 80102d0:	1b92      	subs	r2, r2, r6
 80102d2:	1b9b      	subs	r3, r3, r6
 80102d4:	f080 0001 	eor.w	r0, r0, #1
 80102d8:	60a2      	str	r2, [r4, #8]
 80102da:	6123      	str	r3, [r4, #16]
 80102dc:	b002      	add	sp, #8
 80102de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102e2:	68a3      	ldr	r3, [r4, #8]
 80102e4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80102e8:	701a      	strb	r2, [r3, #0]
 80102ea:	68a3      	ldr	r3, [r4, #8]
 80102ec:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80102f0:	701a      	strb	r2, [r3, #0]
 80102f2:	68a3      	ldr	r3, [r4, #8]
 80102f4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80102f8:	701a      	strb	r2, [r3, #0]
 80102fa:	68a3      	ldr	r3, [r4, #8]
 80102fc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8010300:	701a      	strb	r2, [r3, #0]
 8010302:	68a3      	ldr	r3, [r4, #8]
 8010304:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010308:	701a      	strb	r2, [r3, #0]
 801030a:	68a3      	ldr	r3, [r4, #8]
 801030c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8010310:	701a      	strb	r2, [r3, #0]
 8010312:	68a3      	ldr	r3, [r4, #8]
 8010314:	f89d 2000 	ldrb.w	r2, [sp]
 8010318:	701a      	strb	r2, [r3, #0]
 801031a:	e78a      	b.n	8010232 <ucdr_serialize_uint64_t+0x9e>
 801031c:	4628      	mov	r0, r5
 801031e:	466d      	mov	r5, sp
 8010320:	4629      	mov	r1, r5
 8010322:	4632      	mov	r2, r6
 8010324:	f00a f9f5 	bl	801a712 <memcpy>
 8010328:	68a0      	ldr	r0, [r4, #8]
 801032a:	4642      	mov	r2, r8
 801032c:	19a9      	adds	r1, r5, r6
 801032e:	f00a f9f0 	bl	801a712 <memcpy>
 8010332:	e77e      	b.n	8010232 <ucdr_serialize_uint64_t+0x9e>

08010334 <ucdr_serialize_int16_t>:
 8010334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010338:	b082      	sub	sp, #8
 801033a:	460b      	mov	r3, r1
 801033c:	2102      	movs	r1, #2
 801033e:	4604      	mov	r4, r0
 8010340:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010344:	f000 fc12 	bl	8010b6c <ucdr_buffer_alignment>
 8010348:	4601      	mov	r1, r0
 801034a:	4620      	mov	r0, r4
 801034c:	7d67      	ldrb	r7, [r4, #21]
 801034e:	f000 fc51 	bl	8010bf4 <ucdr_advance_buffer>
 8010352:	2102      	movs	r1, #2
 8010354:	4620      	mov	r0, r4
 8010356:	f000 fba9 	bl	8010aac <ucdr_check_buffer_available_for>
 801035a:	bb78      	cbnz	r0, 80103bc <ucdr_serialize_int16_t+0x88>
 801035c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010360:	42ab      	cmp	r3, r5
 8010362:	d926      	bls.n	80103b2 <ucdr_serialize_int16_t+0x7e>
 8010364:	1b5e      	subs	r6, r3, r5
 8010366:	60a3      	str	r3, [r4, #8]
 8010368:	6923      	ldr	r3, [r4, #16]
 801036a:	f1c6 0802 	rsb	r8, r6, #2
 801036e:	4433      	add	r3, r6
 8010370:	6123      	str	r3, [r4, #16]
 8010372:	4641      	mov	r1, r8
 8010374:	4620      	mov	r0, r4
 8010376:	f000 fba5 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 801037a:	2800      	cmp	r0, #0
 801037c:	d03b      	beq.n	80103f6 <ucdr_serialize_int16_t+0xc2>
 801037e:	7d23      	ldrb	r3, [r4, #20]
 8010380:	2b01      	cmp	r3, #1
 8010382:	d04a      	beq.n	801041a <ucdr_serialize_int16_t+0xe6>
 8010384:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010388:	702b      	strb	r3, [r5, #0]
 801038a:	2e00      	cmp	r6, #0
 801038c:	d040      	beq.n	8010410 <ucdr_serialize_int16_t+0xdc>
 801038e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010392:	706b      	strb	r3, [r5, #1]
 8010394:	6923      	ldr	r3, [r4, #16]
 8010396:	68a2      	ldr	r2, [r4, #8]
 8010398:	7da0      	ldrb	r0, [r4, #22]
 801039a:	3302      	adds	r3, #2
 801039c:	1b9e      	subs	r6, r3, r6
 801039e:	4442      	add	r2, r8
 80103a0:	2302      	movs	r3, #2
 80103a2:	f080 0001 	eor.w	r0, r0, #1
 80103a6:	60a2      	str	r2, [r4, #8]
 80103a8:	6126      	str	r6, [r4, #16]
 80103aa:	7563      	strb	r3, [r4, #21]
 80103ac:	b002      	add	sp, #8
 80103ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103b2:	2102      	movs	r1, #2
 80103b4:	4620      	mov	r0, r4
 80103b6:	f000 fb85 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80103ba:	b190      	cbz	r0, 80103e2 <ucdr_serialize_int16_t+0xae>
 80103bc:	7d23      	ldrb	r3, [r4, #20]
 80103be:	2b01      	cmp	r3, #1
 80103c0:	68a3      	ldr	r3, [r4, #8]
 80103c2:	d014      	beq.n	80103ee <ucdr_serialize_int16_t+0xba>
 80103c4:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80103c8:	701a      	strb	r2, [r3, #0]
 80103ca:	68a3      	ldr	r3, [r4, #8]
 80103cc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80103d0:	705a      	strb	r2, [r3, #1]
 80103d2:	68a2      	ldr	r2, [r4, #8]
 80103d4:	6923      	ldr	r3, [r4, #16]
 80103d6:	3202      	adds	r2, #2
 80103d8:	3302      	adds	r3, #2
 80103da:	2102      	movs	r1, #2
 80103dc:	60a2      	str	r2, [r4, #8]
 80103de:	6123      	str	r3, [r4, #16]
 80103e0:	7561      	strb	r1, [r4, #21]
 80103e2:	7da0      	ldrb	r0, [r4, #22]
 80103e4:	f080 0001 	eor.w	r0, r0, #1
 80103e8:	b002      	add	sp, #8
 80103ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80103f2:	801a      	strh	r2, [r3, #0]
 80103f4:	e7ed      	b.n	80103d2 <ucdr_serialize_int16_t+0x9e>
 80103f6:	68a2      	ldr	r2, [r4, #8]
 80103f8:	6923      	ldr	r3, [r4, #16]
 80103fa:	7da0      	ldrb	r0, [r4, #22]
 80103fc:	7567      	strb	r7, [r4, #21]
 80103fe:	1b92      	subs	r2, r2, r6
 8010400:	1b9b      	subs	r3, r3, r6
 8010402:	f080 0001 	eor.w	r0, r0, #1
 8010406:	60a2      	str	r2, [r4, #8]
 8010408:	6123      	str	r3, [r4, #16]
 801040a:	b002      	add	sp, #8
 801040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010410:	68a3      	ldr	r3, [r4, #8]
 8010412:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010416:	701a      	strb	r2, [r3, #0]
 8010418:	e7bc      	b.n	8010394 <ucdr_serialize_int16_t+0x60>
 801041a:	4628      	mov	r0, r5
 801041c:	f10d 0506 	add.w	r5, sp, #6
 8010420:	4629      	mov	r1, r5
 8010422:	4632      	mov	r2, r6
 8010424:	f00a f975 	bl	801a712 <memcpy>
 8010428:	68a0      	ldr	r0, [r4, #8]
 801042a:	4642      	mov	r2, r8
 801042c:	19a9      	adds	r1, r5, r6
 801042e:	f00a f970 	bl	801a712 <memcpy>
 8010432:	e7af      	b.n	8010394 <ucdr_serialize_int16_t+0x60>

08010434 <ucdr_deserialize_int16_t>:
 8010434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010438:	460d      	mov	r5, r1
 801043a:	2102      	movs	r1, #2
 801043c:	4604      	mov	r4, r0
 801043e:	f000 fb95 	bl	8010b6c <ucdr_buffer_alignment>
 8010442:	4601      	mov	r1, r0
 8010444:	4620      	mov	r0, r4
 8010446:	f894 8015 	ldrb.w	r8, [r4, #21]
 801044a:	f000 fbd3 	bl	8010bf4 <ucdr_advance_buffer>
 801044e:	2102      	movs	r1, #2
 8010450:	4620      	mov	r0, r4
 8010452:	f000 fb2b 	bl	8010aac <ucdr_check_buffer_available_for>
 8010456:	bb60      	cbnz	r0, 80104b2 <ucdr_deserialize_int16_t+0x7e>
 8010458:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 801045c:	42be      	cmp	r6, r7
 801045e:	d923      	bls.n	80104a8 <ucdr_deserialize_int16_t+0x74>
 8010460:	6923      	ldr	r3, [r4, #16]
 8010462:	60a6      	str	r6, [r4, #8]
 8010464:	1bf6      	subs	r6, r6, r7
 8010466:	4433      	add	r3, r6
 8010468:	f1c6 0902 	rsb	r9, r6, #2
 801046c:	6123      	str	r3, [r4, #16]
 801046e:	4649      	mov	r1, r9
 8010470:	4620      	mov	r0, r4
 8010472:	f000 fb27 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 8010476:	2800      	cmp	r0, #0
 8010478:	d034      	beq.n	80104e4 <ucdr_deserialize_int16_t+0xb0>
 801047a:	7d23      	ldrb	r3, [r4, #20]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d042      	beq.n	8010506 <ucdr_deserialize_int16_t+0xd2>
 8010480:	787b      	ldrb	r3, [r7, #1]
 8010482:	702b      	strb	r3, [r5, #0]
 8010484:	2e00      	cmp	r6, #0
 8010486:	d03a      	beq.n	80104fe <ucdr_deserialize_int16_t+0xca>
 8010488:	783b      	ldrb	r3, [r7, #0]
 801048a:	706b      	strb	r3, [r5, #1]
 801048c:	6923      	ldr	r3, [r4, #16]
 801048e:	68a2      	ldr	r2, [r4, #8]
 8010490:	7da0      	ldrb	r0, [r4, #22]
 8010492:	2102      	movs	r1, #2
 8010494:	3302      	adds	r3, #2
 8010496:	444a      	add	r2, r9
 8010498:	1b9b      	subs	r3, r3, r6
 801049a:	7561      	strb	r1, [r4, #21]
 801049c:	60a2      	str	r2, [r4, #8]
 801049e:	6123      	str	r3, [r4, #16]
 80104a0:	f080 0001 	eor.w	r0, r0, #1
 80104a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104a8:	2102      	movs	r1, #2
 80104aa:	4620      	mov	r0, r4
 80104ac:	f000 fb0a 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80104b0:	b180      	cbz	r0, 80104d4 <ucdr_deserialize_int16_t+0xa0>
 80104b2:	7d23      	ldrb	r3, [r4, #20]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	68a3      	ldr	r3, [r4, #8]
 80104b8:	d011      	beq.n	80104de <ucdr_deserialize_int16_t+0xaa>
 80104ba:	785b      	ldrb	r3, [r3, #1]
 80104bc:	702b      	strb	r3, [r5, #0]
 80104be:	68a3      	ldr	r3, [r4, #8]
 80104c0:	781b      	ldrb	r3, [r3, #0]
 80104c2:	706b      	strb	r3, [r5, #1]
 80104c4:	68a2      	ldr	r2, [r4, #8]
 80104c6:	6923      	ldr	r3, [r4, #16]
 80104c8:	3202      	adds	r2, #2
 80104ca:	3302      	adds	r3, #2
 80104cc:	2102      	movs	r1, #2
 80104ce:	60a2      	str	r2, [r4, #8]
 80104d0:	6123      	str	r3, [r4, #16]
 80104d2:	7561      	strb	r1, [r4, #21]
 80104d4:	7da0      	ldrb	r0, [r4, #22]
 80104d6:	f080 0001 	eor.w	r0, r0, #1
 80104da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104de:	881b      	ldrh	r3, [r3, #0]
 80104e0:	802b      	strh	r3, [r5, #0]
 80104e2:	e7ef      	b.n	80104c4 <ucdr_deserialize_int16_t+0x90>
 80104e4:	68a2      	ldr	r2, [r4, #8]
 80104e6:	6923      	ldr	r3, [r4, #16]
 80104e8:	7da0      	ldrb	r0, [r4, #22]
 80104ea:	f884 8015 	strb.w	r8, [r4, #21]
 80104ee:	1b92      	subs	r2, r2, r6
 80104f0:	1b9b      	subs	r3, r3, r6
 80104f2:	60a2      	str	r2, [r4, #8]
 80104f4:	6123      	str	r3, [r4, #16]
 80104f6:	f080 0001 	eor.w	r0, r0, #1
 80104fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80104fe:	68a3      	ldr	r3, [r4, #8]
 8010500:	781b      	ldrb	r3, [r3, #0]
 8010502:	706b      	strb	r3, [r5, #1]
 8010504:	e7c2      	b.n	801048c <ucdr_deserialize_int16_t+0x58>
 8010506:	4639      	mov	r1, r7
 8010508:	4632      	mov	r2, r6
 801050a:	4628      	mov	r0, r5
 801050c:	f00a f901 	bl	801a712 <memcpy>
 8010510:	68a1      	ldr	r1, [r4, #8]
 8010512:	464a      	mov	r2, r9
 8010514:	19a8      	adds	r0, r5, r6
 8010516:	f00a f8fc 	bl	801a712 <memcpy>
 801051a:	e7b7      	b.n	801048c <ucdr_deserialize_int16_t+0x58>

0801051c <ucdr_serialize_int32_t>:
 801051c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010520:	b082      	sub	sp, #8
 8010522:	4604      	mov	r4, r0
 8010524:	9101      	str	r1, [sp, #4]
 8010526:	2104      	movs	r1, #4
 8010528:	f000 fb20 	bl	8010b6c <ucdr_buffer_alignment>
 801052c:	4601      	mov	r1, r0
 801052e:	4620      	mov	r0, r4
 8010530:	7d67      	ldrb	r7, [r4, #21]
 8010532:	f000 fb5f 	bl	8010bf4 <ucdr_advance_buffer>
 8010536:	2104      	movs	r1, #4
 8010538:	4620      	mov	r0, r4
 801053a:	f000 fab7 	bl	8010aac <ucdr_check_buffer_available_for>
 801053e:	2800      	cmp	r0, #0
 8010540:	d139      	bne.n	80105b6 <ucdr_serialize_int32_t+0x9a>
 8010542:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010546:	42ab      	cmp	r3, r5
 8010548:	d930      	bls.n	80105ac <ucdr_serialize_int32_t+0x90>
 801054a:	1b5e      	subs	r6, r3, r5
 801054c:	60a3      	str	r3, [r4, #8]
 801054e:	6923      	ldr	r3, [r4, #16]
 8010550:	f1c6 0804 	rsb	r8, r6, #4
 8010554:	4433      	add	r3, r6
 8010556:	6123      	str	r3, [r4, #16]
 8010558:	4641      	mov	r1, r8
 801055a:	4620      	mov	r0, r4
 801055c:	f000 fab2 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 8010560:	2800      	cmp	r0, #0
 8010562:	d04c      	beq.n	80105fe <ucdr_serialize_int32_t+0xe2>
 8010564:	7d23      	ldrb	r3, [r4, #20]
 8010566:	2b01      	cmp	r3, #1
 8010568:	d063      	beq.n	8010632 <ucdr_serialize_int32_t+0x116>
 801056a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801056e:	702b      	strb	r3, [r5, #0]
 8010570:	2e00      	cmp	r6, #0
 8010572:	d051      	beq.n	8010618 <ucdr_serialize_int32_t+0xfc>
 8010574:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010578:	706b      	strb	r3, [r5, #1]
 801057a:	2e01      	cmp	r6, #1
 801057c:	d050      	beq.n	8010620 <ucdr_serialize_int32_t+0x104>
 801057e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8010582:	70ab      	strb	r3, [r5, #2]
 8010584:	2e02      	cmp	r6, #2
 8010586:	d04f      	beq.n	8010628 <ucdr_serialize_int32_t+0x10c>
 8010588:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801058c:	70eb      	strb	r3, [r5, #3]
 801058e:	6923      	ldr	r3, [r4, #16]
 8010590:	68a2      	ldr	r2, [r4, #8]
 8010592:	7da0      	ldrb	r0, [r4, #22]
 8010594:	3304      	adds	r3, #4
 8010596:	1b9e      	subs	r6, r3, r6
 8010598:	4442      	add	r2, r8
 801059a:	2304      	movs	r3, #4
 801059c:	f080 0001 	eor.w	r0, r0, #1
 80105a0:	60a2      	str	r2, [r4, #8]
 80105a2:	6126      	str	r6, [r4, #16]
 80105a4:	7563      	strb	r3, [r4, #21]
 80105a6:	b002      	add	sp, #8
 80105a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105ac:	2104      	movs	r1, #4
 80105ae:	4620      	mov	r0, r4
 80105b0:	f000 fa88 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80105b4:	b1d0      	cbz	r0, 80105ec <ucdr_serialize_int32_t+0xd0>
 80105b6:	7d23      	ldrb	r3, [r4, #20]
 80105b8:	2b01      	cmp	r3, #1
 80105ba:	68a3      	ldr	r3, [r4, #8]
 80105bc:	d01c      	beq.n	80105f8 <ucdr_serialize_int32_t+0xdc>
 80105be:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80105c2:	701a      	strb	r2, [r3, #0]
 80105c4:	68a3      	ldr	r3, [r4, #8]
 80105c6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80105ca:	705a      	strb	r2, [r3, #1]
 80105cc:	68a3      	ldr	r3, [r4, #8]
 80105ce:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80105d2:	709a      	strb	r2, [r3, #2]
 80105d4:	68a3      	ldr	r3, [r4, #8]
 80105d6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80105da:	70da      	strb	r2, [r3, #3]
 80105dc:	68a2      	ldr	r2, [r4, #8]
 80105de:	6923      	ldr	r3, [r4, #16]
 80105e0:	3204      	adds	r2, #4
 80105e2:	3304      	adds	r3, #4
 80105e4:	2104      	movs	r1, #4
 80105e6:	60a2      	str	r2, [r4, #8]
 80105e8:	6123      	str	r3, [r4, #16]
 80105ea:	7561      	strb	r1, [r4, #21]
 80105ec:	7da0      	ldrb	r0, [r4, #22]
 80105ee:	f080 0001 	eor.w	r0, r0, #1
 80105f2:	b002      	add	sp, #8
 80105f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105f8:	9a01      	ldr	r2, [sp, #4]
 80105fa:	601a      	str	r2, [r3, #0]
 80105fc:	e7ee      	b.n	80105dc <ucdr_serialize_int32_t+0xc0>
 80105fe:	68a2      	ldr	r2, [r4, #8]
 8010600:	6923      	ldr	r3, [r4, #16]
 8010602:	7da0      	ldrb	r0, [r4, #22]
 8010604:	7567      	strb	r7, [r4, #21]
 8010606:	1b92      	subs	r2, r2, r6
 8010608:	1b9b      	subs	r3, r3, r6
 801060a:	f080 0001 	eor.w	r0, r0, #1
 801060e:	60a2      	str	r2, [r4, #8]
 8010610:	6123      	str	r3, [r4, #16]
 8010612:	b002      	add	sp, #8
 8010614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010618:	68a3      	ldr	r3, [r4, #8]
 801061a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801061e:	701a      	strb	r2, [r3, #0]
 8010620:	68a3      	ldr	r3, [r4, #8]
 8010622:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8010626:	701a      	strb	r2, [r3, #0]
 8010628:	68a3      	ldr	r3, [r4, #8]
 801062a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801062e:	701a      	strb	r2, [r3, #0]
 8010630:	e7ad      	b.n	801058e <ucdr_serialize_int32_t+0x72>
 8010632:	4628      	mov	r0, r5
 8010634:	ad01      	add	r5, sp, #4
 8010636:	4629      	mov	r1, r5
 8010638:	4632      	mov	r2, r6
 801063a:	f00a f86a 	bl	801a712 <memcpy>
 801063e:	68a0      	ldr	r0, [r4, #8]
 8010640:	4642      	mov	r2, r8
 8010642:	19a9      	adds	r1, r5, r6
 8010644:	f00a f865 	bl	801a712 <memcpy>
 8010648:	e7a1      	b.n	801058e <ucdr_serialize_int32_t+0x72>
 801064a:	bf00      	nop

0801064c <ucdr_deserialize_int32_t>:
 801064c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010650:	460d      	mov	r5, r1
 8010652:	2104      	movs	r1, #4
 8010654:	4604      	mov	r4, r0
 8010656:	f000 fa89 	bl	8010b6c <ucdr_buffer_alignment>
 801065a:	4601      	mov	r1, r0
 801065c:	4620      	mov	r0, r4
 801065e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010662:	f000 fac7 	bl	8010bf4 <ucdr_advance_buffer>
 8010666:	2104      	movs	r1, #4
 8010668:	4620      	mov	r0, r4
 801066a:	f000 fa1f 	bl	8010aac <ucdr_check_buffer_available_for>
 801066e:	2800      	cmp	r0, #0
 8010670:	d138      	bne.n	80106e4 <ucdr_deserialize_int32_t+0x98>
 8010672:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8010676:	42b7      	cmp	r7, r6
 8010678:	d92f      	bls.n	80106da <ucdr_deserialize_int32_t+0x8e>
 801067a:	6923      	ldr	r3, [r4, #16]
 801067c:	60a7      	str	r7, [r4, #8]
 801067e:	1bbf      	subs	r7, r7, r6
 8010680:	443b      	add	r3, r7
 8010682:	f1c7 0904 	rsb	r9, r7, #4
 8010686:	6123      	str	r3, [r4, #16]
 8010688:	4649      	mov	r1, r9
 801068a:	4620      	mov	r0, r4
 801068c:	f000 fa1a 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 8010690:	2800      	cmp	r0, #0
 8010692:	d046      	beq.n	8010722 <ucdr_deserialize_int32_t+0xd6>
 8010694:	7d23      	ldrb	r3, [r4, #20]
 8010696:	2b01      	cmp	r3, #1
 8010698:	d05c      	beq.n	8010754 <ucdr_deserialize_int32_t+0x108>
 801069a:	78f3      	ldrb	r3, [r6, #3]
 801069c:	702b      	strb	r3, [r5, #0]
 801069e:	2f00      	cmp	r7, #0
 80106a0:	d04c      	beq.n	801073c <ucdr_deserialize_int32_t+0xf0>
 80106a2:	78b3      	ldrb	r3, [r6, #2]
 80106a4:	706b      	strb	r3, [r5, #1]
 80106a6:	2f01      	cmp	r7, #1
 80106a8:	f105 0302 	add.w	r3, r5, #2
 80106ac:	d04a      	beq.n	8010744 <ucdr_deserialize_int32_t+0xf8>
 80106ae:	7873      	ldrb	r3, [r6, #1]
 80106b0:	70ab      	strb	r3, [r5, #2]
 80106b2:	2f02      	cmp	r7, #2
 80106b4:	f105 0303 	add.w	r3, r5, #3
 80106b8:	d048      	beq.n	801074c <ucdr_deserialize_int32_t+0x100>
 80106ba:	7833      	ldrb	r3, [r6, #0]
 80106bc:	70eb      	strb	r3, [r5, #3]
 80106be:	6923      	ldr	r3, [r4, #16]
 80106c0:	68a2      	ldr	r2, [r4, #8]
 80106c2:	7da0      	ldrb	r0, [r4, #22]
 80106c4:	2104      	movs	r1, #4
 80106c6:	3304      	adds	r3, #4
 80106c8:	444a      	add	r2, r9
 80106ca:	1bdb      	subs	r3, r3, r7
 80106cc:	7561      	strb	r1, [r4, #21]
 80106ce:	60a2      	str	r2, [r4, #8]
 80106d0:	6123      	str	r3, [r4, #16]
 80106d2:	f080 0001 	eor.w	r0, r0, #1
 80106d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106da:	2104      	movs	r1, #4
 80106dc:	4620      	mov	r0, r4
 80106de:	f000 f9f1 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80106e2:	b1b0      	cbz	r0, 8010712 <ucdr_deserialize_int32_t+0xc6>
 80106e4:	7d23      	ldrb	r3, [r4, #20]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	68a3      	ldr	r3, [r4, #8]
 80106ea:	d017      	beq.n	801071c <ucdr_deserialize_int32_t+0xd0>
 80106ec:	78db      	ldrb	r3, [r3, #3]
 80106ee:	702b      	strb	r3, [r5, #0]
 80106f0:	68a3      	ldr	r3, [r4, #8]
 80106f2:	789b      	ldrb	r3, [r3, #2]
 80106f4:	706b      	strb	r3, [r5, #1]
 80106f6:	68a3      	ldr	r3, [r4, #8]
 80106f8:	785b      	ldrb	r3, [r3, #1]
 80106fa:	70ab      	strb	r3, [r5, #2]
 80106fc:	68a3      	ldr	r3, [r4, #8]
 80106fe:	781b      	ldrb	r3, [r3, #0]
 8010700:	70eb      	strb	r3, [r5, #3]
 8010702:	68a2      	ldr	r2, [r4, #8]
 8010704:	6923      	ldr	r3, [r4, #16]
 8010706:	3204      	adds	r2, #4
 8010708:	3304      	adds	r3, #4
 801070a:	2104      	movs	r1, #4
 801070c:	60a2      	str	r2, [r4, #8]
 801070e:	6123      	str	r3, [r4, #16]
 8010710:	7561      	strb	r1, [r4, #21]
 8010712:	7da0      	ldrb	r0, [r4, #22]
 8010714:	f080 0001 	eor.w	r0, r0, #1
 8010718:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	602b      	str	r3, [r5, #0]
 8010720:	e7ef      	b.n	8010702 <ucdr_deserialize_int32_t+0xb6>
 8010722:	68a2      	ldr	r2, [r4, #8]
 8010724:	6923      	ldr	r3, [r4, #16]
 8010726:	7da0      	ldrb	r0, [r4, #22]
 8010728:	f884 8015 	strb.w	r8, [r4, #21]
 801072c:	1bd2      	subs	r2, r2, r7
 801072e:	1bdb      	subs	r3, r3, r7
 8010730:	60a2      	str	r2, [r4, #8]
 8010732:	6123      	str	r3, [r4, #16]
 8010734:	f080 0001 	eor.w	r0, r0, #1
 8010738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801073c:	68a3      	ldr	r3, [r4, #8]
 801073e:	789b      	ldrb	r3, [r3, #2]
 8010740:	706b      	strb	r3, [r5, #1]
 8010742:	1cab      	adds	r3, r5, #2
 8010744:	68a2      	ldr	r2, [r4, #8]
 8010746:	7852      	ldrb	r2, [r2, #1]
 8010748:	f803 2b01 	strb.w	r2, [r3], #1
 801074c:	68a2      	ldr	r2, [r4, #8]
 801074e:	7812      	ldrb	r2, [r2, #0]
 8010750:	701a      	strb	r2, [r3, #0]
 8010752:	e7b4      	b.n	80106be <ucdr_deserialize_int32_t+0x72>
 8010754:	4631      	mov	r1, r6
 8010756:	463a      	mov	r2, r7
 8010758:	4628      	mov	r0, r5
 801075a:	f009 ffda 	bl	801a712 <memcpy>
 801075e:	68a1      	ldr	r1, [r4, #8]
 8010760:	464a      	mov	r2, r9
 8010762:	19e8      	adds	r0, r5, r7
 8010764:	f009 ffd5 	bl	801a712 <memcpy>
 8010768:	e7a9      	b.n	80106be <ucdr_deserialize_int32_t+0x72>
 801076a:	bf00      	nop

0801076c <ucdr_serialize_endian_double>:
 801076c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010770:	460e      	mov	r6, r1
 8010772:	b083      	sub	sp, #12
 8010774:	2108      	movs	r1, #8
 8010776:	4604      	mov	r4, r0
 8010778:	ed8d 0b00 	vstr	d0, [sp]
 801077c:	f000 f9f6 	bl	8010b6c <ucdr_buffer_alignment>
 8010780:	4601      	mov	r1, r0
 8010782:	4620      	mov	r0, r4
 8010784:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010788:	f000 fa34 	bl	8010bf4 <ucdr_advance_buffer>
 801078c:	2108      	movs	r1, #8
 801078e:	4620      	mov	r0, r4
 8010790:	f000 f98c 	bl	8010aac <ucdr_check_buffer_available_for>
 8010794:	2800      	cmp	r0, #0
 8010796:	d14d      	bne.n	8010834 <ucdr_serialize_endian_double+0xc8>
 8010798:	e9d4 5701 	ldrd	r5, r7, [r4, #4]
 801079c:	42bd      	cmp	r5, r7
 801079e:	d944      	bls.n	801082a <ucdr_serialize_endian_double+0xbe>
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	60a5      	str	r5, [r4, #8]
 80107a4:	1bed      	subs	r5, r5, r7
 80107a6:	442b      	add	r3, r5
 80107a8:	f1c5 0908 	rsb	r9, r5, #8
 80107ac:	6123      	str	r3, [r4, #16]
 80107ae:	4649      	mov	r1, r9
 80107b0:	4620      	mov	r0, r4
 80107b2:	f000 f987 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80107b6:	2800      	cmp	r0, #0
 80107b8:	d072      	beq.n	80108a0 <ucdr_serialize_endian_double+0x134>
 80107ba:	2e01      	cmp	r6, #1
 80107bc:	f000 809b 	beq.w	80108f6 <ucdr_serialize_endian_double+0x18a>
 80107c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80107c4:	703b      	strb	r3, [r7, #0]
 80107c6:	2d00      	cmp	r5, #0
 80107c8:	d078      	beq.n	80108bc <ucdr_serialize_endian_double+0x150>
 80107ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80107ce:	707b      	strb	r3, [r7, #1]
 80107d0:	2d01      	cmp	r5, #1
 80107d2:	d077      	beq.n	80108c4 <ucdr_serialize_endian_double+0x158>
 80107d4:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80107d8:	70bb      	strb	r3, [r7, #2]
 80107da:	2d02      	cmp	r5, #2
 80107dc:	d076      	beq.n	80108cc <ucdr_serialize_endian_double+0x160>
 80107de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80107e2:	70fb      	strb	r3, [r7, #3]
 80107e4:	2d03      	cmp	r5, #3
 80107e6:	d075      	beq.n	80108d4 <ucdr_serialize_endian_double+0x168>
 80107e8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80107ec:	713b      	strb	r3, [r7, #4]
 80107ee:	2d04      	cmp	r5, #4
 80107f0:	d074      	beq.n	80108dc <ucdr_serialize_endian_double+0x170>
 80107f2:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80107f6:	717b      	strb	r3, [r7, #5]
 80107f8:	2d05      	cmp	r5, #5
 80107fa:	d073      	beq.n	80108e4 <ucdr_serialize_endian_double+0x178>
 80107fc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8010800:	71bb      	strb	r3, [r7, #6]
 8010802:	2d06      	cmp	r5, #6
 8010804:	d072      	beq.n	80108ec <ucdr_serialize_endian_double+0x180>
 8010806:	f89d 3000 	ldrb.w	r3, [sp]
 801080a:	71fb      	strb	r3, [r7, #7]
 801080c:	6923      	ldr	r3, [r4, #16]
 801080e:	68a2      	ldr	r2, [r4, #8]
 8010810:	7da0      	ldrb	r0, [r4, #22]
 8010812:	3308      	adds	r3, #8
 8010814:	1b5d      	subs	r5, r3, r5
 8010816:	444a      	add	r2, r9
 8010818:	2308      	movs	r3, #8
 801081a:	f080 0001 	eor.w	r0, r0, #1
 801081e:	60a2      	str	r2, [r4, #8]
 8010820:	6125      	str	r5, [r4, #16]
 8010822:	7563      	strb	r3, [r4, #21]
 8010824:	b003      	add	sp, #12
 8010826:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801082a:	2108      	movs	r1, #8
 801082c:	4620      	mov	r0, r4
 801082e:	f000 f949 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 8010832:	b348      	cbz	r0, 8010888 <ucdr_serialize_endian_double+0x11c>
 8010834:	2e01      	cmp	r6, #1
 8010836:	d02d      	beq.n	8010894 <ucdr_serialize_endian_double+0x128>
 8010838:	68a3      	ldr	r3, [r4, #8]
 801083a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 801083e:	701a      	strb	r2, [r3, #0]
 8010840:	68a3      	ldr	r3, [r4, #8]
 8010842:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010846:	705a      	strb	r2, [r3, #1]
 8010848:	68a3      	ldr	r3, [r4, #8]
 801084a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 801084e:	709a      	strb	r2, [r3, #2]
 8010850:	68a3      	ldr	r3, [r4, #8]
 8010852:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8010856:	70da      	strb	r2, [r3, #3]
 8010858:	68a3      	ldr	r3, [r4, #8]
 801085a:	f89d 2003 	ldrb.w	r2, [sp, #3]
 801085e:	711a      	strb	r2, [r3, #4]
 8010860:	68a3      	ldr	r3, [r4, #8]
 8010862:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8010866:	715a      	strb	r2, [r3, #5]
 8010868:	68a3      	ldr	r3, [r4, #8]
 801086a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 801086e:	719a      	strb	r2, [r3, #6]
 8010870:	68a3      	ldr	r3, [r4, #8]
 8010872:	f89d 2000 	ldrb.w	r2, [sp]
 8010876:	71da      	strb	r2, [r3, #7]
 8010878:	68a2      	ldr	r2, [r4, #8]
 801087a:	6923      	ldr	r3, [r4, #16]
 801087c:	3208      	adds	r2, #8
 801087e:	3308      	adds	r3, #8
 8010880:	2108      	movs	r1, #8
 8010882:	60a2      	str	r2, [r4, #8]
 8010884:	6123      	str	r3, [r4, #16]
 8010886:	7561      	strb	r1, [r4, #21]
 8010888:	7da0      	ldrb	r0, [r4, #22]
 801088a:	f080 0001 	eor.w	r0, r0, #1
 801088e:	b003      	add	sp, #12
 8010890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010894:	466b      	mov	r3, sp
 8010896:	cb03      	ldmia	r3!, {r0, r1}
 8010898:	68a3      	ldr	r3, [r4, #8]
 801089a:	6018      	str	r0, [r3, #0]
 801089c:	6059      	str	r1, [r3, #4]
 801089e:	e7eb      	b.n	8010878 <ucdr_serialize_endian_double+0x10c>
 80108a0:	68a2      	ldr	r2, [r4, #8]
 80108a2:	6923      	ldr	r3, [r4, #16]
 80108a4:	7da0      	ldrb	r0, [r4, #22]
 80108a6:	f884 8015 	strb.w	r8, [r4, #21]
 80108aa:	1b52      	subs	r2, r2, r5
 80108ac:	1b5b      	subs	r3, r3, r5
 80108ae:	f080 0001 	eor.w	r0, r0, #1
 80108b2:	60a2      	str	r2, [r4, #8]
 80108b4:	6123      	str	r3, [r4, #16]
 80108b6:	b003      	add	sp, #12
 80108b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80108bc:	68a3      	ldr	r3, [r4, #8]
 80108be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80108c2:	701a      	strb	r2, [r3, #0]
 80108c4:	68a3      	ldr	r3, [r4, #8]
 80108c6:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80108ca:	701a      	strb	r2, [r3, #0]
 80108cc:	68a3      	ldr	r3, [r4, #8]
 80108ce:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80108d2:	701a      	strb	r2, [r3, #0]
 80108d4:	68a3      	ldr	r3, [r4, #8]
 80108d6:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80108da:	701a      	strb	r2, [r3, #0]
 80108dc:	68a3      	ldr	r3, [r4, #8]
 80108de:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80108e2:	701a      	strb	r2, [r3, #0]
 80108e4:	68a3      	ldr	r3, [r4, #8]
 80108e6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80108ea:	701a      	strb	r2, [r3, #0]
 80108ec:	68a3      	ldr	r3, [r4, #8]
 80108ee:	f89d 2000 	ldrb.w	r2, [sp]
 80108f2:	701a      	strb	r2, [r3, #0]
 80108f4:	e78a      	b.n	801080c <ucdr_serialize_endian_double+0xa0>
 80108f6:	466e      	mov	r6, sp
 80108f8:	4631      	mov	r1, r6
 80108fa:	462a      	mov	r2, r5
 80108fc:	4638      	mov	r0, r7
 80108fe:	f009 ff08 	bl	801a712 <memcpy>
 8010902:	68a0      	ldr	r0, [r4, #8]
 8010904:	464a      	mov	r2, r9
 8010906:	1971      	adds	r1, r6, r5
 8010908:	f009 ff03 	bl	801a712 <memcpy>
 801090c:	e77e      	b.n	801080c <ucdr_serialize_endian_double+0xa0>
 801090e:	bf00      	nop

08010910 <ucdr_deserialize_endian_double>:
 8010910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010914:	460f      	mov	r7, r1
 8010916:	2108      	movs	r1, #8
 8010918:	4604      	mov	r4, r0
 801091a:	4615      	mov	r5, r2
 801091c:	f000 f926 	bl	8010b6c <ucdr_buffer_alignment>
 8010920:	4601      	mov	r1, r0
 8010922:	4620      	mov	r0, r4
 8010924:	f894 9015 	ldrb.w	r9, [r4, #21]
 8010928:	f000 f964 	bl	8010bf4 <ucdr_advance_buffer>
 801092c:	2108      	movs	r1, #8
 801092e:	4620      	mov	r0, r4
 8010930:	f000 f8bc 	bl	8010aac <ucdr_check_buffer_available_for>
 8010934:	2800      	cmp	r0, #0
 8010936:	d159      	bne.n	80109ec <ucdr_deserialize_endian_double+0xdc>
 8010938:	e9d4 6801 	ldrd	r6, r8, [r4, #4]
 801093c:	4546      	cmp	r6, r8
 801093e:	d950      	bls.n	80109e2 <ucdr_deserialize_endian_double+0xd2>
 8010940:	6923      	ldr	r3, [r4, #16]
 8010942:	60a6      	str	r6, [r4, #8]
 8010944:	eba6 0608 	sub.w	r6, r6, r8
 8010948:	4433      	add	r3, r6
 801094a:	f1c6 0a08 	rsb	sl, r6, #8
 801094e:	6123      	str	r3, [r4, #16]
 8010950:	4651      	mov	r1, sl
 8010952:	4620      	mov	r0, r4
 8010954:	f000 f8b6 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 8010958:	2800      	cmp	r0, #0
 801095a:	d073      	beq.n	8010a44 <ucdr_deserialize_endian_double+0x134>
 801095c:	2f01      	cmp	r7, #1
 801095e:	f000 809a 	beq.w	8010a96 <ucdr_deserialize_endian_double+0x186>
 8010962:	f898 3007 	ldrb.w	r3, [r8, #7]
 8010966:	702b      	strb	r3, [r5, #0]
 8010968:	2e00      	cmp	r6, #0
 801096a:	d078      	beq.n	8010a5e <ucdr_deserialize_endian_double+0x14e>
 801096c:	f898 3006 	ldrb.w	r3, [r8, #6]
 8010970:	706b      	strb	r3, [r5, #1]
 8010972:	2e01      	cmp	r6, #1
 8010974:	f105 0302 	add.w	r3, r5, #2
 8010978:	d075      	beq.n	8010a66 <ucdr_deserialize_endian_double+0x156>
 801097a:	f898 3005 	ldrb.w	r3, [r8, #5]
 801097e:	70ab      	strb	r3, [r5, #2]
 8010980:	2e02      	cmp	r6, #2
 8010982:	f105 0303 	add.w	r3, r5, #3
 8010986:	d072      	beq.n	8010a6e <ucdr_deserialize_endian_double+0x15e>
 8010988:	f898 3004 	ldrb.w	r3, [r8, #4]
 801098c:	70eb      	strb	r3, [r5, #3]
 801098e:	2e03      	cmp	r6, #3
 8010990:	f105 0304 	add.w	r3, r5, #4
 8010994:	d06f      	beq.n	8010a76 <ucdr_deserialize_endian_double+0x166>
 8010996:	f898 3003 	ldrb.w	r3, [r8, #3]
 801099a:	712b      	strb	r3, [r5, #4]
 801099c:	2e04      	cmp	r6, #4
 801099e:	f105 0305 	add.w	r3, r5, #5
 80109a2:	d06c      	beq.n	8010a7e <ucdr_deserialize_endian_double+0x16e>
 80109a4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80109a8:	716b      	strb	r3, [r5, #5]
 80109aa:	2e05      	cmp	r6, #5
 80109ac:	f105 0306 	add.w	r3, r5, #6
 80109b0:	d069      	beq.n	8010a86 <ucdr_deserialize_endian_double+0x176>
 80109b2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80109b6:	71ab      	strb	r3, [r5, #6]
 80109b8:	2e06      	cmp	r6, #6
 80109ba:	f105 0307 	add.w	r3, r5, #7
 80109be:	d066      	beq.n	8010a8e <ucdr_deserialize_endian_double+0x17e>
 80109c0:	f898 3000 	ldrb.w	r3, [r8]
 80109c4:	71eb      	strb	r3, [r5, #7]
 80109c6:	6923      	ldr	r3, [r4, #16]
 80109c8:	68a2      	ldr	r2, [r4, #8]
 80109ca:	7da0      	ldrb	r0, [r4, #22]
 80109cc:	3308      	adds	r3, #8
 80109ce:	1b9e      	subs	r6, r3, r6
 80109d0:	2308      	movs	r3, #8
 80109d2:	4452      	add	r2, sl
 80109d4:	7563      	strb	r3, [r4, #21]
 80109d6:	60a2      	str	r2, [r4, #8]
 80109d8:	6126      	str	r6, [r4, #16]
 80109da:	f080 0001 	eor.w	r0, r0, #1
 80109de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109e2:	2108      	movs	r1, #8
 80109e4:	4620      	mov	r0, r4
 80109e6:	f000 f86d 	bl	8010ac4 <ucdr_check_final_buffer_behavior>
 80109ea:	b308      	cbz	r0, 8010a30 <ucdr_deserialize_endian_double+0x120>
 80109ec:	2f01      	cmp	r7, #1
 80109ee:	68a3      	ldr	r3, [r4, #8]
 80109f0:	d023      	beq.n	8010a3a <ucdr_deserialize_endian_double+0x12a>
 80109f2:	79db      	ldrb	r3, [r3, #7]
 80109f4:	702b      	strb	r3, [r5, #0]
 80109f6:	68a3      	ldr	r3, [r4, #8]
 80109f8:	799b      	ldrb	r3, [r3, #6]
 80109fa:	706b      	strb	r3, [r5, #1]
 80109fc:	68a3      	ldr	r3, [r4, #8]
 80109fe:	795b      	ldrb	r3, [r3, #5]
 8010a00:	70ab      	strb	r3, [r5, #2]
 8010a02:	68a3      	ldr	r3, [r4, #8]
 8010a04:	791b      	ldrb	r3, [r3, #4]
 8010a06:	70eb      	strb	r3, [r5, #3]
 8010a08:	68a3      	ldr	r3, [r4, #8]
 8010a0a:	78db      	ldrb	r3, [r3, #3]
 8010a0c:	712b      	strb	r3, [r5, #4]
 8010a0e:	68a3      	ldr	r3, [r4, #8]
 8010a10:	789b      	ldrb	r3, [r3, #2]
 8010a12:	716b      	strb	r3, [r5, #5]
 8010a14:	68a3      	ldr	r3, [r4, #8]
 8010a16:	785b      	ldrb	r3, [r3, #1]
 8010a18:	71ab      	strb	r3, [r5, #6]
 8010a1a:	68a3      	ldr	r3, [r4, #8]
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	71eb      	strb	r3, [r5, #7]
 8010a20:	68a2      	ldr	r2, [r4, #8]
 8010a22:	6923      	ldr	r3, [r4, #16]
 8010a24:	3208      	adds	r2, #8
 8010a26:	3308      	adds	r3, #8
 8010a28:	2108      	movs	r1, #8
 8010a2a:	60a2      	str	r2, [r4, #8]
 8010a2c:	6123      	str	r3, [r4, #16]
 8010a2e:	7561      	strb	r1, [r4, #21]
 8010a30:	7da0      	ldrb	r0, [r4, #22]
 8010a32:	f080 0001 	eor.w	r0, r0, #1
 8010a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a3a:	681a      	ldr	r2, [r3, #0]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	606b      	str	r3, [r5, #4]
 8010a40:	602a      	str	r2, [r5, #0]
 8010a42:	e7ed      	b.n	8010a20 <ucdr_deserialize_endian_double+0x110>
 8010a44:	68a2      	ldr	r2, [r4, #8]
 8010a46:	6923      	ldr	r3, [r4, #16]
 8010a48:	7da0      	ldrb	r0, [r4, #22]
 8010a4a:	f884 9015 	strb.w	r9, [r4, #21]
 8010a4e:	1b92      	subs	r2, r2, r6
 8010a50:	1b9b      	subs	r3, r3, r6
 8010a52:	60a2      	str	r2, [r4, #8]
 8010a54:	6123      	str	r3, [r4, #16]
 8010a56:	f080 0001 	eor.w	r0, r0, #1
 8010a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a5e:	68a3      	ldr	r3, [r4, #8]
 8010a60:	799b      	ldrb	r3, [r3, #6]
 8010a62:	706b      	strb	r3, [r5, #1]
 8010a64:	1cab      	adds	r3, r5, #2
 8010a66:	68a2      	ldr	r2, [r4, #8]
 8010a68:	7952      	ldrb	r2, [r2, #5]
 8010a6a:	f803 2b01 	strb.w	r2, [r3], #1
 8010a6e:	68a2      	ldr	r2, [r4, #8]
 8010a70:	7912      	ldrb	r2, [r2, #4]
 8010a72:	f803 2b01 	strb.w	r2, [r3], #1
 8010a76:	68a2      	ldr	r2, [r4, #8]
 8010a78:	78d2      	ldrb	r2, [r2, #3]
 8010a7a:	f803 2b01 	strb.w	r2, [r3], #1
 8010a7e:	68a2      	ldr	r2, [r4, #8]
 8010a80:	7892      	ldrb	r2, [r2, #2]
 8010a82:	f803 2b01 	strb.w	r2, [r3], #1
 8010a86:	68a2      	ldr	r2, [r4, #8]
 8010a88:	7852      	ldrb	r2, [r2, #1]
 8010a8a:	f803 2b01 	strb.w	r2, [r3], #1
 8010a8e:	68a2      	ldr	r2, [r4, #8]
 8010a90:	7812      	ldrb	r2, [r2, #0]
 8010a92:	701a      	strb	r2, [r3, #0]
 8010a94:	e797      	b.n	80109c6 <ucdr_deserialize_endian_double+0xb6>
 8010a96:	4641      	mov	r1, r8
 8010a98:	4632      	mov	r2, r6
 8010a9a:	4628      	mov	r0, r5
 8010a9c:	f009 fe39 	bl	801a712 <memcpy>
 8010aa0:	68a1      	ldr	r1, [r4, #8]
 8010aa2:	4652      	mov	r2, sl
 8010aa4:	19a8      	adds	r0, r5, r6
 8010aa6:	f009 fe34 	bl	801a712 <memcpy>
 8010aaa:	e78c      	b.n	80109c6 <ucdr_deserialize_endian_double+0xb6>

08010aac <ucdr_check_buffer_available_for>:
 8010aac:	7d83      	ldrb	r3, [r0, #22]
 8010aae:	b93b      	cbnz	r3, 8010ac0 <ucdr_check_buffer_available_for+0x14>
 8010ab0:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8010ab4:	4419      	add	r1, r3
 8010ab6:	4288      	cmp	r0, r1
 8010ab8:	bf34      	ite	cc
 8010aba:	2000      	movcc	r0, #0
 8010abc:	2001      	movcs	r0, #1
 8010abe:	4770      	bx	lr
 8010ac0:	2000      	movs	r0, #0
 8010ac2:	4770      	bx	lr

08010ac4 <ucdr_check_final_buffer_behavior>:
 8010ac4:	7d83      	ldrb	r3, [r0, #22]
 8010ac6:	b943      	cbnz	r3, 8010ada <ucdr_check_final_buffer_behavior+0x16>
 8010ac8:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8010acc:	4291      	cmp	r1, r2
 8010ace:	b510      	push	{r4, lr}
 8010ad0:	4604      	mov	r4, r0
 8010ad2:	d205      	bcs.n	8010ae0 <ucdr_check_final_buffer_behavior+0x1c>
 8010ad4:	2301      	movs	r3, #1
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	bd10      	pop	{r4, pc}
 8010ada:	2300      	movs	r3, #0
 8010adc:	4618      	mov	r0, r3
 8010ade:	4770      	bx	lr
 8010ae0:	6982      	ldr	r2, [r0, #24]
 8010ae2:	b13a      	cbz	r2, 8010af4 <ucdr_check_final_buffer_behavior+0x30>
 8010ae4:	69c1      	ldr	r1, [r0, #28]
 8010ae6:	4790      	blx	r2
 8010ae8:	f080 0301 	eor.w	r3, r0, #1
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	75a0      	strb	r0, [r4, #22]
 8010af0:	4618      	mov	r0, r3
 8010af2:	bd10      	pop	{r4, pc}
 8010af4:	2001      	movs	r0, #1
 8010af6:	75a0      	strb	r0, [r4, #22]
 8010af8:	e7fa      	b.n	8010af0 <ucdr_check_final_buffer_behavior+0x2c>
 8010afa:	bf00      	nop

08010afc <ucdr_set_on_full_buffer_callback>:
 8010afc:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop

08010b04 <ucdr_init_buffer_origin_offset_endian>:
 8010b04:	b410      	push	{r4}
 8010b06:	9c01      	ldr	r4, [sp, #4]
 8010b08:	6001      	str	r1, [r0, #0]
 8010b0a:	440a      	add	r2, r1
 8010b0c:	6042      	str	r2, [r0, #4]
 8010b0e:	190a      	adds	r2, r1, r4
 8010b10:	441c      	add	r4, r3
 8010b12:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8010b16:	6082      	str	r2, [r0, #8]
 8010b18:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8010b1c:	7503      	strb	r3, [r0, #20]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8010b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b28:	7542      	strb	r2, [r0, #21]
 8010b2a:	7582      	strb	r2, [r0, #22]
 8010b2c:	4770      	bx	lr
 8010b2e:	bf00      	nop

08010b30 <ucdr_init_buffer_origin_offset>:
 8010b30:	b510      	push	{r4, lr}
 8010b32:	b082      	sub	sp, #8
 8010b34:	9c04      	ldr	r4, [sp, #16]
 8010b36:	9400      	str	r4, [sp, #0]
 8010b38:	2401      	movs	r4, #1
 8010b3a:	9401      	str	r4, [sp, #4]
 8010b3c:	f7ff ffe2 	bl	8010b04 <ucdr_init_buffer_origin_offset_endian>
 8010b40:	b002      	add	sp, #8
 8010b42:	bd10      	pop	{r4, pc}

08010b44 <ucdr_init_buffer_origin>:
 8010b44:	b510      	push	{r4, lr}
 8010b46:	b082      	sub	sp, #8
 8010b48:	2400      	movs	r4, #0
 8010b4a:	9400      	str	r4, [sp, #0]
 8010b4c:	f7ff fff0 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8010b50:	b002      	add	sp, #8
 8010b52:	bd10      	pop	{r4, pc}

08010b54 <ucdr_init_buffer>:
 8010b54:	2300      	movs	r3, #0
 8010b56:	f7ff bff5 	b.w	8010b44 <ucdr_init_buffer_origin>
 8010b5a:	bf00      	nop

08010b5c <ucdr_alignment>:
 8010b5c:	fbb0 f3f1 	udiv	r3, r0, r1
 8010b60:	fb03 0011 	mls	r0, r3, r1, r0
 8010b64:	1a08      	subs	r0, r1, r0
 8010b66:	3901      	subs	r1, #1
 8010b68:	4008      	ands	r0, r1
 8010b6a:	4770      	bx	lr

08010b6c <ucdr_buffer_alignment>:
 8010b6c:	7d43      	ldrb	r3, [r0, #21]
 8010b6e:	428b      	cmp	r3, r1
 8010b70:	d208      	bcs.n	8010b84 <ucdr_buffer_alignment+0x18>
 8010b72:	6900      	ldr	r0, [r0, #16]
 8010b74:	fbb0 f3f1 	udiv	r3, r0, r1
 8010b78:	fb01 0013 	mls	r0, r1, r3, r0
 8010b7c:	1a08      	subs	r0, r1, r0
 8010b7e:	3901      	subs	r1, #1
 8010b80:	4008      	ands	r0, r1
 8010b82:	4770      	bx	lr
 8010b84:	2000      	movs	r0, #0
 8010b86:	4770      	bx	lr

08010b88 <ucdr_align_to>:
 8010b88:	b538      	push	{r3, r4, r5, lr}
 8010b8a:	4604      	mov	r4, r0
 8010b8c:	460d      	mov	r5, r1
 8010b8e:	f7ff ffed 	bl	8010b6c <ucdr_buffer_alignment>
 8010b92:	68a3      	ldr	r3, [r4, #8]
 8010b94:	6921      	ldr	r1, [r4, #16]
 8010b96:	7565      	strb	r5, [r4, #21]
 8010b98:	181a      	adds	r2, r3, r0
 8010b9a:	6863      	ldr	r3, [r4, #4]
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	4408      	add	r0, r1
 8010ba0:	bf28      	it	cs
 8010ba2:	4613      	movcs	r3, r2
 8010ba4:	6120      	str	r0, [r4, #16]
 8010ba6:	60a3      	str	r3, [r4, #8]
 8010ba8:	bd38      	pop	{r3, r4, r5, pc}
 8010baa:	bf00      	nop

08010bac <ucdr_buffer_length>:
 8010bac:	6882      	ldr	r2, [r0, #8]
 8010bae:	6800      	ldr	r0, [r0, #0]
 8010bb0:	1a10      	subs	r0, r2, r0
 8010bb2:	4770      	bx	lr

08010bb4 <ucdr_buffer_remaining>:
 8010bb4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8010bb8:	1a10      	subs	r0, r2, r0
 8010bba:	4770      	bx	lr

08010bbc <ucdr_check_final_buffer_behavior_array>:
 8010bbc:	b538      	push	{r3, r4, r5, lr}
 8010bbe:	7d83      	ldrb	r3, [r0, #22]
 8010bc0:	b963      	cbnz	r3, 8010bdc <ucdr_check_final_buffer_behavior_array+0x20>
 8010bc2:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010bc6:	429a      	cmp	r2, r3
 8010bc8:	4604      	mov	r4, r0
 8010bca:	460d      	mov	r5, r1
 8010bcc:	d308      	bcc.n	8010be0 <ucdr_check_final_buffer_behavior_array+0x24>
 8010bce:	b139      	cbz	r1, 8010be0 <ucdr_check_final_buffer_behavior_array+0x24>
 8010bd0:	6983      	ldr	r3, [r0, #24]
 8010bd2:	b163      	cbz	r3, 8010bee <ucdr_check_final_buffer_behavior_array+0x32>
 8010bd4:	69c1      	ldr	r1, [r0, #28]
 8010bd6:	4798      	blx	r3
 8010bd8:	75a0      	strb	r0, [r4, #22]
 8010bda:	b108      	cbz	r0, 8010be0 <ucdr_check_final_buffer_behavior_array+0x24>
 8010bdc:	2000      	movs	r0, #0
 8010bde:	bd38      	pop	{r3, r4, r5, pc}
 8010be0:	4620      	mov	r0, r4
 8010be2:	f7ff ffe7 	bl	8010bb4 <ucdr_buffer_remaining>
 8010be6:	42a8      	cmp	r0, r5
 8010be8:	bf28      	it	cs
 8010bea:	4628      	movcs	r0, r5
 8010bec:	bd38      	pop	{r3, r4, r5, pc}
 8010bee:	2301      	movs	r3, #1
 8010bf0:	7583      	strb	r3, [r0, #22]
 8010bf2:	e7f3      	b.n	8010bdc <ucdr_check_final_buffer_behavior_array+0x20>

08010bf4 <ucdr_advance_buffer>:
 8010bf4:	b538      	push	{r3, r4, r5, lr}
 8010bf6:	4604      	mov	r4, r0
 8010bf8:	460d      	mov	r5, r1
 8010bfa:	f7ff ff57 	bl	8010aac <ucdr_check_buffer_available_for>
 8010bfe:	b178      	cbz	r0, 8010c20 <ucdr_advance_buffer+0x2c>
 8010c00:	6923      	ldr	r3, [r4, #16]
 8010c02:	68a2      	ldr	r2, [r4, #8]
 8010c04:	442b      	add	r3, r5
 8010c06:	6123      	str	r3, [r4, #16]
 8010c08:	2301      	movs	r3, #1
 8010c0a:	442a      	add	r2, r5
 8010c0c:	7563      	strb	r3, [r4, #21]
 8010c0e:	60a2      	str	r2, [r4, #8]
 8010c10:	bd38      	pop	{r3, r4, r5, pc}
 8010c12:	68a2      	ldr	r2, [r4, #8]
 8010c14:	6923      	ldr	r3, [r4, #16]
 8010c16:	4402      	add	r2, r0
 8010c18:	4403      	add	r3, r0
 8010c1a:	1a2d      	subs	r5, r5, r0
 8010c1c:	60a2      	str	r2, [r4, #8]
 8010c1e:	6123      	str	r3, [r4, #16]
 8010c20:	4629      	mov	r1, r5
 8010c22:	2201      	movs	r2, #1
 8010c24:	4620      	mov	r0, r4
 8010c26:	f7ff ffc9 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 8010c2a:	2800      	cmp	r0, #0
 8010c2c:	d1f1      	bne.n	8010c12 <ucdr_advance_buffer+0x1e>
 8010c2e:	2301      	movs	r3, #1
 8010c30:	7563      	strb	r3, [r4, #21]
 8010c32:	bd38      	pop	{r3, r4, r5, pc}

08010c34 <ucdr_serialize_sequence_char>:
 8010c34:	b570      	push	{r4, r5, r6, lr}
 8010c36:	4615      	mov	r5, r2
 8010c38:	460e      	mov	r6, r1
 8010c3a:	7d01      	ldrb	r1, [r0, #20]
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	f7ff f8eb 	bl	800fe18 <ucdr_serialize_endian_uint32_t>
 8010c42:	b90d      	cbnz	r5, 8010c48 <ucdr_serialize_sequence_char+0x14>
 8010c44:	2001      	movs	r0, #1
 8010c46:	bd70      	pop	{r4, r5, r6, pc}
 8010c48:	7d21      	ldrb	r1, [r4, #20]
 8010c4a:	462b      	mov	r3, r5
 8010c4c:	4632      	mov	r2, r6
 8010c4e:	4620      	mov	r0, r4
 8010c50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c54:	f007 bc40 	b.w	80184d8 <ucdr_serialize_endian_array_char>

08010c58 <ucdr_deserialize_sequence_char>:
 8010c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c5c:	461d      	mov	r5, r3
 8010c5e:	4616      	mov	r6, r2
 8010c60:	460f      	mov	r7, r1
 8010c62:	461a      	mov	r2, r3
 8010c64:	7d01      	ldrb	r1, [r0, #20]
 8010c66:	4604      	mov	r4, r0
 8010c68:	f7ff f9fe 	bl	8010068 <ucdr_deserialize_endian_uint32_t>
 8010c6c:	682b      	ldr	r3, [r5, #0]
 8010c6e:	429e      	cmp	r6, r3
 8010c70:	bf3c      	itt	cc
 8010c72:	2201      	movcc	r2, #1
 8010c74:	75a2      	strbcc	r2, [r4, #22]
 8010c76:	b913      	cbnz	r3, 8010c7e <ucdr_deserialize_sequence_char+0x26>
 8010c78:	2001      	movs	r0, #1
 8010c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c7e:	7d21      	ldrb	r1, [r4, #20]
 8010c80:	463a      	mov	r2, r7
 8010c82:	4620      	mov	r0, r4
 8010c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c88:	f007 bc58 	b.w	801853c <ucdr_deserialize_endian_array_char>

08010c8c <ucdr_serialize_sequence_uint8_t>:
 8010c8c:	b570      	push	{r4, r5, r6, lr}
 8010c8e:	4615      	mov	r5, r2
 8010c90:	460e      	mov	r6, r1
 8010c92:	7d01      	ldrb	r1, [r0, #20]
 8010c94:	4604      	mov	r4, r0
 8010c96:	f7ff f8bf 	bl	800fe18 <ucdr_serialize_endian_uint32_t>
 8010c9a:	b90d      	cbnz	r5, 8010ca0 <ucdr_serialize_sequence_uint8_t+0x14>
 8010c9c:	2001      	movs	r0, #1
 8010c9e:	bd70      	pop	{r4, r5, r6, pc}
 8010ca0:	7d21      	ldrb	r1, [r4, #20]
 8010ca2:	462b      	mov	r3, r5
 8010ca4:	4632      	mov	r2, r6
 8010ca6:	4620      	mov	r0, r4
 8010ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cac:	f007 bcaa 	b.w	8018604 <ucdr_serialize_endian_array_uint8_t>

08010cb0 <ucdr_deserialize_sequence_uint8_t>:
 8010cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cb4:	461d      	mov	r5, r3
 8010cb6:	4616      	mov	r6, r2
 8010cb8:	460f      	mov	r7, r1
 8010cba:	461a      	mov	r2, r3
 8010cbc:	7d01      	ldrb	r1, [r0, #20]
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	f7ff f9d2 	bl	8010068 <ucdr_deserialize_endian_uint32_t>
 8010cc4:	682b      	ldr	r3, [r5, #0]
 8010cc6:	429e      	cmp	r6, r3
 8010cc8:	bf3c      	itt	cc
 8010cca:	2201      	movcc	r2, #1
 8010ccc:	75a2      	strbcc	r2, [r4, #22]
 8010cce:	b913      	cbnz	r3, 8010cd6 <ucdr_deserialize_sequence_uint8_t+0x26>
 8010cd0:	2001      	movs	r0, #1
 8010cd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd6:	7d21      	ldrb	r1, [r4, #20]
 8010cd8:	463a      	mov	r2, r7
 8010cda:	4620      	mov	r0, r4
 8010cdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010ce0:	f007 bcf4 	b.w	80186cc <ucdr_deserialize_endian_array_uint8_t>

08010ce4 <ucdr_serialize_sequence_double>:
 8010ce4:	b570      	push	{r4, r5, r6, lr}
 8010ce6:	4615      	mov	r5, r2
 8010ce8:	460e      	mov	r6, r1
 8010cea:	7d01      	ldrb	r1, [r0, #20]
 8010cec:	4604      	mov	r4, r0
 8010cee:	f7ff f893 	bl	800fe18 <ucdr_serialize_endian_uint32_t>
 8010cf2:	b90d      	cbnz	r5, 8010cf8 <ucdr_serialize_sequence_double+0x14>
 8010cf4:	2001      	movs	r0, #1
 8010cf6:	bd70      	pop	{r4, r5, r6, pc}
 8010cf8:	7d21      	ldrb	r1, [r4, #20]
 8010cfa:	462b      	mov	r3, r5
 8010cfc:	4632      	mov	r2, r6
 8010cfe:	4620      	mov	r0, r4
 8010d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d04:	f007 bd14 	b.w	8018730 <ucdr_serialize_endian_array_double>

08010d08 <ucdr_deserialize_sequence_double>:
 8010d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d0c:	461d      	mov	r5, r3
 8010d0e:	4616      	mov	r6, r2
 8010d10:	460f      	mov	r7, r1
 8010d12:	461a      	mov	r2, r3
 8010d14:	7d01      	ldrb	r1, [r0, #20]
 8010d16:	4604      	mov	r4, r0
 8010d18:	f7ff f9a6 	bl	8010068 <ucdr_deserialize_endian_uint32_t>
 8010d1c:	682b      	ldr	r3, [r5, #0]
 8010d1e:	429e      	cmp	r6, r3
 8010d20:	bf3c      	itt	cc
 8010d22:	2201      	movcc	r2, #1
 8010d24:	75a2      	strbcc	r2, [r4, #22]
 8010d26:	b913      	cbnz	r3, 8010d2e <ucdr_deserialize_sequence_double+0x26>
 8010d28:	2001      	movs	r0, #1
 8010d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d2e:	7d21      	ldrb	r1, [r4, #20]
 8010d30:	463a      	mov	r2, r7
 8010d32:	4620      	mov	r0, r4
 8010d34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d38:	f007 bd4e 	b.w	80187d8 <ucdr_deserialize_endian_array_double>

08010d3c <uxr_buffer_delete_entity>:
 8010d3c:	b510      	push	{r4, lr}
 8010d3e:	2300      	movs	r3, #0
 8010d40:	b08e      	sub	sp, #56	@ 0x38
 8010d42:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8010d46:	2303      	movs	r3, #3
 8010d48:	9300      	str	r3, [sp, #0]
 8010d4a:	2204      	movs	r2, #4
 8010d4c:	ab06      	add	r3, sp, #24
 8010d4e:	4604      	mov	r4, r0
 8010d50:	9103      	str	r1, [sp, #12]
 8010d52:	f001 fab7 	bl	80122c4 <uxr_prepare_stream_to_write_submessage>
 8010d56:	b918      	cbnz	r0, 8010d60 <uxr_buffer_delete_entity+0x24>
 8010d58:	4604      	mov	r4, r0
 8010d5a:	4620      	mov	r0, r4
 8010d5c:	b00e      	add	sp, #56	@ 0x38
 8010d5e:	bd10      	pop	{r4, pc}
 8010d60:	9902      	ldr	r1, [sp, #8]
 8010d62:	aa05      	add	r2, sp, #20
 8010d64:	4620      	mov	r0, r4
 8010d66:	f001 fbe3 	bl	8012530 <uxr_init_base_object_request>
 8010d6a:	a905      	add	r1, sp, #20
 8010d6c:	4604      	mov	r4, r0
 8010d6e:	a806      	add	r0, sp, #24
 8010d70:	f003 f9da 	bl	8014128 <uxr_serialize_DELETE_Payload>
 8010d74:	4620      	mov	r0, r4
 8010d76:	b00e      	add	sp, #56	@ 0x38
 8010d78:	bd10      	pop	{r4, pc}
 8010d7a:	bf00      	nop

08010d7c <uxr_common_create_entity>:
 8010d7c:	b510      	push	{r4, lr}
 8010d7e:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8010d82:	b08c      	sub	sp, #48	@ 0x30
 8010d84:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010d88:	f1bc 0f01 	cmp.w	ip, #1
 8010d8c:	bf0c      	ite	eq
 8010d8e:	f003 0201 	andeq.w	r2, r3, #1
 8010d92:	2200      	movne	r2, #0
 8010d94:	330e      	adds	r3, #14
 8010d96:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 8010d9a:	9101      	str	r1, [sp, #4]
 8010d9c:	441a      	add	r2, r3
 8010d9e:	2301      	movs	r3, #1
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	9903      	ldr	r1, [sp, #12]
 8010da4:	ab04      	add	r3, sp, #16
 8010da6:	b292      	uxth	r2, r2
 8010da8:	4604      	mov	r4, r0
 8010daa:	f001 fa8b 	bl	80122c4 <uxr_prepare_stream_to_write_submessage>
 8010dae:	b918      	cbnz	r0, 8010db8 <uxr_common_create_entity+0x3c>
 8010db0:	4604      	mov	r4, r0
 8010db2:	4620      	mov	r0, r4
 8010db4:	b00c      	add	sp, #48	@ 0x30
 8010db6:	bd10      	pop	{r4, pc}
 8010db8:	9902      	ldr	r1, [sp, #8]
 8010dba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8010dbc:	4620      	mov	r0, r4
 8010dbe:	f001 fbb7 	bl	8012530 <uxr_init_base_object_request>
 8010dc2:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8010dc4:	4604      	mov	r4, r0
 8010dc6:	a804      	add	r0, sp, #16
 8010dc8:	f003 f90a 	bl	8013fe0 <uxr_serialize_CREATE_Payload>
 8010dcc:	4620      	mov	r0, r4
 8010dce:	b00c      	add	sp, #48	@ 0x30
 8010dd0:	bd10      	pop	{r4, pc}
 8010dd2:	bf00      	nop

08010dd4 <uxr_buffer_create_participant_bin>:
 8010dd4:	b570      	push	{r4, r5, r6, lr}
 8010dd6:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 8010dda:	ac11      	add	r4, sp, #68	@ 0x44
 8010ddc:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 8010de0:	2303      	movs	r3, #3
 8010de2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8010de6:	7223      	strb	r3, [r4, #8]
 8010de8:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 8010dea:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 8010dee:	2201      	movs	r2, #1
 8010df0:	2100      	movs	r1, #0
 8010df2:	4605      	mov	r5, r0
 8010df4:	7122      	strb	r2, [r4, #4]
 8010df6:	f88d 1014 	strb.w	r1, [sp, #20]
 8010dfa:	b1cb      	cbz	r3, 8010e30 <uxr_buffer_create_participant_bin+0x5c>
 8010dfc:	f88d 201c 	strb.w	r2, [sp, #28]
 8010e00:	9308      	str	r3, [sp, #32]
 8010e02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e06:	a915      	add	r1, sp, #84	@ 0x54
 8010e08:	a809      	add	r0, sp, #36	@ 0x24
 8010e0a:	f7ff fea3 	bl	8010b54 <ucdr_init_buffer>
 8010e0e:	a905      	add	r1, sp, #20
 8010e10:	a809      	add	r0, sp, #36	@ 0x24
 8010e12:	f002 fdb3 	bl	801397c <uxr_serialize_OBJK_DomainParticipant_Binary>
 8010e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e18:	9600      	str	r6, [sp, #0]
 8010e1a:	9401      	str	r4, [sp, #4]
 8010e1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8010e20:	60e3      	str	r3, [r4, #12]
 8010e22:	4628      	mov	r0, r5
 8010e24:	b29b      	uxth	r3, r3
 8010e26:	f7ff ffa9 	bl	8010d7c <uxr_common_create_entity>
 8010e2a:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8010e2e:	bd70      	pop	{r4, r5, r6, pc}
 8010e30:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e34:	e7e5      	b.n	8010e02 <uxr_buffer_create_participant_bin+0x2e>
 8010e36:	bf00      	nop

08010e38 <uxr_buffer_create_topic_bin>:
 8010e38:	b570      	push	{r4, r5, r6, lr}
 8010e3a:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8010e3e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010e42:	9105      	str	r1, [sp, #20]
 8010e44:	4605      	mov	r5, r0
 8010e46:	a997      	add	r1, sp, #604	@ 0x25c
 8010e48:	4618      	mov	r0, r3
 8010e4a:	2302      	movs	r3, #2
 8010e4c:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 8010e50:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 8010e54:	f000 f9b0 	bl	80111b8 <uxr_object_id_to_raw>
 8010e58:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8010e5a:	9306      	str	r3, [sp, #24]
 8010e5c:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 8010e5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010e60:	2303      	movs	r3, #3
 8010e62:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010e66:	2301      	movs	r3, #1
 8010e68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010e6c:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010e70:	a917      	add	r1, sp, #92	@ 0x5c
 8010e72:	2300      	movs	r3, #0
 8010e74:	a80b      	add	r0, sp, #44	@ 0x2c
 8010e76:	f88d 301c 	strb.w	r3, [sp, #28]
 8010e7a:	f7ff fe6b 	bl	8010b54 <ucdr_init_buffer>
 8010e7e:	a906      	add	r1, sp, #24
 8010e80:	a80b      	add	r0, sp, #44	@ 0x2c
 8010e82:	f002 fd9d 	bl	80139c0 <uxr_serialize_OBJK_Topic_Binary>
 8010e86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e88:	9316      	str	r3, [sp, #88]	@ 0x58
 8010e8a:	ac13      	add	r4, sp, #76	@ 0x4c
 8010e8c:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010e90:	9600      	str	r6, [sp, #0]
 8010e92:	9401      	str	r4, [sp, #4]
 8010e94:	b29b      	uxth	r3, r3
 8010e96:	4628      	mov	r0, r5
 8010e98:	f7ff ff70 	bl	8010d7c <uxr_common_create_entity>
 8010e9c:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 8010ea0:	bd70      	pop	{r4, r5, r6, pc}
 8010ea2:	bf00      	nop

08010ea4 <uxr_buffer_create_publisher_bin>:
 8010ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ea6:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 8010eaa:	4605      	mov	r5, r0
 8010eac:	9105      	str	r1, [sp, #20]
 8010eae:	4618      	mov	r0, r3
 8010eb0:	2603      	movs	r6, #3
 8010eb2:	a992      	add	r1, sp, #584	@ 0x248
 8010eb4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010eb8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 8010ebc:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 8010ec0:	f000 f97a 	bl	80111b8 <uxr_object_id_to_raw>
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010eca:	a912      	add	r1, sp, #72	@ 0x48
 8010ecc:	a806      	add	r0, sp, #24
 8010ece:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 8010ed2:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 8010ed6:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 8010eda:	f7ff fe3b 	bl	8010b54 <ucdr_init_buffer>
 8010ede:	a993      	add	r1, sp, #588	@ 0x24c
 8010ee0:	a806      	add	r0, sp, #24
 8010ee2:	f002 fe21 	bl	8013b28 <uxr_serialize_OBJK_Publisher_Binary>
 8010ee6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ee8:	9311      	str	r3, [sp, #68]	@ 0x44
 8010eea:	ac0e      	add	r4, sp, #56	@ 0x38
 8010eec:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010ef0:	9700      	str	r7, [sp, #0]
 8010ef2:	9401      	str	r4, [sp, #4]
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	4628      	mov	r0, r5
 8010ef8:	f7ff ff40 	bl	8010d7c <uxr_common_create_entity>
 8010efc:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8010f00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f02:	bf00      	nop

08010f04 <uxr_buffer_create_datawriter_bin>:
 8010f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f08:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010f0c:	ac1d      	add	r4, sp, #116	@ 0x74
 8010f0e:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8010f12:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 8010f16:	9105      	str	r1, [sp, #20]
 8010f18:	4606      	mov	r6, r0
 8010f1a:	a9a1      	add	r1, sp, #644	@ 0x284
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	2305      	movs	r3, #5
 8010f20:	7123      	strb	r3, [r4, #4]
 8010f22:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8010f26:	2703      	movs	r7, #3
 8010f28:	f000 f946 	bl	80111b8 <uxr_object_id_to_raw>
 8010f2c:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8010f2e:	7227      	strb	r7, [r4, #8]
 8010f30:	a90e      	add	r1, sp, #56	@ 0x38
 8010f32:	f000 f941 	bl	80111b8 <uxr_object_id_to_raw>
 8010f36:	2300      	movs	r3, #0
 8010f38:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8010f3c:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8010f40:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010f44:	3d00      	subs	r5, #0
 8010f46:	bf18      	it	ne
 8010f48:	2501      	movne	r5, #1
 8010f4a:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8010f4e:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8010f52:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8010f56:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8010f60:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8010f64:	bb8a      	cbnz	r2, 8010fca <uxr_buffer_create_datawriter_bin+0xc6>
 8010f66:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8010f6a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 8010f6e:	f04f 0c13 	mov.w	ip, #19
 8010f72:	250b      	movs	r5, #11
 8010f74:	2221      	movs	r2, #33	@ 0x21
 8010f76:	2111      	movs	r1, #17
 8010f78:	2009      	movs	r0, #9
 8010f7a:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8010f7e:	b923      	cbnz	r3, 8010f8a <uxr_buffer_create_datawriter_bin+0x86>
 8010f80:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 8010f84:	4672      	mov	r2, lr
 8010f86:	4661      	mov	r1, ip
 8010f88:	4628      	mov	r0, r5
 8010f8a:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	d025      	beq.n	8010fde <uxr_buffer_create_datawriter_bin+0xda>
 8010f92:	2b03      	cmp	r3, #3
 8010f94:	d029      	beq.n	8010fea <uxr_buffer_create_datawriter_bin+0xe6>
 8010f96:	b32b      	cbz	r3, 8010fe4 <uxr_buffer_create_datawriter_bin+0xe0>
 8010f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8010f9c:	a921      	add	r1, sp, #132	@ 0x84
 8010f9e:	a806      	add	r0, sp, #24
 8010fa0:	f7ff fdd8 	bl	8010b54 <ucdr_init_buffer>
 8010fa4:	a90e      	add	r1, sp, #56	@ 0x38
 8010fa6:	a806      	add	r0, sp, #24
 8010fa8:	f002 fe34 	bl	8013c14 <uxr_serialize_OBJK_DataWriter_Binary>
 8010fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fae:	f8cd 8000 	str.w	r8, [sp]
 8010fb2:	9401      	str	r4, [sp, #4]
 8010fb4:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8010fb8:	60e3      	str	r3, [r4, #12]
 8010fba:	4630      	mov	r0, r6
 8010fbc:	b29b      	uxth	r3, r3
 8010fbe:	f7ff fedd 	bl	8010d7c <uxr_common_create_entity>
 8010fc2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8010fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010fca:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 8010fce:	f04f 0c12 	mov.w	ip, #18
 8010fd2:	250a      	movs	r5, #10
 8010fd4:	2220      	movs	r2, #32
 8010fd6:	2110      	movs	r1, #16
 8010fd8:	2008      	movs	r0, #8
 8010fda:	2702      	movs	r7, #2
 8010fdc:	e7cd      	b.n	8010f7a <uxr_buffer_create_datawriter_bin+0x76>
 8010fde:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8010fe2:	e7d9      	b.n	8010f98 <uxr_buffer_create_datawriter_bin+0x94>
 8010fe4:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 8010fe8:	e7d6      	b.n	8010f98 <uxr_buffer_create_datawriter_bin+0x94>
 8010fea:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 8010fee:	e7d3      	b.n	8010f98 <uxr_buffer_create_datawriter_bin+0x94>

08010ff0 <get_custom_error>:
 8010ff0:	4b01      	ldr	r3, [pc, #4]	@ (8010ff8 <get_custom_error+0x8>)
 8010ff2:	7818      	ldrb	r0, [r3, #0]
 8010ff4:	4770      	bx	lr
 8010ff6:	bf00      	nop
 8010ff8:	2000afdc 	.word	0x2000afdc

08010ffc <recv_custom_msg>:
 8010ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011000:	4693      	mov	fp, r2
 8011002:	b089      	sub	sp, #36	@ 0x24
 8011004:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8011008:	9305      	str	r3, [sp, #20]
 801100a:	468a      	mov	sl, r1
 801100c:	2100      	movs	r1, #0
 801100e:	4604      	mov	r4, r0
 8011010:	f88d 101e 	strb.w	r1, [sp, #30]
 8011014:	b322      	cbz	r2, 8011060 <recv_custom_msg+0x64>
 8011016:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801101a:	f10d 081f 	add.w	r8, sp, #31
 801101e:	af05      	add	r7, sp, #20
 8011020:	f10d 061e 	add.w	r6, sp, #30
 8011024:	f44f 7500 	mov.w	r5, #512	@ 0x200
 8011028:	e002      	b.n	8011030 <recv_custom_msg+0x34>
 801102a:	9b05      	ldr	r3, [sp, #20]
 801102c:	2b00      	cmp	r3, #0
 801102e:	dd0f      	ble.n	8011050 <recv_custom_msg+0x54>
 8011030:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8011034:	4623      	mov	r3, r4
 8011036:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801103a:	e9cd 5600 	strd	r5, r6, [sp]
 801103e:	4622      	mov	r2, r4
 8011040:	4648      	mov	r0, r9
 8011042:	f001 fca3 	bl	801298c <uxr_read_framed_msg>
 8011046:	2800      	cmp	r0, #0
 8011048:	d0ef      	beq.n	801102a <recv_custom_msg+0x2e>
 801104a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801104e:	b1b3      	cbz	r3, 801107e <recv_custom_msg+0x82>
 8011050:	4b0f      	ldr	r3, [pc, #60]	@ (8011090 <recv_custom_msg+0x94>)
 8011052:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8011056:	701a      	strb	r2, [r3, #0]
 8011058:	2000      	movs	r0, #0
 801105a:	b009      	add	sp, #36	@ 0x24
 801105c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011060:	f10d 021f 	add.w	r2, sp, #31
 8011064:	9200      	str	r2, [sp, #0]
 8011066:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 801106a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801106e:	4601      	mov	r1, r0
 8011070:	47a8      	blx	r5
 8011072:	2800      	cmp	r0, #0
 8011074:	d0ec      	beq.n	8011050 <recv_custom_msg+0x54>
 8011076:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d1e8      	bne.n	8011050 <recv_custom_msg+0x54>
 801107e:	f8cb 0000 	str.w	r0, [fp]
 8011082:	2001      	movs	r0, #1
 8011084:	f8ca 4000 	str.w	r4, [sl]
 8011088:	b009      	add	sp, #36	@ 0x24
 801108a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801108e:	bf00      	nop
 8011090:	2000afdc 	.word	0x2000afdc

08011094 <send_custom_msg>:
 8011094:	b530      	push	{r4, r5, lr}
 8011096:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 801109a:	b087      	sub	sp, #28
 801109c:	4615      	mov	r5, r2
 801109e:	b974      	cbnz	r4, 80110be <send_custom_msg+0x2a>
 80110a0:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 80110a4:	f10d 0317 	add.w	r3, sp, #23
 80110a8:	47a0      	blx	r4
 80110aa:	b108      	cbz	r0, 80110b0 <send_custom_msg+0x1c>
 80110ac:	42a8      	cmp	r0, r5
 80110ae:	d015      	beq.n	80110dc <send_custom_msg+0x48>
 80110b0:	4b0c      	ldr	r3, [pc, #48]	@ (80110e4 <send_custom_msg+0x50>)
 80110b2:	f89d 2017 	ldrb.w	r2, [sp, #23]
 80110b6:	701a      	strb	r2, [r3, #0]
 80110b8:	2000      	movs	r0, #0
 80110ba:	b007      	add	sp, #28
 80110bc:	bd30      	pop	{r4, r5, pc}
 80110be:	460b      	mov	r3, r1
 80110c0:	2200      	movs	r2, #0
 80110c2:	f10d 0117 	add.w	r1, sp, #23
 80110c6:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80110ca:	4602      	mov	r2, r0
 80110cc:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80110d0:	9500      	str	r5, [sp, #0]
 80110d2:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80110d6:	f001 fa61 	bl	801259c <uxr_write_framed_msg>
 80110da:	e7e6      	b.n	80110aa <send_custom_msg+0x16>
 80110dc:	2001      	movs	r0, #1
 80110de:	b007      	add	sp, #28
 80110e0:	bd30      	pop	{r4, r5, pc}
 80110e2:	bf00      	nop
 80110e4:	2000afdc 	.word	0x2000afdc

080110e8 <uxr_set_custom_transport_callbacks>:
 80110e8:	b410      	push	{r4}
 80110ea:	9c01      	ldr	r4, [sp, #4]
 80110ec:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 80110f0:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80110f4:	9b02      	ldr	r3, [sp, #8]
 80110f6:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80110fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110fe:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 8011102:	4770      	bx	lr

08011104 <uxr_init_custom_transport>:
 8011104:	b538      	push	{r3, r4, r5, lr}
 8011106:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 801110a:	b303      	cbz	r3, 801114e <uxr_init_custom_transport+0x4a>
 801110c:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 8011110:	4604      	mov	r4, r0
 8011112:	b1e2      	cbz	r2, 801114e <uxr_init_custom_transport+0x4a>
 8011114:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8011118:	b1ca      	cbz	r2, 801114e <uxr_init_custom_transport+0x4a>
 801111a:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801111e:	b1b2      	cbz	r2, 801114e <uxr_init_custom_transport+0x4a>
 8011120:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8011124:	4798      	blx	r3
 8011126:	4605      	mov	r5, r0
 8011128:	b188      	cbz	r0, 801114e <uxr_init_custom_transport+0x4a>
 801112a:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801112e:	b98b      	cbnz	r3, 8011154 <uxr_init_custom_transport+0x50>
 8011130:	490b      	ldr	r1, [pc, #44]	@ (8011160 <uxr_init_custom_transport+0x5c>)
 8011132:	4b0c      	ldr	r3, [pc, #48]	@ (8011164 <uxr_init_custom_transport+0x60>)
 8011134:	4a0c      	ldr	r2, [pc, #48]	@ (8011168 <uxr_init_custom_transport+0x64>)
 8011136:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 801113a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801113e:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8011142:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8011146:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 801114a:	4628      	mov	r0, r5
 801114c:	bd38      	pop	{r3, r4, r5, pc}
 801114e:	2500      	movs	r5, #0
 8011150:	4628      	mov	r0, r5
 8011152:	bd38      	pop	{r3, r4, r5, pc}
 8011154:	2100      	movs	r1, #0
 8011156:	f204 2002 	addw	r0, r4, #514	@ 0x202
 801115a:	f001 fa19 	bl	8012590 <uxr_init_framing_io>
 801115e:	e7e7      	b.n	8011130 <uxr_init_custom_transport+0x2c>
 8011160:	08011095 	.word	0x08011095
 8011164:	08010ffd 	.word	0x08010ffd
 8011168:	08010ff1 	.word	0x08010ff1

0801116c <uxr_close_custom_transport>:
 801116c:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8011170:	4718      	bx	r3
 8011172:	bf00      	nop

08011174 <uxr_object_id>:
 8011174:	b082      	sub	sp, #8
 8011176:	2300      	movs	r3, #0
 8011178:	f88d 1006 	strb.w	r1, [sp, #6]
 801117c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011180:	f360 030f 	bfi	r3, r0, #0, #16
 8011184:	f362 431f 	bfi	r3, r2, #16, #16
 8011188:	4618      	mov	r0, r3
 801118a:	b002      	add	sp, #8
 801118c:	4770      	bx	lr
 801118e:	bf00      	nop

08011190 <uxr_object_id_from_raw>:
 8011190:	7843      	ldrb	r3, [r0, #1]
 8011192:	7801      	ldrb	r1, [r0, #0]
 8011194:	b082      	sub	sp, #8
 8011196:	f003 020f 	and.w	r2, r3, #15
 801119a:	f88d 2006 	strb.w	r2, [sp, #6]
 801119e:	091b      	lsrs	r3, r3, #4
 80111a0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80111a4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80111a8:	2000      	movs	r0, #0
 80111aa:	f363 000f 	bfi	r0, r3, #0, #16
 80111ae:	f362 401f 	bfi	r0, r2, #16, #16
 80111b2:	b002      	add	sp, #8
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop

080111b8 <uxr_object_id_to_raw>:
 80111b8:	4602      	mov	r2, r0
 80111ba:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80111be:	b082      	sub	sp, #8
 80111c0:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80111c4:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80111c8:	f881 c000 	strb.w	ip, [r1]
 80111cc:	7048      	strb	r0, [r1, #1]
 80111ce:	b002      	add	sp, #8
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop

080111d4 <uxr_buffer_cancel_data>:
 80111d4:	b510      	push	{r4, lr}
 80111d6:	b094      	sub	sp, #80	@ 0x50
 80111d8:	2300      	movs	r3, #0
 80111da:	9202      	str	r2, [sp, #8]
 80111dc:	9205      	str	r2, [sp, #20]
 80111de:	9301      	str	r3, [sp, #4]
 80111e0:	2201      	movs	r2, #1
 80111e2:	f8ad 301c 	strh.w	r3, [sp, #28]
 80111e6:	f88d 301e 	strb.w	r3, [sp, #30]
 80111ea:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80111ee:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80111f2:	2308      	movs	r3, #8
 80111f4:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80111f8:	9300      	str	r3, [sp, #0]
 80111fa:	2210      	movs	r2, #16
 80111fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80111fe:	4604      	mov	r4, r0
 8011200:	9103      	str	r1, [sp, #12]
 8011202:	f001 f85f 	bl	80122c4 <uxr_prepare_stream_to_write_submessage>
 8011206:	b918      	cbnz	r0, 8011210 <uxr_buffer_cancel_data+0x3c>
 8011208:	4604      	mov	r4, r0
 801120a:	4620      	mov	r0, r4
 801120c:	b014      	add	sp, #80	@ 0x50
 801120e:	bd10      	pop	{r4, pc}
 8011210:	9905      	ldr	r1, [sp, #20]
 8011212:	aa06      	add	r2, sp, #24
 8011214:	4620      	mov	r0, r4
 8011216:	f001 f98b 	bl	8012530 <uxr_init_base_object_request>
 801121a:	a906      	add	r1, sp, #24
 801121c:	4604      	mov	r4, r0
 801121e:	a80c      	add	r0, sp, #48	@ 0x30
 8011220:	f003 f82c 	bl	801427c <uxr_serialize_READ_DATA_Payload>
 8011224:	4620      	mov	r0, r4
 8011226:	b014      	add	sp, #80	@ 0x50
 8011228:	bd10      	pop	{r4, pc}
 801122a:	bf00      	nop

0801122c <read_submessage_format>:
 801122c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011230:	b095      	sub	sp, #84	@ 0x54
 8011232:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 8011236:	b113      	cbz	r3, 801123e <read_submessage_format+0x12>
 8011238:	b015      	add	sp, #84	@ 0x54
 801123a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801123e:	460c      	mov	r4, r1
 8011240:	4615      	mov	r5, r2
 8011242:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011246:	4607      	mov	r7, r0
 8011248:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801124a:	9004      	str	r0, [sp, #16]
 801124c:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801124e:	9005      	str	r0, [sp, #20]
 8011250:	1a52      	subs	r2, r2, r1
 8011252:	a80c      	add	r0, sp, #48	@ 0x30
 8011254:	4699      	mov	r9, r3
 8011256:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801125a:	f7ff fc7b 	bl	8010b54 <ucdr_init_buffer>
 801125e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011262:	a80c      	add	r0, sp, #48	@ 0x30
 8011264:	f7ff fc4a 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 8011268:	69e2      	ldr	r2, [r4, #28]
 801126a:	b19a      	cbz	r2, 8011294 <read_submessage_format+0x68>
 801126c:	f1b8 0f07 	cmp.w	r8, #7
 8011270:	f882 9014 	strb.w	r9, [r2, #20]
 8011274:	d040      	beq.n	80112f8 <read_submessage_format+0xcc>
 8011276:	f1b8 0f08 	cmp.w	r8, #8
 801127a:	d02e      	beq.n	80112da <read_submessage_format+0xae>
 801127c:	f1b8 0f06 	cmp.w	r8, #6
 8011280:	d011      	beq.n	80112a6 <read_submessage_format+0x7a>
 8011282:	2301      	movs	r3, #1
 8011284:	7513      	strb	r3, [r2, #20]
 8011286:	4629      	mov	r1, r5
 8011288:	4620      	mov	r0, r4
 801128a:	f7ff fcb3 	bl	8010bf4 <ucdr_advance_buffer>
 801128e:	b015      	add	sp, #84	@ 0x54
 8011290:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011294:	f1b8 0f07 	cmp.w	r8, #7
 8011298:	d02e      	beq.n	80112f8 <read_submessage_format+0xcc>
 801129a:	f1b8 0f08 	cmp.w	r8, #8
 801129e:	d01c      	beq.n	80112da <read_submessage_format+0xae>
 80112a0:	f1b8 0f06 	cmp.w	r8, #6
 80112a4:	d1ef      	bne.n	8011286 <read_submessage_format+0x5a>
 80112a6:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 80112aa:	f1b8 0f00 	cmp.w	r8, #0
 80112ae:	d011      	beq.n	80112d4 <read_submessage_format+0xa8>
 80112b0:	ab0c      	add	r3, sp, #48	@ 0x30
 80112b2:	e9cd 3500 	strd	r3, r5, [sp]
 80112b6:	2306      	movs	r3, #6
 80112b8:	f88d 3016 	strb.w	r3, [sp, #22]
 80112bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80112c0:	9302      	str	r3, [sp, #8]
 80112c2:	4632      	mov	r2, r6
 80112c4:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80112c8:	4638      	mov	r0, r7
 80112ca:	47c0      	blx	r8
 80112cc:	2301      	movs	r3, #1
 80112ce:	69e2      	ldr	r2, [r4, #28]
 80112d0:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80112d4:	2a00      	cmp	r2, #0
 80112d6:	d1d4      	bne.n	8011282 <read_submessage_format+0x56>
 80112d8:	e7d5      	b.n	8011286 <read_submessage_format+0x5a>
 80112da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d0f8      	beq.n	80112d4 <read_submessage_format+0xa8>
 80112e2:	a906      	add	r1, sp, #24
 80112e4:	a80c      	add	r0, sp, #48	@ 0x30
 80112e6:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80112ea:	f003 f89b 	bl	8014424 <uxr_deserialize_SampleIdentity>
 80112ee:	b9a0      	cbnz	r0, 801131a <read_submessage_format+0xee>
 80112f0:	69e2      	ldr	r2, [r4, #28]
 80112f2:	2a00      	cmp	r2, #0
 80112f4:	d1c5      	bne.n	8011282 <read_submessage_format+0x56>
 80112f6:	e7c6      	b.n	8011286 <read_submessage_format+0x5a>
 80112f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80112fc:	b13b      	cbz	r3, 801130e <read_submessage_format+0xe2>
 80112fe:	a906      	add	r1, sp, #24
 8011300:	a80c      	add	r0, sp, #48	@ 0x30
 8011302:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8011306:	f002 fd53 	bl	8013db0 <uxr_deserialize_BaseObjectRequest>
 801130a:	bb60      	cbnz	r0, 8011366 <read_submessage_format+0x13a>
 801130c:	69e2      	ldr	r2, [r4, #28]
 801130e:	68a3      	ldr	r3, [r4, #8]
 8011310:	442b      	add	r3, r5
 8011312:	60a3      	str	r3, [r4, #8]
 8011314:	2a00      	cmp	r2, #0
 8011316:	d1b4      	bne.n	8011282 <read_submessage_format+0x56>
 8011318:	e7b5      	b.n	8011286 <read_submessage_format+0x5a>
 801131a:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801131e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011320:	1a52      	subs	r2, r2, r1
 8011322:	eba8 0803 	sub.w	r8, r8, r3
 8011326:	a80c      	add	r0, sp, #48	@ 0x30
 8011328:	f7ff fc14 	bl	8010b54 <ucdr_init_buffer>
 801132c:	44a8      	add	r8, r5
 801132e:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011332:	a80c      	add	r0, sp, #48	@ 0x30
 8011334:	f7ff fbe2 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 8011338:	fa1f f888 	uxth.w	r8, r8
 801133c:	ab0c      	add	r3, sp, #48	@ 0x30
 801133e:	9300      	str	r3, [sp, #0]
 8011340:	f8cd 8004 	str.w	r8, [sp, #4]
 8011344:	2108      	movs	r1, #8
 8011346:	f88d 1016 	strb.w	r1, [sp, #22]
 801134a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 801134e:	9102      	str	r1, [sp, #8]
 8011350:	ab06      	add	r3, sp, #24
 8011352:	4632      	mov	r2, r6
 8011354:	9905      	ldr	r1, [sp, #20]
 8011356:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 801135a:	4638      	mov	r0, r7
 801135c:	47b0      	blx	r6
 801135e:	2301      	movs	r3, #1
 8011360:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 8011364:	e7c4      	b.n	80112f0 <read_submessage_format+0xc4>
 8011366:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 801136a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801136c:	1a52      	subs	r2, r2, r1
 801136e:	a80c      	add	r0, sp, #48	@ 0x30
 8011370:	eba8 0803 	sub.w	r8, r8, r3
 8011374:	f7ff fbee 	bl	8010b54 <ucdr_init_buffer>
 8011378:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801137c:	a80c      	add	r0, sp, #48	@ 0x30
 801137e:	f7ff fbbd 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 8011382:	ab0c      	add	r3, sp, #48	@ 0x30
 8011384:	9300      	str	r3, [sp, #0]
 8011386:	f89d 1018 	ldrb.w	r1, [sp, #24]
 801138a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801138e:	44a8      	add	r8, r5
 8011390:	fa1f f888 	uxth.w	r8, r8
 8011394:	f8cd 8004 	str.w	r8, [sp, #4]
 8011398:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801139c:	2107      	movs	r1, #7
 801139e:	f88d 1016 	strb.w	r1, [sp, #22]
 80113a2:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 80113a6:	9102      	str	r1, [sp, #8]
 80113a8:	4632      	mov	r2, r6
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 80113b0:	9905      	ldr	r1, [sp, #20]
 80113b2:	4638      	mov	r0, r7
 80113b4:	47b0      	blx	r6
 80113b6:	2301      	movs	r3, #1
 80113b8:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 80113bc:	e7a6      	b.n	801130c <read_submessage_format+0xe0>
 80113be:	bf00      	nop

080113c0 <on_get_fragmentation_info>:
 80113c0:	b500      	push	{lr}
 80113c2:	b08b      	sub	sp, #44	@ 0x2c
 80113c4:	4601      	mov	r1, r0
 80113c6:	2204      	movs	r2, #4
 80113c8:	a802      	add	r0, sp, #8
 80113ca:	f7ff fbc3 	bl	8010b54 <ucdr_init_buffer>
 80113ce:	f10d 0305 	add.w	r3, sp, #5
 80113d2:	f10d 0206 	add.w	r2, sp, #6
 80113d6:	a901      	add	r1, sp, #4
 80113d8:	a802      	add	r0, sp, #8
 80113da:	f001 febd 	bl	8013158 <uxr_read_submessage_header>
 80113de:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80113e2:	2b0d      	cmp	r3, #13
 80113e4:	d003      	beq.n	80113ee <on_get_fragmentation_info+0x2e>
 80113e6:	2000      	movs	r0, #0
 80113e8:	b00b      	add	sp, #44	@ 0x2c
 80113ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80113ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80113f2:	f013 0f02 	tst.w	r3, #2
 80113f6:	bf14      	ite	ne
 80113f8:	2002      	movne	r0, #2
 80113fa:	2001      	moveq	r0, #1
 80113fc:	b00b      	add	sp, #44	@ 0x2c
 80113fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8011402:	bf00      	nop

08011404 <read_submessage_get_info>:
 8011404:	b570      	push	{r4, r5, r6, lr}
 8011406:	2500      	movs	r5, #0
 8011408:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 801140c:	4604      	mov	r4, r0
 801140e:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8011412:	460e      	mov	r6, r1
 8011414:	a810      	add	r0, sp, #64	@ 0x40
 8011416:	4629      	mov	r1, r5
 8011418:	e9cd 5503 	strd	r5, r5, [sp, #12]
 801141c:	f009 f8b0 	bl	801a580 <memset>
 8011420:	a903      	add	r1, sp, #12
 8011422:	4630      	mov	r0, r6
 8011424:	f002 fe6c 	bl	8014100 <uxr_deserialize_GET_INFO_Payload>
 8011428:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801142c:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 8011430:	4620      	mov	r0, r4
 8011432:	f001 f875 	bl	8012520 <uxr_session_header_offset>
 8011436:	462b      	mov	r3, r5
 8011438:	9000      	str	r0, [sp, #0]
 801143a:	220c      	movs	r2, #12
 801143c:	a905      	add	r1, sp, #20
 801143e:	a808      	add	r0, sp, #32
 8011440:	f7ff fb76 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8011444:	a910      	add	r1, sp, #64	@ 0x40
 8011446:	a808      	add	r0, sp, #32
 8011448:	f002 fecc 	bl	80141e4 <uxr_serialize_INFO_Payload>
 801144c:	9b08      	ldr	r3, [sp, #32]
 801144e:	462a      	mov	r2, r5
 8011450:	4629      	mov	r1, r5
 8011452:	4620      	mov	r0, r4
 8011454:	f001 f80e 	bl	8012474 <uxr_stamp_session_header>
 8011458:	a808      	add	r0, sp, #32
 801145a:	f7ff fba7 	bl	8010bac <ucdr_buffer_length>
 801145e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011460:	4602      	mov	r2, r0
 8011462:	a905      	add	r1, sp, #20
 8011464:	e9d3 0400 	ldrd	r0, r4, [r3]
 8011468:	47a0      	blx	r4
 801146a:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801146e:	bd70      	pop	{r4, r5, r6, pc}

08011470 <write_submessage_acknack.isra.0>:
 8011470:	b570      	push	{r4, r5, r6, lr}
 8011472:	b092      	sub	sp, #72	@ 0x48
 8011474:	4605      	mov	r5, r0
 8011476:	460e      	mov	r6, r1
 8011478:	4614      	mov	r4, r2
 801147a:	f001 f851 	bl	8012520 <uxr_session_header_offset>
 801147e:	a905      	add	r1, sp, #20
 8011480:	9000      	str	r0, [sp, #0]
 8011482:	2300      	movs	r3, #0
 8011484:	a80a      	add	r0, sp, #40	@ 0x28
 8011486:	2211      	movs	r2, #17
 8011488:	f7ff fb52 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 801148c:	2218      	movs	r2, #24
 801148e:	fb02 5404 	mla	r4, r2, r4, r5
 8011492:	2300      	movs	r3, #0
 8011494:	2205      	movs	r2, #5
 8011496:	3450      	adds	r4, #80	@ 0x50
 8011498:	210a      	movs	r1, #10
 801149a:	a80a      	add	r0, sp, #40	@ 0x28
 801149c:	f001 fe42 	bl	8013124 <uxr_buffer_submessage_header>
 80114a0:	a903      	add	r1, sp, #12
 80114a2:	4620      	mov	r0, r4
 80114a4:	f007 fba8 	bl	8018bf8 <uxr_compute_acknack>
 80114a8:	ba40      	rev16	r0, r0
 80114aa:	f8ad 000e 	strh.w	r0, [sp, #14]
 80114ae:	a903      	add	r1, sp, #12
 80114b0:	a80a      	add	r0, sp, #40	@ 0x28
 80114b2:	f88d 6010 	strb.w	r6, [sp, #16]
 80114b6:	f002 ff05 	bl	80142c4 <uxr_serialize_ACKNACK_Payload>
 80114ba:	2200      	movs	r2, #0
 80114bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80114be:	4611      	mov	r1, r2
 80114c0:	4628      	mov	r0, r5
 80114c2:	f000 ffd7 	bl	8012474 <uxr_stamp_session_header>
 80114c6:	a80a      	add	r0, sp, #40	@ 0x28
 80114c8:	f7ff fb70 	bl	8010bac <ucdr_buffer_length>
 80114cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80114ce:	4602      	mov	r2, r0
 80114d0:	a905      	add	r1, sp, #20
 80114d2:	e9d3 0400 	ldrd	r0, r4, [r3]
 80114d6:	47a0      	blx	r4
 80114d8:	b012      	add	sp, #72	@ 0x48
 80114da:	bd70      	pop	{r4, r5, r6, pc}
 80114dc:	0000      	movs	r0, r0
	...

080114e0 <uxr_init_session>:
 80114e0:	b510      	push	{r4, lr}
 80114e2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8011518 <uxr_init_session+0x38>
 80114e6:	2300      	movs	r3, #0
 80114e8:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80114ec:	4604      	mov	r4, r0
 80114ee:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80114f2:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80114f6:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80114fa:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80114fe:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 8011502:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 8011506:	2181      	movs	r1, #129	@ 0x81
 8011508:	f000 ff20 	bl	801234c <uxr_init_session_info>
 801150c:	f104 0008 	add.w	r0, r4, #8
 8011510:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011514:	f001 bd22 	b.w	8012f5c <uxr_init_stream_storage>
	...

08011520 <uxr_set_status_callback>:
 8011520:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 8011524:	4770      	bx	lr
 8011526:	bf00      	nop

08011528 <uxr_set_topic_callback>:
 8011528:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop

08011530 <uxr_set_request_callback>:
 8011530:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 8011534:	4770      	bx	lr
 8011536:	bf00      	nop

08011538 <uxr_set_reply_callback>:
 8011538:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 801153c:	4770      	bx	lr
 801153e:	bf00      	nop

08011540 <uxr_create_output_best_effort_stream>:
 8011540:	b510      	push	{r4, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	e9cd 2100 	strd	r2, r1, [sp]
 8011548:	4604      	mov	r4, r0
 801154a:	f000 ffe9 	bl	8012520 <uxr_session_header_offset>
 801154e:	e9dd 2100 	ldrd	r2, r1, [sp]
 8011552:	4603      	mov	r3, r0
 8011554:	f104 0008 	add.w	r0, r4, #8
 8011558:	b004      	add	sp, #16
 801155a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801155e:	f001 bd47 	b.w	8012ff0 <uxr_add_output_best_effort_buffer>
 8011562:	bf00      	nop

08011564 <uxr_create_output_reliable_stream>:
 8011564:	b510      	push	{r4, lr}
 8011566:	b088      	sub	sp, #32
 8011568:	e9cd 2104 	strd	r2, r1, [sp, #16]
 801156c:	4604      	mov	r4, r0
 801156e:	9303      	str	r3, [sp, #12]
 8011570:	f000 ffd6 	bl	8012520 <uxr_session_header_offset>
 8011574:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8011578:	9000      	str	r0, [sp, #0]
 801157a:	9905      	ldr	r1, [sp, #20]
 801157c:	f104 0008 	add.w	r0, r4, #8
 8011580:	f001 fd4a 	bl	8013018 <uxr_add_output_reliable_buffer>
 8011584:	2200      	movs	r2, #0
 8011586:	b2c3      	uxtb	r3, r0
 8011588:	f363 0207 	bfi	r2, r3, #0, #8
 801158c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8011590:	f363 220f 	bfi	r2, r3, #8, #8
 8011594:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8011598:	f363 4217 	bfi	r2, r3, #16, #8
 801159c:	0e03      	lsrs	r3, r0, #24
 801159e:	f363 621f 	bfi	r2, r3, #24, #8
 80115a2:	4610      	mov	r0, r2
 80115a4:	b008      	add	sp, #32
 80115a6:	bd10      	pop	{r4, pc}

080115a8 <uxr_create_input_best_effort_stream>:
 80115a8:	b082      	sub	sp, #8
 80115aa:	3008      	adds	r0, #8
 80115ac:	b002      	add	sp, #8
 80115ae:	f001 bd4d 	b.w	801304c <uxr_add_input_best_effort_buffer>
 80115b2:	bf00      	nop

080115b4 <uxr_create_input_reliable_stream>:
 80115b4:	b510      	push	{r4, lr}
 80115b6:	b084      	sub	sp, #16
 80115b8:	4c0b      	ldr	r4, [pc, #44]	@ (80115e8 <uxr_create_input_reliable_stream+0x34>)
 80115ba:	9400      	str	r4, [sp, #0]
 80115bc:	3008      	adds	r0, #8
 80115be:	f001 fd5b 	bl	8013078 <uxr_add_input_reliable_buffer>
 80115c2:	2200      	movs	r2, #0
 80115c4:	b2c3      	uxtb	r3, r0
 80115c6:	f363 0207 	bfi	r2, r3, #0, #8
 80115ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80115ce:	f363 220f 	bfi	r2, r3, #8, #8
 80115d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80115d6:	f363 4217 	bfi	r2, r3, #16, #8
 80115da:	0e03      	lsrs	r3, r0, #24
 80115dc:	f363 621f 	bfi	r2, r3, #24, #8
 80115e0:	4610      	mov	r0, r2
 80115e2:	b004      	add	sp, #16
 80115e4:	bd10      	pop	{r4, pc}
 80115e6:	bf00      	nop
 80115e8:	080113c1 	.word	0x080113c1

080115ec <uxr_epoch_nanos>:
 80115ec:	b510      	push	{r4, lr}
 80115ee:	4604      	mov	r4, r0
 80115f0:	f001 fdf8 	bl	80131e4 <uxr_nanos>
 80115f4:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80115f8:	1ac0      	subs	r0, r0, r3
 80115fa:	eb61 0102 	sbc.w	r1, r1, r2
 80115fe:	bd10      	pop	{r4, pc}

08011600 <uxr_flash_output_streams>:
 8011600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011604:	7e03      	ldrb	r3, [r0, #24]
 8011606:	b084      	sub	sp, #16
 8011608:	4604      	mov	r4, r0
 801160a:	2b00      	cmp	r3, #0
 801160c:	d035      	beq.n	801167a <uxr_flash_output_streams+0x7a>
 801160e:	f04f 0900 	mov.w	r9, #0
 8011612:	4648      	mov	r0, r9
 8011614:	f10d 0802 	add.w	r8, sp, #2
 8011618:	af03      	add	r7, sp, #12
 801161a:	ae02      	add	r6, sp, #8
 801161c:	e006      	b.n	801162c <uxr_flash_output_streams+0x2c>
 801161e:	7e23      	ldrb	r3, [r4, #24]
 8011620:	f109 0901 	add.w	r9, r9, #1
 8011624:	fa5f f089 	uxtb.w	r0, r9
 8011628:	4283      	cmp	r3, r0
 801162a:	d926      	bls.n	801167a <uxr_flash_output_streams+0x7a>
 801162c:	2201      	movs	r2, #1
 801162e:	4611      	mov	r1, r2
 8011630:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8011634:	f001 fc3e 	bl	8012eb4 <uxr_stream_id>
 8011638:	3508      	adds	r5, #8
 801163a:	4684      	mov	ip, r0
 801163c:	4643      	mov	r3, r8
 801163e:	463a      	mov	r2, r7
 8011640:	4631      	mov	r1, r6
 8011642:	4628      	mov	r0, r5
 8011644:	f8cd c004 	str.w	ip, [sp, #4]
 8011648:	f007 fb5c 	bl	8018d04 <uxr_prepare_best_effort_buffer_to_send>
 801164c:	2800      	cmp	r0, #0
 801164e:	d0e6      	beq.n	801161e <uxr_flash_output_streams+0x1e>
 8011650:	9b02      	ldr	r3, [sp, #8]
 8011652:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8011656:	f89d 1004 	ldrb.w	r1, [sp, #4]
 801165a:	4620      	mov	r0, r4
 801165c:	f000 ff0a 	bl	8012474 <uxr_stamp_session_header>
 8011660:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011662:	9a03      	ldr	r2, [sp, #12]
 8011664:	685d      	ldr	r5, [r3, #4]
 8011666:	6818      	ldr	r0, [r3, #0]
 8011668:	9902      	ldr	r1, [sp, #8]
 801166a:	47a8      	blx	r5
 801166c:	f109 0901 	add.w	r9, r9, #1
 8011670:	7e23      	ldrb	r3, [r4, #24]
 8011672:	fa5f f089 	uxtb.w	r0, r9
 8011676:	4283      	cmp	r3, r0
 8011678:	d8d8      	bhi.n	801162c <uxr_flash_output_streams+0x2c>
 801167a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 801167e:	b38b      	cbz	r3, 80116e4 <uxr_flash_output_streams+0xe4>
 8011680:	f04f 0900 	mov.w	r9, #0
 8011684:	f10d 0802 	add.w	r8, sp, #2
 8011688:	af03      	add	r7, sp, #12
 801168a:	ae02      	add	r6, sp, #8
 801168c:	4648      	mov	r0, r9
 801168e:	2201      	movs	r2, #1
 8011690:	2102      	movs	r1, #2
 8011692:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8011696:	f001 fc0d 	bl	8012eb4 <uxr_stream_id>
 801169a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 801169e:	3520      	adds	r5, #32
 80116a0:	9001      	str	r0, [sp, #4]
 80116a2:	e00d      	b.n	80116c0 <uxr_flash_output_streams+0xc0>
 80116a4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80116a8:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80116ac:	9b02      	ldr	r3, [sp, #8]
 80116ae:	f000 fee1 	bl	8012474 <uxr_stamp_session_header>
 80116b2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80116b4:	9a03      	ldr	r2, [sp, #12]
 80116b6:	f8d3 a004 	ldr.w	sl, [r3, #4]
 80116ba:	9902      	ldr	r1, [sp, #8]
 80116bc:	6818      	ldr	r0, [r3, #0]
 80116be:	47d0      	blx	sl
 80116c0:	4643      	mov	r3, r8
 80116c2:	463a      	mov	r2, r7
 80116c4:	4631      	mov	r1, r6
 80116c6:	4628      	mov	r0, r5
 80116c8:	f007 fd3a 	bl	8019140 <uxr_prepare_next_reliable_buffer_to_send>
 80116cc:	4603      	mov	r3, r0
 80116ce:	4620      	mov	r0, r4
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d1e7      	bne.n	80116a4 <uxr_flash_output_streams+0xa4>
 80116d4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 80116d8:	f109 0901 	add.w	r9, r9, #1
 80116dc:	fa5f f089 	uxtb.w	r0, r9
 80116e0:	4283      	cmp	r3, r0
 80116e2:	d8d4      	bhi.n	801168e <uxr_flash_output_streams+0x8e>
 80116e4:	b004      	add	sp, #16
 80116e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116ea:	bf00      	nop

080116ec <read_submessage_info>:
 80116ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80116f0:	460d      	mov	r5, r1
 80116f2:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 80116f6:	4669      	mov	r1, sp
 80116f8:	4607      	mov	r7, r0
 80116fa:	4628      	mov	r0, r5
 80116fc:	f002 fc0e 	bl	8013f1c <uxr_deserialize_BaseObjectReply>
 8011700:	a902      	add	r1, sp, #8
 8011702:	4604      	mov	r4, r0
 8011704:	4628      	mov	r0, r5
 8011706:	f89d 8005 	ldrb.w	r8, [sp, #5]
 801170a:	f7fe f8bf 	bl	800f88c <ucdr_deserialize_bool>
 801170e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011712:	4004      	ands	r4, r0
 8011714:	b2e4      	uxtb	r4, r4
 8011716:	b95b      	cbnz	r3, 8011730 <read_submessage_info+0x44>
 8011718:	a987      	add	r1, sp, #540	@ 0x21c
 801171a:	4628      	mov	r0, r5
 801171c:	f7fe f8b6 	bl	800f88c <ucdr_deserialize_bool>
 8011720:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8011724:	4606      	mov	r6, r0
 8011726:	b94b      	cbnz	r3, 801173c <read_submessage_info+0x50>
 8011728:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 801172c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011730:	a903      	add	r1, sp, #12
 8011732:	4628      	mov	r0, r5
 8011734:	f002 fa9a 	bl	8013c6c <uxr_deserialize_ObjectVariant>
 8011738:	4004      	ands	r4, r0
 801173a:	e7ed      	b.n	8011718 <read_submessage_info+0x2c>
 801173c:	a988      	add	r1, sp, #544	@ 0x220
 801173e:	4628      	mov	r0, r5
 8011740:	f7fe f8d2 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8011744:	4234      	tst	r4, r6
 8011746:	d0ef      	beq.n	8011728 <read_submessage_info+0x3c>
 8011748:	2800      	cmp	r0, #0
 801174a:	d0ed      	beq.n	8011728 <read_submessage_info+0x3c>
 801174c:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8011750:	2b0d      	cmp	r3, #13
 8011752:	d1e9      	bne.n	8011728 <read_submessage_info+0x3c>
 8011754:	a98a      	add	r1, sp, #552	@ 0x228
 8011756:	4628      	mov	r0, r5
 8011758:	f7fe fe6c 	bl	8010434 <ucdr_deserialize_int16_t>
 801175c:	b140      	cbz	r0, 8011770 <read_submessage_info+0x84>
 801175e:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8011762:	2b00      	cmp	r3, #0
 8011764:	dd07      	ble.n	8011776 <read_submessage_info+0x8a>
 8011766:	f1b8 0f00 	cmp.w	r8, #0
 801176a:	bf14      	ite	ne
 801176c:	2001      	movne	r0, #1
 801176e:	2002      	moveq	r0, #2
 8011770:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 8011774:	e7d8      	b.n	8011728 <read_submessage_info+0x3c>
 8011776:	2000      	movs	r0, #0
 8011778:	e7fa      	b.n	8011770 <read_submessage_info+0x84>
 801177a:	bf00      	nop

0801177c <read_submessage_list>:
 801177c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011780:	b097      	sub	sp, #92	@ 0x5c
 8011782:	4ec1      	ldr	r6, [pc, #772]	@ (8011a88 <read_submessage_list+0x30c>)
 8011784:	9209      	str	r2, [sp, #36]	@ 0x24
 8011786:	4604      	mov	r4, r0
 8011788:	460d      	mov	r5, r1
 801178a:	f04f 0801 	mov.w	r8, #1
 801178e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8011792:	aa0c      	add	r2, sp, #48	@ 0x30
 8011794:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8011798:	4628      	mov	r0, r5
 801179a:	f001 fcdd 	bl	8013158 <uxr_read_submessage_header>
 801179e:	2800      	cmp	r0, #0
 80117a0:	f000 813e 	beq.w	8011a20 <read_submessage_list+0x2a4>
 80117a4:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 80117a8:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 80117ac:	3b02      	subs	r3, #2
 80117ae:	2b0d      	cmp	r3, #13
 80117b0:	d8ed      	bhi.n	801178e <read_submessage_list+0x12>
 80117b2:	a101      	add	r1, pc, #4	@ (adr r1, 80117b8 <read_submessage_list+0x3c>)
 80117b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80117b8:	08011a17 	.word	0x08011a17
 80117bc:	0801178f 	.word	0x0801178f
 80117c0:	08011a07 	.word	0x08011a07
 80117c4:	080119a5 	.word	0x080119a5
 80117c8:	0801199b 	.word	0x0801199b
 80117cc:	0801178f 	.word	0x0801178f
 80117d0:	0801178f 	.word	0x0801178f
 80117d4:	080118fb 	.word	0x080118fb
 80117d8:	0801188b 	.word	0x0801188b
 80117dc:	0801184b 	.word	0x0801184b
 80117e0:	0801178f 	.word	0x0801178f
 80117e4:	0801178f 	.word	0x0801178f
 80117e8:	0801178f 	.word	0x0801178f
 80117ec:	080117f1 	.word	0x080117f1
 80117f0:	a910      	add	r1, sp, #64	@ 0x40
 80117f2:	4628      	mov	r0, r5
 80117f4:	f002 fdc4 	bl	8014380 <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 80117f8:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 80117fc:	f1b9 0f00 	cmp.w	r9, #0
 8011800:	f000 8116 	beq.w	8011a30 <read_submessage_list+0x2b4>
 8011804:	f001 fcee 	bl	80131e4 <uxr_nanos>
 8011808:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801180a:	4602      	mov	r2, r0
 801180c:	460b      	mov	r3, r1
 801180e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8011810:	2100      	movs	r1, #0
 8011812:	468c      	mov	ip, r1
 8011814:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011818:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 801181c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801181e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8011820:	468c      	mov	ip, r1
 8011822:	fbc0 7c06 	smlal	r7, ip, r0, r6
 8011826:	46e2      	mov	sl, ip
 8011828:	46bc      	mov	ip, r7
 801182a:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 801182e:	fbc0 7106 	smlal	r7, r1, r0, r6
 8011832:	e9cd ca02 	strd	ip, sl, [sp, #8]
 8011836:	e9cd 7100 	strd	r7, r1, [sp]
 801183a:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 801183e:	9106      	str	r1, [sp, #24]
 8011840:	4620      	mov	r0, r4
 8011842:	47c8      	blx	r9
 8011844:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 8011848:	e7a1      	b.n	801178e <read_submessage_list+0x12>
 801184a:	a910      	add	r1, sp, #64	@ 0x40
 801184c:	4628      	mov	r0, r5
 801184e:	f002 fd77 	bl	8014340 <uxr_deserialize_HEARTBEAT_Payload>
 8011852:	2100      	movs	r1, #0
 8011854:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011858:	f001 fb56 	bl	8012f08 <uxr_stream_id_from_raw>
 801185c:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8011860:	900f      	str	r0, [sp, #60]	@ 0x3c
 8011862:	4639      	mov	r1, r7
 8011864:	f104 0008 	add.w	r0, r4, #8
 8011868:	f001 fc3c 	bl	80130e4 <uxr_get_input_reliable_stream>
 801186c:	2800      	cmp	r0, #0
 801186e:	d08e      	beq.n	801178e <read_submessage_list+0x12>
 8011870:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8011874:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8011878:	f007 f9b2 	bl	8018be0 <uxr_process_heartbeat>
 801187c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8011880:	463a      	mov	r2, r7
 8011882:	4620      	mov	r0, r4
 8011884:	f7ff fdf4 	bl	8011470 <write_submessage_acknack.isra.0>
 8011888:	e781      	b.n	801178e <read_submessage_list+0x12>
 801188a:	a910      	add	r1, sp, #64	@ 0x40
 801188c:	4628      	mov	r0, r5
 801188e:	f002 fd2f 	bl	80142f0 <uxr_deserialize_ACKNACK_Payload>
 8011892:	2100      	movs	r1, #0
 8011894:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8011898:	f001 fb36 	bl	8012f08 <uxr_stream_id_from_raw>
 801189c:	900d      	str	r0, [sp, #52]	@ 0x34
 801189e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 80118a2:	f104 0008 	add.w	r0, r4, #8
 80118a6:	f001 fc09 	bl	80130bc <uxr_get_output_reliable_stream>
 80118aa:	4607      	mov	r7, r0
 80118ac:	2800      	cmp	r0, #0
 80118ae:	f43f af6e 	beq.w	801178e <read_submessage_list+0x12>
 80118b2:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 80118b6:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 80118ba:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 80118be:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 80118c2:	b289      	uxth	r1, r1
 80118c4:	f007 fce6 	bl	8019294 <uxr_process_acknack>
 80118c8:	4638      	mov	r0, r7
 80118ca:	f007 fca3 	bl	8019214 <uxr_begin_output_nack_buffer_it>
 80118ce:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 80118d2:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 80118d6:	e006      	b.n	80118e6 <read_submessage_list+0x16a>
 80118d8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80118da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80118dc:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80118e0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80118e2:	6818      	ldr	r0, [r3, #0]
 80118e4:	47c8      	blx	r9
 80118e6:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 80118ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80118ec:	4651      	mov	r1, sl
 80118ee:	4638      	mov	r0, r7
 80118f0:	f007 fc92 	bl	8019218 <uxr_next_reliable_nack_buffer_to_send>
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d1ef      	bne.n	80118d8 <read_submessage_list+0x15c>
 80118f8:	e749      	b.n	801178e <read_submessage_list+0x12>
 80118fa:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 80118fe:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8011902:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8011906:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 801190a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 801190e:	4651      	mov	r1, sl
 8011910:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011914:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 8011918:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 801191c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8011920:	4628      	mov	r0, r5
 8011922:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8011926:	f002 fa43 	bl	8013db0 <uxr_deserialize_BaseObjectRequest>
 801192a:	4650      	mov	r0, sl
 801192c:	a90f      	add	r1, sp, #60	@ 0x3c
 801192e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8011932:	f000 fe1b 	bl	801256c <uxr_parse_base_object_request>
 8011936:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 801193a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801193c:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8011940:	9110      	str	r1, [sp, #64]	@ 0x40
 8011942:	3f04      	subs	r7, #4
 8011944:	f009 090e 	and.w	r9, r9, #14
 8011948:	b2bf      	uxth	r7, r7
 801194a:	f1bb 0f00 	cmp.w	fp, #0
 801194e:	d006      	beq.n	801195e <read_submessage_list+0x1e2>
 8011950:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8011954:	9300      	str	r3, [sp, #0]
 8011956:	4652      	mov	r2, sl
 8011958:	2300      	movs	r3, #0
 801195a:	4620      	mov	r0, r4
 801195c:	47d8      	blx	fp
 801195e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8011960:	b16a      	cbz	r2, 801197e <read_submessage_list+0x202>
 8011962:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8011964:	2100      	movs	r1, #0
 8011966:	3802      	subs	r0, #2
 8011968:	e002      	b.n	8011970 <read_submessage_list+0x1f4>
 801196a:	3101      	adds	r1, #1
 801196c:	4291      	cmp	r1, r2
 801196e:	d006      	beq.n	801197e <read_submessage_list+0x202>
 8011970:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8011974:	4553      	cmp	r3, sl
 8011976:	d1f8      	bne.n	801196a <read_submessage_list+0x1ee>
 8011978:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801197a:	2200      	movs	r2, #0
 801197c:	545a      	strb	r2, [r3, r1]
 801197e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8011982:	9102      	str	r1, [sp, #8]
 8011984:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8011986:	9101      	str	r1, [sp, #4]
 8011988:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801198a:	9100      	str	r1, [sp, #0]
 801198c:	464b      	mov	r3, r9
 801198e:	463a      	mov	r2, r7
 8011990:	4629      	mov	r1, r5
 8011992:	4620      	mov	r0, r4
 8011994:	f7ff fc4a 	bl	801122c <read_submessage_format>
 8011998:	e6f9      	b.n	801178e <read_submessage_list+0x12>
 801199a:	4629      	mov	r1, r5
 801199c:	4620      	mov	r0, r4
 801199e:	f7ff fea5 	bl	80116ec <read_submessage_info>
 80119a2:	e6f4      	b.n	801178e <read_submessage_list+0x12>
 80119a4:	2a00      	cmp	r2, #0
 80119a6:	d03e      	beq.n	8011a26 <read_submessage_list+0x2aa>
 80119a8:	a910      	add	r1, sp, #64	@ 0x40
 80119aa:	4628      	mov	r0, r5
 80119ac:	f002 fbfc 	bl	80141a8 <uxr_deserialize_STATUS_Payload>
 80119b0:	a90e      	add	r1, sp, #56	@ 0x38
 80119b2:	aa0d      	add	r2, sp, #52	@ 0x34
 80119b4:	a810      	add	r0, sp, #64	@ 0x40
 80119b6:	f000 fdd9 	bl	801256c <uxr_parse_base_object_request>
 80119ba:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 80119be:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80119c0:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 80119c4:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 80119c8:	910f      	str	r1, [sp, #60]	@ 0x3c
 80119ca:	f1ba 0f00 	cmp.w	sl, #0
 80119ce:	d006      	beq.n	80119de <read_submessage_list+0x262>
 80119d0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	463a      	mov	r2, r7
 80119d8:	464b      	mov	r3, r9
 80119da:	4620      	mov	r0, r4
 80119dc:	47d0      	blx	sl
 80119de:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80119e0:	2a00      	cmp	r2, #0
 80119e2:	f43f aed4 	beq.w	801178e <read_submessage_list+0x12>
 80119e6:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 80119e8:	2100      	movs	r1, #0
 80119ea:	3802      	subs	r0, #2
 80119ec:	e003      	b.n	80119f6 <read_submessage_list+0x27a>
 80119ee:	3101      	adds	r1, #1
 80119f0:	4291      	cmp	r1, r2
 80119f2:	f43f aecc 	beq.w	801178e <read_submessage_list+0x12>
 80119f6:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 80119fa:	42bb      	cmp	r3, r7
 80119fc:	d1f7      	bne.n	80119ee <read_submessage_list+0x272>
 80119fe:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8011a00:	f803 9001 	strb.w	r9, [r3, r1]
 8011a04:	e6c3      	b.n	801178e <read_submessage_list+0x12>
 8011a06:	2a00      	cmp	r2, #0
 8011a08:	f47f aec1 	bne.w	801178e <read_submessage_list+0x12>
 8011a0c:	4629      	mov	r1, r5
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f000 fcf2 	bl	80123f8 <uxr_read_create_session_status>
 8011a14:	e6bb      	b.n	801178e <read_submessage_list+0x12>
 8011a16:	4629      	mov	r1, r5
 8011a18:	4620      	mov	r0, r4
 8011a1a:	f7ff fcf3 	bl	8011404 <read_submessage_get_info>
 8011a1e:	e6b6      	b.n	801178e <read_submessage_list+0x12>
 8011a20:	b017      	add	sp, #92	@ 0x5c
 8011a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a26:	4629      	mov	r1, r5
 8011a28:	4620      	mov	r0, r4
 8011a2a:	f000 fcf1 	bl	8012410 <uxr_read_delete_session_status>
 8011a2e:	e6ae      	b.n	801178e <read_submessage_list+0x12>
 8011a30:	f001 fbd8 	bl	80131e4 <uxr_nanos>
 8011a34:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011a36:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8011a38:	464f      	mov	r7, r9
 8011a3a:	fbc3 2706 	smlal	r2, r7, r3, r6
 8011a3e:	1812      	adds	r2, r2, r0
 8011a40:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8011a42:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8011a44:	eb47 0101 	adc.w	r1, r7, r1
 8011a48:	464f      	mov	r7, r9
 8011a4a:	fbc3 0706 	smlal	r0, r7, r3, r6
 8011a4e:	463b      	mov	r3, r7
 8011a50:	4684      	mov	ip, r0
 8011a52:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 8011a56:	fbc7 0906 	smlal	r0, r9, r7, r6
 8011a5a:	eb1c 0c00 	adds.w	ip, ip, r0
 8011a5e:	464f      	mov	r7, r9
 8011a60:	eb43 0307 	adc.w	r3, r3, r7
 8011a64:	ebb2 0c0c 	subs.w	ip, r2, ip
 8011a68:	eb61 0303 	sbc.w	r3, r1, r3
 8011a6c:	0fda      	lsrs	r2, r3, #31
 8011a6e:	eb12 020c 	adds.w	r2, r2, ip
 8011a72:	f143 0300 	adc.w	r3, r3, #0
 8011a76:	0852      	lsrs	r2, r2, #1
 8011a78:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 8011a7c:	105b      	asrs	r3, r3, #1
 8011a7e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 8011a82:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 8011a86:	e6dd      	b.n	8011844 <read_submessage_list+0xc8>
 8011a88:	3b9aca00 	.word	0x3b9aca00

08011a8c <listen_message_reliably>:
 8011a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a90:	1e0b      	subs	r3, r1, #0
 8011a92:	b09d      	sub	sp, #116	@ 0x74
 8011a94:	bfb8      	it	lt
 8011a96:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8011a9a:	4680      	mov	r8, r0
 8011a9c:	9305      	str	r3, [sp, #20]
 8011a9e:	f001 fb87 	bl	80131b0 <uxr_millis>
 8011aa2:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8011aa6:	4681      	mov	r9, r0
 8011aa8:	2a00      	cmp	r2, #0
 8011aaa:	f000 80a1 	beq.w	8011bf0 <listen_message_reliably+0x164>
 8011aae:	2600      	movs	r6, #0
 8011ab0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011ab4:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8011ab8:	9303      	str	r3, [sp, #12]
 8011aba:	4630      	mov	r0, r6
 8011abc:	460f      	mov	r7, r1
 8011abe:	e00f      	b.n	8011ae0 <listen_message_reliably+0x54>
 8011ac0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8011ac4:	9903      	ldr	r1, [sp, #12]
 8011ac6:	455a      	cmp	r2, fp
 8011ac8:	f106 0601 	add.w	r6, r6, #1
 8011acc:	eb73 0101 	sbcs.w	r1, r3, r1
 8011ad0:	b2f0      	uxtb	r0, r6
 8011ad2:	da01      	bge.n	8011ad8 <listen_message_reliably+0x4c>
 8011ad4:	4693      	mov	fp, r2
 8011ad6:	9303      	str	r3, [sp, #12]
 8011ad8:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011adc:	4283      	cmp	r3, r0
 8011ade:	d960      	bls.n	8011ba2 <listen_message_reliably+0x116>
 8011ae0:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8011ae4:	2102      	movs	r1, #2
 8011ae6:	2201      	movs	r2, #1
 8011ae8:	f001 f9e4 	bl	8012eb4 <uxr_stream_id>
 8011aec:	00e4      	lsls	r4, r4, #3
 8011aee:	f104 0520 	add.w	r5, r4, #32
 8011af2:	4445      	add	r5, r8
 8011af4:	4601      	mov	r1, r0
 8011af6:	463b      	mov	r3, r7
 8011af8:	464a      	mov	r2, r9
 8011afa:	4628      	mov	r0, r5
 8011afc:	9109      	str	r1, [sp, #36]	@ 0x24
 8011afe:	f007 fb5f 	bl	80191c0 <uxr_update_output_stream_heartbeat_timestamp>
 8011b02:	eb08 0304 	add.w	r3, r8, r4
 8011b06:	2800      	cmp	r0, #0
 8011b08:	d0da      	beq.n	8011ac0 <listen_message_reliably+0x34>
 8011b0a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8011b0e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8011b12:	9304      	str	r3, [sp, #16]
 8011b14:	4640      	mov	r0, r8
 8011b16:	f000 fd03 	bl	8012520 <uxr_session_header_offset>
 8011b1a:	3501      	adds	r5, #1
 8011b1c:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8011b20:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8011b24:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8011b28:	2300      	movs	r3, #0
 8011b2a:	2211      	movs	r2, #17
 8011b2c:	9000      	str	r0, [sp, #0]
 8011b2e:	a90c      	add	r1, sp, #48	@ 0x30
 8011b30:	4650      	mov	r0, sl
 8011b32:	f7fe fffd 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8011b36:	2300      	movs	r3, #0
 8011b38:	2205      	movs	r2, #5
 8011b3a:	210b      	movs	r1, #11
 8011b3c:	4650      	mov	r0, sl
 8011b3e:	f001 faf1 	bl	8013124 <uxr_buffer_submessage_header>
 8011b42:	8968      	ldrh	r0, [r5, #10]
 8011b44:	2101      	movs	r1, #1
 8011b46:	f007 fbfd 	bl	8019344 <uxr_seq_num_add>
 8011b4a:	892b      	ldrh	r3, [r5, #8]
 8011b4c:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8011b50:	4602      	mov	r2, r0
 8011b52:	9b04      	ldr	r3, [sp, #16]
 8011b54:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8011b58:	a90a      	add	r1, sp, #40	@ 0x28
 8011b5a:	4650      	mov	r0, sl
 8011b5c:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8011b60:	f002 fbda 	bl	8014318 <uxr_serialize_HEARTBEAT_Payload>
 8011b64:	2200      	movs	r2, #0
 8011b66:	4611      	mov	r1, r2
 8011b68:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8011b6a:	4640      	mov	r0, r8
 8011b6c:	f000 fc82 	bl	8012474 <uxr_stamp_session_header>
 8011b70:	4650      	mov	r0, sl
 8011b72:	f7ff f81b 	bl	8010bac <ucdr_buffer_length>
 8011b76:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	a90c      	add	r1, sp, #48	@ 0x30
 8011b7e:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011b82:	4444      	add	r4, r8
 8011b84:	47a8      	blx	r5
 8011b86:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8011b8a:	9903      	ldr	r1, [sp, #12]
 8011b8c:	455a      	cmp	r2, fp
 8011b8e:	f106 0601 	add.w	r6, r6, #1
 8011b92:	eb73 0101 	sbcs.w	r1, r3, r1
 8011b96:	b2f0      	uxtb	r0, r6
 8011b98:	db9c      	blt.n	8011ad4 <listen_message_reliably+0x48>
 8011b9a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8011b9e:	4283      	cmp	r3, r0
 8011ba0:	d89e      	bhi.n	8011ae0 <listen_message_reliably+0x54>
 8011ba2:	9a03      	ldr	r2, [sp, #12]
 8011ba4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	bf08      	it	eq
 8011bac:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8011bb0:	d01e      	beq.n	8011bf0 <listen_message_reliably+0x164>
 8011bb2:	ebab 0309 	sub.w	r3, fp, r9
 8011bb6:	9905      	ldr	r1, [sp, #20]
 8011bb8:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	bf08      	it	eq
 8011bc0:	2301      	moveq	r3, #1
 8011bc2:	4299      	cmp	r1, r3
 8011bc4:	bfa8      	it	ge
 8011bc6:	4619      	movge	r1, r3
 8011bc8:	6894      	ldr	r4, [r2, #8]
 8011bca:	6810      	ldr	r0, [r2, #0]
 8011bcc:	4689      	mov	r9, r1
 8011bce:	460b      	mov	r3, r1
 8011bd0:	aa08      	add	r2, sp, #32
 8011bd2:	a907      	add	r1, sp, #28
 8011bd4:	47a0      	blx	r4
 8011bd6:	b968      	cbnz	r0, 8011bf4 <listen_message_reliably+0x168>
 8011bd8:	9b05      	ldr	r3, [sp, #20]
 8011bda:	eba3 0309 	sub.w	r3, r3, r9
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	9305      	str	r3, [sp, #20]
 8011be2:	f73f af5c 	bgt.w	8011a9e <listen_message_reliably+0x12>
 8011be6:	4604      	mov	r4, r0
 8011be8:	4620      	mov	r0, r4
 8011bea:	b01d      	add	sp, #116	@ 0x74
 8011bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bf0:	9b05      	ldr	r3, [sp, #20]
 8011bf2:	e7e0      	b.n	8011bb6 <listen_message_reliably+0x12a>
 8011bf4:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8011bf8:	4604      	mov	r4, r0
 8011bfa:	a80c      	add	r0, sp, #48	@ 0x30
 8011bfc:	f7fe ffaa 	bl	8010b54 <ucdr_init_buffer>
 8011c00:	2500      	movs	r5, #0
 8011c02:	f10d 031a 	add.w	r3, sp, #26
 8011c06:	aa06      	add	r2, sp, #24
 8011c08:	a90c      	add	r1, sp, #48	@ 0x30
 8011c0a:	4640      	mov	r0, r8
 8011c0c:	f88d 5018 	strb.w	r5, [sp, #24]
 8011c10:	f000 fc44 	bl	801249c <uxr_read_session_header>
 8011c14:	b918      	cbnz	r0, 8011c1e <listen_message_reliably+0x192>
 8011c16:	4620      	mov	r0, r4
 8011c18:	b01d      	add	sp, #116	@ 0x74
 8011c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c1e:	4629      	mov	r1, r5
 8011c20:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8011c24:	f001 f970 	bl	8012f08 <uxr_stream_id_from_raw>
 8011c28:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8011c2c:	2d01      	cmp	r5, #1
 8011c2e:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8011c32:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 8011c36:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011c3a:	d04b      	beq.n	8011cd4 <listen_message_reliably+0x248>
 8011c3c:	2d02      	cmp	r5, #2
 8011c3e:	d00f      	beq.n	8011c60 <listen_message_reliably+0x1d4>
 8011c40:	2d00      	cmp	r5, #0
 8011c42:	d1e8      	bne.n	8011c16 <listen_message_reliably+0x18a>
 8011c44:	4629      	mov	r1, r5
 8011c46:	4628      	mov	r0, r5
 8011c48:	f001 f95e 	bl	8012f08 <uxr_stream_id_from_raw>
 8011c4c:	a90c      	add	r1, sp, #48	@ 0x30
 8011c4e:	4602      	mov	r2, r0
 8011c50:	4640      	mov	r0, r8
 8011c52:	920a      	str	r2, [sp, #40]	@ 0x28
 8011c54:	f7ff fd92 	bl	801177c <read_submessage_list>
 8011c58:	4620      	mov	r0, r4
 8011c5a:	b01d      	add	sp, #116	@ 0x74
 8011c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c60:	4631      	mov	r1, r6
 8011c62:	f108 0008 	add.w	r0, r8, #8
 8011c66:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8011c6a:	f001 fa3b 	bl	80130e4 <uxr_get_input_reliable_stream>
 8011c6e:	4607      	mov	r7, r0
 8011c70:	b338      	cbz	r0, 8011cc2 <listen_message_reliably+0x236>
 8011c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011c74:	9203      	str	r2, [sp, #12]
 8011c76:	a80c      	add	r0, sp, #48	@ 0x30
 8011c78:	f7fe ff9c 	bl	8010bb4 <ucdr_buffer_remaining>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	f10d 0019 	add.w	r0, sp, #25
 8011c82:	9000      	str	r0, [sp, #0]
 8011c84:	9a03      	ldr	r2, [sp, #12]
 8011c86:	4651      	mov	r1, sl
 8011c88:	4638      	mov	r0, r7
 8011c8a:	f006 feaf 	bl	80189ec <uxr_receive_reliable_message>
 8011c8e:	b1c0      	cbz	r0, 8011cc2 <listen_message_reliably+0x236>
 8011c90:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011c94:	b393      	cbz	r3, 8011cfc <listen_message_reliably+0x270>
 8011c96:	ad14      	add	r5, sp, #80	@ 0x50
 8011c98:	f04f 0a02 	mov.w	sl, #2
 8011c9c:	e00a      	b.n	8011cb4 <listen_message_reliably+0x228>
 8011c9e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8011ca2:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 8011ca6:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 8011caa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011cac:	4629      	mov	r1, r5
 8011cae:	4640      	mov	r0, r8
 8011cb0:	f7ff fd64 	bl	801177c <read_submessage_list>
 8011cb4:	2204      	movs	r2, #4
 8011cb6:	4629      	mov	r1, r5
 8011cb8:	4638      	mov	r0, r7
 8011cba:	f006 ff17 	bl	8018aec <uxr_next_input_reliable_buffer_available>
 8011cbe:	2800      	cmp	r0, #0
 8011cc0:	d1ed      	bne.n	8011c9e <listen_message_reliably+0x212>
 8011cc2:	4640      	mov	r0, r8
 8011cc4:	4632      	mov	r2, r6
 8011cc6:	4649      	mov	r1, r9
 8011cc8:	f7ff fbd2 	bl	8011470 <write_submessage_acknack.isra.0>
 8011ccc:	4620      	mov	r0, r4
 8011cce:	b01d      	add	sp, #116	@ 0x74
 8011cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cd4:	4631      	mov	r1, r6
 8011cd6:	f108 0008 	add.w	r0, r8, #8
 8011cda:	f001 f9f9 	bl	80130d0 <uxr_get_input_best_effort_stream>
 8011cde:	2800      	cmp	r0, #0
 8011ce0:	d099      	beq.n	8011c16 <listen_message_reliably+0x18a>
 8011ce2:	4651      	mov	r1, sl
 8011ce4:	f006 fdee 	bl	80188c4 <uxr_receive_best_effort_message>
 8011ce8:	2800      	cmp	r0, #0
 8011cea:	d094      	beq.n	8011c16 <listen_message_reliably+0x18a>
 8011cec:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011cf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011cf2:	a90c      	add	r1, sp, #48	@ 0x30
 8011cf4:	4640      	mov	r0, r8
 8011cf6:	f7ff fd41 	bl	801177c <read_submessage_list>
 8011cfa:	e78c      	b.n	8011c16 <listen_message_reliably+0x18a>
 8011cfc:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8011d00:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011d02:	a90c      	add	r1, sp, #48	@ 0x30
 8011d04:	4640      	mov	r0, r8
 8011d06:	f7ff fd39 	bl	801177c <read_submessage_list>
 8011d0a:	e7c4      	b.n	8011c96 <listen_message_reliably+0x20a>

08011d0c <uxr_run_session_timeout>:
 8011d0c:	b570      	push	{r4, r5, r6, lr}
 8011d0e:	4604      	mov	r4, r0
 8011d10:	460d      	mov	r5, r1
 8011d12:	f001 fa4d 	bl	80131b0 <uxr_millis>
 8011d16:	4606      	mov	r6, r0
 8011d18:	4620      	mov	r0, r4
 8011d1a:	f7ff fc71 	bl	8011600 <uxr_flash_output_streams>
 8011d1e:	4629      	mov	r1, r5
 8011d20:	4620      	mov	r0, r4
 8011d22:	f7ff feb3 	bl	8011a8c <listen_message_reliably>
 8011d26:	f001 fa43 	bl	80131b0 <uxr_millis>
 8011d2a:	1b83      	subs	r3, r0, r6
 8011d2c:	1ae9      	subs	r1, r5, r3
 8011d2e:	2900      	cmp	r1, #0
 8011d30:	dcf6      	bgt.n	8011d20 <uxr_run_session_timeout+0x14>
 8011d32:	f104 0008 	add.w	r0, r4, #8
 8011d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011d3a:	f001 b9dd 	b.w	80130f8 <uxr_output_streams_confirmed>
 8011d3e:	bf00      	nop

08011d40 <uxr_run_session_until_data>:
 8011d40:	b570      	push	{r4, r5, r6, lr}
 8011d42:	4604      	mov	r4, r0
 8011d44:	460d      	mov	r5, r1
 8011d46:	f001 fa33 	bl	80131b0 <uxr_millis>
 8011d4a:	4606      	mov	r6, r0
 8011d4c:	4620      	mov	r0, r4
 8011d4e:	f7ff fc57 	bl	8011600 <uxr_flash_output_streams>
 8011d52:	2300      	movs	r3, #0
 8011d54:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 8011d58:	4629      	mov	r1, r5
 8011d5a:	e005      	b.n	8011d68 <uxr_run_session_until_data+0x28>
 8011d5c:	f001 fa28 	bl	80131b0 <uxr_millis>
 8011d60:	1b83      	subs	r3, r0, r6
 8011d62:	1ae9      	subs	r1, r5, r3
 8011d64:	2900      	cmp	r1, #0
 8011d66:	dd07      	ble.n	8011d78 <uxr_run_session_until_data+0x38>
 8011d68:	4620      	mov	r0, r4
 8011d6a:	f7ff fe8f 	bl	8011a8c <listen_message_reliably>
 8011d6e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d0f2      	beq.n	8011d5c <uxr_run_session_until_data+0x1c>
 8011d76:	bd70      	pop	{r4, r5, r6, pc}
 8011d78:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8011d7c:	bd70      	pop	{r4, r5, r6, pc}
 8011d7e:	bf00      	nop

08011d80 <uxr_run_session_until_confirm_delivery>:
 8011d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d84:	4606      	mov	r6, r0
 8011d86:	460d      	mov	r5, r1
 8011d88:	f001 fa12 	bl	80131b0 <uxr_millis>
 8011d8c:	4607      	mov	r7, r0
 8011d8e:	4630      	mov	r0, r6
 8011d90:	f7ff fc36 	bl	8011600 <uxr_flash_output_streams>
 8011d94:	2d00      	cmp	r5, #0
 8011d96:	f106 0808 	add.w	r8, r6, #8
 8011d9a:	bfa8      	it	ge
 8011d9c:	462c      	movge	r4, r5
 8011d9e:	da07      	bge.n	8011db0 <uxr_run_session_until_confirm_delivery+0x30>
 8011da0:	e00e      	b.n	8011dc0 <uxr_run_session_until_confirm_delivery+0x40>
 8011da2:	f7ff fe73 	bl	8011a8c <listen_message_reliably>
 8011da6:	f001 fa03 	bl	80131b0 <uxr_millis>
 8011daa:	1bc3      	subs	r3, r0, r7
 8011dac:	1aec      	subs	r4, r5, r3
 8011dae:	d407      	bmi.n	8011dc0 <uxr_run_session_until_confirm_delivery+0x40>
 8011db0:	4640      	mov	r0, r8
 8011db2:	f001 f9a1 	bl	80130f8 <uxr_output_streams_confirmed>
 8011db6:	4603      	mov	r3, r0
 8011db8:	4621      	mov	r1, r4
 8011dba:	4630      	mov	r0, r6
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d0f0      	beq.n	8011da2 <uxr_run_session_until_confirm_delivery+0x22>
 8011dc0:	4640      	mov	r0, r8
 8011dc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc6:	f001 b997 	b.w	80130f8 <uxr_output_streams_confirmed>
 8011dca:	bf00      	nop

08011dcc <uxr_run_session_until_all_status>:
 8011dcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011dd0:	9c08      	ldr	r4, [sp, #32]
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	460f      	mov	r7, r1
 8011dd6:	4691      	mov	r9, r2
 8011dd8:	461d      	mov	r5, r3
 8011dda:	f7ff fc11 	bl	8011600 <uxr_flash_output_streams>
 8011dde:	b124      	cbz	r4, 8011dea <uxr_run_session_until_all_status+0x1e>
 8011de0:	4622      	mov	r2, r4
 8011de2:	21ff      	movs	r1, #255	@ 0xff
 8011de4:	4628      	mov	r0, r5
 8011de6:	f008 fbcb 	bl	801a580 <memset>
 8011dea:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 8011dee:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011df0:	f001 f9de 	bl	80131b0 <uxr_millis>
 8011df4:	3d01      	subs	r5, #1
 8011df6:	f1a9 0902 	sub.w	r9, r9, #2
 8011dfa:	4680      	mov	r8, r0
 8011dfc:	4639      	mov	r1, r7
 8011dfe:	4630      	mov	r0, r6
 8011e00:	f7ff fe44 	bl	8011a8c <listen_message_reliably>
 8011e04:	f001 f9d4 	bl	80131b0 <uxr_millis>
 8011e08:	eba0 0008 	sub.w	r0, r0, r8
 8011e0c:	1a39      	subs	r1, r7, r0
 8011e0e:	b344      	cbz	r4, 8011e62 <uxr_run_session_until_all_status+0x96>
 8011e10:	4628      	mov	r0, r5
 8011e12:	46ac      	mov	ip, r5
 8011e14:	2301      	movs	r3, #1
 8011e16:	e002      	b.n	8011e1e <uxr_run_session_until_all_status+0x52>
 8011e18:	42a3      	cmp	r3, r4
 8011e1a:	d20d      	bcs.n	8011e38 <uxr_run_session_until_all_status+0x6c>
 8011e1c:	3301      	adds	r3, #1
 8011e1e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 8011e22:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8011e26:	d1f7      	bne.n	8011e18 <uxr_run_session_until_all_status+0x4c>
 8011e28:	42a3      	cmp	r3, r4
 8011e2a:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 8011e2e:	d213      	bcs.n	8011e58 <uxr_run_session_until_all_status+0x8c>
 8011e30:	2a00      	cmp	r2, #0
 8011e32:	d0f3      	beq.n	8011e1c <uxr_run_session_until_all_status+0x50>
 8011e34:	2900      	cmp	r1, #0
 8011e36:	dce2      	bgt.n	8011dfe <uxr_run_session_until_all_status+0x32>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8011e3c:	442c      	add	r4, r5
 8011e3e:	e001      	b.n	8011e44 <uxr_run_session_until_all_status+0x78>
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d812      	bhi.n	8011e6a <uxr_run_session_until_all_status+0x9e>
 8011e44:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8011e48:	4284      	cmp	r4, r0
 8011e4a:	d1f9      	bne.n	8011e40 <uxr_run_session_until_all_status+0x74>
 8011e4c:	2b01      	cmp	r3, #1
 8011e4e:	bf8c      	ite	hi
 8011e50:	2000      	movhi	r0, #0
 8011e52:	2001      	movls	r0, #1
 8011e54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e58:	2900      	cmp	r1, #0
 8011e5a:	dded      	ble.n	8011e38 <uxr_run_session_until_all_status+0x6c>
 8011e5c:	2a00      	cmp	r2, #0
 8011e5e:	d1ce      	bne.n	8011dfe <uxr_run_session_until_all_status+0x32>
 8011e60:	e7ea      	b.n	8011e38 <uxr_run_session_until_all_status+0x6c>
 8011e62:	67f4      	str	r4, [r6, #124]	@ 0x7c
 8011e64:	2001      	movs	r0, #1
 8011e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e6a:	2000      	movs	r0, #0
 8011e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08011e70 <uxr_sync_session>:
 8011e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e72:	b093      	sub	sp, #76	@ 0x4c
 8011e74:	4604      	mov	r4, r0
 8011e76:	460d      	mov	r5, r1
 8011e78:	f000 fb52 	bl	8012520 <uxr_session_header_offset>
 8011e7c:	2214      	movs	r2, #20
 8011e7e:	eb0d 0102 	add.w	r1, sp, r2
 8011e82:	9000      	str	r0, [sp, #0]
 8011e84:	2300      	movs	r3, #0
 8011e86:	a80a      	add	r0, sp, #40	@ 0x28
 8011e88:	f7fe fe52 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8011e8c:	2300      	movs	r3, #0
 8011e8e:	2208      	movs	r2, #8
 8011e90:	210e      	movs	r1, #14
 8011e92:	a80a      	add	r0, sp, #40	@ 0x28
 8011e94:	f001 f946 	bl	8013124 <uxr_buffer_submessage_header>
 8011e98:	f001 f9a4 	bl	80131e4 <uxr_nanos>
 8011e9c:	a31c      	add	r3, pc, #112	@ (adr r3, 8011f10 <uxr_sync_session+0xa0>)
 8011e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea2:	460e      	mov	r6, r1
 8011ea4:	4607      	mov	r7, r0
 8011ea6:	f7ee fe11 	bl	8000acc <__aeabi_ldivmod>
 8011eaa:	4631      	mov	r1, r6
 8011eac:	9003      	str	r0, [sp, #12]
 8011eae:	a318      	add	r3, pc, #96	@ (adr r3, 8011f10 <uxr_sync_session+0xa0>)
 8011eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb4:	4638      	mov	r0, r7
 8011eb6:	f7ee fe09 	bl	8000acc <__aeabi_ldivmod>
 8011eba:	a903      	add	r1, sp, #12
 8011ebc:	a80a      	add	r0, sp, #40	@ 0x28
 8011ebe:	9204      	str	r2, [sp, #16]
 8011ec0:	f002 fa50 	bl	8014364 <uxr_serialize_TIMESTAMP_Payload>
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	4611      	mov	r1, r2
 8011ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011eca:	4620      	mov	r0, r4
 8011ecc:	f000 fad2 	bl	8012474 <uxr_stamp_session_header>
 8011ed0:	a80a      	add	r0, sp, #40	@ 0x28
 8011ed2:	f7fe fe6b 	bl	8010bac <ucdr_buffer_length>
 8011ed6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011ed8:	4602      	mov	r2, r0
 8011eda:	a905      	add	r1, sp, #20
 8011edc:	e9d3 0600 	ldrd	r0, r6, [r3]
 8011ee0:	47b0      	blx	r6
 8011ee2:	f001 f965 	bl	80131b0 <uxr_millis>
 8011ee6:	2300      	movs	r3, #0
 8011ee8:	4606      	mov	r6, r0
 8011eea:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8011eee:	4629      	mov	r1, r5
 8011ef0:	e000      	b.n	8011ef4 <uxr_sync_session+0x84>
 8011ef2:	b950      	cbnz	r0, 8011f0a <uxr_sync_session+0x9a>
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	f7ff fdc9 	bl	8011a8c <listen_message_reliably>
 8011efa:	f001 f959 	bl	80131b0 <uxr_millis>
 8011efe:	1b83      	subs	r3, r0, r6
 8011f00:	1ae9      	subs	r1, r5, r3
 8011f02:	2900      	cmp	r1, #0
 8011f04:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 8011f08:	dcf3      	bgt.n	8011ef2 <uxr_sync_session+0x82>
 8011f0a:	b013      	add	sp, #76	@ 0x4c
 8011f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f0e:	bf00      	nop
 8011f10:	3b9aca00 	.word	0x3b9aca00
 8011f14:	00000000 	.word	0x00000000

08011f18 <wait_session_status>:
 8011f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	b09d      	sub	sp, #116	@ 0x74
 8011f20:	20ff      	movs	r0, #255	@ 0xff
 8011f22:	7160      	strb	r0, [r4, #5]
 8011f24:	9303      	str	r3, [sp, #12]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	f000 80b6 	beq.w	8012098 <wait_session_status+0x180>
 8011f2c:	468a      	mov	sl, r1
 8011f2e:	4691      	mov	r9, r2
 8011f30:	f04f 0b00 	mov.w	fp, #0
 8011f34:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8011f36:	464a      	mov	r2, r9
 8011f38:	e9d3 0500 	ldrd	r0, r5, [r3]
 8011f3c:	4651      	mov	r1, sl
 8011f3e:	47a8      	blx	r5
 8011f40:	f001 f936 	bl	80131b0 <uxr_millis>
 8011f44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8011f48:	4605      	mov	r5, r0
 8011f4a:	e009      	b.n	8011f60 <wait_session_status+0x48>
 8011f4c:	f001 f930 	bl	80131b0 <uxr_millis>
 8011f50:	1b40      	subs	r0, r0, r5
 8011f52:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	dd40      	ble.n	8011fdc <wait_session_status+0xc4>
 8011f5a:	7960      	ldrb	r0, [r4, #5]
 8011f5c:	28ff      	cmp	r0, #255	@ 0xff
 8011f5e:	d145      	bne.n	8011fec <wait_session_status+0xd4>
 8011f60:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8011f62:	a908      	add	r1, sp, #32
 8011f64:	6896      	ldr	r6, [r2, #8]
 8011f66:	6810      	ldr	r0, [r2, #0]
 8011f68:	aa09      	add	r2, sp, #36	@ 0x24
 8011f6a:	47b0      	blx	r6
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	d0ed      	beq.n	8011f4c <wait_session_status+0x34>
 8011f70:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8011f74:	a80c      	add	r0, sp, #48	@ 0x30
 8011f76:	f7fe fded 	bl	8010b54 <ucdr_init_buffer>
 8011f7a:	2600      	movs	r6, #0
 8011f7c:	f10d 031e 	add.w	r3, sp, #30
 8011f80:	aa07      	add	r2, sp, #28
 8011f82:	a90c      	add	r1, sp, #48	@ 0x30
 8011f84:	4620      	mov	r0, r4
 8011f86:	f88d 601c 	strb.w	r6, [sp, #28]
 8011f8a:	f000 fa87 	bl	801249c <uxr_read_session_header>
 8011f8e:	2800      	cmp	r0, #0
 8011f90:	d0dc      	beq.n	8011f4c <wait_session_status+0x34>
 8011f92:	4631      	mov	r1, r6
 8011f94:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8011f98:	f000 ffb6 	bl	8012f08 <uxr_stream_id_from_raw>
 8011f9c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8011fa0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8011fa4:	9302      	str	r3, [sp, #8]
 8011fa6:	2f01      	cmp	r7, #1
 8011fa8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 8011fac:	f3c0 2607 	ubfx	r6, r0, #8, #8
 8011fb0:	d05c      	beq.n	801206c <wait_session_status+0x154>
 8011fb2:	2f02      	cmp	r7, #2
 8011fb4:	d020      	beq.n	8011ff8 <wait_session_status+0xe0>
 8011fb6:	2f00      	cmp	r7, #0
 8011fb8:	d1c8      	bne.n	8011f4c <wait_session_status+0x34>
 8011fba:	4639      	mov	r1, r7
 8011fbc:	4638      	mov	r0, r7
 8011fbe:	f000 ffa3 	bl	8012f08 <uxr_stream_id_from_raw>
 8011fc2:	a90c      	add	r1, sp, #48	@ 0x30
 8011fc4:	4602      	mov	r2, r0
 8011fc6:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011fc8:	4620      	mov	r0, r4
 8011fca:	f7ff fbd7 	bl	801177c <read_submessage_list>
 8011fce:	f001 f8ef 	bl	80131b0 <uxr_millis>
 8011fd2:	1b40      	subs	r0, r0, r5
 8011fd4:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	dcbe      	bgt.n	8011f5a <wait_session_status+0x42>
 8011fdc:	9b03      	ldr	r3, [sp, #12]
 8011fde:	7960      	ldrb	r0, [r4, #5]
 8011fe0:	f10b 0b01 	add.w	fp, fp, #1
 8011fe4:	455b      	cmp	r3, fp
 8011fe6:	d001      	beq.n	8011fec <wait_session_status+0xd4>
 8011fe8:	28ff      	cmp	r0, #255	@ 0xff
 8011fea:	d0a3      	beq.n	8011f34 <wait_session_status+0x1c>
 8011fec:	38ff      	subs	r0, #255	@ 0xff
 8011fee:	bf18      	it	ne
 8011ff0:	2001      	movne	r0, #1
 8011ff2:	b01d      	add	sp, #116	@ 0x74
 8011ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ff8:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 8011ffc:	9304      	str	r3, [sp, #16]
 8011ffe:	4631      	mov	r1, r6
 8012000:	f104 0008 	add.w	r0, r4, #8
 8012004:	f001 f86e 	bl	80130e4 <uxr_get_input_reliable_stream>
 8012008:	4680      	mov	r8, r0
 801200a:	b348      	cbz	r0, 8012060 <wait_session_status+0x148>
 801200c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801200e:	9205      	str	r2, [sp, #20]
 8012010:	a80c      	add	r0, sp, #48	@ 0x30
 8012012:	f7fe fdcf 	bl	8010bb4 <ucdr_buffer_remaining>
 8012016:	4603      	mov	r3, r0
 8012018:	f10d 001d 	add.w	r0, sp, #29
 801201c:	9000      	str	r0, [sp, #0]
 801201e:	9a05      	ldr	r2, [sp, #20]
 8012020:	9902      	ldr	r1, [sp, #8]
 8012022:	4640      	mov	r0, r8
 8012024:	f006 fce2 	bl	80189ec <uxr_receive_reliable_message>
 8012028:	b1d0      	cbz	r0, 8012060 <wait_session_status+0x148>
 801202a:	f89d 301d 	ldrb.w	r3, [sp, #29]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d03a      	beq.n	80120a8 <wait_session_status+0x190>
 8012032:	9f04      	ldr	r7, [sp, #16]
 8012034:	e00a      	b.n	801204c <wait_session_status+0x134>
 8012036:	f04f 0302 	mov.w	r3, #2
 801203a:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 801203e:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 8012042:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 8012046:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012048:	f7ff fb98 	bl	801177c <read_submessage_list>
 801204c:	a914      	add	r1, sp, #80	@ 0x50
 801204e:	2204      	movs	r2, #4
 8012050:	4640      	mov	r0, r8
 8012052:	f006 fd4b 	bl	8018aec <uxr_next_input_reliable_buffer_available>
 8012056:	4603      	mov	r3, r0
 8012058:	a914      	add	r1, sp, #80	@ 0x50
 801205a:	4620      	mov	r0, r4
 801205c:	2b00      	cmp	r3, #0
 801205e:	d1ea      	bne.n	8012036 <wait_session_status+0x11e>
 8012060:	9904      	ldr	r1, [sp, #16]
 8012062:	4632      	mov	r2, r6
 8012064:	4620      	mov	r0, r4
 8012066:	f7ff fa03 	bl	8011470 <write_submessage_acknack.isra.0>
 801206a:	e76f      	b.n	8011f4c <wait_session_status+0x34>
 801206c:	4631      	mov	r1, r6
 801206e:	f104 0008 	add.w	r0, r4, #8
 8012072:	f001 f82d 	bl	80130d0 <uxr_get_input_best_effort_stream>
 8012076:	2800      	cmp	r0, #0
 8012078:	f43f af68 	beq.w	8011f4c <wait_session_status+0x34>
 801207c:	9902      	ldr	r1, [sp, #8]
 801207e:	f006 fc21 	bl	80188c4 <uxr_receive_best_effort_message>
 8012082:	2800      	cmp	r0, #0
 8012084:	f43f af62 	beq.w	8011f4c <wait_session_status+0x34>
 8012088:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 801208c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801208e:	a90c      	add	r1, sp, #48	@ 0x30
 8012090:	4620      	mov	r0, r4
 8012092:	f7ff fb73 	bl	801177c <read_submessage_list>
 8012096:	e759      	b.n	8011f4c <wait_session_status+0x34>
 8012098:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801209a:	e9d3 0400 	ldrd	r0, r4, [r3]
 801209e:	47a0      	blx	r4
 80120a0:	2001      	movs	r0, #1
 80120a2:	b01d      	add	sp, #116	@ 0x74
 80120a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120a8:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80120ac:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80120ae:	a90c      	add	r1, sp, #48	@ 0x30
 80120b0:	4620      	mov	r0, r4
 80120b2:	f7ff fb63 	bl	801177c <read_submessage_list>
 80120b6:	e7bc      	b.n	8012032 <wait_session_status+0x11a>

080120b8 <uxr_delete_session_retries>:
 80120b8:	b530      	push	{r4, r5, lr}
 80120ba:	b08f      	sub	sp, #60	@ 0x3c
 80120bc:	4604      	mov	r4, r0
 80120be:	460d      	mov	r5, r1
 80120c0:	f000 fa2e 	bl	8012520 <uxr_session_header_offset>
 80120c4:	2300      	movs	r3, #0
 80120c6:	2210      	movs	r2, #16
 80120c8:	9000      	str	r0, [sp, #0]
 80120ca:	a902      	add	r1, sp, #8
 80120cc:	a806      	add	r0, sp, #24
 80120ce:	f7fe fd2f 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 80120d2:	a906      	add	r1, sp, #24
 80120d4:	4620      	mov	r0, r4
 80120d6:	f000 f973 	bl	80123c0 <uxr_buffer_delete_session>
 80120da:	2200      	movs	r2, #0
 80120dc:	4611      	mov	r1, r2
 80120de:	9b06      	ldr	r3, [sp, #24]
 80120e0:	4620      	mov	r0, r4
 80120e2:	f000 f9c7 	bl	8012474 <uxr_stamp_session_header>
 80120e6:	a806      	add	r0, sp, #24
 80120e8:	f7fe fd60 	bl	8010bac <ucdr_buffer_length>
 80120ec:	462b      	mov	r3, r5
 80120ee:	4602      	mov	r2, r0
 80120f0:	a902      	add	r1, sp, #8
 80120f2:	4620      	mov	r0, r4
 80120f4:	f7ff ff10 	bl	8011f18 <wait_session_status>
 80120f8:	b118      	cbz	r0, 8012102 <uxr_delete_session_retries+0x4a>
 80120fa:	7960      	ldrb	r0, [r4, #5]
 80120fc:	fab0 f080 	clz	r0, r0
 8012100:	0940      	lsrs	r0, r0, #5
 8012102:	b00f      	add	sp, #60	@ 0x3c
 8012104:	bd30      	pop	{r4, r5, pc}
 8012106:	bf00      	nop

08012108 <uxr_create_session>:
 8012108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801210c:	f100 0b08 	add.w	fp, r0, #8
 8012110:	b0ab      	sub	sp, #172	@ 0xac
 8012112:	4604      	mov	r4, r0
 8012114:	4658      	mov	r0, fp
 8012116:	f000 ff2b 	bl	8012f70 <uxr_reset_stream_storage>
 801211a:	4620      	mov	r0, r4
 801211c:	f000 fa00 	bl	8012520 <uxr_session_header_offset>
 8012120:	2300      	movs	r3, #0
 8012122:	9000      	str	r0, [sp, #0]
 8012124:	221c      	movs	r2, #28
 8012126:	a90b      	add	r1, sp, #44	@ 0x2c
 8012128:	a812      	add	r0, sp, #72	@ 0x48
 801212a:	f7fe fd01 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 801212e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012130:	8a1a      	ldrh	r2, [r3, #16]
 8012132:	3a04      	subs	r2, #4
 8012134:	b292      	uxth	r2, r2
 8012136:	a912      	add	r1, sp, #72	@ 0x48
 8012138:	4620      	mov	r0, r4
 801213a:	f000 f917 	bl	801236c <uxr_buffer_create_session>
 801213e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8012140:	4620      	mov	r0, r4
 8012142:	f000 f983 	bl	801244c <uxr_stamp_create_session_header>
 8012146:	a812      	add	r0, sp, #72	@ 0x48
 8012148:	f7fe fd30 	bl	8010bac <ucdr_buffer_length>
 801214c:	23ff      	movs	r3, #255	@ 0xff
 801214e:	7163      	strb	r3, [r4, #5]
 8012150:	230a      	movs	r3, #10
 8012152:	46da      	mov	sl, fp
 8012154:	9303      	str	r3, [sp, #12]
 8012156:	4683      	mov	fp, r0
 8012158:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801215a:	465a      	mov	r2, fp
 801215c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012160:	a90b      	add	r1, sp, #44	@ 0x2c
 8012162:	47a8      	blx	r5
 8012164:	f001 f824 	bl	80131b0 <uxr_millis>
 8012168:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801216c:	4605      	mov	r5, r0
 801216e:	e009      	b.n	8012184 <uxr_create_session+0x7c>
 8012170:	f001 f81e 	bl	80131b0 <uxr_millis>
 8012174:	1b40      	subs	r0, r0, r5
 8012176:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801217a:	2b00      	cmp	r3, #0
 801217c:	7962      	ldrb	r2, [r4, #5]
 801217e:	dd38      	ble.n	80121f2 <uxr_create_session+0xea>
 8012180:	2aff      	cmp	r2, #255	@ 0xff
 8012182:	d13c      	bne.n	80121fe <uxr_create_session+0xf6>
 8012184:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 8012186:	a907      	add	r1, sp, #28
 8012188:	6896      	ldr	r6, [r2, #8]
 801218a:	6810      	ldr	r0, [r2, #0]
 801218c:	aa08      	add	r2, sp, #32
 801218e:	47b0      	blx	r6
 8012190:	2800      	cmp	r0, #0
 8012192:	d0ed      	beq.n	8012170 <uxr_create_session+0x68>
 8012194:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012198:	a81a      	add	r0, sp, #104	@ 0x68
 801219a:	f7fe fcdb 	bl	8010b54 <ucdr_init_buffer>
 801219e:	2600      	movs	r6, #0
 80121a0:	f10d 031a 	add.w	r3, sp, #26
 80121a4:	aa06      	add	r2, sp, #24
 80121a6:	a91a      	add	r1, sp, #104	@ 0x68
 80121a8:	4620      	mov	r0, r4
 80121aa:	f88d 6018 	strb.w	r6, [sp, #24]
 80121ae:	f000 f975 	bl	801249c <uxr_read_session_header>
 80121b2:	2800      	cmp	r0, #0
 80121b4:	d0dc      	beq.n	8012170 <uxr_create_session+0x68>
 80121b6:	4631      	mov	r1, r6
 80121b8:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80121bc:	f000 fea4 	bl	8012f08 <uxr_stream_id_from_raw>
 80121c0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80121c4:	2e01      	cmp	r6, #1
 80121c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80121ca:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 80121ce:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80121d2:	d053      	beq.n	801227c <uxr_create_session+0x174>
 80121d4:	2e02      	cmp	r6, #2
 80121d6:	d018      	beq.n	801220a <uxr_create_session+0x102>
 80121d8:	2e00      	cmp	r6, #0
 80121da:	d1c9      	bne.n	8012170 <uxr_create_session+0x68>
 80121dc:	4631      	mov	r1, r6
 80121de:	4630      	mov	r0, r6
 80121e0:	f000 fe92 	bl	8012f08 <uxr_stream_id_from_raw>
 80121e4:	a91a      	add	r1, sp, #104	@ 0x68
 80121e6:	4602      	mov	r2, r0
 80121e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80121ea:	4620      	mov	r0, r4
 80121ec:	f7ff fac6 	bl	801177c <read_submessage_list>
 80121f0:	e7be      	b.n	8012170 <uxr_create_session+0x68>
 80121f2:	9b03      	ldr	r3, [sp, #12]
 80121f4:	3b01      	subs	r3, #1
 80121f6:	9303      	str	r3, [sp, #12]
 80121f8:	d001      	beq.n	80121fe <uxr_create_session+0xf6>
 80121fa:	2aff      	cmp	r2, #255	@ 0xff
 80121fc:	d0ac      	beq.n	8012158 <uxr_create_session+0x50>
 80121fe:	2a00      	cmp	r2, #0
 8012200:	d051      	beq.n	80122a6 <uxr_create_session+0x19e>
 8012202:	2000      	movs	r0, #0
 8012204:	b02b      	add	sp, #172	@ 0xac
 8012206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801220a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 801220e:	9304      	str	r3, [sp, #16]
 8012210:	4639      	mov	r1, r7
 8012212:	4650      	mov	r0, sl
 8012214:	f000 ff66 	bl	80130e4 <uxr_get_input_reliable_stream>
 8012218:	4680      	mov	r8, r0
 801221a:	b348      	cbz	r0, 8012270 <uxr_create_session+0x168>
 801221c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801221e:	9205      	str	r2, [sp, #20]
 8012220:	a81a      	add	r0, sp, #104	@ 0x68
 8012222:	f7fe fcc7 	bl	8010bb4 <ucdr_buffer_remaining>
 8012226:	4603      	mov	r3, r0
 8012228:	f10d 0019 	add.w	r0, sp, #25
 801222c:	9000      	str	r0, [sp, #0]
 801222e:	9a05      	ldr	r2, [sp, #20]
 8012230:	4649      	mov	r1, r9
 8012232:	4640      	mov	r0, r8
 8012234:	f006 fbda 	bl	80189ec <uxr_receive_reliable_message>
 8012238:	b1d0      	cbz	r0, 8012270 <uxr_create_session+0x168>
 801223a:	f89d 3019 	ldrb.w	r3, [sp, #25]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d038      	beq.n	80122b4 <uxr_create_session+0x1ac>
 8012242:	9e04      	ldr	r6, [sp, #16]
 8012244:	e00a      	b.n	801225c <uxr_create_session+0x154>
 8012246:	f04f 0302 	mov.w	r3, #2
 801224a:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 801224e:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 8012252:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012258:	f7ff fa90 	bl	801177c <read_submessage_list>
 801225c:	a922      	add	r1, sp, #136	@ 0x88
 801225e:	2204      	movs	r2, #4
 8012260:	4640      	mov	r0, r8
 8012262:	f006 fc43 	bl	8018aec <uxr_next_input_reliable_buffer_available>
 8012266:	4603      	mov	r3, r0
 8012268:	a922      	add	r1, sp, #136	@ 0x88
 801226a:	4620      	mov	r0, r4
 801226c:	2b00      	cmp	r3, #0
 801226e:	d1ea      	bne.n	8012246 <uxr_create_session+0x13e>
 8012270:	9904      	ldr	r1, [sp, #16]
 8012272:	463a      	mov	r2, r7
 8012274:	4620      	mov	r0, r4
 8012276:	f7ff f8fb 	bl	8011470 <write_submessage_acknack.isra.0>
 801227a:	e779      	b.n	8012170 <uxr_create_session+0x68>
 801227c:	4639      	mov	r1, r7
 801227e:	4650      	mov	r0, sl
 8012280:	f000 ff26 	bl	80130d0 <uxr_get_input_best_effort_stream>
 8012284:	2800      	cmp	r0, #0
 8012286:	f43f af73 	beq.w	8012170 <uxr_create_session+0x68>
 801228a:	4649      	mov	r1, r9
 801228c:	f006 fb1a 	bl	80188c4 <uxr_receive_best_effort_message>
 8012290:	2800      	cmp	r0, #0
 8012292:	f43f af6d 	beq.w	8012170 <uxr_create_session+0x68>
 8012296:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 801229a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801229c:	a91a      	add	r1, sp, #104	@ 0x68
 801229e:	4620      	mov	r0, r4
 80122a0:	f7ff fa6c 	bl	801177c <read_submessage_list>
 80122a4:	e764      	b.n	8012170 <uxr_create_session+0x68>
 80122a6:	4650      	mov	r0, sl
 80122a8:	f000 fe62 	bl	8012f70 <uxr_reset_stream_storage>
 80122ac:	2001      	movs	r0, #1
 80122ae:	b02b      	add	sp, #172	@ 0xac
 80122b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122b4:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80122b8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80122ba:	a91a      	add	r1, sp, #104	@ 0x68
 80122bc:	4620      	mov	r0, r4
 80122be:	f7ff fa5d 	bl	801177c <read_submessage_list>
 80122c2:	e7be      	b.n	8012242 <uxr_create_session+0x13a>

080122c4 <uxr_prepare_stream_to_write_submessage>:
 80122c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80122c8:	b082      	sub	sp, #8
 80122ca:	4682      	mov	sl, r0
 80122cc:	4610      	mov	r0, r2
 80122ce:	4615      	mov	r5, r2
 80122d0:	461e      	mov	r6, r3
 80122d2:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80122d6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80122da:	9101      	str	r1, [sp, #4]
 80122dc:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80122e0:	f000 ff60 	bl	80131a4 <uxr_submessage_padding>
 80122e4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80122e8:	f105 0904 	add.w	r9, r5, #4
 80122ec:	2b01      	cmp	r3, #1
 80122ee:	4481      	add	r9, r0
 80122f0:	d01d      	beq.n	801232e <uxr_prepare_stream_to_write_submessage+0x6a>
 80122f2:	2b02      	cmp	r3, #2
 80122f4:	d116      	bne.n	8012324 <uxr_prepare_stream_to_write_submessage+0x60>
 80122f6:	4621      	mov	r1, r4
 80122f8:	f10a 0008 	add.w	r0, sl, #8
 80122fc:	f000 fede 	bl	80130bc <uxr_get_output_reliable_stream>
 8012300:	4604      	mov	r4, r0
 8012302:	b158      	cbz	r0, 801231c <uxr_prepare_stream_to_write_submessage+0x58>
 8012304:	4649      	mov	r1, r9
 8012306:	4632      	mov	r2, r6
 8012308:	f006 fdac 	bl	8018e64 <uxr_prepare_reliable_buffer_to_write>
 801230c:	4604      	mov	r4, r0
 801230e:	b12c      	cbz	r4, 801231c <uxr_prepare_stream_to_write_submessage+0x58>
 8012310:	4643      	mov	r3, r8
 8012312:	b2aa      	uxth	r2, r5
 8012314:	4639      	mov	r1, r7
 8012316:	4630      	mov	r0, r6
 8012318:	f000 ff04 	bl	8013124 <uxr_buffer_submessage_header>
 801231c:	4620      	mov	r0, r4
 801231e:	b002      	add	sp, #8
 8012320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012324:	2400      	movs	r4, #0
 8012326:	4620      	mov	r0, r4
 8012328:	b002      	add	sp, #8
 801232a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801232e:	4621      	mov	r1, r4
 8012330:	f10a 0008 	add.w	r0, sl, #8
 8012334:	f000 feba 	bl	80130ac <uxr_get_output_best_effort_stream>
 8012338:	4604      	mov	r4, r0
 801233a:	2800      	cmp	r0, #0
 801233c:	d0ee      	beq.n	801231c <uxr_prepare_stream_to_write_submessage+0x58>
 801233e:	4649      	mov	r1, r9
 8012340:	4632      	mov	r2, r6
 8012342:	f006 fcbf 	bl	8018cc4 <uxr_prepare_best_effort_buffer_to_write>
 8012346:	4604      	mov	r4, r0
 8012348:	e7e1      	b.n	801230e <uxr_prepare_stream_to_write_submessage+0x4a>
 801234a:	bf00      	nop

0801234c <uxr_init_session_info>:
 801234c:	0e13      	lsrs	r3, r2, #24
 801234e:	7043      	strb	r3, [r0, #1]
 8012350:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8012354:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012358:	7001      	strb	r1, [r0, #0]
 801235a:	70c3      	strb	r3, [r0, #3]
 801235c:	2109      	movs	r1, #9
 801235e:	23ff      	movs	r3, #255	@ 0xff
 8012360:	f880 c002 	strb.w	ip, [r0, #2]
 8012364:	7102      	strb	r2, [r0, #4]
 8012366:	80c1      	strh	r1, [r0, #6]
 8012368:	7143      	strb	r3, [r0, #5]
 801236a:	4770      	bx	lr

0801236c <uxr_buffer_create_session>:
 801236c:	b530      	push	{r4, r5, lr}
 801236e:	b089      	sub	sp, #36	@ 0x24
 8012370:	2300      	movs	r3, #0
 8012372:	4d12      	ldr	r5, [pc, #72]	@ (80123bc <uxr_buffer_create_session+0x50>)
 8012374:	9307      	str	r3, [sp, #28]
 8012376:	f8ad 201c 	strh.w	r2, [sp, #28]
 801237a:	2201      	movs	r2, #1
 801237c:	9301      	str	r3, [sp, #4]
 801237e:	80c2      	strh	r2, [r0, #6]
 8012380:	f88d 2004 	strb.w	r2, [sp, #4]
 8012384:	682a      	ldr	r2, [r5, #0]
 8012386:	9200      	str	r2, [sp, #0]
 8012388:	88aa      	ldrh	r2, [r5, #4]
 801238a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801238e:	f8d0 2001 	ldr.w	r2, [r0, #1]
 8012392:	9202      	str	r2, [sp, #8]
 8012394:	460c      	mov	r4, r1
 8012396:	7802      	ldrb	r2, [r0, #0]
 8012398:	9303      	str	r3, [sp, #12]
 801239a:	4619      	mov	r1, r3
 801239c:	f88d 200c 	strb.w	r2, [sp, #12]
 80123a0:	4620      	mov	r0, r4
 80123a2:	2210      	movs	r2, #16
 80123a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80123a8:	9306      	str	r3, [sp, #24]
 80123aa:	f000 febb 	bl	8013124 <uxr_buffer_submessage_header>
 80123ae:	4669      	mov	r1, sp
 80123b0:	4620      	mov	r0, r4
 80123b2:	f001 fe13 	bl	8013fdc <uxr_serialize_CREATE_CLIENT_Payload>
 80123b6:	b009      	add	sp, #36	@ 0x24
 80123b8:	bd30      	pop	{r4, r5, pc}
 80123ba:	bf00      	nop
 80123bc:	0801b420 	.word	0x0801b420

080123c0 <uxr_buffer_delete_session>:
 80123c0:	b510      	push	{r4, lr}
 80123c2:	4b0c      	ldr	r3, [pc, #48]	@ (80123f4 <uxr_buffer_delete_session+0x34>)
 80123c4:	b082      	sub	sp, #8
 80123c6:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 80123ca:	f8ad c006 	strh.w	ip, [sp, #6]
 80123ce:	460c      	mov	r4, r1
 80123d0:	2202      	movs	r2, #2
 80123d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80123d6:	80c2      	strh	r2, [r0, #6]
 80123d8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80123dc:	2204      	movs	r2, #4
 80123de:	2300      	movs	r3, #0
 80123e0:	2103      	movs	r1, #3
 80123e2:	4620      	mov	r0, r4
 80123e4:	f000 fe9e 	bl	8013124 <uxr_buffer_submessage_header>
 80123e8:	a901      	add	r1, sp, #4
 80123ea:	4620      	mov	r0, r4
 80123ec:	f001 fe9c 	bl	8014128 <uxr_serialize_DELETE_Payload>
 80123f0:	b002      	add	sp, #8
 80123f2:	bd10      	pop	{r4, pc}
 80123f4:	0801b420 	.word	0x0801b420

080123f8 <uxr_read_create_session_status>:
 80123f8:	b510      	push	{r4, lr}
 80123fa:	b088      	sub	sp, #32
 80123fc:	4604      	mov	r4, r0
 80123fe:	4608      	mov	r0, r1
 8012400:	a901      	add	r1, sp, #4
 8012402:	f001 fea1 	bl	8014148 <uxr_deserialize_STATUS_AGENT_Payload>
 8012406:	f89d 3004 	ldrb.w	r3, [sp, #4]
 801240a:	7163      	strb	r3, [r4, #5]
 801240c:	b008      	add	sp, #32
 801240e:	bd10      	pop	{r4, pc}

08012410 <uxr_read_delete_session_status>:
 8012410:	b510      	push	{r4, lr}
 8012412:	4604      	mov	r4, r0
 8012414:	b084      	sub	sp, #16
 8012416:	4608      	mov	r0, r1
 8012418:	a902      	add	r1, sp, #8
 801241a:	f001 fec5 	bl	80141a8 <uxr_deserialize_STATUS_Payload>
 801241e:	88e3      	ldrh	r3, [r4, #6]
 8012420:	2b02      	cmp	r3, #2
 8012422:	d001      	beq.n	8012428 <uxr_read_delete_session_status+0x18>
 8012424:	b004      	add	sp, #16
 8012426:	bd10      	pop	{r4, pc}
 8012428:	f10d 000a 	add.w	r0, sp, #10
 801242c:	f7fe feb0 	bl	8011190 <uxr_object_id_from_raw>
 8012430:	f89d 2008 	ldrb.w	r2, [sp, #8]
 8012434:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8012438:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801243c:	b29b      	uxth	r3, r3
 801243e:	2b02      	cmp	r3, #2
 8012440:	bf04      	itt	eq
 8012442:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 8012446:	7163      	strbeq	r3, [r4, #5]
 8012448:	b004      	add	sp, #16
 801244a:	bd10      	pop	{r4, pc}

0801244c <uxr_stamp_create_session_header>:
 801244c:	b510      	push	{r4, lr}
 801244e:	2208      	movs	r2, #8
 8012450:	b08a      	sub	sp, #40	@ 0x28
 8012452:	4604      	mov	r4, r0
 8012454:	eb0d 0002 	add.w	r0, sp, r2
 8012458:	f7fe fb7c 	bl	8010b54 <ucdr_init_buffer>
 801245c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012460:	9400      	str	r4, [sp, #0]
 8012462:	2300      	movs	r3, #0
 8012464:	461a      	mov	r2, r3
 8012466:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 801246a:	a802      	add	r0, sp, #8
 801246c:	f001 f854 	bl	8013518 <uxr_serialize_message_header>
 8012470:	b00a      	add	sp, #40	@ 0x28
 8012472:	bd10      	pop	{r4, pc}

08012474 <uxr_stamp_session_header>:
 8012474:	b530      	push	{r4, r5, lr}
 8012476:	b08d      	sub	sp, #52	@ 0x34
 8012478:	4604      	mov	r4, r0
 801247a:	460d      	mov	r5, r1
 801247c:	9203      	str	r2, [sp, #12]
 801247e:	4619      	mov	r1, r3
 8012480:	a804      	add	r0, sp, #16
 8012482:	2208      	movs	r2, #8
 8012484:	f7fe fb66 	bl	8010b54 <ucdr_init_buffer>
 8012488:	f814 1b01 	ldrb.w	r1, [r4], #1
 801248c:	9b03      	ldr	r3, [sp, #12]
 801248e:	9400      	str	r4, [sp, #0]
 8012490:	462a      	mov	r2, r5
 8012492:	a804      	add	r0, sp, #16
 8012494:	f001 f840 	bl	8013518 <uxr_serialize_message_header>
 8012498:	b00d      	add	sp, #52	@ 0x34
 801249a:	bd30      	pop	{r4, r5, pc}

0801249c <uxr_read_session_header>:
 801249c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124a0:	4607      	mov	r7, r0
 80124a2:	b084      	sub	sp, #16
 80124a4:	4608      	mov	r0, r1
 80124a6:	460c      	mov	r4, r1
 80124a8:	4615      	mov	r5, r2
 80124aa:	461e      	mov	r6, r3
 80124ac:	f7fe fb82 	bl	8010bb4 <ucdr_buffer_remaining>
 80124b0:	2808      	cmp	r0, #8
 80124b2:	d803      	bhi.n	80124bc <uxr_read_session_header+0x20>
 80124b4:	2000      	movs	r0, #0
 80124b6:	b004      	add	sp, #16
 80124b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80124bc:	f10d 080c 	add.w	r8, sp, #12
 80124c0:	4633      	mov	r3, r6
 80124c2:	462a      	mov	r2, r5
 80124c4:	f8cd 8000 	str.w	r8, [sp]
 80124c8:	4620      	mov	r0, r4
 80124ca:	f10d 010b 	add.w	r1, sp, #11
 80124ce:	f001 f841 	bl	8013554 <uxr_deserialize_message_header>
 80124d2:	783a      	ldrb	r2, [r7, #0]
 80124d4:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80124d8:	4293      	cmp	r3, r2
 80124da:	d1eb      	bne.n	80124b4 <uxr_read_session_header+0x18>
 80124dc:	061b      	lsls	r3, r3, #24
 80124de:	d41c      	bmi.n	801251a <uxr_read_session_header+0x7e>
 80124e0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80124e4:	787b      	ldrb	r3, [r7, #1]
 80124e6:	429a      	cmp	r2, r3
 80124e8:	d003      	beq.n	80124f2 <uxr_read_session_header+0x56>
 80124ea:	2001      	movs	r0, #1
 80124ec:	f080 0001 	eor.w	r0, r0, #1
 80124f0:	e7e1      	b.n	80124b6 <uxr_read_session_header+0x1a>
 80124f2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80124f6:	78bb      	ldrb	r3, [r7, #2]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	f107 0102 	add.w	r1, r7, #2
 80124fe:	d1f4      	bne.n	80124ea <uxr_read_session_header+0x4e>
 8012500:	f89d 200e 	ldrb.w	r2, [sp, #14]
 8012504:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8012508:	429a      	cmp	r2, r3
 801250a:	d1ee      	bne.n	80124ea <uxr_read_session_header+0x4e>
 801250c:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8012510:	784b      	ldrb	r3, [r1, #1]
 8012512:	429a      	cmp	r2, r3
 8012514:	d1e9      	bne.n	80124ea <uxr_read_session_header+0x4e>
 8012516:	2000      	movs	r0, #0
 8012518:	e7e8      	b.n	80124ec <uxr_read_session_header+0x50>
 801251a:	2001      	movs	r0, #1
 801251c:	e7cb      	b.n	80124b6 <uxr_read_session_header+0x1a>
 801251e:	bf00      	nop

08012520 <uxr_session_header_offset>:
 8012520:	f990 3000 	ldrsb.w	r3, [r0]
 8012524:	2b00      	cmp	r3, #0
 8012526:	bfac      	ite	ge
 8012528:	2008      	movge	r0, #8
 801252a:	2004      	movlt	r0, #4
 801252c:	4770      	bx	lr
 801252e:	bf00      	nop

08012530 <uxr_init_base_object_request>:
 8012530:	b510      	push	{r4, lr}
 8012532:	88c3      	ldrh	r3, [r0, #6]
 8012534:	b082      	sub	sp, #8
 8012536:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801253a:	9101      	str	r1, [sp, #4]
 801253c:	f1a3 010a 	sub.w	r1, r3, #10
 8012540:	b289      	uxth	r1, r1
 8012542:	42a1      	cmp	r1, r4
 8012544:	d80e      	bhi.n	8012564 <uxr_init_base_object_request+0x34>
 8012546:	3301      	adds	r3, #1
 8012548:	b29c      	uxth	r4, r3
 801254a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801254e:	b2db      	uxtb	r3, r3
 8012550:	80c4      	strh	r4, [r0, #6]
 8012552:	9801      	ldr	r0, [sp, #4]
 8012554:	7011      	strb	r1, [r2, #0]
 8012556:	7053      	strb	r3, [r2, #1]
 8012558:	1c91      	adds	r1, r2, #2
 801255a:	f7fe fe2d 	bl	80111b8 <uxr_object_id_to_raw>
 801255e:	4620      	mov	r0, r4
 8012560:	b002      	add	sp, #8
 8012562:	bd10      	pop	{r4, pc}
 8012564:	230a      	movs	r3, #10
 8012566:	2100      	movs	r1, #0
 8012568:	461c      	mov	r4, r3
 801256a:	e7f1      	b.n	8012550 <uxr_init_base_object_request+0x20>

0801256c <uxr_parse_base_object_request>:
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	4604      	mov	r4, r0
 8012570:	3002      	adds	r0, #2
 8012572:	460d      	mov	r5, r1
 8012574:	4616      	mov	r6, r2
 8012576:	f7fe fe0b 	bl	8011190 <uxr_object_id_from_raw>
 801257a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 801257e:	8028      	strh	r0, [r5, #0]
 8012580:	806b      	strh	r3, [r5, #2]
 8012582:	7822      	ldrb	r2, [r4, #0]
 8012584:	7863      	ldrb	r3, [r4, #1]
 8012586:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 801258a:	8033      	strh	r3, [r6, #0]
 801258c:	bd70      	pop	{r4, r5, r6, pc}
 801258e:	bf00      	nop

08012590 <uxr_init_framing_io>:
 8012590:	2300      	movs	r3, #0
 8012592:	7041      	strb	r1, [r0, #1]
 8012594:	7003      	strb	r3, [r0, #0]
 8012596:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8012598:	4770      	bx	lr
 801259a:	bf00      	nop

0801259c <uxr_write_framed_msg>:
 801259c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125a0:	4617      	mov	r7, r2
 80125a2:	7842      	ldrb	r2, [r0, #1]
 80125a4:	b083      	sub	sp, #12
 80125a6:	460e      	mov	r6, r1
 80125a8:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80125ac:	469a      	mov	sl, r3
 80125ae:	2901      	cmp	r1, #1
 80125b0:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 80125b4:	4604      	mov	r4, r0
 80125b6:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80125ba:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 80125be:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80125c2:	f240 8137 	bls.w	8012834 <uxr_write_framed_msg+0x298>
 80125c6:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80125ca:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80125ce:	2901      	cmp	r1, #1
 80125d0:	f04f 0202 	mov.w	r2, #2
 80125d4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80125d8:	f240 808f 	bls.w	80126fa <uxr_write_framed_msg+0x15e>
 80125dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125de:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80125e2:	b2dd      	uxtb	r5, r3
 80125e4:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80125e8:	2203      	movs	r2, #3
 80125ea:	2901      	cmp	r1, #1
 80125ec:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80125f0:	f240 809a 	bls.w	8012728 <uxr_write_framed_msg+0x18c>
 80125f4:	18a1      	adds	r1, r4, r2
 80125f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80125f8:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 80125fc:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012600:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012604:	3201      	adds	r2, #1
 8012606:	2801      	cmp	r0, #1
 8012608:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801260c:	f240 80a0 	bls.w	8012750 <uxr_write_framed_msg+0x1b4>
 8012610:	18a0      	adds	r0, r4, r2
 8012612:	3201      	adds	r2, #1
 8012614:	b2d2      	uxtb	r2, r2
 8012616:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801261a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801261e:	2b00      	cmp	r3, #0
 8012620:	f000 80a9 	beq.w	8012776 <uxr_write_framed_msg+0x1da>
 8012624:	f04f 0900 	mov.w	r9, #0
 8012628:	46c8      	mov	r8, r9
 801262a:	f81a 3008 	ldrb.w	r3, [sl, r8]
 801262e:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 8012632:	2901      	cmp	r1, #1
 8012634:	f240 80c3 	bls.w	80127be <uxr_write_framed_msg+0x222>
 8012638:	2a29      	cmp	r2, #41	@ 0x29
 801263a:	f200 809f 	bhi.w	801277c <uxr_write_framed_msg+0x1e0>
 801263e:	18a1      	adds	r1, r4, r2
 8012640:	3201      	adds	r2, #1
 8012642:	b2d2      	uxtb	r2, r2
 8012644:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8012648:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801264c:	ea89 0303 	eor.w	r3, r9, r3
 8012650:	498c      	ldr	r1, [pc, #560]	@ (8012884 <uxr_write_framed_msg+0x2e8>)
 8012652:	b2db      	uxtb	r3, r3
 8012654:	f108 0801 	add.w	r8, r8, #1
 8012658:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801265c:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8012660:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012662:	4543      	cmp	r3, r8
 8012664:	d8e1      	bhi.n	801262a <uxr_write_framed_msg+0x8e>
 8012666:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801266a:	fa5f f889 	uxtb.w	r8, r9
 801266e:	9301      	str	r3, [sp, #4]
 8012670:	f04f 0900 	mov.w	r9, #0
 8012674:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8012678:	fa5f f18a 	uxtb.w	r1, sl
 801267c:	2901      	cmp	r1, #1
 801267e:	d921      	bls.n	80126c4 <uxr_write_framed_msg+0x128>
 8012680:	2a29      	cmp	r2, #41	@ 0x29
 8012682:	f240 80af 	bls.w	80127e4 <uxr_write_framed_msg+0x248>
 8012686:	2500      	movs	r5, #0
 8012688:	e000      	b.n	801268c <uxr_write_framed_msg+0xf0>
 801268a:	b160      	cbz	r0, 80126a6 <uxr_write_framed_msg+0x10a>
 801268c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012690:	1b52      	subs	r2, r2, r5
 8012692:	465b      	mov	r3, fp
 8012694:	4421      	add	r1, r4
 8012696:	4638      	mov	r0, r7
 8012698:	47b0      	blx	r6
 801269a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801269e:	4405      	add	r5, r0
 80126a0:	4295      	cmp	r5, r2
 80126a2:	d3f2      	bcc.n	801268a <uxr_write_framed_msg+0xee>
 80126a4:	d003      	beq.n	80126ae <uxr_write_framed_msg+0x112>
 80126a6:	2000      	movs	r0, #0
 80126a8:	b003      	add	sp, #12
 80126aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126ae:	fa5f f18a 	uxtb.w	r1, sl
 80126b2:	f04f 0300 	mov.w	r3, #0
 80126b6:	2901      	cmp	r1, #1
 80126b8:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80126bc:	f04f 0200 	mov.w	r2, #0
 80126c0:	f200 8090 	bhi.w	80127e4 <uxr_write_framed_msg+0x248>
 80126c4:	1c51      	adds	r1, r2, #1
 80126c6:	b2c9      	uxtb	r1, r1
 80126c8:	2929      	cmp	r1, #41	@ 0x29
 80126ca:	d8dc      	bhi.n	8012686 <uxr_write_framed_msg+0xea>
 80126cc:	18a5      	adds	r5, r4, r2
 80126ce:	4421      	add	r1, r4
 80126d0:	3202      	adds	r2, #2
 80126d2:	f088 0820 	eor.w	r8, r8, #32
 80126d6:	4648      	mov	r0, r9
 80126d8:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80126dc:	b2d2      	uxtb	r2, r2
 80126de:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80126e2:	f04f 0901 	mov.w	r9, #1
 80126e6:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80126ea:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80126ee:	2800      	cmp	r0, #0
 80126f0:	f040 8085 	bne.w	80127fe <uxr_write_framed_msg+0x262>
 80126f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80126f8:	e7bc      	b.n	8012674 <uxr_write_framed_msg+0xd8>
 80126fa:	4611      	mov	r1, r2
 80126fc:	f04f 0c03 	mov.w	ip, #3
 8012700:	2204      	movs	r2, #4
 8012702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012704:	4421      	add	r1, r4
 8012706:	b2dd      	uxtb	r5, r3
 8012708:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 801270c:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 8012710:	44a4      	add	ip, r4
 8012712:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012716:	f080 0020 	eor.w	r0, r0, #32
 801271a:	2901      	cmp	r1, #1
 801271c:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8012720:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012724:	f63f af66 	bhi.w	80125f4 <uxr_write_framed_msg+0x58>
 8012728:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801272a:	18a0      	adds	r0, r4, r2
 801272c:	f085 0520 	eor.w	r5, r5, #32
 8012730:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012734:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8012738:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 801273c:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8012740:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8012744:	3202      	adds	r2, #2
 8012746:	2801      	cmp	r0, #1
 8012748:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801274c:	f63f af60 	bhi.w	8012610 <uxr_write_framed_msg+0x74>
 8012750:	1c50      	adds	r0, r2, #1
 8012752:	18a5      	adds	r5, r4, r2
 8012754:	fa54 f080 	uxtab	r0, r4, r0
 8012758:	3202      	adds	r2, #2
 801275a:	f081 0120 	eor.w	r1, r1, #32
 801275e:	b2d2      	uxtb	r2, r2
 8012760:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8012764:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8012768:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 801276c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012770:	2b00      	cmp	r3, #0
 8012772:	f47f af57 	bne.w	8012624 <uxr_write_framed_msg+0x88>
 8012776:	9301      	str	r3, [sp, #4]
 8012778:	4698      	mov	r8, r3
 801277a:	e779      	b.n	8012670 <uxr_write_framed_msg+0xd4>
 801277c:	2500      	movs	r5, #0
 801277e:	e001      	b.n	8012784 <uxr_write_framed_msg+0x1e8>
 8012780:	2800      	cmp	r0, #0
 8012782:	d090      	beq.n	80126a6 <uxr_write_framed_msg+0x10a>
 8012784:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8012788:	1b52      	subs	r2, r2, r5
 801278a:	465b      	mov	r3, fp
 801278c:	4421      	add	r1, r4
 801278e:	4638      	mov	r0, r7
 8012790:	47b0      	blx	r6
 8012792:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8012796:	4405      	add	r5, r0
 8012798:	4295      	cmp	r5, r2
 801279a:	d3f1      	bcc.n	8012780 <uxr_write_framed_msg+0x1e4>
 801279c:	d183      	bne.n	80126a6 <uxr_write_framed_msg+0x10a>
 801279e:	f04f 0300 	mov.w	r3, #0
 80127a2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80127a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80127a8:	4543      	cmp	r3, r8
 80127aa:	d964      	bls.n	8012876 <uxr_write_framed_msg+0x2da>
 80127ac:	f81a 3008 	ldrb.w	r3, [sl, r8]
 80127b0:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 80127b4:	2901      	cmp	r1, #1
 80127b6:	f04f 0200 	mov.w	r2, #0
 80127ba:	f63f af3d 	bhi.w	8012638 <uxr_write_framed_msg+0x9c>
 80127be:	1c51      	adds	r1, r2, #1
 80127c0:	b2c9      	uxtb	r1, r1
 80127c2:	2929      	cmp	r1, #41	@ 0x29
 80127c4:	d8da      	bhi.n	801277c <uxr_write_framed_msg+0x1e0>
 80127c6:	18a0      	adds	r0, r4, r2
 80127c8:	4421      	add	r1, r4
 80127ca:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80127ce:	3202      	adds	r2, #2
 80127d0:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80127d4:	b2d2      	uxtb	r2, r2
 80127d6:	f083 0020 	eor.w	r0, r3, #32
 80127da:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80127de:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80127e2:	e733      	b.n	801264c <uxr_write_framed_msg+0xb0>
 80127e4:	18a1      	adds	r1, r4, r2
 80127e6:	3201      	adds	r2, #1
 80127e8:	4648      	mov	r0, r9
 80127ea:	b2d2      	uxtb	r2, r2
 80127ec:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80127f0:	f04f 0901 	mov.w	r9, #1
 80127f4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80127f8:	2800      	cmp	r0, #0
 80127fa:	f43f af7b 	beq.w	80126f4 <uxr_write_framed_msg+0x158>
 80127fe:	2500      	movs	r5, #0
 8012800:	e002      	b.n	8012808 <uxr_write_framed_msg+0x26c>
 8012802:	2800      	cmp	r0, #0
 8012804:	f43f af4f 	beq.w	80126a6 <uxr_write_framed_msg+0x10a>
 8012808:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 801280c:	1b52      	subs	r2, r2, r5
 801280e:	465b      	mov	r3, fp
 8012810:	4421      	add	r1, r4
 8012812:	4638      	mov	r0, r7
 8012814:	47b0      	blx	r6
 8012816:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801281a:	4405      	add	r5, r0
 801281c:	4295      	cmp	r5, r2
 801281e:	d3f0      	bcc.n	8012802 <uxr_write_framed_msg+0x266>
 8012820:	f47f af41 	bne.w	80126a6 <uxr_write_framed_msg+0x10a>
 8012824:	2300      	movs	r3, #0
 8012826:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801282a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801282c:	b298      	uxth	r0, r3
 801282e:	b003      	add	sp, #12
 8012830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012834:	217d      	movs	r1, #125	@ 0x7d
 8012836:	f082 0220 	eor.w	r2, r2, #32
 801283a:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 801283e:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8012842:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8012846:	2901      	cmp	r1, #1
 8012848:	f04f 0203 	mov.w	r2, #3
 801284c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012850:	d804      	bhi.n	801285c <uxr_write_framed_msg+0x2c0>
 8012852:	4611      	mov	r1, r2
 8012854:	f04f 0c04 	mov.w	ip, #4
 8012858:	2205      	movs	r2, #5
 801285a:	e752      	b.n	8012702 <uxr_write_framed_msg+0x166>
 801285c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801285e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8012862:	b2dd      	uxtb	r5, r3
 8012864:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8012868:	2204      	movs	r2, #4
 801286a:	2901      	cmp	r1, #1
 801286c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8012870:	f63f aec0 	bhi.w	80125f4 <uxr_write_framed_msg+0x58>
 8012874:	e758      	b.n	8012728 <uxr_write_framed_msg+0x18c>
 8012876:	ea4f 2319 	mov.w	r3, r9, lsr #8
 801287a:	fa5f f889 	uxtb.w	r8, r9
 801287e:	9301      	str	r3, [sp, #4]
 8012880:	2200      	movs	r2, #0
 8012882:	e6f5      	b.n	8012670 <uxr_write_framed_msg+0xd4>
 8012884:	0801bcac 	.word	0x0801bcac

08012888 <uxr_framing_read_transport>:
 8012888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801288c:	4604      	mov	r4, r0
 801288e:	b083      	sub	sp, #12
 8012890:	461f      	mov	r7, r3
 8012892:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 8012896:	4689      	mov	r9, r1
 8012898:	4692      	mov	sl, r2
 801289a:	f000 fc89 	bl	80131b0 <uxr_millis>
 801289e:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80128a2:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 80128a6:	42b3      	cmp	r3, r6
 80128a8:	4680      	mov	r8, r0
 80128aa:	d061      	beq.n	8012970 <uxr_framing_read_transport+0xe8>
 80128ac:	d81c      	bhi.n	80128e8 <uxr_framing_read_transport+0x60>
 80128ae:	1e75      	subs	r5, r6, #1
 80128b0:	1aed      	subs	r5, r5, r3
 80128b2:	b2ed      	uxtb	r5, r5
 80128b4:	2600      	movs	r6, #0
 80128b6:	455d      	cmp	r5, fp
 80128b8:	d81f      	bhi.n	80128fa <uxr_framing_read_transport+0x72>
 80128ba:	19ab      	adds	r3, r5, r6
 80128bc:	455b      	cmp	r3, fp
 80128be:	bf84      	itt	hi
 80128c0:	ebab 0605 	subhi.w	r6, fp, r5
 80128c4:	b2f6      	uxtbhi	r6, r6
 80128c6:	b9ed      	cbnz	r5, 8012904 <uxr_framing_read_transport+0x7c>
 80128c8:	f04f 0b00 	mov.w	fp, #0
 80128cc:	f000 fc70 	bl	80131b0 <uxr_millis>
 80128d0:	683b      	ldr	r3, [r7, #0]
 80128d2:	eba0 0808 	sub.w	r8, r0, r8
 80128d6:	eba3 0308 	sub.w	r3, r3, r8
 80128da:	4658      	mov	r0, fp
 80128dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80128e0:	603b      	str	r3, [r7, #0]
 80128e2:	b003      	add	sp, #12
 80128e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80128e8:	2e00      	cmp	r6, #0
 80128ea:	d049      	beq.n	8012980 <uxr_framing_read_transport+0xf8>
 80128ec:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80128f0:	b2ed      	uxtb	r5, r5
 80128f2:	3e01      	subs	r6, #1
 80128f4:	455d      	cmp	r5, fp
 80128f6:	b2f6      	uxtb	r6, r6
 80128f8:	d9df      	bls.n	80128ba <uxr_framing_read_transport+0x32>
 80128fa:	fa5f f58b 	uxtb.w	r5, fp
 80128fe:	2600      	movs	r6, #0
 8012900:	2d00      	cmp	r5, #0
 8012902:	d0e1      	beq.n	80128c8 <uxr_framing_read_transport+0x40>
 8012904:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012908:	3102      	adds	r1, #2
 801290a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801290c:	9300      	str	r3, [sp, #0]
 801290e:	683b      	ldr	r3, [r7, #0]
 8012910:	4421      	add	r1, r4
 8012912:	462a      	mov	r2, r5
 8012914:	4650      	mov	r0, sl
 8012916:	47c8      	blx	r9
 8012918:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801291c:	4a1a      	ldr	r2, [pc, #104]	@ (8012988 <uxr_framing_read_transport+0x100>)
 801291e:	4403      	add	r3, r0
 8012920:	0859      	lsrs	r1, r3, #1
 8012922:	fba2 2101 	umull	r2, r1, r2, r1
 8012926:	0889      	lsrs	r1, r1, #2
 8012928:	222a      	movs	r2, #42	@ 0x2a
 801292a:	fb02 3111 	mls	r1, r2, r1, r3
 801292e:	4683      	mov	fp, r0
 8012930:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8012934:	2800      	cmp	r0, #0
 8012936:	d0c7      	beq.n	80128c8 <uxr_framing_read_transport+0x40>
 8012938:	42a8      	cmp	r0, r5
 801293a:	d1c7      	bne.n	80128cc <uxr_framing_read_transport+0x44>
 801293c:	2e00      	cmp	r6, #0
 801293e:	d0c5      	beq.n	80128cc <uxr_framing_read_transport+0x44>
 8012940:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012942:	9300      	str	r3, [sp, #0]
 8012944:	3102      	adds	r1, #2
 8012946:	4632      	mov	r2, r6
 8012948:	4421      	add	r1, r4
 801294a:	2300      	movs	r3, #0
 801294c:	4650      	mov	r0, sl
 801294e:	47c8      	blx	r9
 8012950:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012954:	4a0c      	ldr	r2, [pc, #48]	@ (8012988 <uxr_framing_read_transport+0x100>)
 8012956:	180b      	adds	r3, r1, r0
 8012958:	0859      	lsrs	r1, r3, #1
 801295a:	fba2 1201 	umull	r1, r2, r2, r1
 801295e:	0892      	lsrs	r2, r2, #2
 8012960:	212a      	movs	r1, #42	@ 0x2a
 8012962:	fb01 3312 	mls	r3, r1, r2, r3
 8012966:	eb00 0b05 	add.w	fp, r0, r5
 801296a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 801296e:	e7ad      	b.n	80128cc <uxr_framing_read_transport+0x44>
 8012970:	2600      	movs	r6, #0
 8012972:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 8012976:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8012978:	d9bf      	bls.n	80128fa <uxr_framing_read_transport+0x72>
 801297a:	2102      	movs	r1, #2
 801297c:	2529      	movs	r5, #41	@ 0x29
 801297e:	e7c4      	b.n	801290a <uxr_framing_read_transport+0x82>
 8012980:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 8012984:	b2ed      	uxtb	r5, r5
 8012986:	e796      	b.n	80128b6 <uxr_framing_read_transport+0x2e>
 8012988:	30c30c31 	.word	0x30c30c31

0801298c <uxr_read_framed_msg>:
 801298c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012990:	461e      	mov	r6, r3
 8012992:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8012996:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 801299a:	429d      	cmp	r5, r3
 801299c:	b083      	sub	sp, #12
 801299e:	4604      	mov	r4, r0
 80129a0:	4688      	mov	r8, r1
 80129a2:	4691      	mov	r9, r2
 80129a4:	f000 8188 	beq.w	8012cb8 <uxr_read_framed_msg+0x32c>
 80129a8:	7823      	ldrb	r3, [r4, #0]
 80129aa:	4dc1      	ldr	r5, [pc, #772]	@ (8012cb0 <uxr_read_framed_msg+0x324>)
 80129ac:	4fc1      	ldr	r7, [pc, #772]	@ (8012cb4 <uxr_read_framed_msg+0x328>)
 80129ae:	2b07      	cmp	r3, #7
 80129b0:	d8fd      	bhi.n	80129ae <uxr_read_framed_msg+0x22>
 80129b2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80129b6:	0115      	.short	0x0115
 80129b8:	00d600f6 	.word	0x00d600f6
 80129bc:	009000b9 	.word	0x009000b9
 80129c0:	0030004d 	.word	0x0030004d
 80129c4:	0008      	.short	0x0008
 80129c6:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80129ca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80129ce:	4299      	cmp	r1, r3
 80129d0:	f000 814a 	beq.w	8012c68 <uxr_read_framed_msg+0x2dc>
 80129d4:	18e2      	adds	r2, r4, r3
 80129d6:	7892      	ldrb	r2, [r2, #2]
 80129d8:	2a7d      	cmp	r2, #125	@ 0x7d
 80129da:	f000 8199 	beq.w	8012d10 <uxr_read_framed_msg+0x384>
 80129de:	3301      	adds	r3, #1
 80129e0:	0858      	lsrs	r0, r3, #1
 80129e2:	fba5 1000 	umull	r1, r0, r5, r0
 80129e6:	0880      	lsrs	r0, r0, #2
 80129e8:	212a      	movs	r1, #42	@ 0x2a
 80129ea:	fb01 3310 	mls	r3, r1, r0, r3
 80129ee:	2a7e      	cmp	r2, #126	@ 0x7e
 80129f0:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80129f4:	f000 8252 	beq.w	8012e9c <uxr_read_framed_msg+0x510>
 80129f8:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80129fa:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80129fc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8012a00:	b29b      	uxth	r3, r3
 8012a02:	2200      	movs	r2, #0
 8012a04:	4299      	cmp	r1, r3
 8012a06:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8012a08:	7022      	strb	r2, [r4, #0]
 8012a0a:	f000 8179 	beq.w	8012d00 <uxr_read_framed_msg+0x374>
 8012a0e:	2000      	movs	r0, #0
 8012a10:	b003      	add	sp, #12
 8012a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a16:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012a1a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012a1e:	4299      	cmp	r1, r3
 8012a20:	f000 8131 	beq.w	8012c86 <uxr_read_framed_msg+0x2fa>
 8012a24:	18e2      	adds	r2, r4, r3
 8012a26:	7890      	ldrb	r0, [r2, #2]
 8012a28:	287d      	cmp	r0, #125	@ 0x7d
 8012a2a:	f000 8190 	beq.w	8012d4e <uxr_read_framed_msg+0x3c2>
 8012a2e:	3301      	adds	r3, #1
 8012a30:	085a      	lsrs	r2, r3, #1
 8012a32:	fba5 1202 	umull	r1, r2, r5, r2
 8012a36:	0892      	lsrs	r2, r2, #2
 8012a38:	212a      	movs	r1, #42	@ 0x2a
 8012a3a:	fb01 3312 	mls	r3, r1, r2, r3
 8012a3e:	287e      	cmp	r0, #126	@ 0x7e
 8012a40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012a44:	f000 821a 	beq.w	8012e7c <uxr_read_framed_msg+0x4f0>
 8012a48:	2307      	movs	r3, #7
 8012a4a:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8012a4c:	7023      	strb	r3, [r4, #0]
 8012a4e:	e7ae      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012a50:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012a52:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012a56:	459e      	cmp	lr, r3
 8012a58:	d938      	bls.n	8012acc <uxr_read_framed_msg+0x140>
 8012a5a:	ee07 8a90 	vmov	s15, r8
 8012a5e:	212a      	movs	r1, #42	@ 0x2a
 8012a60:	e020      	b.n	8012aa4 <uxr_read_framed_msg+0x118>
 8012a62:	f89b c002 	ldrb.w	ip, [fp, #2]
 8012a66:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8012a6a:	f000 80d4 	beq.w	8012c16 <uxr_read_framed_msg+0x28a>
 8012a6e:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012a72:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012a76:	f000 8219 	beq.w	8012eac <uxr_read_framed_msg+0x520>
 8012a7a:	f806 c003 	strb.w	ip, [r6, r3]
 8012a7e:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 8012a82:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8012a84:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8012a88:	ea8a 000c 	eor.w	r0, sl, ip
 8012a8c:	b2c0      	uxtb	r0, r0
 8012a8e:	3301      	adds	r3, #1
 8012a90:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8012a94:	b29b      	uxth	r3, r3
 8012a96:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8012a9a:	4573      	cmp	r3, lr
 8012a9c:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012a9e:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8012aa0:	f080 8120 	bcs.w	8012ce4 <uxr_read_framed_msg+0x358>
 8012aa4:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8012aa8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012aac:	f100 0c01 	add.w	ip, r0, #1
 8012ab0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012ab4:	fba5 8202 	umull	r8, r2, r5, r2
 8012ab8:	0892      	lsrs	r2, r2, #2
 8012aba:	4582      	cmp	sl, r0
 8012abc:	eb04 0b00 	add.w	fp, r4, r0
 8012ac0:	fb01 c212 	mls	r2, r1, r2, ip
 8012ac4:	d1cd      	bne.n	8012a62 <uxr_read_framed_msg+0xd6>
 8012ac6:	ee17 8a90 	vmov	r8, s15
 8012aca:	459e      	cmp	lr, r3
 8012acc:	f040 8111 	bne.w	8012cf2 <uxr_read_framed_msg+0x366>
 8012ad0:	2306      	movs	r3, #6
 8012ad2:	7023      	strb	r3, [r4, #0]
 8012ad4:	e76b      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012ad6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012ada:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012ade:	4298      	cmp	r0, r3
 8012ae0:	f000 80c2 	beq.w	8012c68 <uxr_read_framed_msg+0x2dc>
 8012ae4:	18e2      	adds	r2, r4, r3
 8012ae6:	7891      	ldrb	r1, [r2, #2]
 8012ae8:	297d      	cmp	r1, #125	@ 0x7d
 8012aea:	f000 814c 	beq.w	8012d86 <uxr_read_framed_msg+0x3fa>
 8012aee:	3301      	adds	r3, #1
 8012af0:	085a      	lsrs	r2, r3, #1
 8012af2:	fba5 0202 	umull	r0, r2, r5, r2
 8012af6:	0892      	lsrs	r2, r2, #2
 8012af8:	202a      	movs	r0, #42	@ 0x2a
 8012afa:	fb00 3312 	mls	r3, r0, r2, r3
 8012afe:	297e      	cmp	r1, #126	@ 0x7e
 8012b00:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b04:	f000 81ca 	beq.w	8012e9c <uxr_read_framed_msg+0x510>
 8012b08:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8012b0a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8012b0e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012b10:	b29b      	uxth	r3, r3
 8012b12:	2000      	movs	r0, #0
 8012b14:	428b      	cmp	r3, r1
 8012b16:	8623      	strh	r3, [r4, #48]	@ 0x30
 8012b18:	8660      	strh	r0, [r4, #50]	@ 0x32
 8012b1a:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8012b1c:	f240 80df 	bls.w	8012cde <uxr_read_framed_msg+0x352>
 8012b20:	7020      	strb	r0, [r4, #0]
 8012b22:	b003      	add	sp, #12
 8012b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b28:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012b2c:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012b30:	4299      	cmp	r1, r3
 8012b32:	f000 80a8 	beq.w	8012c86 <uxr_read_framed_msg+0x2fa>
 8012b36:	18e2      	adds	r2, r4, r3
 8012b38:	7890      	ldrb	r0, [r2, #2]
 8012b3a:	287d      	cmp	r0, #125	@ 0x7d
 8012b3c:	f000 8164 	beq.w	8012e08 <uxr_read_framed_msg+0x47c>
 8012b40:	3301      	adds	r3, #1
 8012b42:	085a      	lsrs	r2, r3, #1
 8012b44:	fba5 1202 	umull	r1, r2, r5, r2
 8012b48:	0892      	lsrs	r2, r2, #2
 8012b4a:	212a      	movs	r1, #42	@ 0x2a
 8012b4c:	fb01 3312 	mls	r3, r1, r2, r3
 8012b50:	287e      	cmp	r0, #126	@ 0x7e
 8012b52:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012b56:	f000 8191 	beq.w	8012e7c <uxr_read_framed_msg+0x4f0>
 8012b5a:	2304      	movs	r3, #4
 8012b5c:	8620      	strh	r0, [r4, #48]	@ 0x30
 8012b5e:	7023      	strb	r3, [r4, #0]
 8012b60:	e725      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012b62:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8012b66:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012b6a:	4290      	cmp	r0, r2
 8012b6c:	f000 80b3 	beq.w	8012cd6 <uxr_read_framed_msg+0x34a>
 8012b70:	18a3      	adds	r3, r4, r2
 8012b72:	7899      	ldrb	r1, [r3, #2]
 8012b74:	297d      	cmp	r1, #125	@ 0x7d
 8012b76:	f000 8164 	beq.w	8012e42 <uxr_read_framed_msg+0x4b6>
 8012b7a:	3201      	adds	r2, #1
 8012b7c:	0850      	lsrs	r0, r2, #1
 8012b7e:	fba5 3000 	umull	r3, r0, r5, r0
 8012b82:	0880      	lsrs	r0, r0, #2
 8012b84:	232a      	movs	r3, #42	@ 0x2a
 8012b86:	fb03 2210 	mls	r2, r3, r0, r2
 8012b8a:	297e      	cmp	r1, #126	@ 0x7e
 8012b8c:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012b90:	f000 8188 	beq.w	8012ea4 <uxr_read_framed_msg+0x518>
 8012b94:	7863      	ldrb	r3, [r4, #1]
 8012b96:	428b      	cmp	r3, r1
 8012b98:	bf0c      	ite	eq
 8012b9a:	2303      	moveq	r3, #3
 8012b9c:	2300      	movne	r3, #0
 8012b9e:	7023      	strb	r3, [r4, #0]
 8012ba0:	e705      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012ba2:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8012ba6:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8012baa:	2200      	movs	r2, #0
 8012bac:	4299      	cmp	r1, r3
 8012bae:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 8012bb2:	d06c      	beq.n	8012c8e <uxr_read_framed_msg+0x302>
 8012bb4:	18e2      	adds	r2, r4, r3
 8012bb6:	7890      	ldrb	r0, [r2, #2]
 8012bb8:	287d      	cmp	r0, #125	@ 0x7d
 8012bba:	f000 8101 	beq.w	8012dc0 <uxr_read_framed_msg+0x434>
 8012bbe:	3301      	adds	r3, #1
 8012bc0:	085a      	lsrs	r2, r3, #1
 8012bc2:	fba5 1202 	umull	r1, r2, r5, r2
 8012bc6:	0892      	lsrs	r2, r2, #2
 8012bc8:	212a      	movs	r1, #42	@ 0x2a
 8012bca:	fb01 3312 	mls	r3, r1, r2, r3
 8012bce:	287e      	cmp	r0, #126	@ 0x7e
 8012bd0:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8012bd4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012bd8:	d059      	beq.n	8012c8e <uxr_read_framed_msg+0x302>
 8012bda:	2302      	movs	r3, #2
 8012bdc:	7023      	strb	r3, [r4, #0]
 8012bde:	e6e6      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012be0:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8012be4:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012be8:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8012bec:	1c51      	adds	r1, r2, #1
 8012bee:	084b      	lsrs	r3, r1, #1
 8012bf0:	fba5 c303 	umull	ip, r3, r5, r3
 8012bf4:	089b      	lsrs	r3, r3, #2
 8012bf6:	fb0e 1313 	mls	r3, lr, r3, r1
 8012bfa:	4592      	cmp	sl, r2
 8012bfc:	eb04 0002 	add.w	r0, r4, r2
 8012c00:	b2da      	uxtb	r2, r3
 8012c02:	f43f af04 	beq.w	8012a0e <uxr_read_framed_msg+0x82>
 8012c06:	7883      	ldrb	r3, [r0, #2]
 8012c08:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012c0c:	2b7e      	cmp	r3, #126	@ 0x7e
 8012c0e:	d1ed      	bne.n	8012bec <uxr_read_framed_msg+0x260>
 8012c10:	2301      	movs	r3, #1
 8012c12:	7023      	strb	r3, [r4, #0]
 8012c14:	e6cb      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012c16:	f100 0c01 	add.w	ip, r0, #1
 8012c1a:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012c1e:	fba5 8202 	umull	r8, r2, r5, r2
 8012c22:	0892      	lsrs	r2, r2, #2
 8012c24:	fb01 c212 	mls	r2, r1, r2, ip
 8012c28:	eb04 0c02 	add.w	ip, r4, r2
 8012c2c:	b2d2      	uxtb	r2, r2
 8012c2e:	4592      	cmp	sl, r2
 8012c30:	f100 0002 	add.w	r0, r0, #2
 8012c34:	f43f af47 	beq.w	8012ac6 <uxr_read_framed_msg+0x13a>
 8012c38:	0842      	lsrs	r2, r0, #1
 8012c3a:	f89c a002 	ldrb.w	sl, [ip, #2]
 8012c3e:	fba5 8202 	umull	r8, r2, r5, r2
 8012c42:	0892      	lsrs	r2, r2, #2
 8012c44:	fb01 0012 	mls	r0, r1, r2, r0
 8012c48:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8012c4c:	f08a 0c20 	eor.w	ip, sl, #32
 8012c50:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 8012c54:	f47f af11 	bne.w	8012a7a <uxr_read_framed_msg+0xee>
 8012c58:	459e      	cmp	lr, r3
 8012c5a:	ee17 8a90 	vmov	r8, s15
 8012c5e:	f43f af37 	beq.w	8012ad0 <uxr_read_framed_msg+0x144>
 8012c62:	2301      	movs	r3, #1
 8012c64:	7023      	strb	r3, [r4, #0]
 8012c66:	e6a2      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012c68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c6a:	9300      	str	r3, [sp, #0]
 8012c6c:	2301      	movs	r3, #1
 8012c6e:	9301      	str	r3, [sp, #4]
 8012c70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c72:	464a      	mov	r2, r9
 8012c74:	4641      	mov	r1, r8
 8012c76:	4620      	mov	r0, r4
 8012c78:	f7ff fe06 	bl	8012888 <uxr_framing_read_transport>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	f43f aec6 	beq.w	8012a0e <uxr_read_framed_msg+0x82>
 8012c82:	7823      	ldrb	r3, [r4, #0]
 8012c84:	e693      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012c86:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c88:	9300      	str	r3, [sp, #0]
 8012c8a:	2302      	movs	r3, #2
 8012c8c:	e7ef      	b.n	8012c6e <uxr_read_framed_msg+0x2e2>
 8012c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	2304      	movs	r3, #4
 8012c94:	9301      	str	r3, [sp, #4]
 8012c96:	464a      	mov	r2, r9
 8012c98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012c9a:	4641      	mov	r1, r8
 8012c9c:	4620      	mov	r0, r4
 8012c9e:	f7ff fdf3 	bl	8012888 <uxr_framing_read_transport>
 8012ca2:	2800      	cmp	r0, #0
 8012ca4:	d1ed      	bne.n	8012c82 <uxr_read_framed_msg+0x2f6>
 8012ca6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012caa:	2b7e      	cmp	r3, #126	@ 0x7e
 8012cac:	d0e9      	beq.n	8012c82 <uxr_read_framed_msg+0x2f6>
 8012cae:	e6ae      	b.n	8012a0e <uxr_read_framed_msg+0x82>
 8012cb0:	30c30c31 	.word	0x30c30c31
 8012cb4:	0801bcac 	.word	0x0801bcac
 8012cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cba:	9300      	str	r3, [sp, #0]
 8012cbc:	2305      	movs	r3, #5
 8012cbe:	9301      	str	r3, [sp, #4]
 8012cc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012cc2:	f7ff fde1 	bl	8012888 <uxr_framing_read_transport>
 8012cc6:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8012cca:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	f43f ae9d 	beq.w	8012a0e <uxr_read_framed_msg+0x82>
 8012cd4:	e668      	b.n	80129a8 <uxr_read_framed_msg+0x1c>
 8012cd6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cd8:	9300      	str	r3, [sp, #0]
 8012cda:	2303      	movs	r3, #3
 8012cdc:	e7c7      	b.n	8012c6e <uxr_read_framed_msg+0x2e2>
 8012cde:	2305      	movs	r3, #5
 8012ce0:	7023      	strb	r3, [r4, #0]
 8012ce2:	e664      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012ce4:	ee17 8a90 	vmov	r8, s15
 8012ce8:	f43f aef2 	beq.w	8012ad0 <uxr_read_framed_msg+0x144>
 8012cec:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8012cf0:	d08e      	beq.n	8012c10 <uxr_read_framed_msg+0x284>
 8012cf2:	ebae 0303 	sub.w	r3, lr, r3
 8012cf6:	3302      	adds	r3, #2
 8012cf8:	9301      	str	r3, [sp, #4]
 8012cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012cfc:	9300      	str	r3, [sp, #0]
 8012cfe:	e7b7      	b.n	8012c70 <uxr_read_framed_msg+0x2e4>
 8012d00:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012d02:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8012d06:	7013      	strb	r3, [r2, #0]
 8012d08:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 8012d0a:	b003      	add	sp, #12
 8012d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d10:	f103 0c01 	add.w	ip, r3, #1
 8012d14:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012d18:	fba5 0202 	umull	r0, r2, r5, r2
 8012d1c:	0892      	lsrs	r2, r2, #2
 8012d1e:	202a      	movs	r0, #42	@ 0x2a
 8012d20:	fb00 c212 	mls	r2, r0, r2, ip
 8012d24:	fa5f fc82 	uxtb.w	ip, r2
 8012d28:	4561      	cmp	r1, ip
 8012d2a:	d09d      	beq.n	8012c68 <uxr_read_framed_msg+0x2dc>
 8012d2c:	3302      	adds	r3, #2
 8012d2e:	4422      	add	r2, r4
 8012d30:	0859      	lsrs	r1, r3, #1
 8012d32:	7892      	ldrb	r2, [r2, #2]
 8012d34:	fba5 c101 	umull	ip, r1, r5, r1
 8012d38:	0889      	lsrs	r1, r1, #2
 8012d3a:	fb00 3311 	mls	r3, r0, r1, r3
 8012d3e:	2a7e      	cmp	r2, #126	@ 0x7e
 8012d40:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d44:	f000 80aa 	beq.w	8012e9c <uxr_read_framed_msg+0x510>
 8012d48:	f082 0220 	eor.w	r2, r2, #32
 8012d4c:	e654      	b.n	80129f8 <uxr_read_framed_msg+0x6c>
 8012d4e:	1c58      	adds	r0, r3, #1
 8012d50:	0842      	lsrs	r2, r0, #1
 8012d52:	fba5 c202 	umull	ip, r2, r5, r2
 8012d56:	0892      	lsrs	r2, r2, #2
 8012d58:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012d5c:	fb0c 0212 	mls	r2, ip, r2, r0
 8012d60:	b2d0      	uxtb	r0, r2
 8012d62:	4281      	cmp	r1, r0
 8012d64:	d08f      	beq.n	8012c86 <uxr_read_framed_msg+0x2fa>
 8012d66:	4422      	add	r2, r4
 8012d68:	3302      	adds	r3, #2
 8012d6a:	7890      	ldrb	r0, [r2, #2]
 8012d6c:	085a      	lsrs	r2, r3, #1
 8012d6e:	fba5 1202 	umull	r1, r2, r5, r2
 8012d72:	0892      	lsrs	r2, r2, #2
 8012d74:	fb0c 3312 	mls	r3, ip, r2, r3
 8012d78:	287e      	cmp	r0, #126	@ 0x7e
 8012d7a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012d7e:	d07d      	beq.n	8012e7c <uxr_read_framed_msg+0x4f0>
 8012d80:	f080 0020 	eor.w	r0, r0, #32
 8012d84:	e660      	b.n	8012a48 <uxr_read_framed_msg+0xbc>
 8012d86:	1c59      	adds	r1, r3, #1
 8012d88:	084a      	lsrs	r2, r1, #1
 8012d8a:	fba5 c202 	umull	ip, r2, r5, r2
 8012d8e:	0892      	lsrs	r2, r2, #2
 8012d90:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012d94:	fb0c 1212 	mls	r2, ip, r2, r1
 8012d98:	b2d1      	uxtb	r1, r2
 8012d9a:	4288      	cmp	r0, r1
 8012d9c:	f43f af64 	beq.w	8012c68 <uxr_read_framed_msg+0x2dc>
 8012da0:	4422      	add	r2, r4
 8012da2:	3302      	adds	r3, #2
 8012da4:	7891      	ldrb	r1, [r2, #2]
 8012da6:	085a      	lsrs	r2, r3, #1
 8012da8:	fba5 0202 	umull	r0, r2, r5, r2
 8012dac:	0892      	lsrs	r2, r2, #2
 8012dae:	fb0c 3312 	mls	r3, ip, r2, r3
 8012db2:	297e      	cmp	r1, #126	@ 0x7e
 8012db4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012db8:	d070      	beq.n	8012e9c <uxr_read_framed_msg+0x510>
 8012dba:	f081 0120 	eor.w	r1, r1, #32
 8012dbe:	e6a3      	b.n	8012b08 <uxr_read_framed_msg+0x17c>
 8012dc0:	f103 0c01 	add.w	ip, r3, #1
 8012dc4:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012dc8:	fba5 0202 	umull	r0, r2, r5, r2
 8012dcc:	0892      	lsrs	r2, r2, #2
 8012dce:	202a      	movs	r0, #42	@ 0x2a
 8012dd0:	fb00 c212 	mls	r2, r0, r2, ip
 8012dd4:	fa5f fc82 	uxtb.w	ip, r2
 8012dd8:	4561      	cmp	r1, ip
 8012dda:	f43f af58 	beq.w	8012c8e <uxr_read_framed_msg+0x302>
 8012dde:	4422      	add	r2, r4
 8012de0:	3302      	adds	r3, #2
 8012de2:	7891      	ldrb	r1, [r2, #2]
 8012de4:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012de8:	085a      	lsrs	r2, r3, #1
 8012dea:	fba5 c202 	umull	ip, r2, r5, r2
 8012dee:	0892      	lsrs	r2, r2, #2
 8012df0:	fb00 3312 	mls	r3, r0, r2, r3
 8012df4:	297e      	cmp	r1, #126	@ 0x7e
 8012df6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012dfa:	f43f af48 	beq.w	8012c8e <uxr_read_framed_msg+0x302>
 8012dfe:	f081 0120 	eor.w	r1, r1, #32
 8012e02:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 8012e06:	e6e8      	b.n	8012bda <uxr_read_framed_msg+0x24e>
 8012e08:	1c58      	adds	r0, r3, #1
 8012e0a:	0842      	lsrs	r2, r0, #1
 8012e0c:	fba5 c202 	umull	ip, r2, r5, r2
 8012e10:	0892      	lsrs	r2, r2, #2
 8012e12:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e16:	fb0c 0212 	mls	r2, ip, r2, r0
 8012e1a:	b2d0      	uxtb	r0, r2
 8012e1c:	4281      	cmp	r1, r0
 8012e1e:	f43f af32 	beq.w	8012c86 <uxr_read_framed_msg+0x2fa>
 8012e22:	4422      	add	r2, r4
 8012e24:	3302      	adds	r3, #2
 8012e26:	7890      	ldrb	r0, [r2, #2]
 8012e28:	085a      	lsrs	r2, r3, #1
 8012e2a:	fba5 1202 	umull	r1, r2, r5, r2
 8012e2e:	0892      	lsrs	r2, r2, #2
 8012e30:	fb0c 3312 	mls	r3, ip, r2, r3
 8012e34:	287e      	cmp	r0, #126	@ 0x7e
 8012e36:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8012e3a:	d01f      	beq.n	8012e7c <uxr_read_framed_msg+0x4f0>
 8012e3c:	f080 0020 	eor.w	r0, r0, #32
 8012e40:	e68b      	b.n	8012b5a <uxr_read_framed_msg+0x1ce>
 8012e42:	1c51      	adds	r1, r2, #1
 8012e44:	084b      	lsrs	r3, r1, #1
 8012e46:	fba5 c303 	umull	ip, r3, r5, r3
 8012e4a:	089b      	lsrs	r3, r3, #2
 8012e4c:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8012e50:	fb0c 1313 	mls	r3, ip, r3, r1
 8012e54:	b2d9      	uxtb	r1, r3
 8012e56:	4288      	cmp	r0, r1
 8012e58:	f43f af3d 	beq.w	8012cd6 <uxr_read_framed_msg+0x34a>
 8012e5c:	3202      	adds	r2, #2
 8012e5e:	4423      	add	r3, r4
 8012e60:	0850      	lsrs	r0, r2, #1
 8012e62:	789b      	ldrb	r3, [r3, #2]
 8012e64:	fba5 1000 	umull	r1, r0, r5, r0
 8012e68:	0880      	lsrs	r0, r0, #2
 8012e6a:	fb0c 2210 	mls	r2, ip, r0, r2
 8012e6e:	2b7e      	cmp	r3, #126	@ 0x7e
 8012e70:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8012e74:	d016      	beq.n	8012ea4 <uxr_read_framed_msg+0x518>
 8012e76:	f083 0120 	eor.w	r1, r3, #32
 8012e7a:	e68b      	b.n	8012b94 <uxr_read_framed_msg+0x208>
 8012e7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e7e:	9300      	str	r3, [sp, #0]
 8012e80:	2302      	movs	r3, #2
 8012e82:	9301      	str	r3, [sp, #4]
 8012e84:	464a      	mov	r2, r9
 8012e86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012e88:	4641      	mov	r1, r8
 8012e8a:	4620      	mov	r0, r4
 8012e8c:	f7ff fcfc 	bl	8012888 <uxr_framing_read_transport>
 8012e90:	2800      	cmp	r0, #0
 8012e92:	f47f aef6 	bne.w	8012c82 <uxr_read_framed_msg+0x2f6>
 8012e96:	2301      	movs	r3, #1
 8012e98:	7023      	strb	r3, [r4, #0]
 8012e9a:	e588      	b.n	80129ae <uxr_read_framed_msg+0x22>
 8012e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e9e:	9300      	str	r3, [sp, #0]
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	e7ee      	b.n	8012e82 <uxr_read_framed_msg+0x4f6>
 8012ea4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012ea6:	9300      	str	r3, [sp, #0]
 8012ea8:	2303      	movs	r3, #3
 8012eaa:	e7ea      	b.n	8012e82 <uxr_read_framed_msg+0x4f6>
 8012eac:	ee17 8a90 	vmov	r8, s15
 8012eb0:	e6ae      	b.n	8012c10 <uxr_read_framed_msg+0x284>
 8012eb2:	bf00      	nop

08012eb4 <uxr_stream_id>:
 8012eb4:	2901      	cmp	r1, #1
 8012eb6:	b082      	sub	sp, #8
 8012eb8:	d01d      	beq.n	8012ef6 <uxr_stream_id+0x42>
 8012eba:	2902      	cmp	r1, #2
 8012ebc:	f04f 0c00 	mov.w	ip, #0
 8012ec0:	d01e      	beq.n	8012f00 <uxr_stream_id+0x4c>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	f36c 0307 	bfi	r3, ip, #0, #8
 8012ec8:	f360 230f 	bfi	r3, r0, #8, #8
 8012ecc:	f361 4317 	bfi	r3, r1, #16, #8
 8012ed0:	f362 631f 	bfi	r3, r2, #24, #8
 8012ed4:	b2da      	uxtb	r2, r3
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	f362 0007 	bfi	r0, r2, #0, #8
 8012edc:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012ee0:	f362 200f 	bfi	r0, r2, #8, #8
 8012ee4:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012ee8:	f362 4017 	bfi	r0, r2, #16, #8
 8012eec:	0e1b      	lsrs	r3, r3, #24
 8012eee:	f363 601f 	bfi	r0, r3, #24, #8
 8012ef2:	b002      	add	sp, #8
 8012ef4:	4770      	bx	lr
 8012ef6:	f100 0c01 	add.w	ip, r0, #1
 8012efa:	fa5f fc8c 	uxtb.w	ip, ip
 8012efe:	e7e0      	b.n	8012ec2 <uxr_stream_id+0xe>
 8012f00:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 8012f04:	e7dd      	b.n	8012ec2 <uxr_stream_id+0xe>
 8012f06:	bf00      	nop

08012f08 <uxr_stream_id_from_raw>:
 8012f08:	b082      	sub	sp, #8
 8012f0a:	b130      	cbz	r0, 8012f1a <uxr_stream_id_from_raw+0x12>
 8012f0c:	0603      	lsls	r3, r0, #24
 8012f0e:	d420      	bmi.n	8012f52 <uxr_stream_id_from_raw+0x4a>
 8012f10:	1e42      	subs	r2, r0, #1
 8012f12:	b2d2      	uxtb	r2, r2
 8012f14:	f04f 0c01 	mov.w	ip, #1
 8012f18:	e001      	b.n	8012f1e <uxr_stream_id_from_raw+0x16>
 8012f1a:	4684      	mov	ip, r0
 8012f1c:	4602      	mov	r2, r0
 8012f1e:	2300      	movs	r3, #0
 8012f20:	f360 0307 	bfi	r3, r0, #0, #8
 8012f24:	f362 230f 	bfi	r3, r2, #8, #8
 8012f28:	f36c 4317 	bfi	r3, ip, #16, #8
 8012f2c:	f361 631f 	bfi	r3, r1, #24, #8
 8012f30:	b2da      	uxtb	r2, r3
 8012f32:	2000      	movs	r0, #0
 8012f34:	f362 0007 	bfi	r0, r2, #0, #8
 8012f38:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8012f3c:	f362 200f 	bfi	r0, r2, #8, #8
 8012f40:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8012f44:	f362 4017 	bfi	r0, r2, #16, #8
 8012f48:	0e1b      	lsrs	r3, r3, #24
 8012f4a:	f363 601f 	bfi	r0, r3, #24, #8
 8012f4e:	b002      	add	sp, #8
 8012f50:	4770      	bx	lr
 8012f52:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 8012f56:	f04f 0c02 	mov.w	ip, #2
 8012f5a:	e7e0      	b.n	8012f1e <uxr_stream_id_from_raw+0x16>

08012f5c <uxr_init_stream_storage>:
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	7403      	strb	r3, [r0, #16]
 8012f60:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 8012f64:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8012f68:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8012f6c:	4770      	bx	lr
 8012f6e:	bf00      	nop

08012f70 <uxr_reset_stream_storage>:
 8012f70:	b570      	push	{r4, r5, r6, lr}
 8012f72:	7c03      	ldrb	r3, [r0, #16]
 8012f74:	4604      	mov	r4, r0
 8012f76:	b153      	cbz	r3, 8012f8e <uxr_reset_stream_storage+0x1e>
 8012f78:	4606      	mov	r6, r0
 8012f7a:	2500      	movs	r5, #0
 8012f7c:	4630      	mov	r0, r6
 8012f7e:	f005 fe9b 	bl	8018cb8 <uxr_reset_output_best_effort_stream>
 8012f82:	7c23      	ldrb	r3, [r4, #16]
 8012f84:	3501      	adds	r5, #1
 8012f86:	42ab      	cmp	r3, r5
 8012f88:	f106 0610 	add.w	r6, r6, #16
 8012f8c:	d8f6      	bhi.n	8012f7c <uxr_reset_stream_storage+0xc>
 8012f8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012f92:	b163      	cbz	r3, 8012fae <uxr_reset_stream_storage+0x3e>
 8012f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f98:	2500      	movs	r5, #0
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	f005 fc8e 	bl	80188bc <uxr_reset_input_best_effort_stream>
 8012fa0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8012fa4:	3501      	adds	r5, #1
 8012fa6:	42ab      	cmp	r3, r5
 8012fa8:	f106 0602 	add.w	r6, r6, #2
 8012fac:	d8f5      	bhi.n	8012f9a <uxr_reset_stream_storage+0x2a>
 8012fae:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012fb2:	b163      	cbz	r3, 8012fce <uxr_reset_stream_storage+0x5e>
 8012fb4:	f104 0618 	add.w	r6, r4, #24
 8012fb8:	2500      	movs	r5, #0
 8012fba:	4630      	mov	r0, r6
 8012fbc:	f005 ff28 	bl	8018e10 <uxr_reset_output_reliable_stream>
 8012fc0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8012fc4:	3501      	adds	r5, #1
 8012fc6:	42ab      	cmp	r3, r5
 8012fc8:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 8012fcc:	d8f5      	bhi.n	8012fba <uxr_reset_stream_storage+0x4a>
 8012fce:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012fd2:	b163      	cbz	r3, 8012fee <uxr_reset_stream_storage+0x7e>
 8012fd4:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 8012fd8:	2500      	movs	r5, #0
 8012fda:	4630      	mov	r0, r6
 8012fdc:	f005 fce2 	bl	80189a4 <uxr_reset_input_reliable_stream>
 8012fe0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 8012fe4:	3501      	adds	r5, #1
 8012fe6:	42ab      	cmp	r3, r5
 8012fe8:	f106 0618 	add.w	r6, r6, #24
 8012fec:	d8f5      	bhi.n	8012fda <uxr_reset_stream_storage+0x6a>
 8012fee:	bd70      	pop	{r4, r5, r6, pc}

08012ff0 <uxr_add_output_best_effort_buffer>:
 8012ff0:	b510      	push	{r4, lr}
 8012ff2:	7c04      	ldrb	r4, [r0, #16]
 8012ff4:	f104 0c01 	add.w	ip, r4, #1
 8012ff8:	b082      	sub	sp, #8
 8012ffa:	f880 c010 	strb.w	ip, [r0, #16]
 8012ffe:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 8013002:	f005 fe4f 	bl	8018ca4 <uxr_init_output_best_effort_stream>
 8013006:	2201      	movs	r2, #1
 8013008:	4611      	mov	r1, r2
 801300a:	4620      	mov	r0, r4
 801300c:	b002      	add	sp, #8
 801300e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013012:	f7ff bf4f 	b.w	8012eb4 <uxr_stream_id>
 8013016:	bf00      	nop

08013018 <uxr_add_output_reliable_buffer>:
 8013018:	b510      	push	{r4, lr}
 801301a:	b084      	sub	sp, #16
 801301c:	4684      	mov	ip, r0
 801301e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013022:	9000      	str	r0, [sp, #0]
 8013024:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8013028:	2028      	movs	r0, #40	@ 0x28
 801302a:	fb00 c004 	mla	r0, r0, r4, ip
 801302e:	f104 0e01 	add.w	lr, r4, #1
 8013032:	3018      	adds	r0, #24
 8013034:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8013038:	f005 feb2 	bl	8018da0 <uxr_init_output_reliable_stream>
 801303c:	2201      	movs	r2, #1
 801303e:	2102      	movs	r1, #2
 8013040:	4620      	mov	r0, r4
 8013042:	b004      	add	sp, #16
 8013044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013048:	f7ff bf34 	b.w	8012eb4 <uxr_stream_id>

0801304c <uxr_add_input_best_effort_buffer>:
 801304c:	b510      	push	{r4, lr}
 801304e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8013052:	4603      	mov	r3, r0
 8013054:	1c62      	adds	r2, r4, #1
 8013056:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 801305a:	b082      	sub	sp, #8
 801305c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8013064:	f005 fc26 	bl	80188b4 <uxr_init_input_best_effort_stream>
 8013068:	2200      	movs	r2, #0
 801306a:	2101      	movs	r1, #1
 801306c:	4620      	mov	r0, r4
 801306e:	b002      	add	sp, #8
 8013070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013074:	f7ff bf1e 	b.w	8012eb4 <uxr_stream_id>

08013078 <uxr_add_input_reliable_buffer>:
 8013078:	b510      	push	{r4, lr}
 801307a:	b084      	sub	sp, #16
 801307c:	4684      	mov	ip, r0
 801307e:	9806      	ldr	r0, [sp, #24]
 8013080:	9000      	str	r0, [sp, #0]
 8013082:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8013086:	2018      	movs	r0, #24
 8013088:	fb00 c004 	mla	r0, r0, r4, ip
 801308c:	f104 0e01 	add.w	lr, r4, #1
 8013090:	3048      	adds	r0, #72	@ 0x48
 8013092:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8013096:	f005 fc59 	bl	801894c <uxr_init_input_reliable_stream>
 801309a:	2200      	movs	r2, #0
 801309c:	2102      	movs	r1, #2
 801309e:	4620      	mov	r0, r4
 80130a0:	b004      	add	sp, #16
 80130a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80130a6:	f7ff bf05 	b.w	8012eb4 <uxr_stream_id>
 80130aa:	bf00      	nop

080130ac <uxr_get_output_best_effort_stream>:
 80130ac:	7c03      	ldrb	r3, [r0, #16]
 80130ae:	428b      	cmp	r3, r1
 80130b0:	bf8c      	ite	hi
 80130b2:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 80130b6:	2000      	movls	r0, #0
 80130b8:	4770      	bx	lr
 80130ba:	bf00      	nop

080130bc <uxr_get_output_reliable_stream>:
 80130bc:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80130c0:	428b      	cmp	r3, r1
 80130c2:	bf83      	ittte	hi
 80130c4:	2328      	movhi	r3, #40	@ 0x28
 80130c6:	fb03 0001 	mlahi	r0, r3, r1, r0
 80130ca:	3018      	addhi	r0, #24
 80130cc:	2000      	movls	r0, #0
 80130ce:	4770      	bx	lr

080130d0 <uxr_get_input_best_effort_stream>:
 80130d0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80130d4:	428b      	cmp	r3, r1
 80130d6:	bf86      	itte	hi
 80130d8:	3121      	addhi	r1, #33	@ 0x21
 80130da:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 80130de:	2000      	movls	r0, #0
 80130e0:	4770      	bx	lr
 80130e2:	bf00      	nop

080130e4 <uxr_get_input_reliable_stream>:
 80130e4:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80130e8:	428b      	cmp	r3, r1
 80130ea:	bf83      	ittte	hi
 80130ec:	2318      	movhi	r3, #24
 80130ee:	fb03 0001 	mlahi	r0, r3, r1, r0
 80130f2:	3048      	addhi	r0, #72	@ 0x48
 80130f4:	2000      	movls	r0, #0
 80130f6:	4770      	bx	lr

080130f8 <uxr_output_streams_confirmed>:
 80130f8:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80130fc:	b183      	cbz	r3, 8013120 <uxr_output_streams_confirmed+0x28>
 80130fe:	b570      	push	{r4, r5, r6, lr}
 8013100:	4606      	mov	r6, r0
 8013102:	f100 0518 	add.w	r5, r0, #24
 8013106:	2400      	movs	r4, #0
 8013108:	e001      	b.n	801310e <uxr_output_streams_confirmed+0x16>
 801310a:	3528      	adds	r5, #40	@ 0x28
 801310c:	b138      	cbz	r0, 801311e <uxr_output_streams_confirmed+0x26>
 801310e:	4628      	mov	r0, r5
 8013110:	f006 f8ee 	bl	80192f0 <uxr_is_output_up_to_date>
 8013114:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8013118:	3401      	adds	r4, #1
 801311a:	42a3      	cmp	r3, r4
 801311c:	d8f5      	bhi.n	801310a <uxr_output_streams_confirmed+0x12>
 801311e:	bd70      	pop	{r4, r5, r6, pc}
 8013120:	2001      	movs	r0, #1
 8013122:	4770      	bx	lr

08013124 <uxr_buffer_submessage_header>:
 8013124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013126:	4604      	mov	r4, r0
 8013128:	460e      	mov	r6, r1
 801312a:	2104      	movs	r1, #4
 801312c:	4615      	mov	r5, r2
 801312e:	461f      	mov	r7, r3
 8013130:	f7fd fd2a 	bl	8010b88 <ucdr_align_to>
 8013134:	2301      	movs	r3, #1
 8013136:	ea47 0203 	orr.w	r2, r7, r3
 801313a:	4631      	mov	r1, r6
 801313c:	7523      	strb	r3, [r4, #20]
 801313e:	4620      	mov	r0, r4
 8013140:	462b      	mov	r3, r5
 8013142:	f000 fa27 	bl	8013594 <uxr_serialize_submessage_header>
 8013146:	4620      	mov	r0, r4
 8013148:	f7fd fd34 	bl	8010bb4 <ucdr_buffer_remaining>
 801314c:	42a8      	cmp	r0, r5
 801314e:	bf34      	ite	cc
 8013150:	2000      	movcc	r0, #0
 8013152:	2001      	movcs	r0, #1
 8013154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013156:	bf00      	nop

08013158 <uxr_read_submessage_header>:
 8013158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801315c:	4604      	mov	r4, r0
 801315e:	460d      	mov	r5, r1
 8013160:	2104      	movs	r1, #4
 8013162:	4616      	mov	r6, r2
 8013164:	4698      	mov	r8, r3
 8013166:	f7fd fd0f 	bl	8010b88 <ucdr_align_to>
 801316a:	4620      	mov	r0, r4
 801316c:	f7fd fd22 	bl	8010bb4 <ucdr_buffer_remaining>
 8013170:	2803      	cmp	r0, #3
 8013172:	bf8c      	ite	hi
 8013174:	2701      	movhi	r7, #1
 8013176:	2700      	movls	r7, #0
 8013178:	d802      	bhi.n	8013180 <uxr_read_submessage_header+0x28>
 801317a:	4638      	mov	r0, r7
 801317c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013180:	4633      	mov	r3, r6
 8013182:	4642      	mov	r2, r8
 8013184:	4620      	mov	r0, r4
 8013186:	4629      	mov	r1, r5
 8013188:	f000 fa18 	bl	80135bc <uxr_deserialize_submessage_header>
 801318c:	f898 3000 	ldrb.w	r3, [r8]
 8013190:	f003 0201 	and.w	r2, r3, #1
 8013194:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8013198:	f888 3000 	strb.w	r3, [r8]
 801319c:	7522      	strb	r2, [r4, #20]
 801319e:	4638      	mov	r0, r7
 80131a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080131a4 <uxr_submessage_padding>:
 80131a4:	f010 0003 	ands.w	r0, r0, #3
 80131a8:	bf18      	it	ne
 80131aa:	f1c0 0004 	rsbne	r0, r0, #4
 80131ae:	4770      	bx	lr

080131b0 <uxr_millis>:
 80131b0:	b510      	push	{r4, lr}
 80131b2:	b084      	sub	sp, #16
 80131b4:	4669      	mov	r1, sp
 80131b6:	2001      	movs	r0, #1
 80131b8:	f7ef f98a 	bl	80024d0 <clock_gettime>
 80131bc:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80131c0:	4906      	ldr	r1, [pc, #24]	@ (80131dc <uxr_millis+0x2c>)
 80131c2:	fba0 0301 	umull	r0, r3, r0, r1
 80131c6:	1900      	adds	r0, r0, r4
 80131c8:	fb01 3102 	mla	r1, r1, r2, r3
 80131cc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80131d0:	4a03      	ldr	r2, [pc, #12]	@ (80131e0 <uxr_millis+0x30>)
 80131d2:	2300      	movs	r3, #0
 80131d4:	f7ed fc7a 	bl	8000acc <__aeabi_ldivmod>
 80131d8:	b004      	add	sp, #16
 80131da:	bd10      	pop	{r4, pc}
 80131dc:	3b9aca00 	.word	0x3b9aca00
 80131e0:	000f4240 	.word	0x000f4240

080131e4 <uxr_nanos>:
 80131e4:	b510      	push	{r4, lr}
 80131e6:	b084      	sub	sp, #16
 80131e8:	4669      	mov	r1, sp
 80131ea:	2001      	movs	r0, #1
 80131ec:	f7ef f970 	bl	80024d0 <clock_gettime>
 80131f0:	4a06      	ldr	r2, [pc, #24]	@ (801320c <uxr_nanos+0x28>)
 80131f2:	9800      	ldr	r0, [sp, #0]
 80131f4:	9902      	ldr	r1, [sp, #8]
 80131f6:	9c01      	ldr	r4, [sp, #4]
 80131f8:	fba0 0302 	umull	r0, r3, r0, r2
 80131fc:	1840      	adds	r0, r0, r1
 80131fe:	fb02 3304 	mla	r3, r2, r4, r3
 8013202:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8013206:	b004      	add	sp, #16
 8013208:	bd10      	pop	{r4, pc}
 801320a:	bf00      	nop
 801320c:	3b9aca00 	.word	0x3b9aca00

08013210 <on_full_output_buffer_fragmented>:
 8013210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013214:	460c      	mov	r4, r1
 8013216:	b08a      	sub	sp, #40	@ 0x28
 8013218:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801321c:	4606      	mov	r6, r0
 801321e:	f104 0008 	add.w	r0, r4, #8
 8013222:	f7ff ff4b 	bl	80130bc <uxr_get_output_reliable_stream>
 8013226:	4605      	mov	r5, r0
 8013228:	f006 f86c 	bl	8019304 <get_available_free_slots>
 801322c:	b968      	cbnz	r0, 801324a <on_full_output_buffer_fragmented+0x3a>
 801322e:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8013232:	4620      	mov	r0, r4
 8013234:	4798      	blx	r3
 8013236:	b918      	cbnz	r0, 8013240 <on_full_output_buffer_fragmented+0x30>
 8013238:	2001      	movs	r0, #1
 801323a:	b00a      	add	sp, #40	@ 0x28
 801323c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013240:	4628      	mov	r0, r5
 8013242:	f006 f85f 	bl	8019304 <get_available_free_slots>
 8013246:	2800      	cmp	r0, #0
 8013248:	d0f6      	beq.n	8013238 <on_full_output_buffer_fragmented+0x28>
 801324a:	8929      	ldrh	r1, [r5, #8]
 801324c:	89eb      	ldrh	r3, [r5, #14]
 801324e:	7b28      	ldrb	r0, [r5, #12]
 8013250:	686a      	ldr	r2, [r5, #4]
 8013252:	fbb2 f8f1 	udiv	r8, r2, r1
 8013256:	fbb3 f2f1 	udiv	r2, r3, r1
 801325a:	fb01 3112 	mls	r1, r1, r2, r3
 801325e:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8013262:	b289      	uxth	r1, r1
 8013264:	fb08 f101 	mul.w	r1, r8, r1
 8013268:	30fc      	adds	r0, #252	@ 0xfc
 801326a:	f1a8 0804 	sub.w	r8, r8, #4
 801326e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8013272:	4440      	add	r0, r8
 8013274:	b287      	uxth	r7, r0
 8013276:	1bdb      	subs	r3, r3, r7
 8013278:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801327c:	682b      	ldr	r3, [r5, #0]
 801327e:	3104      	adds	r1, #4
 8013280:	4419      	add	r1, r3
 8013282:	4642      	mov	r2, r8
 8013284:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013288:	9300      	str	r3, [sp, #0]
 801328a:	a802      	add	r0, sp, #8
 801328c:	2300      	movs	r3, #0
 801328e:	f7fd fc4f 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8013292:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8013296:	f102 0308 	add.w	r3, r2, #8
 801329a:	4543      	cmp	r3, r8
 801329c:	d928      	bls.n	80132f0 <on_full_output_buffer_fragmented+0xe0>
 801329e:	463a      	mov	r2, r7
 80132a0:	2300      	movs	r3, #0
 80132a2:	210d      	movs	r1, #13
 80132a4:	a802      	add	r0, sp, #8
 80132a6:	f7ff ff3d 	bl	8013124 <uxr_buffer_submessage_header>
 80132aa:	8929      	ldrh	r1, [r5, #8]
 80132ac:	89eb      	ldrh	r3, [r5, #14]
 80132ae:	fbb3 f2f1 	udiv	r2, r3, r1
 80132b2:	fb01 3312 	mls	r3, r1, r2, r3
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	686a      	ldr	r2, [r5, #4]
 80132ba:	fbb2 f2f1 	udiv	r2, r2, r1
 80132be:	fb02 f303 	mul.w	r3, r2, r3
 80132c2:	682a      	ldr	r2, [r5, #0]
 80132c4:	f842 8003 	str.w	r8, [r2, r3]
 80132c8:	89e8      	ldrh	r0, [r5, #14]
 80132ca:	2101      	movs	r1, #1
 80132cc:	f006 f83a 	bl	8019344 <uxr_seq_num_add>
 80132d0:	9904      	ldr	r1, [sp, #16]
 80132d2:	9a03      	ldr	r2, [sp, #12]
 80132d4:	81e8      	strh	r0, [r5, #14]
 80132d6:	1a52      	subs	r2, r2, r1
 80132d8:	4630      	mov	r0, r6
 80132da:	f7fd fc3b 	bl	8010b54 <ucdr_init_buffer>
 80132de:	4630      	mov	r0, r6
 80132e0:	490f      	ldr	r1, [pc, #60]	@ (8013320 <on_full_output_buffer_fragmented+0x110>)
 80132e2:	4622      	mov	r2, r4
 80132e4:	f7fd fc0a 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 80132e8:	2000      	movs	r0, #0
 80132ea:	b00a      	add	sp, #40	@ 0x28
 80132ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80132f0:	b292      	uxth	r2, r2
 80132f2:	2302      	movs	r3, #2
 80132f4:	210d      	movs	r1, #13
 80132f6:	a802      	add	r0, sp, #8
 80132f8:	f7ff ff14 	bl	8013124 <uxr_buffer_submessage_header>
 80132fc:	8928      	ldrh	r0, [r5, #8]
 80132fe:	89eb      	ldrh	r3, [r5, #14]
 8013300:	fbb3 f1f0 	udiv	r1, r3, r0
 8013304:	fb00 3311 	mls	r3, r0, r1, r3
 8013308:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 801330c:	6869      	ldr	r1, [r5, #4]
 801330e:	fbb1 f1f0 	udiv	r1, r1, r0
 8013312:	b29b      	uxth	r3, r3
 8013314:	fb01 f303 	mul.w	r3, r1, r3
 8013318:	6829      	ldr	r1, [r5, #0]
 801331a:	3208      	adds	r2, #8
 801331c:	50ca      	str	r2, [r1, r3]
 801331e:	e7d3      	b.n	80132c8 <on_full_output_buffer_fragmented+0xb8>
 8013320:	08013211 	.word	0x08013211

08013324 <uxr_prepare_output_stream>:
 8013324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013326:	b087      	sub	sp, #28
 8013328:	2707      	movs	r7, #7
 801332a:	9202      	str	r2, [sp, #8]
 801332c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801332e:	9103      	str	r1, [sp, #12]
 8013330:	2500      	movs	r5, #0
 8013332:	3204      	adds	r2, #4
 8013334:	e9cd 7500 	strd	r7, r5, [sp]
 8013338:	461c      	mov	r4, r3
 801333a:	4606      	mov	r6, r0
 801333c:	f7fe ffc2 	bl	80122c4 <uxr_prepare_stream_to_write_submessage>
 8013340:	f080 0201 	eor.w	r2, r0, #1
 8013344:	b2d2      	uxtb	r2, r2
 8013346:	75a2      	strb	r2, [r4, #22]
 8013348:	b112      	cbz	r2, 8013350 <uxr_prepare_output_stream+0x2c>
 801334a:	4628      	mov	r0, r5
 801334c:	b007      	add	sp, #28
 801334e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013350:	aa05      	add	r2, sp, #20
 8013352:	9902      	ldr	r1, [sp, #8]
 8013354:	4630      	mov	r0, r6
 8013356:	f7ff f8eb 	bl	8012530 <uxr_init_base_object_request>
 801335a:	a905      	add	r1, sp, #20
 801335c:	4605      	mov	r5, r0
 801335e:	4620      	mov	r0, r4
 8013360:	f000 ffa0 	bl	80142a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 8013364:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8013368:	69a6      	ldr	r6, [r4, #24]
 801336a:	69e7      	ldr	r7, [r4, #28]
 801336c:	1a52      	subs	r2, r2, r1
 801336e:	4620      	mov	r0, r4
 8013370:	f7fd fbf0 	bl	8010b54 <ucdr_init_buffer>
 8013374:	4620      	mov	r0, r4
 8013376:	463a      	mov	r2, r7
 8013378:	4631      	mov	r1, r6
 801337a:	f7fd fbbf 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 801337e:	4628      	mov	r0, r5
 8013380:	b007      	add	sp, #28
 8013382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013384 <uxr_prepare_output_stream_fragmented>:
 8013384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013388:	b091      	sub	sp, #68	@ 0x44
 801338a:	4605      	mov	r5, r0
 801338c:	9105      	str	r1, [sp, #20]
 801338e:	3008      	adds	r0, #8
 8013390:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8013394:	461e      	mov	r6, r3
 8013396:	9204      	str	r2, [sp, #16]
 8013398:	f7ff fe90 	bl	80130bc <uxr_get_output_reliable_stream>
 801339c:	f89d 3016 	ldrb.w	r3, [sp, #22]
 80133a0:	2b01      	cmp	r3, #1
 80133a2:	f000 8091 	beq.w	80134c8 <uxr_prepare_output_stream_fragmented+0x144>
 80133a6:	4604      	mov	r4, r0
 80133a8:	2800      	cmp	r0, #0
 80133aa:	f000 808d 	beq.w	80134c8 <uxr_prepare_output_stream_fragmented+0x144>
 80133ae:	f005 ffa9 	bl	8019304 <get_available_free_slots>
 80133b2:	2800      	cmp	r0, #0
 80133b4:	f000 8083 	beq.w	80134be <uxr_prepare_output_stream_fragmented+0x13a>
 80133b8:	8922      	ldrh	r2, [r4, #8]
 80133ba:	89e7      	ldrh	r7, [r4, #14]
 80133bc:	fbb7 f9f2 	udiv	r9, r7, r2
 80133c0:	fb02 7919 	mls	r9, r2, r9, r7
 80133c4:	fa1f f989 	uxth.w	r9, r9
 80133c8:	6863      	ldr	r3, [r4, #4]
 80133ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80133ce:	6823      	ldr	r3, [r4, #0]
 80133d0:	9203      	str	r2, [sp, #12]
 80133d2:	fb02 f909 	mul.w	r9, r2, r9
 80133d6:	f109 0904 	add.w	r9, r9, #4
 80133da:	4499      	add	r9, r3
 80133dc:	7b23      	ldrb	r3, [r4, #12]
 80133de:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80133e2:	4543      	cmp	r3, r8
 80133e4:	f1a2 0b04 	sub.w	fp, r2, #4
 80133e8:	d37a      	bcc.n	80134e0 <uxr_prepare_output_stream_fragmented+0x15c>
 80133ea:	f1ab 0a04 	sub.w	sl, fp, #4
 80133ee:	ebaa 0a03 	sub.w	sl, sl, r3
 80133f2:	465a      	mov	r2, fp
 80133f4:	2300      	movs	r3, #0
 80133f6:	4649      	mov	r1, r9
 80133f8:	a808      	add	r0, sp, #32
 80133fa:	f8cd 8000 	str.w	r8, [sp]
 80133fe:	f7fd fb97 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8013402:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8013404:	fa1f fa8a 	uxth.w	sl, sl
 8013408:	4652      	mov	r2, sl
 801340a:	f103 0a08 	add.w	sl, r3, #8
 801340e:	45da      	cmp	sl, fp
 8013410:	bf34      	ite	cc
 8013412:	2302      	movcc	r3, #2
 8013414:	2300      	movcs	r3, #0
 8013416:	210d      	movs	r1, #13
 8013418:	a808      	add	r0, sp, #32
 801341a:	f7ff fe83 	bl	8013124 <uxr_buffer_submessage_header>
 801341e:	8921      	ldrh	r1, [r4, #8]
 8013420:	fbb7 f2f1 	udiv	r2, r7, r1
 8013424:	fb01 7212 	mls	r2, r1, r2, r7
 8013428:	b292      	uxth	r2, r2
 801342a:	6863      	ldr	r3, [r4, #4]
 801342c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013430:	fb02 f303 	mul.w	r3, r2, r3
 8013434:	6822      	ldr	r2, [r4, #0]
 8013436:	4638      	mov	r0, r7
 8013438:	f842 b003 	str.w	fp, [r2, r3]
 801343c:	2101      	movs	r1, #1
 801343e:	f005 ff81 	bl	8019344 <uxr_seq_num_add>
 8013442:	9b03      	ldr	r3, [sp, #12]
 8013444:	f108 0104 	add.w	r1, r8, #4
 8013448:	f1a3 0208 	sub.w	r2, r3, #8
 801344c:	eba2 0208 	sub.w	r2, r2, r8
 8013450:	4449      	add	r1, r9
 8013452:	4607      	mov	r7, r0
 8013454:	4630      	mov	r0, r6
 8013456:	f7fd fb7d 	bl	8010b54 <ucdr_init_buffer>
 801345a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801345c:	81e7      	strh	r7, [r4, #14]
 801345e:	1d1a      	adds	r2, r3, #4
 8013460:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8013464:	bf28      	it	cs
 8013466:	2200      	movcs	r2, #0
 8013468:	2300      	movs	r3, #0
 801346a:	b292      	uxth	r2, r2
 801346c:	2107      	movs	r1, #7
 801346e:	4630      	mov	r0, r6
 8013470:	f7ff fe58 	bl	8013124 <uxr_buffer_submessage_header>
 8013474:	9904      	ldr	r1, [sp, #16]
 8013476:	aa07      	add	r2, sp, #28
 8013478:	4628      	mov	r0, r5
 801347a:	f7ff f859 	bl	8012530 <uxr_init_base_object_request>
 801347e:	4604      	mov	r4, r0
 8013480:	b318      	cbz	r0, 80134ca <uxr_prepare_output_stream_fragmented+0x146>
 8013482:	a907      	add	r1, sp, #28
 8013484:	4630      	mov	r0, r6
 8013486:	f000 ff0d 	bl	80142a4 <uxr_serialize_WRITE_DATA_Payload_Data>
 801348a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801348e:	4630      	mov	r0, r6
 8013490:	1a52      	subs	r2, r2, r1
 8013492:	f7fd fb5f 	bl	8010b54 <ucdr_init_buffer>
 8013496:	9b05      	ldr	r3, [sp, #20]
 8013498:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801349c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801349e:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 80134a2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80134a4:	491b      	ldr	r1, [pc, #108]	@ (8013514 <uxr_prepare_output_stream_fragmented+0x190>)
 80134a6:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 80134aa:	4630      	mov	r0, r6
 80134ac:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80134b0:	462a      	mov	r2, r5
 80134b2:	f7fd fb23 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 80134b6:	4620      	mov	r0, r4
 80134b8:	b011      	add	sp, #68	@ 0x44
 80134ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134be:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80134c0:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80134c2:	4628      	mov	r0, r5
 80134c4:	4798      	blx	r3
 80134c6:	b920      	cbnz	r0, 80134d2 <uxr_prepare_output_stream_fragmented+0x14e>
 80134c8:	2400      	movs	r4, #0
 80134ca:	4620      	mov	r0, r4
 80134cc:	b011      	add	sp, #68	@ 0x44
 80134ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134d2:	4620      	mov	r0, r4
 80134d4:	f005 ff16 	bl	8019304 <get_available_free_slots>
 80134d8:	2800      	cmp	r0, #0
 80134da:	f47f af6d 	bne.w	80133b8 <uxr_prepare_output_stream_fragmented+0x34>
 80134de:	e7f3      	b.n	80134c8 <uxr_prepare_output_stream_fragmented+0x144>
 80134e0:	4638      	mov	r0, r7
 80134e2:	2101      	movs	r1, #1
 80134e4:	f005 ff2e 	bl	8019344 <uxr_seq_num_add>
 80134e8:	8921      	ldrh	r1, [r4, #8]
 80134ea:	fbb0 f2f1 	udiv	r2, r0, r1
 80134ee:	fb01 0912 	mls	r9, r1, r2, r0
 80134f2:	fa1f f289 	uxth.w	r2, r9
 80134f6:	6863      	ldr	r3, [r4, #4]
 80134f8:	fbb3 f9f1 	udiv	r9, r3, r1
 80134fc:	6823      	ldr	r3, [r4, #0]
 80134fe:	fb02 f909 	mul.w	r9, r2, r9
 8013502:	f109 0904 	add.w	r9, r9, #4
 8013506:	4499      	add	r9, r3
 8013508:	4607      	mov	r7, r0
 801350a:	7b23      	ldrb	r3, [r4, #12]
 801350c:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8013510:	e76b      	b.n	80133ea <uxr_prepare_output_stream_fragmented+0x66>
 8013512:	bf00      	nop
 8013514:	08013211 	.word	0x08013211

08013518 <uxr_serialize_message_header>:
 8013518:	b5f0      	push	{r4, r5, r6, r7, lr}
 801351a:	b083      	sub	sp, #12
 801351c:	4616      	mov	r6, r2
 801351e:	4604      	mov	r4, r0
 8013520:	9301      	str	r3, [sp, #4]
 8013522:	460d      	mov	r5, r1
 8013524:	9f08      	ldr	r7, [sp, #32]
 8013526:	f7fc f9c9 	bl	800f8bc <ucdr_serialize_uint8_t>
 801352a:	4631      	mov	r1, r6
 801352c:	4620      	mov	r0, r4
 801352e:	f7fc f9c5 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013532:	9a01      	ldr	r2, [sp, #4]
 8013534:	2101      	movs	r1, #1
 8013536:	4620      	mov	r0, r4
 8013538:	f7fc fa6c 	bl	800fa14 <ucdr_serialize_endian_uint16_t>
 801353c:	062b      	lsls	r3, r5, #24
 801353e:	d501      	bpl.n	8013544 <uxr_serialize_message_header+0x2c>
 8013540:	b003      	add	sp, #12
 8013542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013544:	2204      	movs	r2, #4
 8013546:	4639      	mov	r1, r7
 8013548:	4620      	mov	r0, r4
 801354a:	b003      	add	sp, #12
 801354c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013550:	f005 b826 	b.w	80185a0 <ucdr_serialize_array_uint8_t>

08013554 <uxr_deserialize_message_header>:
 8013554:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013556:	b083      	sub	sp, #12
 8013558:	4616      	mov	r6, r2
 801355a:	4604      	mov	r4, r0
 801355c:	9301      	str	r3, [sp, #4]
 801355e:	460d      	mov	r5, r1
 8013560:	9f08      	ldr	r7, [sp, #32]
 8013562:	f7fc f9c1 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013566:	4631      	mov	r1, r6
 8013568:	4620      	mov	r0, r4
 801356a:	f7fc f9bd 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 801356e:	9a01      	ldr	r2, [sp, #4]
 8013570:	2101      	movs	r1, #1
 8013572:	4620      	mov	r0, r4
 8013574:	f7fc fb42 	bl	800fbfc <ucdr_deserialize_endian_uint16_t>
 8013578:	f995 3000 	ldrsb.w	r3, [r5]
 801357c:	2b00      	cmp	r3, #0
 801357e:	da01      	bge.n	8013584 <uxr_deserialize_message_header+0x30>
 8013580:	b003      	add	sp, #12
 8013582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013584:	2204      	movs	r2, #4
 8013586:	4639      	mov	r1, r7
 8013588:	4620      	mov	r0, r4
 801358a:	b003      	add	sp, #12
 801358c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013590:	f005 b86a 	b.w	8018668 <ucdr_deserialize_array_uint8_t>

08013594 <uxr_serialize_submessage_header>:
 8013594:	b530      	push	{r4, r5, lr}
 8013596:	b083      	sub	sp, #12
 8013598:	4615      	mov	r5, r2
 801359a:	4604      	mov	r4, r0
 801359c:	9301      	str	r3, [sp, #4]
 801359e:	f7fc f98d 	bl	800f8bc <ucdr_serialize_uint8_t>
 80135a2:	4629      	mov	r1, r5
 80135a4:	4620      	mov	r0, r4
 80135a6:	f7fc f989 	bl	800f8bc <ucdr_serialize_uint8_t>
 80135aa:	9a01      	ldr	r2, [sp, #4]
 80135ac:	2101      	movs	r1, #1
 80135ae:	4620      	mov	r0, r4
 80135b0:	b003      	add	sp, #12
 80135b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135b6:	f7fc ba2d 	b.w	800fa14 <ucdr_serialize_endian_uint16_t>
 80135ba:	bf00      	nop

080135bc <uxr_deserialize_submessage_header>:
 80135bc:	b530      	push	{r4, r5, lr}
 80135be:	b083      	sub	sp, #12
 80135c0:	4615      	mov	r5, r2
 80135c2:	4604      	mov	r4, r0
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	f7fc f98f 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 80135ca:	4629      	mov	r1, r5
 80135cc:	4620      	mov	r0, r4
 80135ce:	f7fc f98b 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 80135d2:	9a01      	ldr	r2, [sp, #4]
 80135d4:	2101      	movs	r1, #1
 80135d6:	4620      	mov	r0, r4
 80135d8:	b003      	add	sp, #12
 80135da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80135de:	f7fc bb0d 	b.w	800fbfc <ucdr_deserialize_endian_uint16_t>
 80135e2:	bf00      	nop

080135e4 <uxr_serialize_CLIENT_Representation>:
 80135e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80135e8:	2204      	movs	r2, #4
 80135ea:	460e      	mov	r6, r1
 80135ec:	4605      	mov	r5, r0
 80135ee:	f004 ffd7 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80135f2:	2202      	movs	r2, #2
 80135f4:	4607      	mov	r7, r0
 80135f6:	1d31      	adds	r1, r6, #4
 80135f8:	4628      	mov	r0, r5
 80135fa:	f004 ffd1 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80135fe:	4038      	ands	r0, r7
 8013600:	2202      	movs	r2, #2
 8013602:	1db1      	adds	r1, r6, #6
 8013604:	b2c7      	uxtb	r7, r0
 8013606:	4628      	mov	r0, r5
 8013608:	f004 ffca 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 801360c:	2204      	movs	r2, #4
 801360e:	4007      	ands	r7, r0
 8013610:	f106 0108 	add.w	r1, r6, #8
 8013614:	4628      	mov	r0, r5
 8013616:	f004 ffc3 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 801361a:	7b31      	ldrb	r1, [r6, #12]
 801361c:	4007      	ands	r7, r0
 801361e:	4628      	mov	r0, r5
 8013620:	f7fc f94c 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013624:	7b71      	ldrb	r1, [r6, #13]
 8013626:	4007      	ands	r7, r0
 8013628:	4628      	mov	r0, r5
 801362a:	f7fc f919 	bl	800f860 <ucdr_serialize_bool>
 801362e:	7b73      	ldrb	r3, [r6, #13]
 8013630:	ea07 0800 	and.w	r8, r7, r0
 8013634:	b93b      	cbnz	r3, 8013646 <uxr_serialize_CLIENT_Representation+0x62>
 8013636:	8bb1      	ldrh	r1, [r6, #28]
 8013638:	4628      	mov	r0, r5
 801363a:	f7fc f96b 	bl	800f914 <ucdr_serialize_uint16_t>
 801363e:	ea08 0000 	and.w	r0, r8, r0
 8013642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013646:	6931      	ldr	r1, [r6, #16]
 8013648:	4628      	mov	r0, r5
 801364a:	f7fc fb4d 	bl	800fce8 <ucdr_serialize_uint32_t>
 801364e:	6933      	ldr	r3, [r6, #16]
 8013650:	b1e3      	cbz	r3, 801368c <uxr_serialize_CLIENT_Representation+0xa8>
 8013652:	b1c0      	cbz	r0, 8013686 <uxr_serialize_CLIENT_Representation+0xa2>
 8013654:	4637      	mov	r7, r6
 8013656:	f04f 0900 	mov.w	r9, #0
 801365a:	e001      	b.n	8013660 <uxr_serialize_CLIENT_Representation+0x7c>
 801365c:	3708      	adds	r7, #8
 801365e:	b194      	cbz	r4, 8013686 <uxr_serialize_CLIENT_Representation+0xa2>
 8013660:	6979      	ldr	r1, [r7, #20]
 8013662:	4628      	mov	r0, r5
 8013664:	f005 f90e 	bl	8018884 <ucdr_serialize_string>
 8013668:	69b9      	ldr	r1, [r7, #24]
 801366a:	4604      	mov	r4, r0
 801366c:	4628      	mov	r0, r5
 801366e:	f005 f909 	bl	8018884 <ucdr_serialize_string>
 8013672:	6933      	ldr	r3, [r6, #16]
 8013674:	f109 0901 	add.w	r9, r9, #1
 8013678:	4004      	ands	r4, r0
 801367a:	4599      	cmp	r9, r3
 801367c:	b2e4      	uxtb	r4, r4
 801367e:	d3ed      	bcc.n	801365c <uxr_serialize_CLIENT_Representation+0x78>
 8013680:	ea08 0804 	and.w	r8, r8, r4
 8013684:	e7d7      	b.n	8013636 <uxr_serialize_CLIENT_Representation+0x52>
 8013686:	f04f 0800 	mov.w	r8, #0
 801368a:	e7d4      	b.n	8013636 <uxr_serialize_CLIENT_Representation+0x52>
 801368c:	ea08 0800 	and.w	r8, r8, r0
 8013690:	e7d1      	b.n	8013636 <uxr_serialize_CLIENT_Representation+0x52>
 8013692:	bf00      	nop

08013694 <uxr_deserialize_CLIENT_Representation>:
 8013694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013698:	2204      	movs	r2, #4
 801369a:	460c      	mov	r4, r1
 801369c:	4605      	mov	r5, r0
 801369e:	f004 ffe3 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 80136a2:	2202      	movs	r2, #2
 80136a4:	4607      	mov	r7, r0
 80136a6:	1d21      	adds	r1, r4, #4
 80136a8:	4628      	mov	r0, r5
 80136aa:	f004 ffdd 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 80136ae:	4038      	ands	r0, r7
 80136b0:	2202      	movs	r2, #2
 80136b2:	1da1      	adds	r1, r4, #6
 80136b4:	b2c6      	uxtb	r6, r0
 80136b6:	4628      	mov	r0, r5
 80136b8:	f004 ffd6 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 80136bc:	2204      	movs	r2, #4
 80136be:	4006      	ands	r6, r0
 80136c0:	f104 0108 	add.w	r1, r4, #8
 80136c4:	4628      	mov	r0, r5
 80136c6:	f004 ffcf 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 80136ca:	f104 010c 	add.w	r1, r4, #12
 80136ce:	4006      	ands	r6, r0
 80136d0:	4628      	mov	r0, r5
 80136d2:	f7fc f909 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 80136d6:	f104 010d 	add.w	r1, r4, #13
 80136da:	ea06 0700 	and.w	r7, r6, r0
 80136de:	4628      	mov	r0, r5
 80136e0:	f7fc f8d4 	bl	800f88c <ucdr_deserialize_bool>
 80136e4:	7b63      	ldrb	r3, [r4, #13]
 80136e6:	4007      	ands	r7, r0
 80136e8:	b93b      	cbnz	r3, 80136fa <uxr_deserialize_CLIENT_Representation+0x66>
 80136ea:	f104 011c 	add.w	r1, r4, #28
 80136ee:	4628      	mov	r0, r5
 80136f0:	f7fc fa10 	bl	800fb14 <ucdr_deserialize_uint16_t>
 80136f4:	4038      	ands	r0, r7
 80136f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136fa:	f104 0110 	add.w	r1, r4, #16
 80136fe:	4628      	mov	r0, r5
 8013700:	f7fc fc22 	bl	800ff48 <ucdr_deserialize_uint32_t>
 8013704:	6923      	ldr	r3, [r4, #16]
 8013706:	2b01      	cmp	r3, #1
 8013708:	d903      	bls.n	8013712 <uxr_deserialize_CLIENT_Representation+0x7e>
 801370a:	2301      	movs	r3, #1
 801370c:	75ab      	strb	r3, [r5, #22]
 801370e:	2700      	movs	r7, #0
 8013710:	e7eb      	b.n	80136ea <uxr_deserialize_CLIENT_Representation+0x56>
 8013712:	b30b      	cbz	r3, 8013758 <uxr_deserialize_CLIENT_Representation+0xc4>
 8013714:	2800      	cmp	r0, #0
 8013716:	d0fa      	beq.n	801370e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013718:	46a0      	mov	r8, r4
 801371a:	f04f 0900 	mov.w	r9, #0
 801371e:	e001      	b.n	8013724 <uxr_deserialize_CLIENT_Representation+0x90>
 8013720:	2e00      	cmp	r6, #0
 8013722:	d0f4      	beq.n	801370e <uxr_deserialize_CLIENT_Representation+0x7a>
 8013724:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8013728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801372c:	4628      	mov	r0, r5
 801372e:	f005 f8b9 	bl	80188a4 <ucdr_deserialize_string>
 8013732:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013736:	4606      	mov	r6, r0
 8013738:	f8d8 1018 	ldr.w	r1, [r8, #24]
 801373c:	4628      	mov	r0, r5
 801373e:	f005 f8b1 	bl	80188a4 <ucdr_deserialize_string>
 8013742:	6923      	ldr	r3, [r4, #16]
 8013744:	f109 0901 	add.w	r9, r9, #1
 8013748:	4006      	ands	r6, r0
 801374a:	4599      	cmp	r9, r3
 801374c:	f108 0808 	add.w	r8, r8, #8
 8013750:	b2f6      	uxtb	r6, r6
 8013752:	d3e5      	bcc.n	8013720 <uxr_deserialize_CLIENT_Representation+0x8c>
 8013754:	4037      	ands	r7, r6
 8013756:	e7c8      	b.n	80136ea <uxr_deserialize_CLIENT_Representation+0x56>
 8013758:	4007      	ands	r7, r0
 801375a:	e7c6      	b.n	80136ea <uxr_deserialize_CLIENT_Representation+0x56>

0801375c <uxr_serialize_AGENT_Representation>:
 801375c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013760:	2204      	movs	r2, #4
 8013762:	460f      	mov	r7, r1
 8013764:	4605      	mov	r5, r0
 8013766:	f004 ff1b 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 801376a:	2202      	movs	r2, #2
 801376c:	4604      	mov	r4, r0
 801376e:	1d39      	adds	r1, r7, #4
 8013770:	4628      	mov	r0, r5
 8013772:	f004 ff15 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013776:	4020      	ands	r0, r4
 8013778:	2202      	movs	r2, #2
 801377a:	1db9      	adds	r1, r7, #6
 801377c:	b2c4      	uxtb	r4, r0
 801377e:	4628      	mov	r0, r5
 8013780:	f004 ff0e 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013784:	7a39      	ldrb	r1, [r7, #8]
 8013786:	4004      	ands	r4, r0
 8013788:	4628      	mov	r0, r5
 801378a:	f7fc f869 	bl	800f860 <ucdr_serialize_bool>
 801378e:	7a3b      	ldrb	r3, [r7, #8]
 8013790:	ea00 0804 	and.w	r8, r0, r4
 8013794:	b913      	cbnz	r3, 801379c <uxr_serialize_AGENT_Representation+0x40>
 8013796:	4640      	mov	r0, r8
 8013798:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801379c:	68f9      	ldr	r1, [r7, #12]
 801379e:	4628      	mov	r0, r5
 80137a0:	f7fc faa2 	bl	800fce8 <ucdr_serialize_uint32_t>
 80137a4:	68fb      	ldr	r3, [r7, #12]
 80137a6:	b303      	cbz	r3, 80137ea <uxr_serialize_AGENT_Representation+0x8e>
 80137a8:	b1d0      	cbz	r0, 80137e0 <uxr_serialize_AGENT_Representation+0x84>
 80137aa:	463e      	mov	r6, r7
 80137ac:	f04f 0900 	mov.w	r9, #0
 80137b0:	e001      	b.n	80137b6 <uxr_serialize_AGENT_Representation+0x5a>
 80137b2:	3608      	adds	r6, #8
 80137b4:	b1a4      	cbz	r4, 80137e0 <uxr_serialize_AGENT_Representation+0x84>
 80137b6:	6931      	ldr	r1, [r6, #16]
 80137b8:	4628      	mov	r0, r5
 80137ba:	f005 f863 	bl	8018884 <ucdr_serialize_string>
 80137be:	6971      	ldr	r1, [r6, #20]
 80137c0:	4604      	mov	r4, r0
 80137c2:	4628      	mov	r0, r5
 80137c4:	f005 f85e 	bl	8018884 <ucdr_serialize_string>
 80137c8:	68fb      	ldr	r3, [r7, #12]
 80137ca:	f109 0901 	add.w	r9, r9, #1
 80137ce:	4004      	ands	r4, r0
 80137d0:	4599      	cmp	r9, r3
 80137d2:	b2e4      	uxtb	r4, r4
 80137d4:	d3ed      	bcc.n	80137b2 <uxr_serialize_AGENT_Representation+0x56>
 80137d6:	ea08 0804 	and.w	r8, r8, r4
 80137da:	4640      	mov	r0, r8
 80137dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137e0:	f04f 0800 	mov.w	r8, #0
 80137e4:	4640      	mov	r0, r8
 80137e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137ea:	ea08 0800 	and.w	r8, r8, r0
 80137ee:	e7d2      	b.n	8013796 <uxr_serialize_AGENT_Representation+0x3a>

080137f0 <uxr_serialize_DATAWRITER_Representation>:
 80137f0:	b570      	push	{r4, r5, r6, lr}
 80137f2:	460d      	mov	r5, r1
 80137f4:	7809      	ldrb	r1, [r1, #0]
 80137f6:	4606      	mov	r6, r0
 80137f8:	f7fc f860 	bl	800f8bc <ucdr_serialize_uint8_t>
 80137fc:	4604      	mov	r4, r0
 80137fe:	b130      	cbz	r0, 801380e <uxr_serialize_DATAWRITER_Representation+0x1e>
 8013800:	782b      	ldrb	r3, [r5, #0]
 8013802:	2b02      	cmp	r3, #2
 8013804:	d00c      	beq.n	8013820 <uxr_serialize_DATAWRITER_Representation+0x30>
 8013806:	2b03      	cmp	r3, #3
 8013808:	d010      	beq.n	801382c <uxr_serialize_DATAWRITER_Representation+0x3c>
 801380a:	2b01      	cmp	r3, #1
 801380c:	d008      	beq.n	8013820 <uxr_serialize_DATAWRITER_Representation+0x30>
 801380e:	2202      	movs	r2, #2
 8013810:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8013814:	4630      	mov	r0, r6
 8013816:	f004 fec3 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 801381a:	4020      	ands	r0, r4
 801381c:	b2c0      	uxtb	r0, r0
 801381e:	bd70      	pop	{r4, r5, r6, pc}
 8013820:	6869      	ldr	r1, [r5, #4]
 8013822:	4630      	mov	r0, r6
 8013824:	f005 f82e 	bl	8018884 <ucdr_serialize_string>
 8013828:	4604      	mov	r4, r0
 801382a:	e7f0      	b.n	801380e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801382c:	4629      	mov	r1, r5
 801382e:	4630      	mov	r0, r6
 8013830:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8013834:	3104      	adds	r1, #4
 8013836:	f7fd fa29 	bl	8010c8c <ucdr_serialize_sequence_uint8_t>
 801383a:	4604      	mov	r4, r0
 801383c:	e7e7      	b.n	801380e <uxr_serialize_DATAWRITER_Representation+0x1e>
 801383e:	bf00      	nop

08013840 <uxr_serialize_ObjectVariant.part.0>:
 8013840:	b570      	push	{r4, r5, r6, lr}
 8013842:	780b      	ldrb	r3, [r1, #0]
 8013844:	3b01      	subs	r3, #1
 8013846:	460c      	mov	r4, r1
 8013848:	4605      	mov	r5, r0
 801384a:	2b0d      	cmp	r3, #13
 801384c:	d854      	bhi.n	80138f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801384e:	e8df f003 	tbb	[pc, r3]
 8013852:	0730      	.short	0x0730
 8013854:	07071b1b 	.word	0x07071b1b
 8013858:	0c530707 	.word	0x0c530707
 801385c:	494e0c0c 	.word	0x494e0c0c
 8013860:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013864:	3104      	adds	r1, #4
 8013866:	f7ff bfc3 	b.w	80137f0 <uxr_serialize_DATAWRITER_Representation>
 801386a:	7909      	ldrb	r1, [r1, #4]
 801386c:	f7fc f826 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013870:	b1e8      	cbz	r0, 80138ae <uxr_serialize_ObjectVariant.part.0+0x6e>
 8013872:	7923      	ldrb	r3, [r4, #4]
 8013874:	2b01      	cmp	r3, #1
 8013876:	d001      	beq.n	801387c <uxr_serialize_ObjectVariant.part.0+0x3c>
 8013878:	2b02      	cmp	r3, #2
 801387a:	d13d      	bne.n	80138f8 <uxr_serialize_ObjectVariant.part.0+0xb8>
 801387c:	68a1      	ldr	r1, [r4, #8]
 801387e:	4628      	mov	r0, r5
 8013880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013884:	f004 bffe 	b.w	8018884 <ucdr_serialize_string>
 8013888:	7909      	ldrb	r1, [r1, #4]
 801388a:	f7fc f817 	bl	800f8bc <ucdr_serialize_uint8_t>
 801388e:	4606      	mov	r6, r0
 8013890:	b120      	cbz	r0, 801389c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013892:	7923      	ldrb	r3, [r4, #4]
 8013894:	2b02      	cmp	r3, #2
 8013896:	d039      	beq.n	801390c <uxr_serialize_ObjectVariant.part.0+0xcc>
 8013898:	2b03      	cmp	r3, #3
 801389a:	d02f      	beq.n	80138fc <uxr_serialize_ObjectVariant.part.0+0xbc>
 801389c:	2202      	movs	r2, #2
 801389e:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 80138a2:	4628      	mov	r0, r5
 80138a4:	f004 fe7c 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80138a8:	4030      	ands	r0, r6
 80138aa:	b2c0      	uxtb	r0, r0
 80138ac:	bd70      	pop	{r4, r5, r6, pc}
 80138ae:	2000      	movs	r0, #0
 80138b0:	bd70      	pop	{r4, r5, r6, pc}
 80138b2:	7909      	ldrb	r1, [r1, #4]
 80138b4:	f7fc f802 	bl	800f8bc <ucdr_serialize_uint8_t>
 80138b8:	4606      	mov	r6, r0
 80138ba:	b158      	cbz	r0, 80138d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80138bc:	7923      	ldrb	r3, [r4, #4]
 80138be:	2b02      	cmp	r3, #2
 80138c0:	d003      	beq.n	80138ca <uxr_serialize_ObjectVariant.part.0+0x8a>
 80138c2:	2b03      	cmp	r3, #3
 80138c4:	d028      	beq.n	8013918 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d104      	bne.n	80138d4 <uxr_serialize_ObjectVariant.part.0+0x94>
 80138ca:	68a1      	ldr	r1, [r4, #8]
 80138cc:	4628      	mov	r0, r5
 80138ce:	f004 ffd9 	bl	8018884 <ucdr_serialize_string>
 80138d2:	4606      	mov	r6, r0
 80138d4:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80138d8:	4628      	mov	r0, r5
 80138da:	f7fc fd2b 	bl	8010334 <ucdr_serialize_int16_t>
 80138de:	4030      	ands	r0, r6
 80138e0:	b2c0      	uxtb	r0, r0
 80138e2:	bd70      	pop	{r4, r5, r6, pc}
 80138e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138e8:	3104      	adds	r1, #4
 80138ea:	f7ff be7b 	b.w	80135e4 <uxr_serialize_CLIENT_Representation>
 80138ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80138f2:	3104      	adds	r1, #4
 80138f4:	f7ff bf32 	b.w	801375c <uxr_serialize_AGENT_Representation>
 80138f8:	2001      	movs	r0, #1
 80138fa:	bd70      	pop	{r4, r5, r6, pc}
 80138fc:	68a2      	ldr	r2, [r4, #8]
 80138fe:	f104 010c 	add.w	r1, r4, #12
 8013902:	4628      	mov	r0, r5
 8013904:	f7fd f9c2 	bl	8010c8c <ucdr_serialize_sequence_uint8_t>
 8013908:	4606      	mov	r6, r0
 801390a:	e7c7      	b.n	801389c <uxr_serialize_ObjectVariant.part.0+0x5c>
 801390c:	68a1      	ldr	r1, [r4, #8]
 801390e:	4628      	mov	r0, r5
 8013910:	f004 ffb8 	bl	8018884 <ucdr_serialize_string>
 8013914:	4606      	mov	r6, r0
 8013916:	e7c1      	b.n	801389c <uxr_serialize_ObjectVariant.part.0+0x5c>
 8013918:	68a2      	ldr	r2, [r4, #8]
 801391a:	f104 010c 	add.w	r1, r4, #12
 801391e:	4628      	mov	r0, r5
 8013920:	f7fd f9b4 	bl	8010c8c <ucdr_serialize_sequence_uint8_t>
 8013924:	4606      	mov	r6, r0
 8013926:	e7d5      	b.n	80138d4 <uxr_serialize_ObjectVariant.part.0+0x94>

08013928 <uxr_deserialize_DATAWRITER_Representation>:
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	4606      	mov	r6, r0
 801392c:	460d      	mov	r5, r1
 801392e:	f7fb ffdb 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013932:	4604      	mov	r4, r0
 8013934:	b130      	cbz	r0, 8013944 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013936:	782b      	ldrb	r3, [r5, #0]
 8013938:	2b02      	cmp	r3, #2
 801393a:	d00c      	beq.n	8013956 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801393c:	2b03      	cmp	r3, #3
 801393e:	d012      	beq.n	8013966 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8013940:	2b01      	cmp	r3, #1
 8013942:	d008      	beq.n	8013956 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8013944:	2202      	movs	r2, #2
 8013946:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 801394a:	4630      	mov	r0, r6
 801394c:	f004 fe8c 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013950:	4020      	ands	r0, r4
 8013952:	b2c0      	uxtb	r0, r0
 8013954:	bd70      	pop	{r4, r5, r6, pc}
 8013956:	6869      	ldr	r1, [r5, #4]
 8013958:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801395c:	4630      	mov	r0, r6
 801395e:	f004 ffa1 	bl	80188a4 <ucdr_deserialize_string>
 8013962:	4604      	mov	r4, r0
 8013964:	e7ee      	b.n	8013944 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8013966:	1d2b      	adds	r3, r5, #4
 8013968:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801396c:	f105 0108 	add.w	r1, r5, #8
 8013970:	4630      	mov	r0, r6
 8013972:	f7fd f99d 	bl	8010cb0 <ucdr_deserialize_sequence_uint8_t>
 8013976:	4604      	mov	r4, r0
 8013978:	e7e4      	b.n	8013944 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801397a:	bf00      	nop

0801397c <uxr_serialize_OBJK_DomainParticipant_Binary>:
 801397c:	b570      	push	{r4, r5, r6, lr}
 801397e:	460d      	mov	r5, r1
 8013980:	7809      	ldrb	r1, [r1, #0]
 8013982:	4606      	mov	r6, r0
 8013984:	f7fb ff6c 	bl	800f860 <ucdr_serialize_bool>
 8013988:	782b      	ldrb	r3, [r5, #0]
 801398a:	4604      	mov	r4, r0
 801398c:	b94b      	cbnz	r3, 80139a2 <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 801398e:	7a29      	ldrb	r1, [r5, #8]
 8013990:	4630      	mov	r0, r6
 8013992:	f7fb ff65 	bl	800f860 <ucdr_serialize_bool>
 8013996:	7a2b      	ldrb	r3, [r5, #8]
 8013998:	4004      	ands	r4, r0
 801399a:	b2e4      	uxtb	r4, r4
 801399c:	b943      	cbnz	r3, 80139b0 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 801399e:	4620      	mov	r0, r4
 80139a0:	bd70      	pop	{r4, r5, r6, pc}
 80139a2:	6869      	ldr	r1, [r5, #4]
 80139a4:	4630      	mov	r0, r6
 80139a6:	f004 ff6d 	bl	8018884 <ucdr_serialize_string>
 80139aa:	4004      	ands	r4, r0
 80139ac:	b2e4      	uxtb	r4, r4
 80139ae:	e7ee      	b.n	801398e <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 80139b0:	68e9      	ldr	r1, [r5, #12]
 80139b2:	4630      	mov	r0, r6
 80139b4:	f004 ff66 	bl	8018884 <ucdr_serialize_string>
 80139b8:	4004      	ands	r4, r0
 80139ba:	4620      	mov	r0, r4
 80139bc:	bd70      	pop	{r4, r5, r6, pc}
 80139be:	bf00      	nop

080139c0 <uxr_serialize_OBJK_Topic_Binary>:
 80139c0:	b570      	push	{r4, r5, r6, lr}
 80139c2:	460d      	mov	r5, r1
 80139c4:	6809      	ldr	r1, [r1, #0]
 80139c6:	4606      	mov	r6, r0
 80139c8:	f004 ff5c 	bl	8018884 <ucdr_serialize_string>
 80139cc:	7929      	ldrb	r1, [r5, #4]
 80139ce:	4604      	mov	r4, r0
 80139d0:	4630      	mov	r0, r6
 80139d2:	f7fb ff45 	bl	800f860 <ucdr_serialize_bool>
 80139d6:	792b      	ldrb	r3, [r5, #4]
 80139d8:	4004      	ands	r4, r0
 80139da:	b2e4      	uxtb	r4, r4
 80139dc:	b943      	cbnz	r3, 80139f0 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80139de:	7b29      	ldrb	r1, [r5, #12]
 80139e0:	4630      	mov	r0, r6
 80139e2:	f7fb ff3d 	bl	800f860 <ucdr_serialize_bool>
 80139e6:	7b2b      	ldrb	r3, [r5, #12]
 80139e8:	4004      	ands	r4, r0
 80139ea:	b93b      	cbnz	r3, 80139fc <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80139ec:	4620      	mov	r0, r4
 80139ee:	bd70      	pop	{r4, r5, r6, pc}
 80139f0:	68a9      	ldr	r1, [r5, #8]
 80139f2:	4630      	mov	r0, r6
 80139f4:	f004 ff46 	bl	8018884 <ucdr_serialize_string>
 80139f8:	4004      	ands	r4, r0
 80139fa:	e7f0      	b.n	80139de <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80139fc:	6929      	ldr	r1, [r5, #16]
 80139fe:	4630      	mov	r0, r6
 8013a00:	f004 ff40 	bl	8018884 <ucdr_serialize_string>
 8013a04:	4004      	ands	r4, r0
 8013a06:	b2e4      	uxtb	r4, r4
 8013a08:	4620      	mov	r0, r4
 8013a0a:	bd70      	pop	{r4, r5, r6, pc}

08013a0c <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8013a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a10:	460c      	mov	r4, r1
 8013a12:	7809      	ldrb	r1, [r1, #0]
 8013a14:	4606      	mov	r6, r0
 8013a16:	f7fb ff23 	bl	800f860 <ucdr_serialize_bool>
 8013a1a:	7823      	ldrb	r3, [r4, #0]
 8013a1c:	4605      	mov	r5, r0
 8013a1e:	b96b      	cbnz	r3, 8013a3c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8013a20:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8013a24:	4630      	mov	r0, r6
 8013a26:	f7fb ff1b 	bl	800f860 <ucdr_serialize_bool>
 8013a2a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8013a2e:	4005      	ands	r5, r0
 8013a30:	b2ed      	uxtb	r5, r5
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d169      	bne.n	8013b0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8013a36:	4628      	mov	r0, r5
 8013a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013a3c:	6861      	ldr	r1, [r4, #4]
 8013a3e:	4630      	mov	r0, r6
 8013a40:	f7fc f952 	bl	800fce8 <ucdr_serialize_uint32_t>
 8013a44:	6863      	ldr	r3, [r4, #4]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d06b      	beq.n	8013b22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8013a4a:	2800      	cmp	r0, #0
 8013a4c:	d067      	beq.n	8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013a4e:	68a1      	ldr	r1, [r4, #8]
 8013a50:	4630      	mov	r0, r6
 8013a52:	f004 ff17 	bl	8018884 <ucdr_serialize_string>
 8013a56:	6863      	ldr	r3, [r4, #4]
 8013a58:	2b01      	cmp	r3, #1
 8013a5a:	d953      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013a5c:	2800      	cmp	r0, #0
 8013a5e:	d05e      	beq.n	8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013a60:	68e1      	ldr	r1, [r4, #12]
 8013a62:	4630      	mov	r0, r6
 8013a64:	f004 ff0e 	bl	8018884 <ucdr_serialize_string>
 8013a68:	6863      	ldr	r3, [r4, #4]
 8013a6a:	2b02      	cmp	r3, #2
 8013a6c:	d94a      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	d055      	beq.n	8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013a72:	6921      	ldr	r1, [r4, #16]
 8013a74:	4630      	mov	r0, r6
 8013a76:	f004 ff05 	bl	8018884 <ucdr_serialize_string>
 8013a7a:	6863      	ldr	r3, [r4, #4]
 8013a7c:	2b03      	cmp	r3, #3
 8013a7e:	d941      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013a80:	2800      	cmp	r0, #0
 8013a82:	d04c      	beq.n	8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013a84:	6961      	ldr	r1, [r4, #20]
 8013a86:	4630      	mov	r0, r6
 8013a88:	f004 fefc 	bl	8018884 <ucdr_serialize_string>
 8013a8c:	6863      	ldr	r3, [r4, #4]
 8013a8e:	2b04      	cmp	r3, #4
 8013a90:	d938      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013a92:	2800      	cmp	r0, #0
 8013a94:	d043      	beq.n	8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013a96:	69a1      	ldr	r1, [r4, #24]
 8013a98:	4630      	mov	r0, r6
 8013a9a:	f004 fef3 	bl	8018884 <ucdr_serialize_string>
 8013a9e:	6863      	ldr	r3, [r4, #4]
 8013aa0:	2b05      	cmp	r3, #5
 8013aa2:	d92f      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013aa4:	2800      	cmp	r0, #0
 8013aa6:	d03a      	beq.n	8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013aa8:	69e1      	ldr	r1, [r4, #28]
 8013aaa:	4630      	mov	r0, r6
 8013aac:	f004 feea 	bl	8018884 <ucdr_serialize_string>
 8013ab0:	6863      	ldr	r3, [r4, #4]
 8013ab2:	2b06      	cmp	r3, #6
 8013ab4:	d926      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ab6:	b390      	cbz	r0, 8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ab8:	6a21      	ldr	r1, [r4, #32]
 8013aba:	4630      	mov	r0, r6
 8013abc:	f004 fee2 	bl	8018884 <ucdr_serialize_string>
 8013ac0:	6863      	ldr	r3, [r4, #4]
 8013ac2:	2b07      	cmp	r3, #7
 8013ac4:	d91e      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ac6:	b350      	cbz	r0, 8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ac8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8013aca:	4630      	mov	r0, r6
 8013acc:	f004 feda 	bl	8018884 <ucdr_serialize_string>
 8013ad0:	6863      	ldr	r3, [r4, #4]
 8013ad2:	2b08      	cmp	r3, #8
 8013ad4:	d916      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ad6:	b310      	cbz	r0, 8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ad8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8013ada:	4630      	mov	r0, r6
 8013adc:	f004 fed2 	bl	8018884 <ucdr_serialize_string>
 8013ae0:	6863      	ldr	r3, [r4, #4]
 8013ae2:	2b09      	cmp	r3, #9
 8013ae4:	d90e      	bls.n	8013b04 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8013ae6:	b1d0      	cbz	r0, 8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013ae8:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8013aec:	2709      	movs	r7, #9
 8013aee:	e000      	b.n	8013af2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8013af0:	b1a8      	cbz	r0, 8013b1e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8013af2:	f858 1b04 	ldr.w	r1, [r8], #4
 8013af6:	4630      	mov	r0, r6
 8013af8:	f004 fec4 	bl	8018884 <ucdr_serialize_string>
 8013afc:	6862      	ldr	r2, [r4, #4]
 8013afe:	3701      	adds	r7, #1
 8013b00:	4297      	cmp	r7, r2
 8013b02:	d3f5      	bcc.n	8013af0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8013b04:	4005      	ands	r5, r0
 8013b06:	b2ed      	uxtb	r5, r5
 8013b08:	e78a      	b.n	8013a20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013b0a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013b0c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8013b10:	4630      	mov	r0, r6
 8013b12:	f7fd f8bb 	bl	8010c8c <ucdr_serialize_sequence_uint8_t>
 8013b16:	4005      	ands	r5, r0
 8013b18:	4628      	mov	r0, r5
 8013b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b1e:	2500      	movs	r5, #0
 8013b20:	e77e      	b.n	8013a20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8013b22:	4028      	ands	r0, r5
 8013b24:	b2c5      	uxtb	r5, r0
 8013b26:	e77b      	b.n	8013a20 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08013b28 <uxr_serialize_OBJK_Publisher_Binary>:
 8013b28:	b570      	push	{r4, r5, r6, lr}
 8013b2a:	460d      	mov	r5, r1
 8013b2c:	7809      	ldrb	r1, [r1, #0]
 8013b2e:	4606      	mov	r6, r0
 8013b30:	f7fb fe96 	bl	800f860 <ucdr_serialize_bool>
 8013b34:	782b      	ldrb	r3, [r5, #0]
 8013b36:	4604      	mov	r4, r0
 8013b38:	b94b      	cbnz	r3, 8013b4e <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8013b3a:	7a29      	ldrb	r1, [r5, #8]
 8013b3c:	4630      	mov	r0, r6
 8013b3e:	f7fb fe8f 	bl	800f860 <ucdr_serialize_bool>
 8013b42:	7a2b      	ldrb	r3, [r5, #8]
 8013b44:	4004      	ands	r4, r0
 8013b46:	b2e4      	uxtb	r4, r4
 8013b48:	b943      	cbnz	r3, 8013b5c <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8013b4a:	4620      	mov	r0, r4
 8013b4c:	bd70      	pop	{r4, r5, r6, pc}
 8013b4e:	6869      	ldr	r1, [r5, #4]
 8013b50:	4630      	mov	r0, r6
 8013b52:	f004 fe97 	bl	8018884 <ucdr_serialize_string>
 8013b56:	4004      	ands	r4, r0
 8013b58:	b2e4      	uxtb	r4, r4
 8013b5a:	e7ee      	b.n	8013b3a <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8013b5c:	f105 010c 	add.w	r1, r5, #12
 8013b60:	4630      	mov	r0, r6
 8013b62:	f7ff ff53 	bl	8013a0c <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8013b66:	4004      	ands	r4, r0
 8013b68:	4620      	mov	r0, r4
 8013b6a:	bd70      	pop	{r4, r5, r6, pc}

08013b6c <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8013b6c:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8013b70:	4688      	mov	r8, r1
 8013b72:	8809      	ldrh	r1, [r1, #0]
 8013b74:	4681      	mov	r9, r0
 8013b76:	f7fb fecd 	bl	800f914 <ucdr_serialize_uint16_t>
 8013b7a:	f898 1002 	ldrb.w	r1, [r8, #2]
 8013b7e:	4606      	mov	r6, r0
 8013b80:	4648      	mov	r0, r9
 8013b82:	f7fb fe6d 	bl	800f860 <ucdr_serialize_bool>
 8013b86:	f898 3002 	ldrb.w	r3, [r8, #2]
 8013b8a:	4006      	ands	r6, r0
 8013b8c:	b2f5      	uxtb	r5, r6
 8013b8e:	b9eb      	cbnz	r3, 8013bcc <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8013b90:	f898 1006 	ldrb.w	r1, [r8, #6]
 8013b94:	4648      	mov	r0, r9
 8013b96:	f7fb fe63 	bl	800f860 <ucdr_serialize_bool>
 8013b9a:	f898 3006 	ldrb.w	r3, [r8, #6]
 8013b9e:	4005      	ands	r5, r0
 8013ba0:	bb7b      	cbnz	r3, 8013c02 <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8013ba2:	f898 100c 	ldrb.w	r1, [r8, #12]
 8013ba6:	4648      	mov	r0, r9
 8013ba8:	f7fb fe5a 	bl	800f860 <ucdr_serialize_bool>
 8013bac:	f898 300c 	ldrb.w	r3, [r8, #12]
 8013bb0:	4005      	ands	r5, r0
 8013bb2:	b9f3      	cbnz	r3, 8013bf2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8013bb4:	f898 1014 	ldrb.w	r1, [r8, #20]
 8013bb8:	4648      	mov	r0, r9
 8013bba:	f7fb fe51 	bl	800f860 <ucdr_serialize_bool>
 8013bbe:	f898 3014 	ldrb.w	r3, [r8, #20]
 8013bc2:	4005      	ands	r5, r0
 8013bc4:	b94b      	cbnz	r3, 8013bda <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8013bc6:	4628      	mov	r0, r5
 8013bc8:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013bcc:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8013bd0:	4648      	mov	r0, r9
 8013bd2:	f7fb fe9f 	bl	800f914 <ucdr_serialize_uint16_t>
 8013bd6:	4005      	ands	r5, r0
 8013bd8:	e7da      	b.n	8013b90 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8013bda:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8013bde:	f108 011c 	add.w	r1, r8, #28
 8013be2:	4648      	mov	r0, r9
 8013be4:	f7fd f852 	bl	8010c8c <ucdr_serialize_sequence_uint8_t>
 8013be8:	4028      	ands	r0, r5
 8013bea:	b2c5      	uxtb	r5, r0
 8013bec:	4628      	mov	r0, r5
 8013bee:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8013bf2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8013bf6:	4648      	mov	r0, r9
 8013bf8:	f7fc f876 	bl	800fce8 <ucdr_serialize_uint32_t>
 8013bfc:	4028      	ands	r0, r5
 8013bfe:	b2c5      	uxtb	r5, r0
 8013c00:	e7d8      	b.n	8013bb4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8013c02:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8013c06:	4648      	mov	r0, r9
 8013c08:	f7fc f86e 	bl	800fce8 <ucdr_serialize_uint32_t>
 8013c0c:	4028      	ands	r0, r5
 8013c0e:	b2c5      	uxtb	r5, r0
 8013c10:	e7c7      	b.n	8013ba2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8013c12:	bf00      	nop

08013c14 <uxr_serialize_OBJK_DataWriter_Binary>:
 8013c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c16:	2202      	movs	r2, #2
 8013c18:	460d      	mov	r5, r1
 8013c1a:	4606      	mov	r6, r0
 8013c1c:	f004 fcc0 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013c20:	78a9      	ldrb	r1, [r5, #2]
 8013c22:	4604      	mov	r4, r0
 8013c24:	4630      	mov	r0, r6
 8013c26:	f7fb fe1b 	bl	800f860 <ucdr_serialize_bool>
 8013c2a:	78ab      	ldrb	r3, [r5, #2]
 8013c2c:	4004      	ands	r4, r0
 8013c2e:	b2e4      	uxtb	r4, r4
 8013c30:	b90b      	cbnz	r3, 8013c36 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 8013c32:	4620      	mov	r0, r4
 8013c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c36:	f105 0108 	add.w	r1, r5, #8
 8013c3a:	4630      	mov	r0, r6
 8013c3c:	f7ff ff96 	bl	8013b6c <uxr_serialize_OBJK_Endpoint_QosBinary>
 8013c40:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8013c44:	4607      	mov	r7, r0
 8013c46:	4630      	mov	r0, r6
 8013c48:	f7fb fe0a 	bl	800f860 <ucdr_serialize_bool>
 8013c4c:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8013c50:	4038      	ands	r0, r7
 8013c52:	b2c7      	uxtb	r7, r0
 8013c54:	b913      	cbnz	r3, 8013c5c <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8013c56:	403c      	ands	r4, r7
 8013c58:	4620      	mov	r0, r4
 8013c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c5c:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8013c60:	4630      	mov	r0, r6
 8013c62:	f7fc fa97 	bl	8010194 <ucdr_serialize_uint64_t>
 8013c66:	4007      	ands	r7, r0
 8013c68:	e7f5      	b.n	8013c56 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8013c6a:	bf00      	nop

08013c6c <uxr_deserialize_ObjectVariant>:
 8013c6c:	b570      	push	{r4, r5, r6, lr}
 8013c6e:	4605      	mov	r5, r0
 8013c70:	460e      	mov	r6, r1
 8013c72:	f7fb fe39 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013c76:	b168      	cbz	r0, 8013c94 <uxr_deserialize_ObjectVariant+0x28>
 8013c78:	7833      	ldrb	r3, [r6, #0]
 8013c7a:	3b01      	subs	r3, #1
 8013c7c:	4604      	mov	r4, r0
 8013c7e:	2b0d      	cmp	r3, #13
 8013c80:	d809      	bhi.n	8013c96 <uxr_deserialize_ObjectVariant+0x2a>
 8013c82:	e8df f003 	tbb	[pc, r3]
 8013c86:	0a41      	.short	0x0a41
 8013c88:	0a0a2323 	.word	0x0a0a2323
 8013c8c:	10080a0a 	.word	0x10080a0a
 8013c90:	565c1010 	.word	0x565c1010
 8013c94:	2400      	movs	r4, #0
 8013c96:	4620      	mov	r0, r4
 8013c98:	bd70      	pop	{r4, r5, r6, pc}
 8013c9a:	1d31      	adds	r1, r6, #4
 8013c9c:	4628      	mov	r0, r5
 8013c9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013ca2:	f7ff be41 	b.w	8013928 <uxr_deserialize_DATAWRITER_Representation>
 8013ca6:	1d31      	adds	r1, r6, #4
 8013ca8:	4628      	mov	r0, r5
 8013caa:	f7fb fe1d 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013cae:	2800      	cmp	r0, #0
 8013cb0:	d0f0      	beq.n	8013c94 <uxr_deserialize_ObjectVariant+0x28>
 8013cb2:	7933      	ldrb	r3, [r6, #4]
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d001      	beq.n	8013cbc <uxr_deserialize_ObjectVariant+0x50>
 8013cb8:	2b02      	cmp	r3, #2
 8013cba:	d1ec      	bne.n	8013c96 <uxr_deserialize_ObjectVariant+0x2a>
 8013cbc:	68b1      	ldr	r1, [r6, #8]
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013cc8:	f004 bdec 	b.w	80188a4 <ucdr_deserialize_string>
 8013ccc:	1d31      	adds	r1, r6, #4
 8013cce:	4628      	mov	r0, r5
 8013cd0:	f7fb fe0a 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013cd4:	4604      	mov	r4, r0
 8013cd6:	b170      	cbz	r0, 8013cf6 <uxr_deserialize_ObjectVariant+0x8a>
 8013cd8:	7933      	ldrb	r3, [r6, #4]
 8013cda:	2b02      	cmp	r3, #2
 8013cdc:	d04c      	beq.n	8013d78 <uxr_deserialize_ObjectVariant+0x10c>
 8013cde:	2b03      	cmp	r3, #3
 8013ce0:	d109      	bne.n	8013cf6 <uxr_deserialize_ObjectVariant+0x8a>
 8013ce2:	f106 0308 	add.w	r3, r6, #8
 8013ce6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013cea:	f106 010c 	add.w	r1, r6, #12
 8013cee:	4628      	mov	r0, r5
 8013cf0:	f7fc ffde 	bl	8010cb0 <ucdr_deserialize_sequence_uint8_t>
 8013cf4:	4604      	mov	r4, r0
 8013cf6:	2202      	movs	r2, #2
 8013cf8:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013cfc:	4628      	mov	r0, r5
 8013cfe:	f004 fcb3 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013d02:	4020      	ands	r0, r4
 8013d04:	b2c4      	uxtb	r4, r0
 8013d06:	e7c6      	b.n	8013c96 <uxr_deserialize_ObjectVariant+0x2a>
 8013d08:	1d31      	adds	r1, r6, #4
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	f7fb fdec 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013d10:	4604      	mov	r4, r0
 8013d12:	b130      	cbz	r0, 8013d22 <uxr_deserialize_ObjectVariant+0xb6>
 8013d14:	7933      	ldrb	r3, [r6, #4]
 8013d16:	2b02      	cmp	r3, #2
 8013d18:	d036      	beq.n	8013d88 <uxr_deserialize_ObjectVariant+0x11c>
 8013d1a:	2b03      	cmp	r3, #3
 8013d1c:	d03c      	beq.n	8013d98 <uxr_deserialize_ObjectVariant+0x12c>
 8013d1e:	2b01      	cmp	r3, #1
 8013d20:	d032      	beq.n	8013d88 <uxr_deserialize_ObjectVariant+0x11c>
 8013d22:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8013d26:	4628      	mov	r0, r5
 8013d28:	f7fc fb84 	bl	8010434 <ucdr_deserialize_int16_t>
 8013d2c:	4020      	ands	r0, r4
 8013d2e:	b2c4      	uxtb	r4, r0
 8013d30:	e7b1      	b.n	8013c96 <uxr_deserialize_ObjectVariant+0x2a>
 8013d32:	1d31      	adds	r1, r6, #4
 8013d34:	4628      	mov	r0, r5
 8013d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013d3a:	f7ff bcab 	b.w	8013694 <uxr_deserialize_CLIENT_Representation>
 8013d3e:	2204      	movs	r2, #4
 8013d40:	18b1      	adds	r1, r6, r2
 8013d42:	4628      	mov	r0, r5
 8013d44:	f004 fc90 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013d48:	2202      	movs	r2, #2
 8013d4a:	f106 0108 	add.w	r1, r6, #8
 8013d4e:	4604      	mov	r4, r0
 8013d50:	4628      	mov	r0, r5
 8013d52:	f004 fc89 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013d56:	2202      	movs	r2, #2
 8013d58:	4004      	ands	r4, r0
 8013d5a:	f106 010a 	add.w	r1, r6, #10
 8013d5e:	4628      	mov	r0, r5
 8013d60:	f004 fc82 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013d64:	b2e4      	uxtb	r4, r4
 8013d66:	4603      	mov	r3, r0
 8013d68:	f106 010c 	add.w	r1, r6, #12
 8013d6c:	4628      	mov	r0, r5
 8013d6e:	401c      	ands	r4, r3
 8013d70:	f7fb fd8c 	bl	800f88c <ucdr_deserialize_bool>
 8013d74:	4004      	ands	r4, r0
 8013d76:	e78e      	b.n	8013c96 <uxr_deserialize_ObjectVariant+0x2a>
 8013d78:	68b1      	ldr	r1, [r6, #8]
 8013d7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d7e:	4628      	mov	r0, r5
 8013d80:	f004 fd90 	bl	80188a4 <ucdr_deserialize_string>
 8013d84:	4604      	mov	r4, r0
 8013d86:	e7b6      	b.n	8013cf6 <uxr_deserialize_ObjectVariant+0x8a>
 8013d88:	68b1      	ldr	r1, [r6, #8]
 8013d8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013d8e:	4628      	mov	r0, r5
 8013d90:	f004 fd88 	bl	80188a4 <ucdr_deserialize_string>
 8013d94:	4604      	mov	r4, r0
 8013d96:	e7c4      	b.n	8013d22 <uxr_deserialize_ObjectVariant+0xb6>
 8013d98:	f106 0308 	add.w	r3, r6, #8
 8013d9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013da0:	f106 010c 	add.w	r1, r6, #12
 8013da4:	4628      	mov	r0, r5
 8013da6:	f7fc ff83 	bl	8010cb0 <ucdr_deserialize_sequence_uint8_t>
 8013daa:	4604      	mov	r4, r0
 8013dac:	e7b9      	b.n	8013d22 <uxr_deserialize_ObjectVariant+0xb6>
 8013dae:	bf00      	nop

08013db0 <uxr_deserialize_BaseObjectRequest>:
 8013db0:	b570      	push	{r4, r5, r6, lr}
 8013db2:	2202      	movs	r2, #2
 8013db4:	4605      	mov	r5, r0
 8013db6:	460e      	mov	r6, r1
 8013db8:	f004 fc56 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013dbc:	2202      	movs	r2, #2
 8013dbe:	4604      	mov	r4, r0
 8013dc0:	18b1      	adds	r1, r6, r2
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	f004 fc50 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013dc8:	4020      	ands	r0, r4
 8013dca:	b2c0      	uxtb	r0, r0
 8013dcc:	bd70      	pop	{r4, r5, r6, pc}
 8013dce:	bf00      	nop

08013dd0 <uxr_serialize_ActivityInfoVariant>:
 8013dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dd4:	460d      	mov	r5, r1
 8013dd6:	7809      	ldrb	r1, [r1, #0]
 8013dd8:	4607      	mov	r7, r0
 8013dda:	f7fb fd6f 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013dde:	4681      	mov	r9, r0
 8013de0:	b138      	cbz	r0, 8013df2 <uxr_serialize_ActivityInfoVariant+0x22>
 8013de2:	782b      	ldrb	r3, [r5, #0]
 8013de4:	2b06      	cmp	r3, #6
 8013de6:	f000 8082 	beq.w	8013eee <uxr_serialize_ActivityInfoVariant+0x11e>
 8013dea:	2b0d      	cmp	r3, #13
 8013dec:	d016      	beq.n	8013e1c <uxr_serialize_ActivityInfoVariant+0x4c>
 8013dee:	2b05      	cmp	r3, #5
 8013df0:	d002      	beq.n	8013df8 <uxr_serialize_ActivityInfoVariant+0x28>
 8013df2:	4648      	mov	r0, r9
 8013df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013df8:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013dfc:	4638      	mov	r0, r7
 8013dfe:	f7fc fa99 	bl	8010334 <ucdr_serialize_int16_t>
 8013e02:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 8013e06:	4681      	mov	r9, r0
 8013e08:	4638      	mov	r0, r7
 8013e0a:	f7fc f9c3 	bl	8010194 <ucdr_serialize_uint64_t>
 8013e0e:	ea09 0000 	and.w	r0, r9, r0
 8013e12:	fa5f f980 	uxtb.w	r9, r0
 8013e16:	4648      	mov	r0, r9
 8013e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e1c:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013e20:	4638      	mov	r0, r7
 8013e22:	f7fc fa87 	bl	8010334 <ucdr_serialize_int16_t>
 8013e26:	68e9      	ldr	r1, [r5, #12]
 8013e28:	4681      	mov	r9, r0
 8013e2a:	4638      	mov	r0, r7
 8013e2c:	f7fb ff5c 	bl	800fce8 <ucdr_serialize_uint32_t>
 8013e30:	68eb      	ldr	r3, [r5, #12]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d0eb      	beq.n	8013e0e <uxr_serialize_ActivityInfoVariant+0x3e>
 8013e36:	b320      	cbz	r0, 8013e82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013e38:	f105 080c 	add.w	r8, r5, #12
 8013e3c:	2600      	movs	r6, #0
 8013e3e:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 8013e42:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 8013e46:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8013e4a:	4638      	mov	r0, r7
 8013e4c:	f7fb fd36 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d053      	beq.n	8013efc <uxr_serialize_ActivityInfoVariant+0x12c>
 8013e54:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8013e58:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8013e5c:	0074      	lsls	r4, r6, #1
 8013e5e:	00c9      	lsls	r1, r1, #3
 8013e60:	2b03      	cmp	r3, #3
 8013e62:	d854      	bhi.n	8013f0e <uxr_serialize_ActivityInfoVariant+0x13e>
 8013e64:	e8df f003 	tbb	[pc, r3]
 8013e68:	02102132 	.word	0x02102132
 8013e6c:	4441      	add	r1, r8
 8013e6e:	4638      	mov	r0, r7
 8013e70:	6889      	ldr	r1, [r1, #8]
 8013e72:	f004 fd07 	bl	8018884 <ucdr_serialize_string>
 8013e76:	68ea      	ldr	r2, [r5, #12]
 8013e78:	3601      	adds	r6, #1
 8013e7a:	4296      	cmp	r6, r2
 8013e7c:	d242      	bcs.n	8013f04 <uxr_serialize_ActivityInfoVariant+0x134>
 8013e7e:	2800      	cmp	r0, #0
 8013e80:	d1dd      	bne.n	8013e3e <uxr_serialize_ActivityInfoVariant+0x6e>
 8013e82:	f04f 0900 	mov.w	r9, #0
 8013e86:	e7b4      	b.n	8013df2 <uxr_serialize_ActivityInfoVariant+0x22>
 8013e88:	3108      	adds	r1, #8
 8013e8a:	4441      	add	r1, r8
 8013e8c:	2210      	movs	r2, #16
 8013e8e:	4638      	mov	r0, r7
 8013e90:	f004 fb86 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013e94:	4434      	add	r4, r6
 8013e96:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013e9a:	4604      	mov	r4, r0
 8013e9c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013e9e:	4638      	mov	r0, r7
 8013ea0:	f7fb ff22 	bl	800fce8 <ucdr_serialize_uint32_t>
 8013ea4:	4020      	ands	r0, r4
 8013ea6:	b2c0      	uxtb	r0, r0
 8013ea8:	e7e5      	b.n	8013e76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013eaa:	3108      	adds	r1, #8
 8013eac:	4441      	add	r1, r8
 8013eae:	2204      	movs	r2, #4
 8013eb0:	4638      	mov	r0, r7
 8013eb2:	f004 fb75 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013eb6:	4434      	add	r4, r6
 8013eb8:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013ebc:	4604      	mov	r4, r0
 8013ebe:	8b19      	ldrh	r1, [r3, #24]
 8013ec0:	4638      	mov	r0, r7
 8013ec2:	f7fb fd27 	bl	800f914 <ucdr_serialize_uint16_t>
 8013ec6:	4020      	ands	r0, r4
 8013ec8:	b2c0      	uxtb	r0, r0
 8013eca:	e7d4      	b.n	8013e76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013ecc:	3108      	adds	r1, #8
 8013ece:	4441      	add	r1, r8
 8013ed0:	2202      	movs	r2, #2
 8013ed2:	4638      	mov	r0, r7
 8013ed4:	f004 fb64 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013ed8:	4434      	add	r4, r6
 8013eda:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8013ede:	4604      	mov	r4, r0
 8013ee0:	7d99      	ldrb	r1, [r3, #22]
 8013ee2:	4638      	mov	r0, r7
 8013ee4:	f7fb fcea 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013ee8:	4020      	ands	r0, r4
 8013eea:	b2c0      	uxtb	r0, r0
 8013eec:	e7c3      	b.n	8013e76 <uxr_serialize_ActivityInfoVariant+0xa6>
 8013eee:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8013ef2:	4638      	mov	r0, r7
 8013ef4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ef8:	f7fc ba1c 	b.w	8010334 <ucdr_serialize_int16_t>
 8013efc:	68ea      	ldr	r2, [r5, #12]
 8013efe:	3601      	adds	r6, #1
 8013f00:	42b2      	cmp	r2, r6
 8013f02:	d8be      	bhi.n	8013e82 <uxr_serialize_ActivityInfoVariant+0xb2>
 8013f04:	ea09 0900 	and.w	r9, r9, r0
 8013f08:	fa5f f989 	uxtb.w	r9, r9
 8013f0c:	e771      	b.n	8013df2 <uxr_serialize_ActivityInfoVariant+0x22>
 8013f0e:	68eb      	ldr	r3, [r5, #12]
 8013f10:	3601      	adds	r6, #1
 8013f12:	429e      	cmp	r6, r3
 8013f14:	f10a 0a18 	add.w	sl, sl, #24
 8013f18:	d395      	bcc.n	8013e46 <uxr_serialize_ActivityInfoVariant+0x76>
 8013f1a:	e76a      	b.n	8013df2 <uxr_serialize_ActivityInfoVariant+0x22>

08013f1c <uxr_deserialize_BaseObjectReply>:
 8013f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f20:	2202      	movs	r2, #2
 8013f22:	4606      	mov	r6, r0
 8013f24:	460f      	mov	r7, r1
 8013f26:	f004 fb9f 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013f2a:	2202      	movs	r2, #2
 8013f2c:	18b9      	adds	r1, r7, r2
 8013f2e:	4605      	mov	r5, r0
 8013f30:	4630      	mov	r0, r6
 8013f32:	f004 fb99 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8013f36:	1d39      	adds	r1, r7, #4
 8013f38:	4680      	mov	r8, r0
 8013f3a:	4630      	mov	r0, r6
 8013f3c:	f7fb fcd4 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013f40:	1d79      	adds	r1, r7, #5
 8013f42:	4604      	mov	r4, r0
 8013f44:	4630      	mov	r0, r6
 8013f46:	f7fb fccf 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8013f4a:	ea05 0508 	and.w	r5, r5, r8
 8013f4e:	402c      	ands	r4, r5
 8013f50:	4020      	ands	r0, r4
 8013f52:	b2c0      	uxtb	r0, r0
 8013f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013f58 <uxr_serialize_ReadSpecification>:
 8013f58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5c:	460e      	mov	r6, r1
 8013f5e:	7809      	ldrb	r1, [r1, #0]
 8013f60:	4607      	mov	r7, r0
 8013f62:	f7fb fcab 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013f66:	7871      	ldrb	r1, [r6, #1]
 8013f68:	4604      	mov	r4, r0
 8013f6a:	4638      	mov	r0, r7
 8013f6c:	f7fb fca6 	bl	800f8bc <ucdr_serialize_uint8_t>
 8013f70:	78b1      	ldrb	r1, [r6, #2]
 8013f72:	4004      	ands	r4, r0
 8013f74:	4638      	mov	r0, r7
 8013f76:	f7fb fc73 	bl	800f860 <ucdr_serialize_bool>
 8013f7a:	78b3      	ldrb	r3, [r6, #2]
 8013f7c:	b2e4      	uxtb	r4, r4
 8013f7e:	4004      	ands	r4, r0
 8013f80:	b94b      	cbnz	r3, 8013f96 <uxr_serialize_ReadSpecification+0x3e>
 8013f82:	7a31      	ldrb	r1, [r6, #8]
 8013f84:	4638      	mov	r0, r7
 8013f86:	f7fb fc6b 	bl	800f860 <ucdr_serialize_bool>
 8013f8a:	7a33      	ldrb	r3, [r6, #8]
 8013f8c:	4004      	ands	r4, r0
 8013f8e:	b943      	cbnz	r3, 8013fa2 <uxr_serialize_ReadSpecification+0x4a>
 8013f90:	4620      	mov	r0, r4
 8013f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f96:	6871      	ldr	r1, [r6, #4]
 8013f98:	4638      	mov	r0, r7
 8013f9a:	f004 fc73 	bl	8018884 <ucdr_serialize_string>
 8013f9e:	4004      	ands	r4, r0
 8013fa0:	e7ef      	b.n	8013f82 <uxr_serialize_ReadSpecification+0x2a>
 8013fa2:	8971      	ldrh	r1, [r6, #10]
 8013fa4:	4638      	mov	r0, r7
 8013fa6:	f7fb fcb5 	bl	800f914 <ucdr_serialize_uint16_t>
 8013faa:	89b1      	ldrh	r1, [r6, #12]
 8013fac:	4605      	mov	r5, r0
 8013fae:	4638      	mov	r0, r7
 8013fb0:	f7fb fcb0 	bl	800f914 <ucdr_serialize_uint16_t>
 8013fb4:	89f1      	ldrh	r1, [r6, #14]
 8013fb6:	4005      	ands	r5, r0
 8013fb8:	4638      	mov	r0, r7
 8013fba:	f7fb fcab 	bl	800f914 <ucdr_serialize_uint16_t>
 8013fbe:	8a31      	ldrh	r1, [r6, #16]
 8013fc0:	4680      	mov	r8, r0
 8013fc2:	4638      	mov	r0, r7
 8013fc4:	f7fb fca6 	bl	800f914 <ucdr_serialize_uint16_t>
 8013fc8:	b2ed      	uxtb	r5, r5
 8013fca:	4025      	ands	r5, r4
 8013fcc:	ea08 0505 	and.w	r5, r8, r5
 8013fd0:	ea00 0405 	and.w	r4, r0, r5
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013fda:	bf00      	nop

08013fdc <uxr_serialize_CREATE_CLIENT_Payload>:
 8013fdc:	f7ff bb02 	b.w	80135e4 <uxr_serialize_CLIENT_Representation>

08013fe0 <uxr_serialize_CREATE_Payload>:
 8013fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fe2:	2202      	movs	r2, #2
 8013fe4:	4607      	mov	r7, r0
 8013fe6:	460e      	mov	r6, r1
 8013fe8:	f004 fada 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013fec:	2202      	movs	r2, #2
 8013fee:	18b1      	adds	r1, r6, r2
 8013ff0:	4605      	mov	r5, r0
 8013ff2:	4638      	mov	r0, r7
 8013ff4:	f004 fad4 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8013ff8:	7931      	ldrb	r1, [r6, #4]
 8013ffa:	4604      	mov	r4, r0
 8013ffc:	4638      	mov	r0, r7
 8013ffe:	f7fb fc5d 	bl	800f8bc <ucdr_serialize_uint8_t>
 8014002:	b170      	cbz	r0, 8014022 <uxr_serialize_CREATE_Payload+0x42>
 8014004:	7933      	ldrb	r3, [r6, #4]
 8014006:	402c      	ands	r4, r5
 8014008:	3b01      	subs	r3, #1
 801400a:	b2e4      	uxtb	r4, r4
 801400c:	2b0d      	cmp	r3, #13
 801400e:	d809      	bhi.n	8014024 <uxr_serialize_CREATE_Payload+0x44>
 8014010:	e8df f003 	tbb	[pc, r3]
 8014014:	23230a4c 	.word	0x23230a4c
 8014018:	0a0a0a0a 	.word	0x0a0a0a0a
 801401c:	12121208 	.word	0x12121208
 8014020:	3e45      	.short	0x3e45
 8014022:	2400      	movs	r4, #0
 8014024:	4620      	mov	r0, r4
 8014026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014028:	f106 0108 	add.w	r1, r6, #8
 801402c:	4638      	mov	r0, r7
 801402e:	f7ff fbdf 	bl	80137f0 <uxr_serialize_DATAWRITER_Representation>
 8014032:	4004      	ands	r4, r0
 8014034:	4620      	mov	r0, r4
 8014036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014038:	7a31      	ldrb	r1, [r6, #8]
 801403a:	4638      	mov	r0, r7
 801403c:	f7fb fc3e 	bl	800f8bc <ucdr_serialize_uint8_t>
 8014040:	2800      	cmp	r0, #0
 8014042:	d0ee      	beq.n	8014022 <uxr_serialize_CREATE_Payload+0x42>
 8014044:	7a33      	ldrb	r3, [r6, #8]
 8014046:	2b01      	cmp	r3, #1
 8014048:	d001      	beq.n	801404e <uxr_serialize_CREATE_Payload+0x6e>
 801404a:	2b02      	cmp	r3, #2
 801404c:	d1ea      	bne.n	8014024 <uxr_serialize_CREATE_Payload+0x44>
 801404e:	68f1      	ldr	r1, [r6, #12]
 8014050:	4638      	mov	r0, r7
 8014052:	f004 fc17 	bl	8018884 <ucdr_serialize_string>
 8014056:	4004      	ands	r4, r0
 8014058:	e7e4      	b.n	8014024 <uxr_serialize_CREATE_Payload+0x44>
 801405a:	7a31      	ldrb	r1, [r6, #8]
 801405c:	4638      	mov	r0, r7
 801405e:	f7fb fc2d 	bl	800f8bc <ucdr_serialize_uint8_t>
 8014062:	4605      	mov	r5, r0
 8014064:	b158      	cbz	r0, 801407e <uxr_serialize_CREATE_Payload+0x9e>
 8014066:	7a33      	ldrb	r3, [r6, #8]
 8014068:	2b02      	cmp	r3, #2
 801406a:	d034      	beq.n	80140d6 <uxr_serialize_CREATE_Payload+0xf6>
 801406c:	2b03      	cmp	r3, #3
 801406e:	d106      	bne.n	801407e <uxr_serialize_CREATE_Payload+0x9e>
 8014070:	68f2      	ldr	r2, [r6, #12]
 8014072:	f106 0110 	add.w	r1, r6, #16
 8014076:	4638      	mov	r0, r7
 8014078:	f7fc fe08 	bl	8010c8c <ucdr_serialize_sequence_uint8_t>
 801407c:	4605      	mov	r5, r0
 801407e:	2202      	movs	r2, #2
 8014080:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8014084:	4638      	mov	r0, r7
 8014086:	f004 fa8b 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 801408a:	4028      	ands	r0, r5
 801408c:	4004      	ands	r4, r0
 801408e:	e7c9      	b.n	8014024 <uxr_serialize_CREATE_Payload+0x44>
 8014090:	f106 0108 	add.w	r1, r6, #8
 8014094:	4638      	mov	r0, r7
 8014096:	f7ff faa5 	bl	80135e4 <uxr_serialize_CLIENT_Representation>
 801409a:	4004      	ands	r4, r0
 801409c:	e7c2      	b.n	8014024 <uxr_serialize_CREATE_Payload+0x44>
 801409e:	f106 0108 	add.w	r1, r6, #8
 80140a2:	4638      	mov	r0, r7
 80140a4:	f7ff fb5a 	bl	801375c <uxr_serialize_AGENT_Representation>
 80140a8:	4004      	ands	r4, r0
 80140aa:	e7bb      	b.n	8014024 <uxr_serialize_CREATE_Payload+0x44>
 80140ac:	7a31      	ldrb	r1, [r6, #8]
 80140ae:	4638      	mov	r0, r7
 80140b0:	f7fb fc04 	bl	800f8bc <ucdr_serialize_uint8_t>
 80140b4:	4605      	mov	r5, r0
 80140b6:	b130      	cbz	r0, 80140c6 <uxr_serialize_CREATE_Payload+0xe6>
 80140b8:	7a33      	ldrb	r3, [r6, #8]
 80140ba:	2b02      	cmp	r3, #2
 80140bc:	d011      	beq.n	80140e2 <uxr_serialize_CREATE_Payload+0x102>
 80140be:	2b03      	cmp	r3, #3
 80140c0:	d015      	beq.n	80140ee <uxr_serialize_CREATE_Payload+0x10e>
 80140c2:	2b01      	cmp	r3, #1
 80140c4:	d00d      	beq.n	80140e2 <uxr_serialize_CREATE_Payload+0x102>
 80140c6:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80140ca:	4638      	mov	r0, r7
 80140cc:	f7fc f932 	bl	8010334 <ucdr_serialize_int16_t>
 80140d0:	4028      	ands	r0, r5
 80140d2:	4004      	ands	r4, r0
 80140d4:	e7a6      	b.n	8014024 <uxr_serialize_CREATE_Payload+0x44>
 80140d6:	68f1      	ldr	r1, [r6, #12]
 80140d8:	4638      	mov	r0, r7
 80140da:	f004 fbd3 	bl	8018884 <ucdr_serialize_string>
 80140de:	4605      	mov	r5, r0
 80140e0:	e7cd      	b.n	801407e <uxr_serialize_CREATE_Payload+0x9e>
 80140e2:	68f1      	ldr	r1, [r6, #12]
 80140e4:	4638      	mov	r0, r7
 80140e6:	f004 fbcd 	bl	8018884 <ucdr_serialize_string>
 80140ea:	4605      	mov	r5, r0
 80140ec:	e7eb      	b.n	80140c6 <uxr_serialize_CREATE_Payload+0xe6>
 80140ee:	68f2      	ldr	r2, [r6, #12]
 80140f0:	f106 0110 	add.w	r1, r6, #16
 80140f4:	4638      	mov	r0, r7
 80140f6:	f7fc fdc9 	bl	8010c8c <ucdr_serialize_sequence_uint8_t>
 80140fa:	4605      	mov	r5, r0
 80140fc:	e7e3      	b.n	80140c6 <uxr_serialize_CREATE_Payload+0xe6>
 80140fe:	bf00      	nop

08014100 <uxr_deserialize_GET_INFO_Payload>:
 8014100:	b570      	push	{r4, r5, r6, lr}
 8014102:	2202      	movs	r2, #2
 8014104:	4605      	mov	r5, r0
 8014106:	460e      	mov	r6, r1
 8014108:	f004 faae 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 801410c:	2202      	movs	r2, #2
 801410e:	18b1      	adds	r1, r6, r2
 8014110:	4604      	mov	r4, r0
 8014112:	4628      	mov	r0, r5
 8014114:	f004 faa8 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8014118:	1d31      	adds	r1, r6, #4
 801411a:	4004      	ands	r4, r0
 801411c:	4628      	mov	r0, r5
 801411e:	f7fb ff13 	bl	800ff48 <ucdr_deserialize_uint32_t>
 8014122:	b2e4      	uxtb	r4, r4
 8014124:	4020      	ands	r0, r4
 8014126:	bd70      	pop	{r4, r5, r6, pc}

08014128 <uxr_serialize_DELETE_Payload>:
 8014128:	b570      	push	{r4, r5, r6, lr}
 801412a:	2202      	movs	r2, #2
 801412c:	4605      	mov	r5, r0
 801412e:	460e      	mov	r6, r1
 8014130:	f004 fa36 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8014134:	2202      	movs	r2, #2
 8014136:	4604      	mov	r4, r0
 8014138:	18b1      	adds	r1, r6, r2
 801413a:	4628      	mov	r0, r5
 801413c:	f004 fa30 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8014140:	4020      	ands	r0, r4
 8014142:	b2c0      	uxtb	r0, r0
 8014144:	bd70      	pop	{r4, r5, r6, pc}
 8014146:	bf00      	nop

08014148 <uxr_deserialize_STATUS_AGENT_Payload>:
 8014148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801414c:	4605      	mov	r5, r0
 801414e:	460e      	mov	r6, r1
 8014150:	f7fb fbca 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8014154:	1c71      	adds	r1, r6, #1
 8014156:	4604      	mov	r4, r0
 8014158:	4628      	mov	r0, r5
 801415a:	f7fb fbc5 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 801415e:	2204      	movs	r2, #4
 8014160:	18b1      	adds	r1, r6, r2
 8014162:	4680      	mov	r8, r0
 8014164:	4628      	mov	r0, r5
 8014166:	f004 fa7f 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 801416a:	f106 0108 	add.w	r1, r6, #8
 801416e:	4607      	mov	r7, r0
 8014170:	2202      	movs	r2, #2
 8014172:	4628      	mov	r0, r5
 8014174:	f004 fa78 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8014178:	ea04 0308 	and.w	r3, r4, r8
 801417c:	b2db      	uxtb	r3, r3
 801417e:	ea03 0407 	and.w	r4, r3, r7
 8014182:	2202      	movs	r2, #2
 8014184:	4607      	mov	r7, r0
 8014186:	f106 010a 	add.w	r1, r6, #10
 801418a:	4628      	mov	r0, r5
 801418c:	f004 fa6c 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8014190:	f106 010c 	add.w	r1, r6, #12
 8014194:	4603      	mov	r3, r0
 8014196:	4628      	mov	r0, r5
 8014198:	461d      	mov	r5, r3
 801419a:	f7fb fb77 	bl	800f88c <ucdr_deserialize_bool>
 801419e:	403c      	ands	r4, r7
 80141a0:	4025      	ands	r5, r4
 80141a2:	4028      	ands	r0, r5
 80141a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141a8 <uxr_deserialize_STATUS_Payload>:
 80141a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ac:	2202      	movs	r2, #2
 80141ae:	4606      	mov	r6, r0
 80141b0:	460f      	mov	r7, r1
 80141b2:	f004 fa59 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 80141b6:	2202      	movs	r2, #2
 80141b8:	18b9      	adds	r1, r7, r2
 80141ba:	4605      	mov	r5, r0
 80141bc:	4630      	mov	r0, r6
 80141be:	f004 fa53 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 80141c2:	1d39      	adds	r1, r7, #4
 80141c4:	4680      	mov	r8, r0
 80141c6:	4630      	mov	r0, r6
 80141c8:	f7fb fb8e 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 80141cc:	1d79      	adds	r1, r7, #5
 80141ce:	4604      	mov	r4, r0
 80141d0:	4630      	mov	r0, r6
 80141d2:	f7fb fb89 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 80141d6:	ea05 0508 	and.w	r5, r5, r8
 80141da:	402c      	ands	r4, r5
 80141dc:	4020      	ands	r0, r4
 80141de:	b2c0      	uxtb	r0, r0
 80141e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080141e4 <uxr_serialize_INFO_Payload>:
 80141e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141e8:	2202      	movs	r2, #2
 80141ea:	460c      	mov	r4, r1
 80141ec:	4605      	mov	r5, r0
 80141ee:	f004 f9d7 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80141f2:	2202      	movs	r2, #2
 80141f4:	18a1      	adds	r1, r4, r2
 80141f6:	4680      	mov	r8, r0
 80141f8:	4628      	mov	r0, r5
 80141fa:	f004 f9d1 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80141fe:	7921      	ldrb	r1, [r4, #4]
 8014200:	4607      	mov	r7, r0
 8014202:	4628      	mov	r0, r5
 8014204:	f7fb fb5a 	bl	800f8bc <ucdr_serialize_uint8_t>
 8014208:	7961      	ldrb	r1, [r4, #5]
 801420a:	4606      	mov	r6, r0
 801420c:	4628      	mov	r0, r5
 801420e:	f7fb fb55 	bl	800f8bc <ucdr_serialize_uint8_t>
 8014212:	ea08 0807 	and.w	r8, r8, r7
 8014216:	ea06 0608 	and.w	r6, r6, r8
 801421a:	4006      	ands	r6, r0
 801421c:	7a21      	ldrb	r1, [r4, #8]
 801421e:	4628      	mov	r0, r5
 8014220:	f7fb fb1e 	bl	800f860 <ucdr_serialize_bool>
 8014224:	7a23      	ldrb	r3, [r4, #8]
 8014226:	b2f7      	uxtb	r7, r6
 8014228:	4606      	mov	r6, r0
 801422a:	b96b      	cbnz	r3, 8014248 <uxr_serialize_INFO_Payload+0x64>
 801422c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8014230:	4628      	mov	r0, r5
 8014232:	f7fb fb15 	bl	800f860 <ucdr_serialize_bool>
 8014236:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801423a:	4030      	ands	r0, r6
 801423c:	b2c6      	uxtb	r6, r0
 801423e:	b983      	cbnz	r3, 8014262 <uxr_serialize_INFO_Payload+0x7e>
 8014240:	ea06 0007 	and.w	r0, r6, r7
 8014244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014248:	7b21      	ldrb	r1, [r4, #12]
 801424a:	4628      	mov	r0, r5
 801424c:	f7fb fb36 	bl	800f8bc <ucdr_serialize_uint8_t>
 8014250:	b188      	cbz	r0, 8014276 <uxr_serialize_INFO_Payload+0x92>
 8014252:	f104 010c 	add.w	r1, r4, #12
 8014256:	4628      	mov	r0, r5
 8014258:	f7ff faf2 	bl	8013840 <uxr_serialize_ObjectVariant.part.0>
 801425c:	4030      	ands	r0, r6
 801425e:	b2c6      	uxtb	r6, r0
 8014260:	e7e4      	b.n	801422c <uxr_serialize_INFO_Payload+0x48>
 8014262:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8014266:	4628      	mov	r0, r5
 8014268:	f7ff fdb2 	bl	8013dd0 <uxr_serialize_ActivityInfoVariant>
 801426c:	4006      	ands	r6, r0
 801426e:	ea06 0007 	and.w	r0, r6, r7
 8014272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014276:	4606      	mov	r6, r0
 8014278:	e7d8      	b.n	801422c <uxr_serialize_INFO_Payload+0x48>
 801427a:	bf00      	nop

0801427c <uxr_serialize_READ_DATA_Payload>:
 801427c:	b570      	push	{r4, r5, r6, lr}
 801427e:	2202      	movs	r2, #2
 8014280:	4605      	mov	r5, r0
 8014282:	460e      	mov	r6, r1
 8014284:	f004 f98c 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8014288:	2202      	movs	r2, #2
 801428a:	18b1      	adds	r1, r6, r2
 801428c:	4604      	mov	r4, r0
 801428e:	4628      	mov	r0, r5
 8014290:	f004 f986 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 8014294:	1d31      	adds	r1, r6, #4
 8014296:	4004      	ands	r4, r0
 8014298:	4628      	mov	r0, r5
 801429a:	f7ff fe5d 	bl	8013f58 <uxr_serialize_ReadSpecification>
 801429e:	b2e4      	uxtb	r4, r4
 80142a0:	4020      	ands	r0, r4
 80142a2:	bd70      	pop	{r4, r5, r6, pc}

080142a4 <uxr_serialize_WRITE_DATA_Payload_Data>:
 80142a4:	b570      	push	{r4, r5, r6, lr}
 80142a6:	2202      	movs	r2, #2
 80142a8:	4605      	mov	r5, r0
 80142aa:	460e      	mov	r6, r1
 80142ac:	f004 f978 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80142b0:	2202      	movs	r2, #2
 80142b2:	4604      	mov	r4, r0
 80142b4:	18b1      	adds	r1, r6, r2
 80142b6:	4628      	mov	r0, r5
 80142b8:	f004 f972 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80142bc:	4020      	ands	r0, r4
 80142be:	b2c0      	uxtb	r0, r0
 80142c0:	bd70      	pop	{r4, r5, r6, pc}
 80142c2:	bf00      	nop

080142c4 <uxr_serialize_ACKNACK_Payload>:
 80142c4:	b570      	push	{r4, r5, r6, lr}
 80142c6:	460c      	mov	r4, r1
 80142c8:	460e      	mov	r6, r1
 80142ca:	f834 1b02 	ldrh.w	r1, [r4], #2
 80142ce:	4605      	mov	r5, r0
 80142d0:	f7fb fb20 	bl	800f914 <ucdr_serialize_uint16_t>
 80142d4:	2202      	movs	r2, #2
 80142d6:	4621      	mov	r1, r4
 80142d8:	4604      	mov	r4, r0
 80142da:	4628      	mov	r0, r5
 80142dc:	f004 f960 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80142e0:	7931      	ldrb	r1, [r6, #4]
 80142e2:	4004      	ands	r4, r0
 80142e4:	4628      	mov	r0, r5
 80142e6:	f7fb fae9 	bl	800f8bc <ucdr_serialize_uint8_t>
 80142ea:	b2e4      	uxtb	r4, r4
 80142ec:	4020      	ands	r0, r4
 80142ee:	bd70      	pop	{r4, r5, r6, pc}

080142f0 <uxr_deserialize_ACKNACK_Payload>:
 80142f0:	b570      	push	{r4, r5, r6, lr}
 80142f2:	4605      	mov	r5, r0
 80142f4:	460e      	mov	r6, r1
 80142f6:	f7fb fc0d 	bl	800fb14 <ucdr_deserialize_uint16_t>
 80142fa:	2202      	movs	r2, #2
 80142fc:	18b1      	adds	r1, r6, r2
 80142fe:	4604      	mov	r4, r0
 8014300:	4628      	mov	r0, r5
 8014302:	f004 f9b1 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8014306:	1d31      	adds	r1, r6, #4
 8014308:	4004      	ands	r4, r0
 801430a:	4628      	mov	r0, r5
 801430c:	f7fb faec 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 8014310:	b2e4      	uxtb	r4, r4
 8014312:	4020      	ands	r0, r4
 8014314:	bd70      	pop	{r4, r5, r6, pc}
 8014316:	bf00      	nop

08014318 <uxr_serialize_HEARTBEAT_Payload>:
 8014318:	b570      	push	{r4, r5, r6, lr}
 801431a:	460d      	mov	r5, r1
 801431c:	8809      	ldrh	r1, [r1, #0]
 801431e:	4606      	mov	r6, r0
 8014320:	f7fb faf8 	bl	800f914 <ucdr_serialize_uint16_t>
 8014324:	8869      	ldrh	r1, [r5, #2]
 8014326:	4604      	mov	r4, r0
 8014328:	4630      	mov	r0, r6
 801432a:	f7fb faf3 	bl	800f914 <ucdr_serialize_uint16_t>
 801432e:	7929      	ldrb	r1, [r5, #4]
 8014330:	4004      	ands	r4, r0
 8014332:	4630      	mov	r0, r6
 8014334:	f7fb fac2 	bl	800f8bc <ucdr_serialize_uint8_t>
 8014338:	b2e4      	uxtb	r4, r4
 801433a:	4020      	ands	r0, r4
 801433c:	bd70      	pop	{r4, r5, r6, pc}
 801433e:	bf00      	nop

08014340 <uxr_deserialize_HEARTBEAT_Payload>:
 8014340:	b570      	push	{r4, r5, r6, lr}
 8014342:	4605      	mov	r5, r0
 8014344:	460e      	mov	r6, r1
 8014346:	f7fb fbe5 	bl	800fb14 <ucdr_deserialize_uint16_t>
 801434a:	1cb1      	adds	r1, r6, #2
 801434c:	4604      	mov	r4, r0
 801434e:	4628      	mov	r0, r5
 8014350:	f7fb fbe0 	bl	800fb14 <ucdr_deserialize_uint16_t>
 8014354:	1d31      	adds	r1, r6, #4
 8014356:	4004      	ands	r4, r0
 8014358:	4628      	mov	r0, r5
 801435a:	f7fb fac5 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 801435e:	b2e4      	uxtb	r4, r4
 8014360:	4020      	ands	r0, r4
 8014362:	bd70      	pop	{r4, r5, r6, pc}

08014364 <uxr_serialize_TIMESTAMP_Payload>:
 8014364:	b570      	push	{r4, r5, r6, lr}
 8014366:	460d      	mov	r5, r1
 8014368:	6809      	ldr	r1, [r1, #0]
 801436a:	4606      	mov	r6, r0
 801436c:	f7fc f8d6 	bl	801051c <ucdr_serialize_int32_t>
 8014370:	6869      	ldr	r1, [r5, #4]
 8014372:	4604      	mov	r4, r0
 8014374:	4630      	mov	r0, r6
 8014376:	f7fb fcb7 	bl	800fce8 <ucdr_serialize_uint32_t>
 801437a:	4020      	ands	r0, r4
 801437c:	b2c0      	uxtb	r0, r0
 801437e:	bd70      	pop	{r4, r5, r6, pc}

08014380 <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8014380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014384:	4605      	mov	r5, r0
 8014386:	460e      	mov	r6, r1
 8014388:	f7fc f960 	bl	801064c <ucdr_deserialize_int32_t>
 801438c:	1d31      	adds	r1, r6, #4
 801438e:	4607      	mov	r7, r0
 8014390:	4628      	mov	r0, r5
 8014392:	f7fb fdd9 	bl	800ff48 <ucdr_deserialize_uint32_t>
 8014396:	f106 0108 	add.w	r1, r6, #8
 801439a:	4680      	mov	r8, r0
 801439c:	4628      	mov	r0, r5
 801439e:	f7fc f955 	bl	801064c <ucdr_deserialize_int32_t>
 80143a2:	f106 010c 	add.w	r1, r6, #12
 80143a6:	4604      	mov	r4, r0
 80143a8:	4628      	mov	r0, r5
 80143aa:	f7fb fdcd 	bl	800ff48 <ucdr_deserialize_uint32_t>
 80143ae:	ea07 0708 	and.w	r7, r7, r8
 80143b2:	403c      	ands	r4, r7
 80143b4:	f106 0110 	add.w	r1, r6, #16
 80143b8:	4004      	ands	r4, r0
 80143ba:	4628      	mov	r0, r5
 80143bc:	f7fc f946 	bl	801064c <ucdr_deserialize_int32_t>
 80143c0:	f106 0114 	add.w	r1, r6, #20
 80143c4:	4607      	mov	r7, r0
 80143c6:	4628      	mov	r0, r5
 80143c8:	f7fb fdbe 	bl	800ff48 <ucdr_deserialize_uint32_t>
 80143cc:	b2e4      	uxtb	r4, r4
 80143ce:	403c      	ands	r4, r7
 80143d0:	4020      	ands	r0, r4
 80143d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143d6:	bf00      	nop

080143d8 <uxr_serialize_SampleIdentity>:
 80143d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143dc:	220c      	movs	r2, #12
 80143de:	4604      	mov	r4, r0
 80143e0:	460d      	mov	r5, r1
 80143e2:	f004 f8dd 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80143e6:	2203      	movs	r2, #3
 80143e8:	f105 010c 	add.w	r1, r5, #12
 80143ec:	4607      	mov	r7, r0
 80143ee:	4620      	mov	r0, r4
 80143f0:	f004 f8d6 	bl	80185a0 <ucdr_serialize_array_uint8_t>
 80143f4:	7be9      	ldrb	r1, [r5, #15]
 80143f6:	4680      	mov	r8, r0
 80143f8:	4620      	mov	r0, r4
 80143fa:	f7fb fa5f 	bl	800f8bc <ucdr_serialize_uint8_t>
 80143fe:	6929      	ldr	r1, [r5, #16]
 8014400:	4606      	mov	r6, r0
 8014402:	4620      	mov	r0, r4
 8014404:	f7fc f88a 	bl	801051c <ucdr_serialize_int32_t>
 8014408:	6969      	ldr	r1, [r5, #20]
 801440a:	4603      	mov	r3, r0
 801440c:	4620      	mov	r0, r4
 801440e:	ea07 0708 	and.w	r7, r7, r8
 8014412:	461c      	mov	r4, r3
 8014414:	f7fb fc68 	bl	800fce8 <ucdr_serialize_uint32_t>
 8014418:	403e      	ands	r6, r7
 801441a:	4034      	ands	r4, r6
 801441c:	4020      	ands	r0, r4
 801441e:	b2c0      	uxtb	r0, r0
 8014420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08014424 <uxr_deserialize_SampleIdentity>:
 8014424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014428:	220c      	movs	r2, #12
 801442a:	4604      	mov	r4, r0
 801442c:	460d      	mov	r5, r1
 801442e:	f004 f91b 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8014432:	2203      	movs	r2, #3
 8014434:	f105 010c 	add.w	r1, r5, #12
 8014438:	4607      	mov	r7, r0
 801443a:	4620      	mov	r0, r4
 801443c:	f004 f914 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8014440:	f105 010f 	add.w	r1, r5, #15
 8014444:	4680      	mov	r8, r0
 8014446:	4620      	mov	r0, r4
 8014448:	f7fb fa4e 	bl	800f8e8 <ucdr_deserialize_uint8_t>
 801444c:	f105 0110 	add.w	r1, r5, #16
 8014450:	4606      	mov	r6, r0
 8014452:	4620      	mov	r0, r4
 8014454:	f7fc f8fa 	bl	801064c <ucdr_deserialize_int32_t>
 8014458:	f105 0114 	add.w	r1, r5, #20
 801445c:	4603      	mov	r3, r0
 801445e:	4620      	mov	r0, r4
 8014460:	ea07 0708 	and.w	r7, r7, r8
 8014464:	461c      	mov	r4, r3
 8014466:	f7fb fd6f 	bl	800ff48 <ucdr_deserialize_uint32_t>
 801446a:	403e      	ands	r6, r7
 801446c:	4034      	ands	r4, r6
 801446e:	4020      	ands	r0, r4
 8014470:	b2c0      	uxtb	r0, r0
 8014472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014476:	bf00      	nop

08014478 <rcl_client_get_rmw_handle>:
 8014478:	b118      	cbz	r0, 8014482 <rcl_client_get_rmw_handle+0xa>
 801447a:	6800      	ldr	r0, [r0, #0]
 801447c:	b108      	cbz	r0, 8014482 <rcl_client_get_rmw_handle+0xa>
 801447e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014482:	4770      	bx	lr

08014484 <rcl_send_request>:
 8014484:	b570      	push	{r4, r5, r6, lr}
 8014486:	b082      	sub	sp, #8
 8014488:	b1e8      	cbz	r0, 80144c6 <rcl_send_request+0x42>
 801448a:	4604      	mov	r4, r0
 801448c:	6800      	ldr	r0, [r0, #0]
 801448e:	b1d0      	cbz	r0, 80144c6 <rcl_send_request+0x42>
 8014490:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8014494:	b1bb      	cbz	r3, 80144c6 <rcl_send_request+0x42>
 8014496:	460e      	mov	r6, r1
 8014498:	b1d1      	cbz	r1, 80144d0 <rcl_send_request+0x4c>
 801449a:	4615      	mov	r5, r2
 801449c:	b1c2      	cbz	r2, 80144d0 <rcl_send_request+0x4c>
 801449e:	2105      	movs	r1, #5
 80144a0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80144a4:	f002 fc28 	bl	8016cf8 <__atomic_load_8>
 80144a8:	6823      	ldr	r3, [r4, #0]
 80144aa:	e9c5 0100 	strd	r0, r1, [r5]
 80144ae:	462a      	mov	r2, r5
 80144b0:	4631      	mov	r1, r6
 80144b2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80144b6:	f003 fb03 	bl	8017ac0 <rmw_send_request>
 80144ba:	4606      	mov	r6, r0
 80144bc:	b160      	cbz	r0, 80144d8 <rcl_send_request+0x54>
 80144be:	2601      	movs	r6, #1
 80144c0:	4630      	mov	r0, r6
 80144c2:	b002      	add	sp, #8
 80144c4:	bd70      	pop	{r4, r5, r6, pc}
 80144c6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80144ca:	4630      	mov	r0, r6
 80144cc:	b002      	add	sp, #8
 80144ce:	bd70      	pop	{r4, r5, r6, pc}
 80144d0:	260b      	movs	r6, #11
 80144d2:	4630      	mov	r0, r6
 80144d4:	b002      	add	sp, #8
 80144d6:	bd70      	pop	{r4, r5, r6, pc}
 80144d8:	6820      	ldr	r0, [r4, #0]
 80144da:	2105      	movs	r1, #5
 80144dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144e0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80144e4:	9100      	str	r1, [sp, #0]
 80144e6:	f002 fc73 	bl	8016dd0 <__atomic_exchange_8>
 80144ea:	4630      	mov	r0, r6
 80144ec:	b002      	add	sp, #8
 80144ee:	bd70      	pop	{r4, r5, r6, pc}

080144f0 <rcl_take_response>:
 80144f0:	b570      	push	{r4, r5, r6, lr}
 80144f2:	468e      	mov	lr, r1
 80144f4:	460c      	mov	r4, r1
 80144f6:	4616      	mov	r6, r2
 80144f8:	4605      	mov	r5, r0
 80144fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80144fe:	b08c      	sub	sp, #48	@ 0x30
 8014500:	f10d 0c18 	add.w	ip, sp, #24
 8014504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014508:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801450c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014510:	b35d      	cbz	r5, 801456a <rcl_take_response+0x7a>
 8014512:	682b      	ldr	r3, [r5, #0]
 8014514:	b34b      	cbz	r3, 801456a <rcl_take_response+0x7a>
 8014516:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801451a:	b330      	cbz	r0, 801456a <rcl_take_response+0x7a>
 801451c:	b346      	cbz	r6, 8014570 <rcl_take_response+0x80>
 801451e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8014578 <rcl_take_response+0x88>
 8014522:	2300      	movs	r3, #0
 8014524:	f88d 3007 	strb.w	r3, [sp, #7]
 8014528:	4632      	mov	r2, r6
 801452a:	f10d 0307 	add.w	r3, sp, #7
 801452e:	a902      	add	r1, sp, #8
 8014530:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014534:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014538:	f003 fbca 	bl	8017cd0 <rmw_take_response>
 801453c:	4605      	mov	r5, r0
 801453e:	b9c8      	cbnz	r0, 8014574 <rcl_take_response+0x84>
 8014540:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014544:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8014548:	2a00      	cmp	r2, #0
 801454a:	bf08      	it	eq
 801454c:	461d      	moveq	r5, r3
 801454e:	f10d 0e18 	add.w	lr, sp, #24
 8014552:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014556:	46a4      	mov	ip, r4
 8014558:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801455c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014560:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014564:	4628      	mov	r0, r5
 8014566:	b00c      	add	sp, #48	@ 0x30
 8014568:	bd70      	pop	{r4, r5, r6, pc}
 801456a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801456e:	e7ee      	b.n	801454e <rcl_take_response+0x5e>
 8014570:	250b      	movs	r5, #11
 8014572:	e7ec      	b.n	801454e <rcl_take_response+0x5e>
 8014574:	2501      	movs	r5, #1
 8014576:	e7ea      	b.n	801454e <rcl_take_response+0x5e>
	...

08014580 <rcl_client_is_valid>:
 8014580:	b130      	cbz	r0, 8014590 <rcl_client_is_valid+0x10>
 8014582:	6800      	ldr	r0, [r0, #0]
 8014584:	b120      	cbz	r0, 8014590 <rcl_client_is_valid+0x10>
 8014586:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801458a:	3800      	subs	r0, #0
 801458c:	bf18      	it	ne
 801458e:	2001      	movne	r0, #1
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop

08014594 <rcl_convert_rmw_ret_to_rcl_ret>:
 8014594:	280b      	cmp	r0, #11
 8014596:	dc0d      	bgt.n	80145b4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8014598:	2800      	cmp	r0, #0
 801459a:	db09      	blt.n	80145b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801459c:	280b      	cmp	r0, #11
 801459e:	d807      	bhi.n	80145b0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 80145a0:	e8df f000 	tbb	[pc, r0]
 80145a4:	07060607 	.word	0x07060607
 80145a8:	06060606 	.word	0x06060606
 80145ac:	07070606 	.word	0x07070606
 80145b0:	2001      	movs	r0, #1
 80145b2:	4770      	bx	lr
 80145b4:	28cb      	cmp	r0, #203	@ 0xcb
 80145b6:	bf18      	it	ne
 80145b8:	2001      	movne	r0, #1
 80145ba:	4770      	bx	lr

080145bc <rcl_get_zero_initialized_context>:
 80145bc:	4a03      	ldr	r2, [pc, #12]	@ (80145cc <rcl_get_zero_initialized_context+0x10>)
 80145be:	4603      	mov	r3, r0
 80145c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80145c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80145c8:	4618      	mov	r0, r3
 80145ca:	4770      	bx	lr
 80145cc:	0801beac 	.word	0x0801beac

080145d0 <rcl_context_is_valid>:
 80145d0:	b118      	cbz	r0, 80145da <rcl_context_is_valid+0xa>
 80145d2:	6840      	ldr	r0, [r0, #4]
 80145d4:	3800      	subs	r0, #0
 80145d6:	bf18      	it	ne
 80145d8:	2001      	movne	r0, #1
 80145da:	4770      	bx	lr

080145dc <__cleanup_context>:
 80145dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80145e0:	4606      	mov	r6, r0
 80145e2:	6800      	ldr	r0, [r0, #0]
 80145e4:	2300      	movs	r3, #0
 80145e6:	6073      	str	r3, [r6, #4]
 80145e8:	2800      	cmp	r0, #0
 80145ea:	d049      	beq.n	8014680 <__cleanup_context+0xa4>
 80145ec:	6947      	ldr	r7, [r0, #20]
 80145ee:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80145f2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80145f6:	b137      	cbz	r7, 8014606 <__cleanup_context+0x2a>
 80145f8:	3014      	adds	r0, #20
 80145fa:	f7f8 fc1d 	bl	800ce38 <rcl_init_options_fini>
 80145fe:	4607      	mov	r7, r0
 8014600:	2800      	cmp	r0, #0
 8014602:	d144      	bne.n	801468e <__cleanup_context+0xb2>
 8014604:	6830      	ldr	r0, [r6, #0]
 8014606:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014608:	b143      	cbz	r3, 801461c <__cleanup_context+0x40>
 801460a:	3028      	adds	r0, #40	@ 0x28
 801460c:	f7fa f80a 	bl	800e624 <rmw_context_fini>
 8014610:	b118      	cbz	r0, 801461a <__cleanup_context+0x3e>
 8014612:	2f00      	cmp	r7, #0
 8014614:	d03e      	beq.n	8014694 <__cleanup_context+0xb8>
 8014616:	f7f9 fd13 	bl	800e040 <rcutils_reset_error>
 801461a:	6830      	ldr	r0, [r6, #0]
 801461c:	6a03      	ldr	r3, [r0, #32]
 801461e:	b1db      	cbz	r3, 8014658 <__cleanup_context+0x7c>
 8014620:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8014624:	2a01      	cmp	r2, #1
 8014626:	f17c 0100 	sbcs.w	r1, ip, #0
 801462a:	db11      	blt.n	8014650 <__cleanup_context+0x74>
 801462c:	2400      	movs	r4, #0
 801462e:	4625      	mov	r5, r4
 8014630:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014634:	4649      	mov	r1, r9
 8014636:	b1b8      	cbz	r0, 8014668 <__cleanup_context+0x8c>
 8014638:	47c0      	blx	r8
 801463a:	6833      	ldr	r3, [r6, #0]
 801463c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8014640:	3401      	adds	r4, #1
 8014642:	f145 0500 	adc.w	r5, r5, #0
 8014646:	4294      	cmp	r4, r2
 8014648:	eb75 010c 	sbcs.w	r1, r5, ip
 801464c:	6a1b      	ldr	r3, [r3, #32]
 801464e:	dbef      	blt.n	8014630 <__cleanup_context+0x54>
 8014650:	4618      	mov	r0, r3
 8014652:	4649      	mov	r1, r9
 8014654:	47c0      	blx	r8
 8014656:	6830      	ldr	r0, [r6, #0]
 8014658:	4649      	mov	r1, r9
 801465a:	47c0      	blx	r8
 801465c:	2300      	movs	r3, #0
 801465e:	e9c6 3300 	strd	r3, r3, [r6]
 8014662:	4638      	mov	r0, r7
 8014664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014668:	3401      	adds	r4, #1
 801466a:	f145 0500 	adc.w	r5, r5, #0
 801466e:	4294      	cmp	r4, r2
 8014670:	eb75 010c 	sbcs.w	r1, r5, ip
 8014674:	dbdc      	blt.n	8014630 <__cleanup_context+0x54>
 8014676:	4618      	mov	r0, r3
 8014678:	4649      	mov	r1, r9
 801467a:	47c0      	blx	r8
 801467c:	6830      	ldr	r0, [r6, #0]
 801467e:	e7eb      	b.n	8014658 <__cleanup_context+0x7c>
 8014680:	4607      	mov	r7, r0
 8014682:	2300      	movs	r3, #0
 8014684:	e9c6 3300 	strd	r3, r3, [r6]
 8014688:	4638      	mov	r0, r7
 801468a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801468e:	f7f9 fcd7 	bl	800e040 <rcutils_reset_error>
 8014692:	e7b7      	b.n	8014604 <__cleanup_context+0x28>
 8014694:	f7ff ff7e 	bl	8014594 <rcl_convert_rmw_ret_to_rcl_ret>
 8014698:	4607      	mov	r7, r0
 801469a:	e7bc      	b.n	8014616 <__cleanup_context+0x3a>

0801469c <rcl_init>:
 801469c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80146a0:	1e05      	subs	r5, r0, #0
 80146a2:	b09c      	sub	sp, #112	@ 0x70
 80146a4:	460e      	mov	r6, r1
 80146a6:	4690      	mov	r8, r2
 80146a8:	461f      	mov	r7, r3
 80146aa:	f340 8099 	ble.w	80147e0 <rcl_init+0x144>
 80146ae:	2900      	cmp	r1, #0
 80146b0:	f000 8099 	beq.w	80147e6 <rcl_init+0x14a>
 80146b4:	f1a1 0e04 	sub.w	lr, r1, #4
 80146b8:	f04f 0c00 	mov.w	ip, #0
 80146bc:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 80146c0:	f10c 0c01 	add.w	ip, ip, #1
 80146c4:	2c00      	cmp	r4, #0
 80146c6:	f000 808e 	beq.w	80147e6 <rcl_init+0x14a>
 80146ca:	4565      	cmp	r5, ip
 80146cc:	d1f6      	bne.n	80146bc <rcl_init+0x20>
 80146ce:	f1b8 0f00 	cmp.w	r8, #0
 80146d2:	f000 8088 	beq.w	80147e6 <rcl_init+0x14a>
 80146d6:	f8d8 4000 	ldr.w	r4, [r8]
 80146da:	2c00      	cmp	r4, #0
 80146dc:	f000 8083 	beq.w	80147e6 <rcl_init+0x14a>
 80146e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80146e2:	f10d 0c5c 	add.w	ip, sp, #92	@ 0x5c
 80146e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80146ea:	6823      	ldr	r3, [r4, #0]
 80146ec:	f8cc 3000 	str.w	r3, [ip]
 80146f0:	a817      	add	r0, sp, #92	@ 0x5c
 80146f2:	f7f9 fc7f 	bl	800dff4 <rcutils_allocator_is_valid>
 80146f6:	2800      	cmp	r0, #0
 80146f8:	d075      	beq.n	80147e6 <rcl_init+0x14a>
 80146fa:	2f00      	cmp	r7, #0
 80146fc:	d073      	beq.n	80147e6 <rcl_init+0x14a>
 80146fe:	683b      	ldr	r3, [r7, #0]
 8014700:	2b00      	cmp	r3, #0
 8014702:	d175      	bne.n	80147f0 <rcl_init+0x154>
 8014704:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 8014708:	2178      	movs	r1, #120	@ 0x78
 801470a:	2001      	movs	r0, #1
 801470c:	4798      	blx	r3
 801470e:	4604      	mov	r4, r0
 8014710:	6038      	str	r0, [r7, #0]
 8014712:	2800      	cmp	r0, #0
 8014714:	f000 80a0 	beq.w	8014858 <rcl_init+0x1bc>
 8014718:	a802      	add	r0, sp, #8
 801471a:	f002 fe2d 	bl	8017378 <rmw_get_zero_initialized_context>
 801471e:	a902      	add	r1, sp, #8
 8014720:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8014724:	2250      	movs	r2, #80	@ 0x50
 8014726:	ac17      	add	r4, sp, #92	@ 0x5c
 8014728:	f005 fff3 	bl	801a712 <memcpy>
 801472c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801472e:	f8d7 e000 	ldr.w	lr, [r7]
 8014732:	46f4      	mov	ip, lr
 8014734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014738:	6823      	ldr	r3, [r4, #0]
 801473a:	f8cc 3000 	str.w	r3, [ip]
 801473e:	f10e 0114 	add.w	r1, lr, #20
 8014742:	4640      	mov	r0, r8
 8014744:	f7f8 fba2 	bl	800ce8c <rcl_init_options_copy>
 8014748:	4604      	mov	r4, r0
 801474a:	2800      	cmp	r0, #0
 801474c:	d144      	bne.n	80147d8 <rcl_init+0x13c>
 801474e:	f8d7 9000 	ldr.w	r9, [r7]
 8014752:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8014756:	f8c9 0020 	str.w	r0, [r9, #32]
 801475a:	f8c9 5018 	str.w	r5, [r9, #24]
 801475e:	f8c9 801c 	str.w	r8, [r9, #28]
 8014762:	2d00      	cmp	r5, #0
 8014764:	d04b      	beq.n	80147fe <rcl_init+0x162>
 8014766:	2e00      	cmp	r6, #0
 8014768:	d049      	beq.n	80147fe <rcl_init+0x162>
 801476a:	e9dd 321a 	ldrd	r3, r2, [sp, #104]	@ 0x68
 801476e:	2104      	movs	r1, #4
 8014770:	4628      	mov	r0, r5
 8014772:	4798      	blx	r3
 8014774:	f8c9 0020 	str.w	r0, [r9, #32]
 8014778:	f8d7 9000 	ldr.w	r9, [r7]
 801477c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8014780:	46ca      	mov	sl, r9
 8014782:	b343      	cbz	r3, 80147d6 <rcl_init+0x13a>
 8014784:	2d01      	cmp	r5, #1
 8014786:	f178 0300 	sbcs.w	r3, r8, #0
 801478a:	db38      	blt.n	80147fe <rcl_init+0x162>
 801478c:	2400      	movs	r4, #0
 801478e:	3e04      	subs	r6, #4
 8014790:	46a1      	mov	r9, r4
 8014792:	e00b      	b.n	80147ac <rcl_init+0x110>
 8014794:	6831      	ldr	r1, [r6, #0]
 8014796:	f005 ffbc 	bl	801a712 <memcpy>
 801479a:	3401      	adds	r4, #1
 801479c:	f149 0900 	adc.w	r9, r9, #0
 80147a0:	45c8      	cmp	r8, r9
 80147a2:	bf08      	it	eq
 80147a4:	42a5      	cmpeq	r5, r4
 80147a6:	d028      	beq.n	80147fa <rcl_init+0x15e>
 80147a8:	f8d7 a000 	ldr.w	sl, [r7]
 80147ac:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80147b0:	f7eb fd40 	bl	8000234 <strlen>
 80147b4:	1c42      	adds	r2, r0, #1
 80147b6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80147b8:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80147ba:	f8da a020 	ldr.w	sl, [sl, #32]
 80147be:	9201      	str	r2, [sp, #4]
 80147c0:	4610      	mov	r0, r2
 80147c2:	4798      	blx	r3
 80147c4:	683b      	ldr	r3, [r7, #0]
 80147c6:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 80147ca:	6a1b      	ldr	r3, [r3, #32]
 80147cc:	9a01      	ldr	r2, [sp, #4]
 80147ce:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80147d2:	2800      	cmp	r0, #0
 80147d4:	d1de      	bne.n	8014794 <rcl_init+0xf8>
 80147d6:	240a      	movs	r4, #10
 80147d8:	4638      	mov	r0, r7
 80147da:	f7ff feff 	bl	80145dc <__cleanup_context>
 80147de:	e003      	b.n	80147e8 <rcl_init+0x14c>
 80147e0:	2900      	cmp	r1, #0
 80147e2:	f43f af74 	beq.w	80146ce <rcl_init+0x32>
 80147e6:	240b      	movs	r4, #11
 80147e8:	4620      	mov	r0, r4
 80147ea:	b01c      	add	sp, #112	@ 0x70
 80147ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147f0:	2464      	movs	r4, #100	@ 0x64
 80147f2:	4620      	mov	r0, r4
 80147f4:	b01c      	add	sp, #112	@ 0x70
 80147f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147fa:	f8d7 9000 	ldr.w	r9, [r7]
 80147fe:	491d      	ldr	r1, [pc, #116]	@ (8014874 <rcl_init+0x1d8>)
 8014800:	680b      	ldr	r3, [r1, #0]
 8014802:	3301      	adds	r3, #1
 8014804:	d023      	beq.n	801484e <rcl_init+0x1b2>
 8014806:	600b      	str	r3, [r1, #0]
 8014808:	461a      	mov	r2, r3
 801480a:	2400      	movs	r4, #0
 801480c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014810:	607b      	str	r3, [r7, #4]
 8014812:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014814:	6182      	str	r2, [r0, #24]
 8014816:	3301      	adds	r3, #1
 8014818:	61c4      	str	r4, [r0, #28]
 801481a:	d01f      	beq.n	801485c <rcl_init+0x1c0>
 801481c:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8014820:	b94b      	cbnz	r3, 8014836 <rcl_init+0x19a>
 8014822:	3030      	adds	r0, #48	@ 0x30
 8014824:	f000 f828 	bl	8014878 <rcl_get_localhost_only>
 8014828:	4604      	mov	r4, r0
 801482a:	2800      	cmp	r0, #0
 801482c:	d1d4      	bne.n	80147d8 <rcl_init+0x13c>
 801482e:	f8d7 9000 	ldr.w	r9, [r7]
 8014832:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014836:	f109 0128 	add.w	r1, r9, #40	@ 0x28
 801483a:	3018      	adds	r0, #24
 801483c:	f7f9 fdbc 	bl	800e3b8 <rmw_init>
 8014840:	4604      	mov	r4, r0
 8014842:	2800      	cmp	r0, #0
 8014844:	d0d0      	beq.n	80147e8 <rcl_init+0x14c>
 8014846:	f7ff fea5 	bl	8014594 <rcl_convert_rmw_ret_to_rcl_ret>
 801484a:	4604      	mov	r4, r0
 801484c:	e7c4      	b.n	80147d8 <rcl_init+0x13c>
 801484e:	2201      	movs	r2, #1
 8014850:	461c      	mov	r4, r3
 8014852:	600a      	str	r2, [r1, #0]
 8014854:	4613      	mov	r3, r2
 8014856:	e7d9      	b.n	801480c <rcl_init+0x170>
 8014858:	240a      	movs	r4, #10
 801485a:	e7c5      	b.n	80147e8 <rcl_init+0x14c>
 801485c:	3024      	adds	r0, #36	@ 0x24
 801485e:	f004 fd91 	bl	8019384 <rcl_get_default_domain_id>
 8014862:	4604      	mov	r4, r0
 8014864:	2800      	cmp	r0, #0
 8014866:	d1b7      	bne.n	80147d8 <rcl_init+0x13c>
 8014868:	f8d7 9000 	ldr.w	r9, [r7]
 801486c:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8014870:	e7d4      	b.n	801481c <rcl_init+0x180>
 8014872:	bf00      	nop
 8014874:	2000afe0 	.word	0x2000afe0

08014878 <rcl_get_localhost_only>:
 8014878:	b510      	push	{r4, lr}
 801487a:	b082      	sub	sp, #8
 801487c:	2300      	movs	r3, #0
 801487e:	9301      	str	r3, [sp, #4]
 8014880:	b1b8      	cbz	r0, 80148b2 <rcl_get_localhost_only+0x3a>
 8014882:	4604      	mov	r4, r0
 8014884:	a901      	add	r1, sp, #4
 8014886:	480c      	ldr	r0, [pc, #48]	@ (80148b8 <rcl_get_localhost_only+0x40>)
 8014888:	f002 fada 	bl	8016e40 <rcutils_get_env>
 801488c:	b110      	cbz	r0, 8014894 <rcl_get_localhost_only+0x1c>
 801488e:	2001      	movs	r0, #1
 8014890:	b002      	add	sp, #8
 8014892:	bd10      	pop	{r4, pc}
 8014894:	9b01      	ldr	r3, [sp, #4]
 8014896:	b113      	cbz	r3, 801489e <rcl_get_localhost_only+0x26>
 8014898:	781a      	ldrb	r2, [r3, #0]
 801489a:	2a31      	cmp	r2, #49	@ 0x31
 801489c:	d004      	beq.n	80148a8 <rcl_get_localhost_only+0x30>
 801489e:	2302      	movs	r3, #2
 80148a0:	2000      	movs	r0, #0
 80148a2:	7023      	strb	r3, [r4, #0]
 80148a4:	b002      	add	sp, #8
 80148a6:	bd10      	pop	{r4, pc}
 80148a8:	785b      	ldrb	r3, [r3, #1]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d1f7      	bne.n	801489e <rcl_get_localhost_only+0x26>
 80148ae:	2301      	movs	r3, #1
 80148b0:	e7f6      	b.n	80148a0 <rcl_get_localhost_only+0x28>
 80148b2:	200b      	movs	r0, #11
 80148b4:	b002      	add	sp, #8
 80148b6:	bd10      	pop	{r4, pc}
 80148b8:	0801b78c 	.word	0x0801b78c

080148bc <rcl_get_zero_initialized_node>:
 80148bc:	4a03      	ldr	r2, [pc, #12]	@ (80148cc <rcl_get_zero_initialized_node+0x10>)
 80148be:	4603      	mov	r3, r0
 80148c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80148c4:	e883 0003 	stmia.w	r3, {r0, r1}
 80148c8:	4618      	mov	r0, r3
 80148ca:	4770      	bx	lr
 80148cc:	0801beb4 	.word	0x0801beb4

080148d0 <rcl_node_init>:
 80148d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148d4:	b0a9      	sub	sp, #164	@ 0xa4
 80148d6:	4604      	mov	r4, r0
 80148d8:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80148dc:	a823      	add	r0, sp, #140	@ 0x8c
 80148de:	460e      	mov	r6, r1
 80148e0:	4615      	mov	r5, r2
 80148e2:	461f      	mov	r7, r3
 80148e4:	f004 ffc2 	bl	801986c <rcl_guard_condition_get_default_options>
 80148e8:	f1b8 0f00 	cmp.w	r8, #0
 80148ec:	f000 80e6 	beq.w	8014abc <rcl_node_init+0x1ec>
 80148f0:	4640      	mov	r0, r8
 80148f2:	f7f9 fb7f 	bl	800dff4 <rcutils_allocator_is_valid>
 80148f6:	2800      	cmp	r0, #0
 80148f8:	f000 80e0 	beq.w	8014abc <rcl_node_init+0x1ec>
 80148fc:	2e00      	cmp	r6, #0
 80148fe:	f000 80dd 	beq.w	8014abc <rcl_node_init+0x1ec>
 8014902:	2d00      	cmp	r5, #0
 8014904:	f000 80da 	beq.w	8014abc <rcl_node_init+0x1ec>
 8014908:	2c00      	cmp	r4, #0
 801490a:	f000 80d7 	beq.w	8014abc <rcl_node_init+0x1ec>
 801490e:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8014912:	f1b9 0f00 	cmp.w	r9, #0
 8014916:	f040 80fd 	bne.w	8014b14 <rcl_node_init+0x244>
 801491a:	2f00      	cmp	r7, #0
 801491c:	f000 80ce 	beq.w	8014abc <rcl_node_init+0x1ec>
 8014920:	4638      	mov	r0, r7
 8014922:	f7ff fe55 	bl	80145d0 <rcl_context_is_valid>
 8014926:	4682      	mov	sl, r0
 8014928:	2800      	cmp	r0, #0
 801492a:	f000 80cd 	beq.w	8014ac8 <rcl_node_init+0x1f8>
 801492e:	464a      	mov	r2, r9
 8014930:	a922      	add	r1, sp, #136	@ 0x88
 8014932:	4630      	mov	r0, r6
 8014934:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8014938:	f002 fe9c 	bl	8017674 <rmw_validate_node_name>
 801493c:	4681      	mov	r9, r0
 801493e:	2800      	cmp	r0, #0
 8014940:	f040 80be 	bne.w	8014ac0 <rcl_node_init+0x1f0>
 8014944:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014946:	2800      	cmp	r0, #0
 8014948:	f040 80f0 	bne.w	8014b2c <rcl_node_init+0x25c>
 801494c:	4628      	mov	r0, r5
 801494e:	f7eb fc71 	bl	8000234 <strlen>
 8014952:	2800      	cmp	r0, #0
 8014954:	f040 80bb 	bne.w	8014ace <rcl_node_init+0x1fe>
 8014958:	4d7c      	ldr	r5, [pc, #496]	@ (8014b4c <rcl_node_init+0x27c>)
 801495a:	a922      	add	r1, sp, #136	@ 0x88
 801495c:	2200      	movs	r2, #0
 801495e:	4628      	mov	r0, r5
 8014960:	f002 fe6a 	bl	8017638 <rmw_validate_namespace>
 8014964:	4681      	mov	r9, r0
 8014966:	2800      	cmp	r0, #0
 8014968:	f040 80aa 	bne.w	8014ac0 <rcl_node_init+0x1f0>
 801496c:	4682      	mov	sl, r0
 801496e:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8014970:	2800      	cmp	r0, #0
 8014972:	f040 80e0 	bne.w	8014b36 <rcl_node_init+0x266>
 8014976:	f8d8 3000 	ldr.w	r3, [r8]
 801497a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801497e:	2078      	movs	r0, #120	@ 0x78
 8014980:	4798      	blx	r3
 8014982:	4681      	mov	r9, r0
 8014984:	6060      	str	r0, [r4, #4]
 8014986:	2800      	cmp	r0, #0
 8014988:	f000 80ca 	beq.w	8014b20 <rcl_node_init+0x250>
 801498c:	2200      	movs	r2, #0
 801498e:	2300      	movs	r3, #0
 8014990:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8014994:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8014998:	a808      	add	r0, sp, #32
 801499a:	f000 f907 	bl	8014bac <rcl_node_get_default_options>
 801499e:	a908      	add	r1, sp, #32
 80149a0:	4648      	mov	r0, r9
 80149a2:	2268      	movs	r2, #104	@ 0x68
 80149a4:	f005 feb5 	bl	801a712 <memcpy>
 80149a8:	6861      	ldr	r1, [r4, #4]
 80149aa:	6027      	str	r7, [r4, #0]
 80149ac:	4640      	mov	r0, r8
 80149ae:	f000 f90b 	bl	8014bc8 <rcl_node_options_copy>
 80149b2:	2800      	cmp	r0, #0
 80149b4:	d158      	bne.n	8014a68 <rcl_node_init+0x198>
 80149b6:	4628      	mov	r0, r5
 80149b8:	f7eb fc3c 	bl	8000234 <strlen>
 80149bc:	4428      	add	r0, r5
 80149be:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80149c2:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80149c6:	2b2f      	cmp	r3, #47	@ 0x2f
 80149c8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80149cc:	9300      	str	r3, [sp, #0]
 80149ce:	bf0c      	ite	eq
 80149d0:	4b5f      	ldreq	r3, [pc, #380]	@ (8014b50 <rcl_node_init+0x280>)
 80149d2:	4b60      	ldrne	r3, [pc, #384]	@ (8014b54 <rcl_node_init+0x284>)
 80149d4:	9302      	str	r3, [sp, #8]
 80149d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80149da:	9301      	str	r3, [sp, #4]
 80149dc:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80149e0:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80149e4:	f002 fa44 	bl	8016e70 <rcutils_format_string_limit>
 80149e8:	6823      	ldr	r3, [r4, #0]
 80149ea:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80149ee:	6818      	ldr	r0, [r3, #0]
 80149f0:	4631      	mov	r1, r6
 80149f2:	3028      	adds	r0, #40	@ 0x28
 80149f4:	462a      	mov	r2, r5
 80149f6:	6866      	ldr	r6, [r4, #4]
 80149f8:	f7f9 fec0 	bl	800e77c <rmw_create_node>
 80149fc:	6863      	ldr	r3, [r4, #4]
 80149fe:	66b0      	str	r0, [r6, #104]	@ 0x68
 8014a00:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014a02:	2800      	cmp	r0, #0
 8014a04:	d032      	beq.n	8014a6c <rcl_node_init+0x19c>
 8014a06:	f7f9 ff4d 	bl	800e8a4 <rmw_node_get_graph_guard_condition>
 8014a0a:	4681      	mov	r9, r0
 8014a0c:	b360      	cbz	r0, 8014a68 <rcl_node_init+0x198>
 8014a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8014a12:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a16:	6866      	ldr	r6, [r4, #4]
 8014a18:	2008      	movs	r0, #8
 8014a1a:	4798      	blx	r3
 8014a1c:	6863      	ldr	r3, [r4, #4]
 8014a1e:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8014a20:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8014a24:	f1bb 0f00 	cmp.w	fp, #0
 8014a28:	d020      	beq.n	8014a6c <rcl_node_init+0x19c>
 8014a2a:	a806      	add	r0, sp, #24
 8014a2c:	f004 fe42 	bl	80196b4 <rcl_get_zero_initialized_guard_condition>
 8014a30:	a806      	add	r0, sp, #24
 8014a32:	c803      	ldmia	r0, {r0, r1}
 8014a34:	6863      	ldr	r3, [r4, #4]
 8014a36:	46c4      	mov	ip, r8
 8014a38:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8014a3c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8014a40:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014a44:	ae23      	add	r6, sp, #140	@ 0x8c
 8014a46:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8014a48:	f8dc 3000 	ldr.w	r3, [ip]
 8014a4c:	6033      	str	r3, [r6, #0]
 8014a4e:	ab28      	add	r3, sp, #160	@ 0xa0
 8014a50:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8014a54:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8014a58:	4649      	mov	r1, r9
 8014a5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8014a5c:	463a      	mov	r2, r7
 8014a5e:	4670      	mov	r0, lr
 8014a60:	f004 fe7e 	bl	8019760 <rcl_guard_condition_init_from_rmw>
 8014a64:	4681      	mov	r9, r0
 8014a66:	b328      	cbz	r0, 8014ab4 <rcl_node_init+0x1e4>
 8014a68:	6863      	ldr	r3, [r4, #4]
 8014a6a:	b1f3      	cbz	r3, 8014aaa <rcl_node_init+0x1da>
 8014a6c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014a6e:	b128      	cbz	r0, 8014a7c <rcl_node_init+0x1ac>
 8014a70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a74:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a78:	4798      	blx	r3
 8014a7a:	6863      	ldr	r3, [r4, #4]
 8014a7c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8014a7e:	b110      	cbz	r0, 8014a86 <rcl_node_init+0x1b6>
 8014a80:	f7f9 fe94 	bl	800e7ac <rmw_destroy_node>
 8014a84:	6863      	ldr	r3, [r4, #4]
 8014a86:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014a88:	b148      	cbz	r0, 8014a9e <rcl_node_init+0x1ce>
 8014a8a:	f004 fec9 	bl	8019820 <rcl_guard_condition_fini>
 8014a8e:	6863      	ldr	r3, [r4, #4]
 8014a90:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014a94:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8014a96:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014a9a:	4798      	blx	r3
 8014a9c:	6863      	ldr	r3, [r4, #4]
 8014a9e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014aa8:	4798      	blx	r3
 8014aaa:	2300      	movs	r3, #0
 8014aac:	e9c4 3300 	strd	r3, r3, [r4]
 8014ab0:	f04f 0901 	mov.w	r9, #1
 8014ab4:	f1ba 0f00 	cmp.w	sl, #0
 8014ab8:	d125      	bne.n	8014b06 <rcl_node_init+0x236>
 8014aba:	e001      	b.n	8014ac0 <rcl_node_init+0x1f0>
 8014abc:	f04f 090b 	mov.w	r9, #11
 8014ac0:	4648      	mov	r0, r9
 8014ac2:	b029      	add	sp, #164	@ 0xa4
 8014ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014ac8:	f04f 0965 	mov.w	r9, #101	@ 0x65
 8014acc:	e7f8      	b.n	8014ac0 <rcl_node_init+0x1f0>
 8014ace:	782b      	ldrb	r3, [r5, #0]
 8014ad0:	2b2f      	cmp	r3, #47	@ 0x2f
 8014ad2:	f43f af42 	beq.w	801495a <rcl_node_init+0x8a>
 8014ad6:	9503      	str	r5, [sp, #12]
 8014ad8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8014adc:	9300      	str	r3, [sp, #0]
 8014ade:	4b1e      	ldr	r3, [pc, #120]	@ (8014b58 <rcl_node_init+0x288>)
 8014ae0:	9302      	str	r3, [sp, #8]
 8014ae2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8014ae6:	9301      	str	r3, [sp, #4]
 8014ae8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8014aec:	f002 f9c0 	bl	8016e70 <rcutils_format_string_limit>
 8014af0:	4605      	mov	r5, r0
 8014af2:	b340      	cbz	r0, 8014b46 <rcl_node_init+0x276>
 8014af4:	2200      	movs	r2, #0
 8014af6:	a922      	add	r1, sp, #136	@ 0x88
 8014af8:	9222      	str	r2, [sp, #136]	@ 0x88
 8014afa:	f002 fd9d 	bl	8017638 <rmw_validate_namespace>
 8014afe:	4681      	mov	r9, r0
 8014b00:	2800      	cmp	r0, #0
 8014b02:	f43f af34 	beq.w	801496e <rcl_node_init+0x9e>
 8014b06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014b0a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b0e:	4628      	mov	r0, r5
 8014b10:	4798      	blx	r3
 8014b12:	e7d5      	b.n	8014ac0 <rcl_node_init+0x1f0>
 8014b14:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8014b18:	4648      	mov	r0, r9
 8014b1a:	b029      	add	sp, #164	@ 0xa4
 8014b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b20:	f04f 090a 	mov.w	r9, #10
 8014b24:	f1ba 0f00 	cmp.w	sl, #0
 8014b28:	d1ed      	bne.n	8014b06 <rcl_node_init+0x236>
 8014b2a:	e7c9      	b.n	8014ac0 <rcl_node_init+0x1f0>
 8014b2c:	f002 fdf4 	bl	8017718 <rmw_node_name_validation_result_string>
 8014b30:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8014b34:	e7c4      	b.n	8014ac0 <rcl_node_init+0x1f0>
 8014b36:	f002 fd91 	bl	801765c <rmw_namespace_validation_result_string>
 8014b3a:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 8014b3e:	f1ba 0f00 	cmp.w	sl, #0
 8014b42:	d1e0      	bne.n	8014b06 <rcl_node_init+0x236>
 8014b44:	e7bc      	b.n	8014ac0 <rcl_node_init+0x1f0>
 8014b46:	f04f 090a 	mov.w	r9, #10
 8014b4a:	e7b9      	b.n	8014ac0 <rcl_node_init+0x1f0>
 8014b4c:	0801b7a4 	.word	0x0801b7a4
 8014b50:	0801b630 	.word	0x0801b630
 8014b54:	0801b5e8 	.word	0x0801b5e8
 8014b58:	0801b7a8 	.word	0x0801b7a8

08014b5c <rcl_node_is_valid>:
 8014b5c:	b130      	cbz	r0, 8014b6c <rcl_node_is_valid+0x10>
 8014b5e:	6843      	ldr	r3, [r0, #4]
 8014b60:	b123      	cbz	r3, 8014b6c <rcl_node_is_valid+0x10>
 8014b62:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8014b64:	b113      	cbz	r3, 8014b6c <rcl_node_is_valid+0x10>
 8014b66:	6800      	ldr	r0, [r0, #0]
 8014b68:	f7ff bd32 	b.w	80145d0 <rcl_context_is_valid>
 8014b6c:	2000      	movs	r0, #0
 8014b6e:	4770      	bx	lr

08014b70 <rcl_node_get_name>:
 8014b70:	b120      	cbz	r0, 8014b7c <rcl_node_get_name+0xc>
 8014b72:	6840      	ldr	r0, [r0, #4]
 8014b74:	b110      	cbz	r0, 8014b7c <rcl_node_get_name+0xc>
 8014b76:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014b78:	b100      	cbz	r0, 8014b7c <rcl_node_get_name+0xc>
 8014b7a:	6880      	ldr	r0, [r0, #8]
 8014b7c:	4770      	bx	lr
 8014b7e:	bf00      	nop

08014b80 <rcl_node_get_namespace>:
 8014b80:	b120      	cbz	r0, 8014b8c <rcl_node_get_namespace+0xc>
 8014b82:	6840      	ldr	r0, [r0, #4]
 8014b84:	b110      	cbz	r0, 8014b8c <rcl_node_get_namespace+0xc>
 8014b86:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014b88:	b100      	cbz	r0, 8014b8c <rcl_node_get_namespace+0xc>
 8014b8a:	68c0      	ldr	r0, [r0, #12]
 8014b8c:	4770      	bx	lr
 8014b8e:	bf00      	nop

08014b90 <rcl_node_get_options>:
 8014b90:	b128      	cbz	r0, 8014b9e <rcl_node_get_options+0xe>
 8014b92:	6840      	ldr	r0, [r0, #4]
 8014b94:	b118      	cbz	r0, 8014b9e <rcl_node_get_options+0xe>
 8014b96:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	bf08      	it	eq
 8014b9c:	2000      	moveq	r0, #0
 8014b9e:	4770      	bx	lr

08014ba0 <rcl_node_get_rmw_handle>:
 8014ba0:	b110      	cbz	r0, 8014ba8 <rcl_node_get_rmw_handle+0x8>
 8014ba2:	6840      	ldr	r0, [r0, #4]
 8014ba4:	b100      	cbz	r0, 8014ba8 <rcl_node_get_rmw_handle+0x8>
 8014ba6:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8014ba8:	4770      	bx	lr
 8014baa:	bf00      	nop

08014bac <rcl_node_get_default_options>:
 8014bac:	b510      	push	{r4, lr}
 8014bae:	2268      	movs	r2, #104	@ 0x68
 8014bb0:	4604      	mov	r4, r0
 8014bb2:	2100      	movs	r1, #0
 8014bb4:	f005 fce4 	bl	801a580 <memset>
 8014bb8:	4620      	mov	r0, r4
 8014bba:	f7f9 fa0d 	bl	800dfd8 <rcutils_get_default_allocator>
 8014bbe:	2301      	movs	r3, #1
 8014bc0:	7523      	strb	r3, [r4, #20]
 8014bc2:	4620      	mov	r0, r4
 8014bc4:	bd10      	pop	{r4, pc}
 8014bc6:	bf00      	nop

08014bc8 <rcl_node_options_copy>:
 8014bc8:	b1d0      	cbz	r0, 8014c00 <rcl_node_options_copy+0x38>
 8014bca:	b570      	push	{r4, r5, r6, lr}
 8014bcc:	460c      	mov	r4, r1
 8014bce:	b1a9      	cbz	r1, 8014bfc <rcl_node_options_copy+0x34>
 8014bd0:	4288      	cmp	r0, r1
 8014bd2:	4684      	mov	ip, r0
 8014bd4:	d012      	beq.n	8014bfc <rcl_node_options_copy+0x34>
 8014bd6:	4605      	mov	r5, r0
 8014bd8:	8a86      	ldrh	r6, [r0, #20]
 8014bda:	468e      	mov	lr, r1
 8014bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014bde:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014be2:	682b      	ldr	r3, [r5, #0]
 8014be4:	f8ce 3000 	str.w	r3, [lr]
 8014be8:	f10c 0118 	add.w	r1, ip, #24
 8014bec:	2250      	movs	r2, #80	@ 0x50
 8014bee:	82a6      	strh	r6, [r4, #20]
 8014bf0:	f104 0018 	add.w	r0, r4, #24
 8014bf4:	f005 fd8d 	bl	801a712 <memcpy>
 8014bf8:	2000      	movs	r0, #0
 8014bfa:	bd70      	pop	{r4, r5, r6, pc}
 8014bfc:	200b      	movs	r0, #11
 8014bfe:	bd70      	pop	{r4, r5, r6, pc}
 8014c00:	200b      	movs	r0, #11
 8014c02:	4770      	bx	lr

08014c04 <rcl_node_resolve_name>:
 8014c04:	b082      	sub	sp, #8
 8014c06:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c0a:	b091      	sub	sp, #68	@ 0x44
 8014c0c:	ac1a      	add	r4, sp, #104	@ 0x68
 8014c0e:	e884 000c 	stmia.w	r4, {r2, r3}
 8014c12:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8014c16:	2800      	cmp	r0, #0
 8014c18:	d03b      	beq.n	8014c92 <rcl_node_resolve_name+0x8e>
 8014c1a:	460c      	mov	r4, r1
 8014c1c:	4605      	mov	r5, r0
 8014c1e:	f7ff ffb7 	bl	8014b90 <rcl_node_get_options>
 8014c22:	2800      	cmp	r0, #0
 8014c24:	d037      	beq.n	8014c96 <rcl_node_resolve_name+0x92>
 8014c26:	4628      	mov	r0, r5
 8014c28:	f7ff ffa2 	bl	8014b70 <rcl_node_get_name>
 8014c2c:	4606      	mov	r6, r0
 8014c2e:	4628      	mov	r0, r5
 8014c30:	f7ff ffa6 	bl	8014b80 <rcl_node_get_namespace>
 8014c34:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8014c38:	4681      	mov	r9, r0
 8014c3a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014c3e:	ad0b      	add	r5, sp, #44	@ 0x2c
 8014c40:	46ac      	mov	ip, r5
 8014c42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014c46:	f8de 3000 	ldr.w	r3, [lr]
 8014c4a:	f8cc 3000 	str.w	r3, [ip]
 8014c4e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014c50:	b1fb      	cbz	r3, 8014c92 <rcl_node_resolve_name+0x8e>
 8014c52:	468a      	mov	sl, r1
 8014c54:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8014c58:	f002 fa62 	bl	8017120 <rcutils_get_zero_initialized_string_map>
 8014c5c:	ab10      	add	r3, sp, #64	@ 0x40
 8014c5e:	9008      	str	r0, [sp, #32]
 8014c60:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8014c64:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8014c68:	2100      	movs	r1, #0
 8014c6a:	e895 000c 	ldmia.w	r5, {r2, r3}
 8014c6e:	a808      	add	r0, sp, #32
 8014c70:	f002 face 	bl	8017210 <rcutils_string_map_init>
 8014c74:	4607      	mov	r7, r0
 8014c76:	b180      	cbz	r0, 8014c9a <rcl_node_resolve_name+0x96>
 8014c78:	f7f9 f9ca 	bl	800e010 <rcutils_get_error_string>
 8014c7c:	f7f9 f9e0 	bl	800e040 <rcutils_reset_error>
 8014c80:	2f0a      	cmp	r7, #10
 8014c82:	bf18      	it	ne
 8014c84:	2701      	movne	r7, #1
 8014c86:	4638      	mov	r0, r7
 8014c88:	b011      	add	sp, #68	@ 0x44
 8014c8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c8e:	b002      	add	sp, #8
 8014c90:	4770      	bx	lr
 8014c92:	270b      	movs	r7, #11
 8014c94:	e7f7      	b.n	8014c86 <rcl_node_resolve_name+0x82>
 8014c96:	2701      	movs	r7, #1
 8014c98:	e7f5      	b.n	8014c86 <rcl_node_resolve_name+0x82>
 8014c9a:	9009      	str	r0, [sp, #36]	@ 0x24
 8014c9c:	9007      	str	r0, [sp, #28]
 8014c9e:	a808      	add	r0, sp, #32
 8014ca0:	f004 fd02 	bl	80196a8 <rcl_get_default_topic_name_substitutions>
 8014ca4:	4607      	mov	r7, r0
 8014ca6:	b1a8      	cbz	r0, 8014cd4 <rcl_node_resolve_name+0xd0>
 8014ca8:	280a      	cmp	r0, #10
 8014caa:	9c07      	ldr	r4, [sp, #28]
 8014cac:	d000      	beq.n	8014cb0 <rcl_node_resolve_name+0xac>
 8014cae:	2701      	movs	r7, #1
 8014cb0:	a808      	add	r0, sp, #32
 8014cb2:	f002 faed 	bl	8017290 <rcutils_string_map_fini>
 8014cb6:	2800      	cmp	r0, #0
 8014cb8:	d13d      	bne.n	8014d36 <rcl_node_resolve_name+0x132>
 8014cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014cbc:	4659      	mov	r1, fp
 8014cbe:	47d0      	blx	sl
 8014cc0:	4659      	mov	r1, fp
 8014cc2:	4620      	mov	r0, r4
 8014cc4:	47d0      	blx	sl
 8014cc6:	f1b8 0f00 	cmp.w	r8, #0
 8014cca:	d0dc      	beq.n	8014c86 <rcl_node_resolve_name+0x82>
 8014ccc:	2f67      	cmp	r7, #103	@ 0x67
 8014cce:	bf08      	it	eq
 8014cd0:	2768      	moveq	r7, #104	@ 0x68
 8014cd2:	e7d8      	b.n	8014c86 <rcl_node_resolve_name+0x82>
 8014cd4:	ab09      	add	r3, sp, #36	@ 0x24
 8014cd6:	9305      	str	r3, [sp, #20]
 8014cd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8014cda:	46ec      	mov	ip, sp
 8014cdc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014ce0:	682b      	ldr	r3, [r5, #0]
 8014ce2:	f8cc 3000 	str.w	r3, [ip]
 8014ce6:	464a      	mov	r2, r9
 8014ce8:	4631      	mov	r1, r6
 8014cea:	4620      	mov	r0, r4
 8014cec:	ab08      	add	r3, sp, #32
 8014cee:	f004 fb7d 	bl	80193ec <rcl_expand_topic_name>
 8014cf2:	4607      	mov	r7, r0
 8014cf4:	b9b8      	cbnz	r0, 8014d26 <rcl_node_resolve_name+0x122>
 8014cf6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8014cf8:	9009      	str	r0, [sp, #36]	@ 0x24
 8014cfa:	4602      	mov	r2, r0
 8014cfc:	a90a      	add	r1, sp, #40	@ 0x28
 8014cfe:	4620      	mov	r0, r4
 8014d00:	f002 fbd6 	bl	80174b0 <rmw_validate_full_topic_name>
 8014d04:	b988      	cbnz	r0, 8014d2a <rcl_node_resolve_name+0x126>
 8014d06:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8014d08:	b9d5      	cbnz	r5, 8014d40 <rcl_node_resolve_name+0x13c>
 8014d0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8014d0c:	a808      	add	r0, sp, #32
 8014d0e:	601c      	str	r4, [r3, #0]
 8014d10:	f002 fabe 	bl	8017290 <rcutils_string_map_fini>
 8014d14:	4607      	mov	r7, r0
 8014d16:	b1a8      	cbz	r0, 8014d44 <rcl_node_resolve_name+0x140>
 8014d18:	f7f9 f97a 	bl	800e010 <rcutils_get_error_string>
 8014d1c:	462c      	mov	r4, r5
 8014d1e:	f7f9 f98f 	bl	800e040 <rcutils_reset_error>
 8014d22:	2701      	movs	r7, #1
 8014d24:	e7c9      	b.n	8014cba <rcl_node_resolve_name+0xb6>
 8014d26:	9c07      	ldr	r4, [sp, #28]
 8014d28:	e7c2      	b.n	8014cb0 <rcl_node_resolve_name+0xac>
 8014d2a:	f7f9 f971 	bl	800e010 <rcutils_get_error_string>
 8014d2e:	2701      	movs	r7, #1
 8014d30:	f7f9 f986 	bl	800e040 <rcutils_reset_error>
 8014d34:	e7bc      	b.n	8014cb0 <rcl_node_resolve_name+0xac>
 8014d36:	f7f9 f96b 	bl	800e010 <rcutils_get_error_string>
 8014d3a:	f7f9 f981 	bl	800e040 <rcutils_reset_error>
 8014d3e:	e7bc      	b.n	8014cba <rcl_node_resolve_name+0xb6>
 8014d40:	2767      	movs	r7, #103	@ 0x67
 8014d42:	e7b5      	b.n	8014cb0 <rcl_node_resolve_name+0xac>
 8014d44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d46:	4659      	mov	r1, fp
 8014d48:	47d0      	blx	sl
 8014d4a:	4659      	mov	r1, fp
 8014d4c:	4638      	mov	r0, r7
 8014d4e:	47d0      	blx	sl
 8014d50:	e799      	b.n	8014c86 <rcl_node_resolve_name+0x82>
 8014d52:	bf00      	nop

08014d54 <rcl_service_get_rmw_handle>:
 8014d54:	b118      	cbz	r0, 8014d5e <rcl_service_get_rmw_handle+0xa>
 8014d56:	6800      	ldr	r0, [r0, #0]
 8014d58:	b108      	cbz	r0, 8014d5e <rcl_service_get_rmw_handle+0xa>
 8014d5a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014d5e:	4770      	bx	lr

08014d60 <rcl_take_request>:
 8014d60:	b570      	push	{r4, r5, r6, lr}
 8014d62:	468e      	mov	lr, r1
 8014d64:	460c      	mov	r4, r1
 8014d66:	4616      	mov	r6, r2
 8014d68:	4605      	mov	r5, r0
 8014d6a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014d6e:	b08c      	sub	sp, #48	@ 0x30
 8014d70:	f10d 0c18 	add.w	ip, sp, #24
 8014d74:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014d78:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014d7c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014d80:	b30d      	cbz	r5, 8014dc6 <rcl_take_request+0x66>
 8014d82:	682b      	ldr	r3, [r5, #0]
 8014d84:	b1fb      	cbz	r3, 8014dc6 <rcl_take_request+0x66>
 8014d86:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8014d8a:	b1e0      	cbz	r0, 8014dc6 <rcl_take_request+0x66>
 8014d8c:	b336      	cbz	r6, 8014ddc <rcl_take_request+0x7c>
 8014d8e:	2300      	movs	r3, #0
 8014d90:	f88d 3007 	strb.w	r3, [sp, #7]
 8014d94:	4632      	mov	r2, r6
 8014d96:	f10d 0307 	add.w	r3, sp, #7
 8014d9a:	a902      	add	r1, sp, #8
 8014d9c:	f002 fede 	bl	8017b5c <rmw_take_request>
 8014da0:	4605      	mov	r5, r0
 8014da2:	b198      	cbz	r0, 8014dcc <rcl_take_request+0x6c>
 8014da4:	280a      	cmp	r0, #10
 8014da6:	bf18      	it	ne
 8014da8:	2501      	movne	r5, #1
 8014daa:	f10d 0e18 	add.w	lr, sp, #24
 8014dae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014db2:	46a4      	mov	ip, r4
 8014db4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014db8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8014dbc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014dc0:	4628      	mov	r0, r5
 8014dc2:	b00c      	add	sp, #48	@ 0x30
 8014dc4:	bd70      	pop	{r4, r5, r6, pc}
 8014dc6:	f44f 7516 	mov.w	r5, #600	@ 0x258
 8014dca:	e7ee      	b.n	8014daa <rcl_take_request+0x4a>
 8014dcc:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8014dd0:	f240 2359 	movw	r3, #601	@ 0x259
 8014dd4:	2a00      	cmp	r2, #0
 8014dd6:	bf08      	it	eq
 8014dd8:	461d      	moveq	r5, r3
 8014dda:	e7e6      	b.n	8014daa <rcl_take_request+0x4a>
 8014ddc:	250b      	movs	r5, #11
 8014dde:	e7e4      	b.n	8014daa <rcl_take_request+0x4a>

08014de0 <rcl_send_response>:
 8014de0:	b170      	cbz	r0, 8014e00 <rcl_send_response+0x20>
 8014de2:	6800      	ldr	r0, [r0, #0]
 8014de4:	b160      	cbz	r0, 8014e00 <rcl_send_response+0x20>
 8014de6:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014dea:	b148      	cbz	r0, 8014e00 <rcl_send_response+0x20>
 8014dec:	b159      	cbz	r1, 8014e06 <rcl_send_response+0x26>
 8014dee:	b510      	push	{r4, lr}
 8014df0:	b15a      	cbz	r2, 8014e0a <rcl_send_response+0x2a>
 8014df2:	f002 ff11 	bl	8017c18 <rmw_send_response>
 8014df6:	b110      	cbz	r0, 8014dfe <rcl_send_response+0x1e>
 8014df8:	2802      	cmp	r0, #2
 8014dfa:	bf18      	it	ne
 8014dfc:	2001      	movne	r0, #1
 8014dfe:	bd10      	pop	{r4, pc}
 8014e00:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8014e04:	4770      	bx	lr
 8014e06:	200b      	movs	r0, #11
 8014e08:	4770      	bx	lr
 8014e0a:	200b      	movs	r0, #11
 8014e0c:	bd10      	pop	{r4, pc}
 8014e0e:	bf00      	nop

08014e10 <rcl_service_is_valid>:
 8014e10:	b130      	cbz	r0, 8014e20 <rcl_service_is_valid+0x10>
 8014e12:	6800      	ldr	r0, [r0, #0]
 8014e14:	b120      	cbz	r0, 8014e20 <rcl_service_is_valid+0x10>
 8014e16:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8014e1a:	3800      	subs	r0, #0
 8014e1c:	bf18      	it	ne
 8014e1e:	2001      	movne	r0, #1
 8014e20:	4770      	bx	lr
 8014e22:	bf00      	nop

08014e24 <rcl_take>:
 8014e24:	2800      	cmp	r0, #0
 8014e26:	d04a      	beq.n	8014ebe <rcl_take+0x9a>
 8014e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e2c:	4604      	mov	r4, r0
 8014e2e:	6800      	ldr	r0, [r0, #0]
 8014e30:	b0a4      	sub	sp, #144	@ 0x90
 8014e32:	2800      	cmp	r0, #0
 8014e34:	d03b      	beq.n	8014eae <rcl_take+0x8a>
 8014e36:	461f      	mov	r7, r3
 8014e38:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d036      	beq.n	8014eae <rcl_take+0x8a>
 8014e40:	460e      	mov	r6, r1
 8014e42:	2900      	cmp	r1, #0
 8014e44:	d039      	beq.n	8014eba <rcl_take+0x96>
 8014e46:	4615      	mov	r5, r2
 8014e48:	2a00      	cmp	r2, #0
 8014e4a:	d03c      	beq.n	8014ec6 <rcl_take+0xa2>
 8014e4c:	a802      	add	r0, sp, #8
 8014e4e:	f002 fb27 	bl	80174a0 <rmw_get_zero_initialized_message_info>
 8014e52:	f10d 0c08 	add.w	ip, sp, #8
 8014e56:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e5a:	46ae      	mov	lr, r5
 8014e5c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e60:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e64:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e68:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014e6c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014e70:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8014e74:	f04f 0800 	mov.w	r8, #0
 8014e78:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8014e7c:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8014e80:	6822      	ldr	r2, [r4, #0]
 8014e82:	462b      	mov	r3, r5
 8014e84:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8014e88:	9700      	str	r7, [sp, #0]
 8014e8a:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8014e8e:	4631      	mov	r1, r6
 8014e90:	f002 ff68 	bl	8017d64 <rmw_take_with_info>
 8014e94:	4603      	mov	r3, r0
 8014e96:	b9c0      	cbnz	r0, 8014eca <rcl_take+0xa6>
 8014e98:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8014e9c:	f240 1291 	movw	r2, #401	@ 0x191
 8014ea0:	2900      	cmp	r1, #0
 8014ea2:	bf08      	it	eq
 8014ea4:	4613      	moveq	r3, r2
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	b024      	add	sp, #144	@ 0x90
 8014eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eae:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	b024      	add	sp, #144	@ 0x90
 8014eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014eba:	230b      	movs	r3, #11
 8014ebc:	e7f3      	b.n	8014ea6 <rcl_take+0x82>
 8014ebe:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8014ec2:	4618      	mov	r0, r3
 8014ec4:	4770      	bx	lr
 8014ec6:	ad14      	add	r5, sp, #80	@ 0x50
 8014ec8:	e7c0      	b.n	8014e4c <rcl_take+0x28>
 8014eca:	f7ff fb63 	bl	8014594 <rcl_convert_rmw_ret_to_rcl_ret>
 8014ece:	4603      	mov	r3, r0
 8014ed0:	e7e9      	b.n	8014ea6 <rcl_take+0x82>
 8014ed2:	bf00      	nop

08014ed4 <rcl_subscription_get_rmw_handle>:
 8014ed4:	b118      	cbz	r0, 8014ede <rcl_subscription_get_rmw_handle+0xa>
 8014ed6:	6800      	ldr	r0, [r0, #0]
 8014ed8:	b108      	cbz	r0, 8014ede <rcl_subscription_get_rmw_handle+0xa>
 8014eda:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014ede:	4770      	bx	lr

08014ee0 <rcl_subscription_is_valid>:
 8014ee0:	b130      	cbz	r0, 8014ef0 <rcl_subscription_is_valid+0x10>
 8014ee2:	6800      	ldr	r0, [r0, #0]
 8014ee4:	b120      	cbz	r0, 8014ef0 <rcl_subscription_is_valid+0x10>
 8014ee6:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8014eea:	3800      	subs	r0, #0
 8014eec:	bf18      	it	ne
 8014eee:	2001      	movne	r0, #1
 8014ef0:	4770      	bx	lr
 8014ef2:	bf00      	nop

08014ef4 <rcl_get_system_time>:
 8014ef4:	4608      	mov	r0, r1
 8014ef6:	f7f9 b8bf 	b.w	800e078 <rcutils_system_time_now>
 8014efa:	bf00      	nop

08014efc <rcl_get_steady_time>:
 8014efc:	4608      	mov	r0, r1
 8014efe:	f7f9 b8e3 	b.w	800e0c8 <rcutils_steady_time_now>
 8014f02:	bf00      	nop

08014f04 <rcl_get_ros_time>:
 8014f04:	7a03      	ldrb	r3, [r0, #8]
 8014f06:	b510      	push	{r4, lr}
 8014f08:	460c      	mov	r4, r1
 8014f0a:	b133      	cbz	r3, 8014f1a <rcl_get_ros_time+0x16>
 8014f0c:	2105      	movs	r1, #5
 8014f0e:	f001 fef3 	bl	8016cf8 <__atomic_load_8>
 8014f12:	e9c4 0100 	strd	r0, r1, [r4]
 8014f16:	2000      	movs	r0, #0
 8014f18:	bd10      	pop	{r4, pc}
 8014f1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014f1e:	4608      	mov	r0, r1
 8014f20:	f7f9 b8aa 	b.w	800e078 <rcutils_system_time_now>

08014f24 <rcl_clock_init>:
 8014f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f26:	4605      	mov	r5, r0
 8014f28:	4610      	mov	r0, r2
 8014f2a:	4614      	mov	r4, r2
 8014f2c:	460e      	mov	r6, r1
 8014f2e:	f7f9 f861 	bl	800dff4 <rcutils_allocator_is_valid>
 8014f32:	b128      	cbz	r0, 8014f40 <rcl_clock_init+0x1c>
 8014f34:	2d03      	cmp	r5, #3
 8014f36:	d803      	bhi.n	8014f40 <rcl_clock_init+0x1c>
 8014f38:	e8df f005 	tbb	[pc, r5]
 8014f3c:	06532e1d 	.word	0x06532e1d
 8014f40:	f04f 0c0b 	mov.w	ip, #11
 8014f44:	4660      	mov	r0, ip
 8014f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f48:	2e00      	cmp	r6, #0
 8014f4a:	d0f9      	beq.n	8014f40 <rcl_clock_init+0x1c>
 8014f4c:	2c00      	cmp	r4, #0
 8014f4e:	d0f7      	beq.n	8014f40 <rcl_clock_init+0x1c>
 8014f50:	2300      	movs	r3, #0
 8014f52:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014f56:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 801500c <rcl_clock_init+0xe8>
 8014f5a:	6133      	str	r3, [r6, #16]
 8014f5c:	f106 0514 	add.w	r5, r6, #20
 8014f60:	469c      	mov	ip, r3
 8014f62:	2703      	movs	r7, #3
 8014f64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f68:	6823      	ldr	r3, [r4, #0]
 8014f6a:	602b      	str	r3, [r5, #0]
 8014f6c:	7037      	strb	r7, [r6, #0]
 8014f6e:	f8c6 e00c 	str.w	lr, [r6, #12]
 8014f72:	4660      	mov	r0, ip
 8014f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f76:	2e00      	cmp	r6, #0
 8014f78:	d0e2      	beq.n	8014f40 <rcl_clock_init+0x1c>
 8014f7a:	2300      	movs	r3, #0
 8014f7c:	7033      	strb	r3, [r6, #0]
 8014f7e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014f82:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8014f86:	469c      	mov	ip, r3
 8014f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014f8a:	f106 0514 	add.w	r5, r6, #20
 8014f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014f90:	6823      	ldr	r3, [r4, #0]
 8014f92:	602b      	str	r3, [r5, #0]
 8014f94:	4660      	mov	r0, ip
 8014f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f98:	2e00      	cmp	r6, #0
 8014f9a:	d0d1      	beq.n	8014f40 <rcl_clock_init+0x1c>
 8014f9c:	2c00      	cmp	r4, #0
 8014f9e:	d0cf      	beq.n	8014f40 <rcl_clock_init+0x1c>
 8014fa0:	2700      	movs	r7, #0
 8014fa2:	7037      	strb	r7, [r6, #0]
 8014fa4:	46a4      	mov	ip, r4
 8014fa6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8014faa:	f106 0514 	add.w	r5, r6, #20
 8014fae:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8014fb2:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8014fb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014fb8:	f8dc 3000 	ldr.w	r3, [ip]
 8014fbc:	602b      	str	r3, [r5, #0]
 8014fbe:	6921      	ldr	r1, [r4, #16]
 8014fc0:	6823      	ldr	r3, [r4, #0]
 8014fc2:	2010      	movs	r0, #16
 8014fc4:	4798      	blx	r3
 8014fc6:	6130      	str	r0, [r6, #16]
 8014fc8:	b1d0      	cbz	r0, 8015000 <rcl_clock_init+0xdc>
 8014fca:	2200      	movs	r2, #0
 8014fcc:	2300      	movs	r3, #0
 8014fce:	e9c0 2300 	strd	r2, r3, [r0]
 8014fd2:	2301      	movs	r3, #1
 8014fd4:	7207      	strb	r7, [r0, #8]
 8014fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8015008 <rcl_clock_init+0xe4>)
 8014fd8:	7033      	strb	r3, [r6, #0]
 8014fda:	46bc      	mov	ip, r7
 8014fdc:	60f2      	str	r2, [r6, #12]
 8014fde:	4660      	mov	r0, ip
 8014fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fe2:	2e00      	cmp	r6, #0
 8014fe4:	d0ac      	beq.n	8014f40 <rcl_clock_init+0x1c>
 8014fe6:	2c00      	cmp	r4, #0
 8014fe8:	d0aa      	beq.n	8014f40 <rcl_clock_init+0x1c>
 8014fea:	2300      	movs	r3, #0
 8014fec:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8014ff0:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8015010 <rcl_clock_init+0xec>
 8014ff4:	6133      	str	r3, [r6, #16]
 8014ff6:	f106 0514 	add.w	r5, r6, #20
 8014ffa:	469c      	mov	ip, r3
 8014ffc:	2702      	movs	r7, #2
 8014ffe:	e7b1      	b.n	8014f64 <rcl_clock_init+0x40>
 8015000:	f04f 0c0a 	mov.w	ip, #10
 8015004:	e79e      	b.n	8014f44 <rcl_clock_init+0x20>
 8015006:	bf00      	nop
 8015008:	08014f05 	.word	0x08014f05
 801500c:	08014efd 	.word	0x08014efd
 8015010:	08014ef5 	.word	0x08014ef5

08015014 <rcl_clock_get_now>:
 8015014:	b140      	cbz	r0, 8015028 <rcl_clock_get_now+0x14>
 8015016:	b139      	cbz	r1, 8015028 <rcl_clock_get_now+0x14>
 8015018:	7803      	ldrb	r3, [r0, #0]
 801501a:	b11b      	cbz	r3, 8015024 <rcl_clock_get_now+0x10>
 801501c:	68c3      	ldr	r3, [r0, #12]
 801501e:	b10b      	cbz	r3, 8015024 <rcl_clock_get_now+0x10>
 8015020:	6900      	ldr	r0, [r0, #16]
 8015022:	4718      	bx	r3
 8015024:	2001      	movs	r0, #1
 8015026:	4770      	bx	lr
 8015028:	200b      	movs	r0, #11
 801502a:	4770      	bx	lr

0801502c <rcl_clock_add_jump_callback>:
 801502c:	b082      	sub	sp, #8
 801502e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015032:	a906      	add	r1, sp, #24
 8015034:	e881 000c 	stmia.w	r1, {r2, r3}
 8015038:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 801503c:	b320      	cbz	r0, 8015088 <rcl_clock_add_jump_callback+0x5c>
 801503e:	4604      	mov	r4, r0
 8015040:	3014      	adds	r0, #20
 8015042:	f7f8 ffd7 	bl	800dff4 <rcutils_allocator_is_valid>
 8015046:	b1f8      	cbz	r0, 8015088 <rcl_clock_add_jump_callback+0x5c>
 8015048:	b1f6      	cbz	r6, 8015088 <rcl_clock_add_jump_callback+0x5c>
 801504a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801504c:	2b00      	cmp	r3, #0
 801504e:	db1b      	blt.n	8015088 <rcl_clock_add_jump_callback+0x5c>
 8015050:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015054:	2a01      	cmp	r2, #1
 8015056:	f173 0300 	sbcs.w	r3, r3, #0
 801505a:	da15      	bge.n	8015088 <rcl_clock_add_jump_callback+0x5c>
 801505c:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8015060:	2f00      	cmp	r7, #0
 8015062:	d042      	beq.n	80150ea <rcl_clock_add_jump_callback+0xbe>
 8015064:	2300      	movs	r3, #0
 8015066:	4602      	mov	r2, r0
 8015068:	e003      	b.n	8015072 <rcl_clock_add_jump_callback+0x46>
 801506a:	42bb      	cmp	r3, r7
 801506c:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8015070:	d011      	beq.n	8015096 <rcl_clock_add_jump_callback+0x6a>
 8015072:	6811      	ldr	r1, [r2, #0]
 8015074:	42b1      	cmp	r1, r6
 8015076:	f103 0301 	add.w	r3, r3, #1
 801507a:	d1f6      	bne.n	801506a <rcl_clock_add_jump_callback+0x3e>
 801507c:	6a11      	ldr	r1, [r2, #32]
 801507e:	42a9      	cmp	r1, r5
 8015080:	d1f3      	bne.n	801506a <rcl_clock_add_jump_callback+0x3e>
 8015082:	f04f 0e01 	mov.w	lr, #1
 8015086:	e001      	b.n	801508c <rcl_clock_add_jump_callback+0x60>
 8015088:	f04f 0e0b 	mov.w	lr, #11
 801508c:	4670      	mov	r0, lr
 801508e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015092:	b002      	add	sp, #8
 8015094:	4770      	bx	lr
 8015096:	3301      	adds	r3, #1
 8015098:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801509c:	00d9      	lsls	r1, r3, #3
 801509e:	69e3      	ldr	r3, [r4, #28]
 80150a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80150a2:	4798      	blx	r3
 80150a4:	b1f0      	cbz	r0, 80150e4 <rcl_clock_add_jump_callback+0xb8>
 80150a6:	68a3      	ldr	r3, [r4, #8]
 80150a8:	6060      	str	r0, [r4, #4]
 80150aa:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80150ae:	f10d 0c18 	add.w	ip, sp, #24
 80150b2:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 80150b6:	f103 0801 	add.w	r8, r3, #1
 80150ba:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80150be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80150c2:	f106 0708 	add.w	r7, r6, #8
 80150c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80150c8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80150cc:	f04f 0e00 	mov.w	lr, #0
 80150d0:	e887 0003 	stmia.w	r7, {r0, r1}
 80150d4:	6235      	str	r5, [r6, #32]
 80150d6:	4670      	mov	r0, lr
 80150d8:	f8c4 8008 	str.w	r8, [r4, #8]
 80150dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80150e0:	b002      	add	sp, #8
 80150e2:	4770      	bx	lr
 80150e4:	f04f 0e0a 	mov.w	lr, #10
 80150e8:	e7d0      	b.n	801508c <rcl_clock_add_jump_callback+0x60>
 80150ea:	2128      	movs	r1, #40	@ 0x28
 80150ec:	e7d7      	b.n	801509e <rcl_clock_add_jump_callback+0x72>
 80150ee:	bf00      	nop

080150f0 <rcl_clock_remove_jump_callback>:
 80150f0:	2800      	cmp	r0, #0
 80150f2:	d057      	beq.n	80151a4 <rcl_clock_remove_jump_callback+0xb4>
 80150f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80150f8:	4605      	mov	r5, r0
 80150fa:	3014      	adds	r0, #20
 80150fc:	4688      	mov	r8, r1
 80150fe:	4692      	mov	sl, r2
 8015100:	f7f8 ff78 	bl	800dff4 <rcutils_allocator_is_valid>
 8015104:	2800      	cmp	r0, #0
 8015106:	d03b      	beq.n	8015180 <rcl_clock_remove_jump_callback+0x90>
 8015108:	f1b8 0f00 	cmp.w	r8, #0
 801510c:	d038      	beq.n	8015180 <rcl_clock_remove_jump_callback+0x90>
 801510e:	68ae      	ldr	r6, [r5, #8]
 8015110:	b166      	cbz	r6, 801512c <rcl_clock_remove_jump_callback+0x3c>
 8015112:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8015116:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 801511a:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 801511e:	464c      	mov	r4, r9
 8015120:	6823      	ldr	r3, [r4, #0]
 8015122:	4543      	cmp	r3, r8
 8015124:	d005      	beq.n	8015132 <rcl_clock_remove_jump_callback+0x42>
 8015126:	3428      	adds	r4, #40	@ 0x28
 8015128:	42a7      	cmp	r7, r4
 801512a:	d1f9      	bne.n	8015120 <rcl_clock_remove_jump_callback+0x30>
 801512c:	2001      	movs	r0, #1
 801512e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015132:	6a23      	ldr	r3, [r4, #32]
 8015134:	3428      	adds	r4, #40	@ 0x28
 8015136:	42bc      	cmp	r4, r7
 8015138:	d02d      	beq.n	8015196 <rcl_clock_remove_jump_callback+0xa6>
 801513a:	4553      	cmp	r3, sl
 801513c:	d1f0      	bne.n	8015120 <rcl_clock_remove_jump_callback+0x30>
 801513e:	46a6      	mov	lr, r4
 8015140:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015144:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8015148:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801514c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015150:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015154:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015158:	3428      	adds	r4, #40	@ 0x28
 801515a:	42a7      	cmp	r7, r4
 801515c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015160:	d1ed      	bne.n	801513e <rcl_clock_remove_jump_callback+0x4e>
 8015162:	3e01      	subs	r6, #1
 8015164:	60ae      	str	r6, [r5, #8]
 8015166:	b176      	cbz	r6, 8015186 <rcl_clock_remove_jump_callback+0x96>
 8015168:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 801516c:	69eb      	ldr	r3, [r5, #28]
 801516e:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8015170:	00f1      	lsls	r1, r6, #3
 8015172:	4648      	mov	r0, r9
 8015174:	4798      	blx	r3
 8015176:	b1b8      	cbz	r0, 80151a8 <rcl_clock_remove_jump_callback+0xb8>
 8015178:	6068      	str	r0, [r5, #4]
 801517a:	2000      	movs	r0, #0
 801517c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015180:	200b      	movs	r0, #11
 8015182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015186:	4648      	mov	r0, r9
 8015188:	69ab      	ldr	r3, [r5, #24]
 801518a:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 801518c:	4798      	blx	r3
 801518e:	606e      	str	r6, [r5, #4]
 8015190:	4630      	mov	r0, r6
 8015192:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015196:	4553      	cmp	r3, sl
 8015198:	d1c8      	bne.n	801512c <rcl_clock_remove_jump_callback+0x3c>
 801519a:	3e01      	subs	r6, #1
 801519c:	60ae      	str	r6, [r5, #8]
 801519e:	2e00      	cmp	r6, #0
 80151a0:	d1e2      	bne.n	8015168 <rcl_clock_remove_jump_callback+0x78>
 80151a2:	e7f0      	b.n	8015186 <rcl_clock_remove_jump_callback+0x96>
 80151a4:	200b      	movs	r0, #11
 80151a6:	4770      	bx	lr
 80151a8:	200a      	movs	r0, #10
 80151aa:	e7ea      	b.n	8015182 <rcl_clock_remove_jump_callback+0x92>

080151ac <_rcl_timer_time_jump>:
 80151ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151b0:	4605      	mov	r5, r0
 80151b2:	b084      	sub	sp, #16
 80151b4:	4614      	mov	r4, r2
 80151b6:	b131      	cbz	r1, 80151c6 <_rcl_timer_time_jump+0x1a>
 80151b8:	7803      	ldrb	r3, [r0, #0]
 80151ba:	3b02      	subs	r3, #2
 80151bc:	2b01      	cmp	r3, #1
 80151be:	d93f      	bls.n	8015240 <_rcl_timer_time_jump+0x94>
 80151c0:	b004      	add	sp, #16
 80151c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151c6:	6813      	ldr	r3, [r2, #0]
 80151c8:	a902      	add	r1, sp, #8
 80151ca:	6818      	ldr	r0, [r3, #0]
 80151cc:	f7ff ff22 	bl	8015014 <rcl_clock_get_now>
 80151d0:	2800      	cmp	r0, #0
 80151d2:	d1f5      	bne.n	80151c0 <_rcl_timer_time_jump+0x14>
 80151d4:	6820      	ldr	r0, [r4, #0]
 80151d6:	2105      	movs	r1, #5
 80151d8:	3020      	adds	r0, #32
 80151da:	f001 fd8d 	bl	8016cf8 <__atomic_load_8>
 80151de:	6823      	ldr	r3, [r4, #0]
 80151e0:	4681      	mov	r9, r0
 80151e2:	4688      	mov	r8, r1
 80151e4:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80151e8:	2105      	movs	r1, #5
 80151ea:	f001 fd85 	bl	8016cf8 <__atomic_load_8>
 80151ee:	4607      	mov	r7, r0
 80151f0:	6820      	ldr	r0, [r4, #0]
 80151f2:	460e      	mov	r6, r1
 80151f4:	3018      	adds	r0, #24
 80151f6:	2105      	movs	r1, #5
 80151f8:	f001 fd7e 	bl	8016cf8 <__atomic_load_8>
 80151fc:	782b      	ldrb	r3, [r5, #0]
 80151fe:	9a02      	ldr	r2, [sp, #8]
 8015200:	3b02      	subs	r3, #2
 8015202:	2b01      	cmp	r3, #1
 8015204:	460d      	mov	r5, r1
 8015206:	9b03      	ldr	r3, [sp, #12]
 8015208:	4682      	mov	sl, r0
 801520a:	d937      	bls.n	801527c <_rcl_timer_time_jump+0xd0>
 801520c:	42ba      	cmp	r2, r7
 801520e:	eb73 0106 	sbcs.w	r1, r3, r6
 8015212:	da5f      	bge.n	80152d4 <_rcl_timer_time_jump+0x128>
 8015214:	454a      	cmp	r2, r9
 8015216:	eb73 0108 	sbcs.w	r1, r3, r8
 801521a:	dad1      	bge.n	80151c0 <_rcl_timer_time_jump+0x14>
 801521c:	6820      	ldr	r0, [r4, #0]
 801521e:	eb1a 0202 	adds.w	r2, sl, r2
 8015222:	eb43 0305 	adc.w	r3, r3, r5
 8015226:	2505      	movs	r5, #5
 8015228:	3028      	adds	r0, #40	@ 0x28
 801522a:	9500      	str	r5, [sp, #0]
 801522c:	f001 fd9a 	bl	8016d64 <__atomic_store_8>
 8015230:	6820      	ldr	r0, [r4, #0]
 8015232:	9500      	str	r5, [sp, #0]
 8015234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015238:	3020      	adds	r0, #32
 801523a:	f001 fd93 	bl	8016d64 <__atomic_store_8>
 801523e:	e7bf      	b.n	80151c0 <_rcl_timer_time_jump+0x14>
 8015240:	6813      	ldr	r3, [r2, #0]
 8015242:	a902      	add	r1, sp, #8
 8015244:	6818      	ldr	r0, [r3, #0]
 8015246:	f7ff fee5 	bl	8015014 <rcl_clock_get_now>
 801524a:	2800      	cmp	r0, #0
 801524c:	d1b8      	bne.n	80151c0 <_rcl_timer_time_jump+0x14>
 801524e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015252:	4313      	orrs	r3, r2
 8015254:	d0b4      	beq.n	80151c0 <_rcl_timer_time_jump+0x14>
 8015256:	6820      	ldr	r0, [r4, #0]
 8015258:	2105      	movs	r1, #5
 801525a:	3028      	adds	r0, #40	@ 0x28
 801525c:	f001 fd4c 	bl	8016cf8 <__atomic_load_8>
 8015260:	9d02      	ldr	r5, [sp, #8]
 8015262:	9b03      	ldr	r3, [sp, #12]
 8015264:	4602      	mov	r2, r0
 8015266:	6820      	ldr	r0, [r4, #0]
 8015268:	1b52      	subs	r2, r2, r5
 801526a:	f04f 0405 	mov.w	r4, #5
 801526e:	9400      	str	r4, [sp, #0]
 8015270:	eb61 0303 	sbc.w	r3, r1, r3
 8015274:	3030      	adds	r0, #48	@ 0x30
 8015276:	f001 fd75 	bl	8016d64 <__atomic_store_8>
 801527a:	e7a1      	b.n	80151c0 <_rcl_timer_time_jump+0x14>
 801527c:	4313      	orrs	r3, r2
 801527e:	d09f      	beq.n	80151c0 <_rcl_timer_time_jump+0x14>
 8015280:	6820      	ldr	r0, [r4, #0]
 8015282:	f04f 0805 	mov.w	r8, #5
 8015286:	2300      	movs	r3, #0
 8015288:	f8cd 8000 	str.w	r8, [sp]
 801528c:	3030      	adds	r0, #48	@ 0x30
 801528e:	2200      	movs	r2, #0
 8015290:	f001 fd9e 	bl	8016dd0 <__atomic_exchange_8>
 8015294:	ea51 0300 	orrs.w	r3, r1, r0
 8015298:	4606      	mov	r6, r0
 801529a:	460f      	mov	r7, r1
 801529c:	d090      	beq.n	80151c0 <_rcl_timer_time_jump+0x14>
 801529e:	9a02      	ldr	r2, [sp, #8]
 80152a0:	9b03      	ldr	r3, [sp, #12]
 80152a2:	f8cd 8000 	str.w	r8, [sp]
 80152a6:	1a12      	subs	r2, r2, r0
 80152a8:	6820      	ldr	r0, [r4, #0]
 80152aa:	eb63 0301 	sbc.w	r3, r3, r1
 80152ae:	eb12 020a 	adds.w	r2, r2, sl
 80152b2:	eb43 0305 	adc.w	r3, r3, r5
 80152b6:	3028      	adds	r0, #40	@ 0x28
 80152b8:	f001 fd54 	bl	8016d64 <__atomic_store_8>
 80152bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80152c0:	f8cd 8000 	str.w	r8, [sp]
 80152c4:	6820      	ldr	r0, [r4, #0]
 80152c6:	1b92      	subs	r2, r2, r6
 80152c8:	eb63 0307 	sbc.w	r3, r3, r7
 80152cc:	3020      	adds	r0, #32
 80152ce:	f001 fd49 	bl	8016d64 <__atomic_store_8>
 80152d2:	e775      	b.n	80151c0 <_rcl_timer_time_jump+0x14>
 80152d4:	6820      	ldr	r0, [r4, #0]
 80152d6:	3008      	adds	r0, #8
 80152d8:	f004 fae4 	bl	80198a4 <rcl_trigger_guard_condition>
 80152dc:	e770      	b.n	80151c0 <_rcl_timer_time_jump+0x14>
 80152de:	bf00      	nop

080152e0 <rcl_get_zero_initialized_timer>:
 80152e0:	4b01      	ldr	r3, [pc, #4]	@ (80152e8 <rcl_get_zero_initialized_timer+0x8>)
 80152e2:	6818      	ldr	r0, [r3, #0]
 80152e4:	4770      	bx	lr
 80152e6:	bf00      	nop
 80152e8:	0801bebc 	.word	0x0801bebc
 80152ec:	00000000 	.word	0x00000000

080152f0 <rcl_timer_init>:
 80152f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152f4:	b0aa      	sub	sp, #168	@ 0xa8
 80152f6:	4604      	mov	r4, r0
 80152f8:	a835      	add	r0, sp, #212	@ 0xd4
 80152fa:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 80152fe:	460d      	mov	r5, r1
 8015300:	4692      	mov	sl, r2
 8015302:	f7f8 fe77 	bl	800dff4 <rcutils_allocator_is_valid>
 8015306:	2800      	cmp	r0, #0
 8015308:	d064      	beq.n	80153d4 <rcl_timer_init+0xe4>
 801530a:	2c00      	cmp	r4, #0
 801530c:	d062      	beq.n	80153d4 <rcl_timer_init+0xe4>
 801530e:	2d00      	cmp	r5, #0
 8015310:	d060      	beq.n	80153d4 <rcl_timer_init+0xe4>
 8015312:	2f00      	cmp	r7, #0
 8015314:	db5e      	blt.n	80153d4 <rcl_timer_init+0xe4>
 8015316:	6823      	ldr	r3, [r4, #0]
 8015318:	b123      	cbz	r3, 8015324 <rcl_timer_init+0x34>
 801531a:	2664      	movs	r6, #100	@ 0x64
 801531c:	4630      	mov	r0, r6
 801531e:	b02a      	add	sp, #168	@ 0xa8
 8015320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015324:	a908      	add	r1, sp, #32
 8015326:	4628      	mov	r0, r5
 8015328:	f7ff fe74 	bl	8015014 <rcl_clock_get_now>
 801532c:	4606      	mov	r6, r0
 801532e:	2800      	cmp	r0, #0
 8015330:	d1f4      	bne.n	801531c <rcl_timer_init+0x2c>
 8015332:	ae06      	add	r6, sp, #24
 8015334:	4630      	mov	r0, r6
 8015336:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 801533a:	f004 f9bb 	bl	80196b4 <rcl_get_zero_initialized_guard_condition>
 801533e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8015342:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8015346:	ae0b      	add	r6, sp, #44	@ 0x2c
 8015348:	e889 0003 	stmia.w	r9, {r0, r1}
 801534c:	4630      	mov	r0, r6
 801534e:	f004 fa8d 	bl	801986c <rcl_guard_condition_get_default_options>
 8015352:	ab0d      	add	r3, sp, #52	@ 0x34
 8015354:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015358:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801535c:	4651      	mov	r1, sl
 801535e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8015362:	4648      	mov	r0, r9
 8015364:	f004 f9b0 	bl	80196c8 <rcl_guard_condition_init>
 8015368:	4606      	mov	r6, r0
 801536a:	2800      	cmp	r0, #0
 801536c:	d1d6      	bne.n	801531c <rcl_timer_init+0x2c>
 801536e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015370:	781b      	ldrb	r3, [r3, #0]
 8015372:	2b01      	cmp	r3, #1
 8015374:	d033      	beq.n	80153de <rcl_timer_init+0xee>
 8015376:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8015378:	911a      	str	r1, [sp, #104]	@ 0x68
 801537a:	4642      	mov	r2, r8
 801537c:	463b      	mov	r3, r7
 801537e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8015382:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015386:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8015438 <rcl_timer_init+0x148>
 801538a:	eb12 0008 	adds.w	r0, r2, r8
 801538e:	eb47 0103 	adc.w	r1, r7, r3
 8015392:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8015396:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 801539a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 801539e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 80153a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80153a6:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 80153aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80153ae:	f8de 3000 	ldr.w	r3, [lr]
 80153b2:	f8cc 3000 	str.w	r3, [ip]
 80153b6:	f04f 0a00 	mov.w	sl, #0
 80153ba:	4619      	mov	r1, r3
 80153bc:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 80153c0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80153c2:	2050      	movs	r0, #80	@ 0x50
 80153c4:	4798      	blx	r3
 80153c6:	6020      	str	r0, [r4, #0]
 80153c8:	b358      	cbz	r0, 8015422 <rcl_timer_init+0x132>
 80153ca:	2250      	movs	r2, #80	@ 0x50
 80153cc:	a916      	add	r1, sp, #88	@ 0x58
 80153ce:	f005 f9a0 	bl	801a712 <memcpy>
 80153d2:	e7a3      	b.n	801531c <rcl_timer_init+0x2c>
 80153d4:	260b      	movs	r6, #11
 80153d6:	4630      	mov	r0, r6
 80153d8:	b02a      	add	sp, #168	@ 0xa8
 80153da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153de:	2001      	movs	r0, #1
 80153e0:	2100      	movs	r1, #0
 80153e2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 80153e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80153ea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80153ee:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 80153f2:	4a13      	ldr	r2, [pc, #76]	@ (8015440 <rcl_timer_init+0x150>)
 80153f4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 80153f8:	9405      	str	r4, [sp, #20]
 80153fa:	9204      	str	r2, [sp, #16]
 80153fc:	ab12      	add	r3, sp, #72	@ 0x48
 80153fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015400:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015404:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015408:	e89c 000c 	ldmia.w	ip, {r2, r3}
 801540c:	4628      	mov	r0, r5
 801540e:	f7ff fe0d 	bl	801502c <rcl_clock_add_jump_callback>
 8015412:	4682      	mov	sl, r0
 8015414:	2800      	cmp	r0, #0
 8015416:	d0ae      	beq.n	8015376 <rcl_timer_init+0x86>
 8015418:	4648      	mov	r0, r9
 801541a:	f004 fa01 	bl	8019820 <rcl_guard_condition_fini>
 801541e:	4656      	mov	r6, sl
 8015420:	e77c      	b.n	801531c <rcl_timer_init+0x2c>
 8015422:	4648      	mov	r0, r9
 8015424:	f004 f9fc 	bl	8019820 <rcl_guard_condition_fini>
 8015428:	4905      	ldr	r1, [pc, #20]	@ (8015440 <rcl_timer_init+0x150>)
 801542a:	4622      	mov	r2, r4
 801542c:	4628      	mov	r0, r5
 801542e:	f7ff fe5f 	bl	80150f0 <rcl_clock_remove_jump_callback>
 8015432:	260a      	movs	r6, #10
 8015434:	e772      	b.n	801531c <rcl_timer_init+0x2c>
 8015436:	bf00      	nop
	...
 8015440:	080151ad 	.word	0x080151ad

08015444 <rcl_timer_call>:
 8015444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015448:	b087      	sub	sp, #28
 801544a:	2800      	cmp	r0, #0
 801544c:	d06d      	beq.n	801552a <rcl_timer_call+0xe6>
 801544e:	6803      	ldr	r3, [r0, #0]
 8015450:	4604      	mov	r4, r0
 8015452:	2b00      	cmp	r3, #0
 8015454:	d063      	beq.n	801551e <rcl_timer_call+0xda>
 8015456:	f3bf 8f5b 	dmb	ish
 801545a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801545e:	f3bf 8f5b 	dmb	ish
 8015462:	2b00      	cmp	r3, #0
 8015464:	d150      	bne.n	8015508 <rcl_timer_call+0xc4>
 8015466:	6803      	ldr	r3, [r0, #0]
 8015468:	a904      	add	r1, sp, #16
 801546a:	6818      	ldr	r0, [r3, #0]
 801546c:	f7ff fdd2 	bl	8015014 <rcl_clock_get_now>
 8015470:	4605      	mov	r5, r0
 8015472:	2800      	cmp	r0, #0
 8015474:	d14a      	bne.n	801550c <rcl_timer_call+0xc8>
 8015476:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801547a:	2b00      	cmp	r3, #0
 801547c:	db4a      	blt.n	8015514 <rcl_timer_call+0xd0>
 801547e:	6820      	ldr	r0, [r4, #0]
 8015480:	f04f 0a05 	mov.w	sl, #5
 8015484:	f8cd a000 	str.w	sl, [sp]
 8015488:	3020      	adds	r0, #32
 801548a:	f001 fca1 	bl	8016dd0 <__atomic_exchange_8>
 801548e:	6823      	ldr	r3, [r4, #0]
 8015490:	f3bf 8f5b 	dmb	ish
 8015494:	4680      	mov	r8, r0
 8015496:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801549a:	f3bf 8f5b 	dmb	ish
 801549e:	6820      	ldr	r0, [r4, #0]
 80154a0:	4689      	mov	r9, r1
 80154a2:	3028      	adds	r0, #40	@ 0x28
 80154a4:	4651      	mov	r1, sl
 80154a6:	f001 fc27 	bl	8016cf8 <__atomic_load_8>
 80154aa:	4606      	mov	r6, r0
 80154ac:	6820      	ldr	r0, [r4, #0]
 80154ae:	460f      	mov	r7, r1
 80154b0:	3018      	adds	r0, #24
 80154b2:	4651      	mov	r1, sl
 80154b4:	f001 fc20 	bl	8016cf8 <__atomic_load_8>
 80154b8:	1836      	adds	r6, r6, r0
 80154ba:	4602      	mov	r2, r0
 80154bc:	4682      	mov	sl, r0
 80154be:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80154c2:	eb47 0701 	adc.w	r7, r7, r1
 80154c6:	4286      	cmp	r6, r0
 80154c8:	460b      	mov	r3, r1
 80154ca:	eb77 010c 	sbcs.w	r1, r7, ip
 80154ce:	da04      	bge.n	80154da <rcl_timer_call+0x96>
 80154d0:	ea53 0102 	orrs.w	r1, r3, r2
 80154d4:	d12e      	bne.n	8015534 <rcl_timer_call+0xf0>
 80154d6:	4606      	mov	r6, r0
 80154d8:	4667      	mov	r7, ip
 80154da:	6820      	ldr	r0, [r4, #0]
 80154dc:	2105      	movs	r1, #5
 80154de:	4632      	mov	r2, r6
 80154e0:	463b      	mov	r3, r7
 80154e2:	3028      	adds	r0, #40	@ 0x28
 80154e4:	9100      	str	r1, [sp, #0]
 80154e6:	f001 fc3d 	bl	8016d64 <__atomic_store_8>
 80154ea:	f1bb 0f00 	cmp.w	fp, #0
 80154ee:	d00d      	beq.n	801550c <rcl_timer_call+0xc8>
 80154f0:	9a04      	ldr	r2, [sp, #16]
 80154f2:	9b05      	ldr	r3, [sp, #20]
 80154f4:	ebb2 0208 	subs.w	r2, r2, r8
 80154f8:	4620      	mov	r0, r4
 80154fa:	eb63 0309 	sbc.w	r3, r3, r9
 80154fe:	47d8      	blx	fp
 8015500:	4628      	mov	r0, r5
 8015502:	b007      	add	sp, #28
 8015504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015508:	f240 3521 	movw	r5, #801	@ 0x321
 801550c:	4628      	mov	r0, r5
 801550e:	b007      	add	sp, #28
 8015510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015514:	2501      	movs	r5, #1
 8015516:	4628      	mov	r0, r5
 8015518:	b007      	add	sp, #28
 801551a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801551e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8015522:	4628      	mov	r0, r5
 8015524:	b007      	add	sp, #28
 8015526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801552a:	250b      	movs	r5, #11
 801552c:	4628      	mov	r0, r5
 801552e:	b007      	add	sp, #28
 8015530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015534:	1b80      	subs	r0, r0, r6
 8015536:	eb6c 0107 	sbc.w	r1, ip, r7
 801553a:	3801      	subs	r0, #1
 801553c:	f161 0100 	sbc.w	r1, r1, #0
 8015540:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8015544:	f7eb fac2 	bl	8000acc <__aeabi_ldivmod>
 8015548:	9b02      	ldr	r3, [sp, #8]
 801554a:	3001      	adds	r0, #1
 801554c:	f141 0100 	adc.w	r1, r1, #0
 8015550:	fb00 f303 	mul.w	r3, r0, r3
 8015554:	fb01 330a 	mla	r3, r1, sl, r3
 8015558:	fba0 0a0a 	umull	r0, sl, r0, sl
 801555c:	1986      	adds	r6, r0, r6
 801555e:	4453      	add	r3, sl
 8015560:	eb43 0707 	adc.w	r7, r3, r7
 8015564:	e7b9      	b.n	80154da <rcl_timer_call+0x96>
 8015566:	bf00      	nop

08015568 <rcl_timer_is_ready>:
 8015568:	b570      	push	{r4, r5, r6, lr}
 801556a:	b082      	sub	sp, #8
 801556c:	b378      	cbz	r0, 80155ce <rcl_timer_is_ready+0x66>
 801556e:	6803      	ldr	r3, [r0, #0]
 8015570:	4604      	mov	r4, r0
 8015572:	b383      	cbz	r3, 80155d6 <rcl_timer_is_ready+0x6e>
 8015574:	460d      	mov	r5, r1
 8015576:	b351      	cbz	r1, 80155ce <rcl_timer_is_ready+0x66>
 8015578:	f3bf 8f5b 	dmb	ish
 801557c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8015580:	f3bf 8f5b 	dmb	ish
 8015584:	b953      	cbnz	r3, 801559c <rcl_timer_is_ready+0x34>
 8015586:	6803      	ldr	r3, [r0, #0]
 8015588:	4669      	mov	r1, sp
 801558a:	6818      	ldr	r0, [r3, #0]
 801558c:	f7ff fd42 	bl	8015014 <rcl_clock_get_now>
 8015590:	4606      	mov	r6, r0
 8015592:	b140      	cbz	r0, 80155a6 <rcl_timer_is_ready+0x3e>
 8015594:	f240 3321 	movw	r3, #801	@ 0x321
 8015598:	4298      	cmp	r0, r3
 801559a:	d101      	bne.n	80155a0 <rcl_timer_is_ready+0x38>
 801559c:	2600      	movs	r6, #0
 801559e:	702e      	strb	r6, [r5, #0]
 80155a0:	4630      	mov	r0, r6
 80155a2:	b002      	add	sp, #8
 80155a4:	bd70      	pop	{r4, r5, r6, pc}
 80155a6:	6820      	ldr	r0, [r4, #0]
 80155a8:	2105      	movs	r1, #5
 80155aa:	3028      	adds	r0, #40	@ 0x28
 80155ac:	f001 fba4 	bl	8016cf8 <__atomic_load_8>
 80155b0:	9b00      	ldr	r3, [sp, #0]
 80155b2:	1ac0      	subs	r0, r0, r3
 80155b4:	9b01      	ldr	r3, [sp, #4]
 80155b6:	eb61 0103 	sbc.w	r1, r1, r3
 80155ba:	2801      	cmp	r0, #1
 80155bc:	f171 0300 	sbcs.w	r3, r1, #0
 80155c0:	bfb4      	ite	lt
 80155c2:	2301      	movlt	r3, #1
 80155c4:	2300      	movge	r3, #0
 80155c6:	4630      	mov	r0, r6
 80155c8:	702b      	strb	r3, [r5, #0]
 80155ca:	b002      	add	sp, #8
 80155cc:	bd70      	pop	{r4, r5, r6, pc}
 80155ce:	260b      	movs	r6, #11
 80155d0:	4630      	mov	r0, r6
 80155d2:	b002      	add	sp, #8
 80155d4:	bd70      	pop	{r4, r5, r6, pc}
 80155d6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80155da:	e7e1      	b.n	80155a0 <rcl_timer_is_ready+0x38>

080155dc <rcl_timer_get_time_until_next_call>:
 80155dc:	b570      	push	{r4, r5, r6, lr}
 80155de:	b082      	sub	sp, #8
 80155e0:	b330      	cbz	r0, 8015630 <rcl_timer_get_time_until_next_call+0x54>
 80155e2:	6803      	ldr	r3, [r0, #0]
 80155e4:	4604      	mov	r4, r0
 80155e6:	b33b      	cbz	r3, 8015638 <rcl_timer_get_time_until_next_call+0x5c>
 80155e8:	460d      	mov	r5, r1
 80155ea:	b309      	cbz	r1, 8015630 <rcl_timer_get_time_until_next_call+0x54>
 80155ec:	f3bf 8f5b 	dmb	ish
 80155f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80155f4:	f3bf 8f5b 	dmb	ish
 80155f8:	b9ab      	cbnz	r3, 8015626 <rcl_timer_get_time_until_next_call+0x4a>
 80155fa:	6803      	ldr	r3, [r0, #0]
 80155fc:	4669      	mov	r1, sp
 80155fe:	6818      	ldr	r0, [r3, #0]
 8015600:	f7ff fd08 	bl	8015014 <rcl_clock_get_now>
 8015604:	4606      	mov	r6, r0
 8015606:	b958      	cbnz	r0, 8015620 <rcl_timer_get_time_until_next_call+0x44>
 8015608:	6820      	ldr	r0, [r4, #0]
 801560a:	2105      	movs	r1, #5
 801560c:	3028      	adds	r0, #40	@ 0x28
 801560e:	f001 fb73 	bl	8016cf8 <__atomic_load_8>
 8015612:	9b00      	ldr	r3, [sp, #0]
 8015614:	1ac0      	subs	r0, r0, r3
 8015616:	9b01      	ldr	r3, [sp, #4]
 8015618:	6028      	str	r0, [r5, #0]
 801561a:	eb61 0103 	sbc.w	r1, r1, r3
 801561e:	6069      	str	r1, [r5, #4]
 8015620:	4630      	mov	r0, r6
 8015622:	b002      	add	sp, #8
 8015624:	bd70      	pop	{r4, r5, r6, pc}
 8015626:	f240 3621 	movw	r6, #801	@ 0x321
 801562a:	4630      	mov	r0, r6
 801562c:	b002      	add	sp, #8
 801562e:	bd70      	pop	{r4, r5, r6, pc}
 8015630:	260b      	movs	r6, #11
 8015632:	4630      	mov	r0, r6
 8015634:	b002      	add	sp, #8
 8015636:	bd70      	pop	{r4, r5, r6, pc}
 8015638:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801563c:	e7f0      	b.n	8015620 <rcl_timer_get_time_until_next_call+0x44>
 801563e:	bf00      	nop

08015640 <rcl_timer_get_guard_condition>:
 8015640:	b130      	cbz	r0, 8015650 <rcl_timer_get_guard_condition+0x10>
 8015642:	6800      	ldr	r0, [r0, #0]
 8015644:	b120      	cbz	r0, 8015650 <rcl_timer_get_guard_condition+0x10>
 8015646:	68c3      	ldr	r3, [r0, #12]
 8015648:	b10b      	cbz	r3, 801564e <rcl_timer_get_guard_condition+0xe>
 801564a:	3008      	adds	r0, #8
 801564c:	4770      	bx	lr
 801564e:	4618      	mov	r0, r3
 8015650:	4770      	bx	lr
 8015652:	bf00      	nop

08015654 <rcl_get_zero_initialized_wait_set>:
 8015654:	b510      	push	{r4, lr}
 8015656:	4c08      	ldr	r4, [pc, #32]	@ (8015678 <rcl_get_zero_initialized_wait_set+0x24>)
 8015658:	4686      	mov	lr, r0
 801565a:	4684      	mov	ip, r0
 801565c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801565e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015662:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015664:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801566a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801566e:	6823      	ldr	r3, [r4, #0]
 8015670:	f8cc 3000 	str.w	r3, [ip]
 8015674:	4670      	mov	r0, lr
 8015676:	bd10      	pop	{r4, pc}
 8015678:	0801bec0 	.word	0x0801bec0

0801567c <rcl_wait_set_is_valid>:
 801567c:	b118      	cbz	r0, 8015686 <rcl_wait_set_is_valid+0xa>
 801567e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8015680:	3800      	subs	r0, #0
 8015682:	bf18      	it	ne
 8015684:	2001      	movne	r0, #1
 8015686:	4770      	bx	lr

08015688 <rcl_wait_set_fini>:
 8015688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801568c:	b082      	sub	sp, #8
 801568e:	2800      	cmp	r0, #0
 8015690:	f000 8095 	beq.w	80157be <rcl_wait_set_fini+0x136>
 8015694:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015696:	4604      	mov	r4, r0
 8015698:	2e00      	cmp	r6, #0
 801569a:	f000 808c 	beq.w	80157b6 <rcl_wait_set_fini+0x12e>
 801569e:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 80156a0:	f002 fd36 	bl	8018110 <rmw_destroy_wait_set>
 80156a4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156a6:	1e06      	subs	r6, r0, #0
 80156a8:	bf18      	it	ne
 80156aa:	f44f 7661 	movne.w	r6, #900	@ 0x384
 80156ae:	2d00      	cmp	r5, #0
 80156b0:	f000 8081 	beq.w	80157b6 <rcl_wait_set_fini+0x12e>
 80156b4:	6820      	ldr	r0, [r4, #0]
 80156b6:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 80156ba:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156bc:	2700      	movs	r7, #0
 80156be:	6067      	str	r7, [r4, #4]
 80156c0:	602f      	str	r7, [r5, #0]
 80156c2:	b120      	cbz	r0, 80156ce <rcl_wait_set_fini+0x46>
 80156c4:	9101      	str	r1, [sp, #4]
 80156c6:	47c0      	blx	r8
 80156c8:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156ca:	9901      	ldr	r1, [sp, #4]
 80156cc:	6027      	str	r7, [r4, #0]
 80156ce:	68a8      	ldr	r0, [r5, #8]
 80156d0:	b120      	cbz	r0, 80156dc <rcl_wait_set_fini+0x54>
 80156d2:	47c0      	blx	r8
 80156d4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156d6:	2300      	movs	r3, #0
 80156d8:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80156dc:	68a0      	ldr	r0, [r4, #8]
 80156de:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80156e0:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156e2:	f04f 0800 	mov.w	r8, #0
 80156e6:	f8c4 800c 	str.w	r8, [r4, #12]
 80156ea:	f8c5 800c 	str.w	r8, [r5, #12]
 80156ee:	b128      	cbz	r0, 80156fc <rcl_wait_set_fini+0x74>
 80156f0:	47b8      	blx	r7
 80156f2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80156f4:	f8c4 8008 	str.w	r8, [r4, #8]
 80156f8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80156fa:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80156fc:	6968      	ldr	r0, [r5, #20]
 80156fe:	f04f 0800 	mov.w	r8, #0
 8015702:	f8c5 8010 	str.w	r8, [r5, #16]
 8015706:	b128      	cbz	r0, 8015714 <rcl_wait_set_fini+0x8c>
 8015708:	47b8      	blx	r7
 801570a:	f8c5 8014 	str.w	r8, [r5, #20]
 801570e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015710:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8015712:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015714:	6920      	ldr	r0, [r4, #16]
 8015716:	f04f 0800 	mov.w	r8, #0
 801571a:	f8c4 8014 	str.w	r8, [r4, #20]
 801571e:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8015722:	b128      	cbz	r0, 8015730 <rcl_wait_set_fini+0xa8>
 8015724:	47b8      	blx	r7
 8015726:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015728:	f8c4 8010 	str.w	r8, [r4, #16]
 801572c:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 801572e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015730:	69a0      	ldr	r0, [r4, #24]
 8015732:	f04f 0800 	mov.w	r8, #0
 8015736:	f8c4 801c 	str.w	r8, [r4, #28]
 801573a:	f8c5 8018 	str.w	r8, [r5, #24]
 801573e:	b128      	cbz	r0, 801574c <rcl_wait_set_fini+0xc4>
 8015740:	9101      	str	r1, [sp, #4]
 8015742:	47b8      	blx	r7
 8015744:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015746:	9901      	ldr	r1, [sp, #4]
 8015748:	f8c4 8018 	str.w	r8, [r4, #24]
 801574c:	6a28      	ldr	r0, [r5, #32]
 801574e:	b120      	cbz	r0, 801575a <rcl_wait_set_fini+0xd2>
 8015750:	47b8      	blx	r7
 8015752:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015754:	2300      	movs	r3, #0
 8015756:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801575a:	6a20      	ldr	r0, [r4, #32]
 801575c:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015760:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8015762:	2700      	movs	r7, #0
 8015764:	6267      	str	r7, [r4, #36]	@ 0x24
 8015766:	626f      	str	r7, [r5, #36]	@ 0x24
 8015768:	b120      	cbz	r0, 8015774 <rcl_wait_set_fini+0xec>
 801576a:	9101      	str	r1, [sp, #4]
 801576c:	47c0      	blx	r8
 801576e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015770:	9901      	ldr	r1, [sp, #4]
 8015772:	6227      	str	r7, [r4, #32]
 8015774:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8015776:	b120      	cbz	r0, 8015782 <rcl_wait_set_fini+0xfa>
 8015778:	47c0      	blx	r8
 801577a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801577c:	2300      	movs	r3, #0
 801577e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015782:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015784:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8015788:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801578a:	2700      	movs	r7, #0
 801578c:	62e7      	str	r7, [r4, #44]	@ 0x2c
 801578e:	632f      	str	r7, [r5, #48]	@ 0x30
 8015790:	b120      	cbz	r0, 801579c <rcl_wait_set_fini+0x114>
 8015792:	9101      	str	r1, [sp, #4]
 8015794:	47c0      	blx	r8
 8015796:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015798:	9901      	ldr	r1, [sp, #4]
 801579a:	62a7      	str	r7, [r4, #40]	@ 0x28
 801579c:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 801579e:	b120      	cbz	r0, 80157aa <rcl_wait_set_fini+0x122>
 80157a0:	47c0      	blx	r8
 80157a2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80157a4:	2300      	movs	r3, #0
 80157a6:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 80157aa:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80157ac:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80157ae:	4628      	mov	r0, r5
 80157b0:	4798      	blx	r3
 80157b2:	2300      	movs	r3, #0
 80157b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80157b6:	4630      	mov	r0, r6
 80157b8:	b002      	add	sp, #8
 80157ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80157be:	260b      	movs	r6, #11
 80157c0:	4630      	mov	r0, r6
 80157c2:	b002      	add	sp, #8
 80157c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157c8 <rcl_wait_set_add_subscription>:
 80157c8:	b318      	cbz	r0, 8015812 <rcl_wait_set_add_subscription+0x4a>
 80157ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80157cc:	b570      	push	{r4, r5, r6, lr}
 80157ce:	4604      	mov	r4, r0
 80157d0:	b30b      	cbz	r3, 8015816 <rcl_wait_set_add_subscription+0x4e>
 80157d2:	b319      	cbz	r1, 801581c <rcl_wait_set_add_subscription+0x54>
 80157d4:	681d      	ldr	r5, [r3, #0]
 80157d6:	6840      	ldr	r0, [r0, #4]
 80157d8:	4285      	cmp	r5, r0
 80157da:	d217      	bcs.n	801580c <rcl_wait_set_add_subscription+0x44>
 80157dc:	6820      	ldr	r0, [r4, #0]
 80157de:	1c6e      	adds	r6, r5, #1
 80157e0:	601e      	str	r6, [r3, #0]
 80157e2:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80157e6:	b102      	cbz	r2, 80157ea <rcl_wait_set_add_subscription+0x22>
 80157e8:	6015      	str	r5, [r2, #0]
 80157ea:	4608      	mov	r0, r1
 80157ec:	f7ff fb72 	bl	8014ed4 <rcl_subscription_get_rmw_handle>
 80157f0:	b150      	cbz	r0, 8015808 <rcl_wait_set_add_subscription+0x40>
 80157f2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80157f4:	6842      	ldr	r2, [r0, #4]
 80157f6:	689b      	ldr	r3, [r3, #8]
 80157f8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80157fc:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80157fe:	6853      	ldr	r3, [r2, #4]
 8015800:	3301      	adds	r3, #1
 8015802:	2000      	movs	r0, #0
 8015804:	6053      	str	r3, [r2, #4]
 8015806:	bd70      	pop	{r4, r5, r6, pc}
 8015808:	2001      	movs	r0, #1
 801580a:	bd70      	pop	{r4, r5, r6, pc}
 801580c:	f240 3086 	movw	r0, #902	@ 0x386
 8015810:	bd70      	pop	{r4, r5, r6, pc}
 8015812:	200b      	movs	r0, #11
 8015814:	4770      	bx	lr
 8015816:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801581a:	bd70      	pop	{r4, r5, r6, pc}
 801581c:	200b      	movs	r0, #11
 801581e:	bd70      	pop	{r4, r5, r6, pc}

08015820 <rcl_wait_set_clear>:
 8015820:	2800      	cmp	r0, #0
 8015822:	d073      	beq.n	801590c <rcl_wait_set_clear+0xec>
 8015824:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015826:	b510      	push	{r4, lr}
 8015828:	4604      	mov	r4, r0
 801582a:	2b00      	cmp	r3, #0
 801582c:	d070      	beq.n	8015910 <rcl_wait_set_clear+0xf0>
 801582e:	6800      	ldr	r0, [r0, #0]
 8015830:	b138      	cbz	r0, 8015842 <rcl_wait_set_clear+0x22>
 8015832:	6862      	ldr	r2, [r4, #4]
 8015834:	2100      	movs	r1, #0
 8015836:	0092      	lsls	r2, r2, #2
 8015838:	f004 fea2 	bl	801a580 <memset>
 801583c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801583e:	2200      	movs	r2, #0
 8015840:	601a      	str	r2, [r3, #0]
 8015842:	68a0      	ldr	r0, [r4, #8]
 8015844:	b138      	cbz	r0, 8015856 <rcl_wait_set_clear+0x36>
 8015846:	68e2      	ldr	r2, [r4, #12]
 8015848:	2100      	movs	r1, #0
 801584a:	0092      	lsls	r2, r2, #2
 801584c:	f004 fe98 	bl	801a580 <memset>
 8015850:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015852:	2200      	movs	r2, #0
 8015854:	60da      	str	r2, [r3, #12]
 8015856:	69a0      	ldr	r0, [r4, #24]
 8015858:	b138      	cbz	r0, 801586a <rcl_wait_set_clear+0x4a>
 801585a:	69e2      	ldr	r2, [r4, #28]
 801585c:	2100      	movs	r1, #0
 801585e:	0092      	lsls	r2, r2, #2
 8015860:	f004 fe8e 	bl	801a580 <memset>
 8015864:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015866:	2200      	movs	r2, #0
 8015868:	619a      	str	r2, [r3, #24]
 801586a:	6a20      	ldr	r0, [r4, #32]
 801586c:	b138      	cbz	r0, 801587e <rcl_wait_set_clear+0x5e>
 801586e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8015870:	2100      	movs	r1, #0
 8015872:	0092      	lsls	r2, r2, #2
 8015874:	f004 fe84 	bl	801a580 <memset>
 8015878:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801587a:	2200      	movs	r2, #0
 801587c:	625a      	str	r2, [r3, #36]	@ 0x24
 801587e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8015880:	b138      	cbz	r0, 8015892 <rcl_wait_set_clear+0x72>
 8015882:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8015884:	2100      	movs	r1, #0
 8015886:	0092      	lsls	r2, r2, #2
 8015888:	f004 fe7a 	bl	801a580 <memset>
 801588c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801588e:	2200      	movs	r2, #0
 8015890:	631a      	str	r2, [r3, #48]	@ 0x30
 8015892:	6920      	ldr	r0, [r4, #16]
 8015894:	b138      	cbz	r0, 80158a6 <rcl_wait_set_clear+0x86>
 8015896:	6962      	ldr	r2, [r4, #20]
 8015898:	2100      	movs	r1, #0
 801589a:	0092      	lsls	r2, r2, #2
 801589c:	f004 fe70 	bl	801a580 <memset>
 80158a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158a2:	2200      	movs	r2, #0
 80158a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80158a6:	6898      	ldr	r0, [r3, #8]
 80158a8:	b138      	cbz	r0, 80158ba <rcl_wait_set_clear+0x9a>
 80158aa:	685a      	ldr	r2, [r3, #4]
 80158ac:	2100      	movs	r1, #0
 80158ae:	0092      	lsls	r2, r2, #2
 80158b0:	f004 fe66 	bl	801a580 <memset>
 80158b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158b6:	2200      	movs	r2, #0
 80158b8:	605a      	str	r2, [r3, #4]
 80158ba:	6958      	ldr	r0, [r3, #20]
 80158bc:	b138      	cbz	r0, 80158ce <rcl_wait_set_clear+0xae>
 80158be:	691a      	ldr	r2, [r3, #16]
 80158c0:	2100      	movs	r1, #0
 80158c2:	0092      	lsls	r2, r2, #2
 80158c4:	f004 fe5c 	bl	801a580 <memset>
 80158c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158ca:	2200      	movs	r2, #0
 80158cc:	611a      	str	r2, [r3, #16]
 80158ce:	6a18      	ldr	r0, [r3, #32]
 80158d0:	b138      	cbz	r0, 80158e2 <rcl_wait_set_clear+0xc2>
 80158d2:	69da      	ldr	r2, [r3, #28]
 80158d4:	2100      	movs	r1, #0
 80158d6:	0092      	lsls	r2, r2, #2
 80158d8:	f004 fe52 	bl	801a580 <memset>
 80158dc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158de:	2200      	movs	r2, #0
 80158e0:	61da      	str	r2, [r3, #28]
 80158e2:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80158e4:	b138      	cbz	r0, 80158f6 <rcl_wait_set_clear+0xd6>
 80158e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80158e8:	2100      	movs	r1, #0
 80158ea:	0092      	lsls	r2, r2, #2
 80158ec:	f004 fe48 	bl	801a580 <memset>
 80158f0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80158f2:	2200      	movs	r2, #0
 80158f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80158f6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80158f8:	b138      	cbz	r0, 801590a <rcl_wait_set_clear+0xea>
 80158fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80158fc:	2100      	movs	r1, #0
 80158fe:	0092      	lsls	r2, r2, #2
 8015900:	f004 fe3e 	bl	801a580 <memset>
 8015904:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015906:	2000      	movs	r0, #0
 8015908:	6358      	str	r0, [r3, #52]	@ 0x34
 801590a:	bd10      	pop	{r4, pc}
 801590c:	200b      	movs	r0, #11
 801590e:	4770      	bx	lr
 8015910:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015914:	bd10      	pop	{r4, pc}
 8015916:	bf00      	nop

08015918 <rcl_wait_set_resize>:
 8015918:	2800      	cmp	r0, #0
 801591a:	f000 8185 	beq.w	8015c28 <rcl_wait_set_resize+0x310>
 801591e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015922:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8015924:	b083      	sub	sp, #12
 8015926:	4605      	mov	r5, r0
 8015928:	2c00      	cmp	r4, #0
 801592a:	f000 817f 	beq.w	8015c2c <rcl_wait_set_resize+0x314>
 801592e:	f04f 0900 	mov.w	r9, #0
 8015932:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 8015936:	461f      	mov	r7, r3
 8015938:	4688      	mov	r8, r1
 801593a:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 801593e:	4616      	mov	r6, r2
 8015940:	f8c0 9004 	str.w	r9, [r0, #4]
 8015944:	f8c4 9000 	str.w	r9, [r4]
 8015948:	2900      	cmp	r1, #0
 801594a:	f000 80bd 	beq.w	8015ac8 <rcl_wait_set_resize+0x1b0>
 801594e:	008c      	lsls	r4, r1, #2
 8015950:	6800      	ldr	r0, [r0, #0]
 8015952:	9301      	str	r3, [sp, #4]
 8015954:	4652      	mov	r2, sl
 8015956:	4621      	mov	r1, r4
 8015958:	4798      	blx	r3
 801595a:	9b01      	ldr	r3, [sp, #4]
 801595c:	6028      	str	r0, [r5, #0]
 801595e:	2800      	cmp	r0, #0
 8015960:	f000 80cb 	beq.w	8015afa <rcl_wait_set_resize+0x1e2>
 8015964:	4622      	mov	r2, r4
 8015966:	4649      	mov	r1, r9
 8015968:	9301      	str	r3, [sp, #4]
 801596a:	f004 fe09 	bl	801a580 <memset>
 801596e:	f8c5 8004 	str.w	r8, [r5, #4]
 8015972:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8015976:	9b01      	ldr	r3, [sp, #4]
 8015978:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801597c:	f8c8 9004 	str.w	r9, [r8, #4]
 8015980:	4652      	mov	r2, sl
 8015982:	4621      	mov	r1, r4
 8015984:	4798      	blx	r3
 8015986:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015988:	f8c8 0008 	str.w	r0, [r8, #8]
 801598c:	689b      	ldr	r3, [r3, #8]
 801598e:	2b00      	cmp	r3, #0
 8015990:	f000 80ac 	beq.w	8015aec <rcl_wait_set_resize+0x1d4>
 8015994:	4622      	mov	r2, r4
 8015996:	4649      	mov	r1, r9
 8015998:	4618      	mov	r0, r3
 801599a:	f004 fdf1 	bl	801a580 <memset>
 801599e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159a0:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80159a4:	f04f 0800 	mov.w	r8, #0
 80159a8:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 80159ac:	f8c5 800c 	str.w	r8, [r5, #12]
 80159b0:	f8c4 800c 	str.w	r8, [r4, #12]
 80159b4:	2e00      	cmp	r6, #0
 80159b6:	f040 80a4 	bne.w	8015b02 <rcl_wait_set_resize+0x1ea>
 80159ba:	68a8      	ldr	r0, [r5, #8]
 80159bc:	b128      	cbz	r0, 80159ca <rcl_wait_set_resize+0xb2>
 80159be:	4649      	mov	r1, r9
 80159c0:	4790      	blx	r2
 80159c2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159c4:	60ae      	str	r6, [r5, #8]
 80159c6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80159ca:	f04f 0800 	mov.w	r8, #0
 80159ce:	19f6      	adds	r6, r6, r7
 80159d0:	f8c4 8010 	str.w	r8, [r4, #16]
 80159d4:	f040 80ac 	bne.w	8015b30 <rcl_wait_set_resize+0x218>
 80159d8:	6960      	ldr	r0, [r4, #20]
 80159da:	b130      	cbz	r0, 80159ea <rcl_wait_set_resize+0xd2>
 80159dc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80159de:	4649      	mov	r1, r9
 80159e0:	4798      	blx	r3
 80159e2:	6166      	str	r6, [r4, #20]
 80159e4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80159e6:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80159ea:	2600      	movs	r6, #0
 80159ec:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80159f0:	616e      	str	r6, [r5, #20]
 80159f2:	6426      	str	r6, [r4, #64]	@ 0x40
 80159f4:	2f00      	cmp	r7, #0
 80159f6:	f040 80ad 	bne.w	8015b54 <rcl_wait_set_resize+0x23c>
 80159fa:	6928      	ldr	r0, [r5, #16]
 80159fc:	b138      	cbz	r0, 8015a0e <rcl_wait_set_resize+0xf6>
 80159fe:	4649      	mov	r1, r9
 8015a00:	47d0      	blx	sl
 8015a02:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a04:	612f      	str	r7, [r5, #16]
 8015a06:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015a0a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015a0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a10:	2600      	movs	r6, #0
 8015a12:	61ee      	str	r6, [r5, #28]
 8015a14:	61a6      	str	r6, [r4, #24]
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	f040 80af 	bne.w	8015b7a <rcl_wait_set_resize+0x262>
 8015a1c:	69a8      	ldr	r0, [r5, #24]
 8015a1e:	b120      	cbz	r0, 8015a2a <rcl_wait_set_resize+0x112>
 8015a20:	4649      	mov	r1, r9
 8015a22:	47d0      	blx	sl
 8015a24:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a26:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a28:	61ab      	str	r3, [r5, #24]
 8015a2a:	6a20      	ldr	r0, [r4, #32]
 8015a2c:	b128      	cbz	r0, 8015a3a <rcl_wait_set_resize+0x122>
 8015a2e:	4649      	mov	r1, r9
 8015a30:	47d0      	blx	sl
 8015a32:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a34:	2300      	movs	r3, #0
 8015a36:	e9c4 3307 	strd	r3, r3, [r4, #28]
 8015a3a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a3c:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015a3e:	2600      	movs	r6, #0
 8015a40:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015a44:	626e      	str	r6, [r5, #36]	@ 0x24
 8015a46:	6266      	str	r6, [r4, #36]	@ 0x24
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	f000 80b6 	beq.w	8015bba <rcl_wait_set_resize+0x2a2>
 8015a4e:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8015a52:	6a28      	ldr	r0, [r5, #32]
 8015a54:	463a      	mov	r2, r7
 8015a56:	4651      	mov	r1, sl
 8015a58:	47c8      	blx	r9
 8015a5a:	6228      	str	r0, [r5, #32]
 8015a5c:	2800      	cmp	r0, #0
 8015a5e:	d04c      	beq.n	8015afa <rcl_wait_set_resize+0x1e2>
 8015a60:	4652      	mov	r2, sl
 8015a62:	4631      	mov	r1, r6
 8015a64:	f004 fd8c 	bl	801a580 <memset>
 8015a68:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a6c:	626b      	str	r3, [r5, #36]	@ 0x24
 8015a6e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015a70:	62a6      	str	r6, [r4, #40]	@ 0x28
 8015a72:	463a      	mov	r2, r7
 8015a74:	4651      	mov	r1, sl
 8015a76:	47c8      	blx	r9
 8015a78:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015a7a:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8015a7c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8015a7e:	2c00      	cmp	r4, #0
 8015a80:	f000 80f0 	beq.w	8015c64 <rcl_wait_set_resize+0x34c>
 8015a84:	4620      	mov	r0, r4
 8015a86:	4652      	mov	r2, sl
 8015a88:	4631      	mov	r1, r6
 8015a8a:	f004 fd79 	bl	801a580 <memset>
 8015a8e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015a90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015a92:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8015a94:	2600      	movs	r6, #0
 8015a96:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8015a9a:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8015a9c:	6326      	str	r6, [r4, #48]	@ 0x30
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	f040 809d 	bne.w	8015bde <rcl_wait_set_resize+0x2c6>
 8015aa4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015aa6:	b120      	cbz	r0, 8015ab2 <rcl_wait_set_resize+0x19a>
 8015aa8:	4639      	mov	r1, r7
 8015aaa:	47c0      	blx	r8
 8015aac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015aae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015ab0:	62ab      	str	r3, [r5, #40]	@ 0x28
 8015ab2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8015ab4:	b310      	cbz	r0, 8015afc <rcl_wait_set_resize+0x1e4>
 8015ab6:	4639      	mov	r1, r7
 8015ab8:	47c0      	blx	r8
 8015aba:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015abc:	2000      	movs	r0, #0
 8015abe:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8015ac2:	b003      	add	sp, #12
 8015ac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ac8:	6800      	ldr	r0, [r0, #0]
 8015aca:	b120      	cbz	r0, 8015ad6 <rcl_wait_set_resize+0x1be>
 8015acc:	4651      	mov	r1, sl
 8015ace:	47d8      	blx	fp
 8015ad0:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015ad2:	f8c5 8000 	str.w	r8, [r5]
 8015ad6:	68a0      	ldr	r0, [r4, #8]
 8015ad8:	2800      	cmp	r0, #0
 8015ada:	f43f af61 	beq.w	80159a0 <rcl_wait_set_resize+0x88>
 8015ade:	4651      	mov	r1, sl
 8015ae0:	47d8      	blx	fp
 8015ae2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8015aea:	e759      	b.n	80159a0 <rcl_wait_set_resize+0x88>
 8015aec:	6828      	ldr	r0, [r5, #0]
 8015aee:	9301      	str	r3, [sp, #4]
 8015af0:	4651      	mov	r1, sl
 8015af2:	47d8      	blx	fp
 8015af4:	9b01      	ldr	r3, [sp, #4]
 8015af6:	e9c5 3300 	strd	r3, r3, [r5]
 8015afa:	200a      	movs	r0, #10
 8015afc:	b003      	add	sp, #12
 8015afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b02:	00b4      	lsls	r4, r6, #2
 8015b04:	68a8      	ldr	r0, [r5, #8]
 8015b06:	464a      	mov	r2, r9
 8015b08:	4621      	mov	r1, r4
 8015b0a:	4798      	blx	r3
 8015b0c:	60a8      	str	r0, [r5, #8]
 8015b0e:	2800      	cmp	r0, #0
 8015b10:	d0f3      	beq.n	8015afa <rcl_wait_set_resize+0x1e2>
 8015b12:	4622      	mov	r2, r4
 8015b14:	4641      	mov	r1, r8
 8015b16:	f004 fd33 	bl	801a580 <memset>
 8015b1a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b1c:	60ee      	str	r6, [r5, #12]
 8015b1e:	f04f 0800 	mov.w	r8, #0
 8015b22:	19f6      	adds	r6, r6, r7
 8015b24:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015b28:	f8c4 8010 	str.w	r8, [r4, #16]
 8015b2c:	f43f af54 	beq.w	80159d8 <rcl_wait_set_resize+0xc0>
 8015b30:	00b6      	lsls	r6, r6, #2
 8015b32:	464a      	mov	r2, r9
 8015b34:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8015b36:	6960      	ldr	r0, [r4, #20]
 8015b38:	4631      	mov	r1, r6
 8015b3a:	4798      	blx	r3
 8015b3c:	4681      	mov	r9, r0
 8015b3e:	6160      	str	r0, [r4, #20]
 8015b40:	2800      	cmp	r0, #0
 8015b42:	d076      	beq.n	8015c32 <rcl_wait_set_resize+0x31a>
 8015b44:	4632      	mov	r2, r6
 8015b46:	4641      	mov	r1, r8
 8015b48:	f004 fd1a 	bl	801a580 <memset>
 8015b4c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b4e:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015b52:	e74a      	b.n	80159ea <rcl_wait_set_resize+0xd2>
 8015b54:	00bc      	lsls	r4, r7, #2
 8015b56:	6928      	ldr	r0, [r5, #16]
 8015b58:	464a      	mov	r2, r9
 8015b5a:	4621      	mov	r1, r4
 8015b5c:	47c0      	blx	r8
 8015b5e:	6128      	str	r0, [r5, #16]
 8015b60:	2800      	cmp	r0, #0
 8015b62:	d0ca      	beq.n	8015afa <rcl_wait_set_resize+0x1e2>
 8015b64:	4622      	mov	r2, r4
 8015b66:	4631      	mov	r1, r6
 8015b68:	f004 fd0a 	bl	801a580 <memset>
 8015b6c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015b6e:	616f      	str	r7, [r5, #20]
 8015b70:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8015b74:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8015b78:	e749      	b.n	8015a0e <rcl_wait_set_resize+0xf6>
 8015b7a:	009c      	lsls	r4, r3, #2
 8015b7c:	69a8      	ldr	r0, [r5, #24]
 8015b7e:	464a      	mov	r2, r9
 8015b80:	4621      	mov	r1, r4
 8015b82:	47c0      	blx	r8
 8015b84:	61a8      	str	r0, [r5, #24]
 8015b86:	2800      	cmp	r0, #0
 8015b88:	d0b7      	beq.n	8015afa <rcl_wait_set_resize+0x1e2>
 8015b8a:	4622      	mov	r2, r4
 8015b8c:	4631      	mov	r1, r6
 8015b8e:	f004 fcf7 	bl	801a580 <memset>
 8015b92:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8015b94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b96:	61eb      	str	r3, [r5, #28]
 8015b98:	6a38      	ldr	r0, [r7, #32]
 8015b9a:	61fe      	str	r6, [r7, #28]
 8015b9c:	464a      	mov	r2, r9
 8015b9e:	4621      	mov	r1, r4
 8015ba0:	47c0      	blx	r8
 8015ba2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015ba4:	6238      	str	r0, [r7, #32]
 8015ba6:	6a1f      	ldr	r7, [r3, #32]
 8015ba8:	2f00      	cmp	r7, #0
 8015baa:	d054      	beq.n	8015c56 <rcl_wait_set_resize+0x33e>
 8015bac:	4622      	mov	r2, r4
 8015bae:	4631      	mov	r1, r6
 8015bb0:	4638      	mov	r0, r7
 8015bb2:	f004 fce5 	bl	801a580 <memset>
 8015bb6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bb8:	e73f      	b.n	8015a3a <rcl_wait_set_resize+0x122>
 8015bba:	6a28      	ldr	r0, [r5, #32]
 8015bbc:	b120      	cbz	r0, 8015bc8 <rcl_wait_set_resize+0x2b0>
 8015bbe:	4639      	mov	r1, r7
 8015bc0:	47c0      	blx	r8
 8015bc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015bc4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bc6:	622b      	str	r3, [r5, #32]
 8015bc8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8015bca:	2800      	cmp	r0, #0
 8015bcc:	f43f af60 	beq.w	8015a90 <rcl_wait_set_resize+0x178>
 8015bd0:	4639      	mov	r1, r7
 8015bd2:	47c0      	blx	r8
 8015bd4:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 8015bdc:	e758      	b.n	8015a90 <rcl_wait_set_resize+0x178>
 8015bde:	009c      	lsls	r4, r3, #2
 8015be0:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015be2:	463a      	mov	r2, r7
 8015be4:	4621      	mov	r1, r4
 8015be6:	47c8      	blx	r9
 8015be8:	62a8      	str	r0, [r5, #40]	@ 0x28
 8015bea:	2800      	cmp	r0, #0
 8015bec:	d085      	beq.n	8015afa <rcl_wait_set_resize+0x1e2>
 8015bee:	4622      	mov	r2, r4
 8015bf0:	4631      	mov	r1, r6
 8015bf2:	f004 fcc5 	bl	801a580 <memset>
 8015bf6:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 8015bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015bfc:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8015bfe:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 8015c02:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 8015c06:	463a      	mov	r2, r7
 8015c08:	4621      	mov	r1, r4
 8015c0a:	47c8      	blx	r9
 8015c0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c0e:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 8015c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015c14:	b36b      	cbz	r3, 8015c72 <rcl_wait_set_resize+0x35a>
 8015c16:	4622      	mov	r2, r4
 8015c18:	4631      	mov	r1, r6
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f004 fcb0 	bl	801a580 <memset>
 8015c20:	4630      	mov	r0, r6
 8015c22:	b003      	add	sp, #12
 8015c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c28:	200b      	movs	r0, #11
 8015c2a:	4770      	bx	lr
 8015c2c:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015c30:	e764      	b.n	8015afc <rcl_wait_set_resize+0x1e4>
 8015c32:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c34:	68a8      	ldr	r0, [r5, #8]
 8015c36:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015c3a:	4798      	blx	r3
 8015c3c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8015c3e:	6928      	ldr	r0, [r5, #16]
 8015c40:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015c42:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8015c44:	f8c5 900c 	str.w	r9, [r5, #12]
 8015c48:	f8c5 9008 	str.w	r9, [r5, #8]
 8015c4c:	4790      	blx	r2
 8015c4e:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8015c52:	200a      	movs	r0, #10
 8015c54:	e752      	b.n	8015afc <rcl_wait_set_resize+0x1e4>
 8015c56:	69a8      	ldr	r0, [r5, #24]
 8015c58:	4649      	mov	r1, r9
 8015c5a:	47d0      	blx	sl
 8015c5c:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8015c60:	200a      	movs	r0, #10
 8015c62:	e74b      	b.n	8015afc <rcl_wait_set_resize+0x1e4>
 8015c64:	6a28      	ldr	r0, [r5, #32]
 8015c66:	4639      	mov	r1, r7
 8015c68:	47c0      	blx	r8
 8015c6a:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8015c6e:	200a      	movs	r0, #10
 8015c70:	e744      	b.n	8015afc <rcl_wait_set_resize+0x1e4>
 8015c72:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8015c74:	9301      	str	r3, [sp, #4]
 8015c76:	4639      	mov	r1, r7
 8015c78:	47c0      	blx	r8
 8015c7a:	9b01      	ldr	r3, [sp, #4]
 8015c7c:	200a      	movs	r0, #10
 8015c7e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8015c82:	e73b      	b.n	8015afc <rcl_wait_set_resize+0x1e4>

08015c84 <rcl_wait_set_init>:
 8015c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c88:	b084      	sub	sp, #16
 8015c8a:	4604      	mov	r4, r0
 8015c8c:	a810      	add	r0, sp, #64	@ 0x40
 8015c8e:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8015c92:	460f      	mov	r7, r1
 8015c94:	4690      	mov	r8, r2
 8015c96:	4699      	mov	r9, r3
 8015c98:	f7f8 f9ac 	bl	800dff4 <rcutils_allocator_is_valid>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	d06b      	beq.n	8015d78 <rcl_wait_set_init+0xf4>
 8015ca0:	2c00      	cmp	r4, #0
 8015ca2:	d069      	beq.n	8015d78 <rcl_wait_set_init+0xf4>
 8015ca4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8015ca6:	b125      	cbz	r5, 8015cb2 <rcl_wait_set_init+0x2e>
 8015ca8:	2564      	movs	r5, #100	@ 0x64
 8015caa:	4628      	mov	r0, r5
 8015cac:	b004      	add	sp, #16
 8015cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015cb2:	f1ba 0f00 	cmp.w	sl, #0
 8015cb6:	d05f      	beq.n	8015d78 <rcl_wait_set_init+0xf4>
 8015cb8:	4650      	mov	r0, sl
 8015cba:	f7fe fc89 	bl	80145d0 <rcl_context_is_valid>
 8015cbe:	2800      	cmp	r0, #0
 8015cc0:	d067      	beq.n	8015d92 <rcl_wait_set_init+0x10e>
 8015cc2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8015cc4:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8015cc6:	205c      	movs	r0, #92	@ 0x5c
 8015cc8:	4798      	blx	r3
 8015cca:	6320      	str	r0, [r4, #48]	@ 0x30
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	d062      	beq.n	8015d96 <rcl_wait_set_init+0x112>
 8015cd0:	4629      	mov	r1, r5
 8015cd2:	225c      	movs	r2, #92	@ 0x5c
 8015cd4:	f004 fc54 	bl	801a580 <memset>
 8015cd8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 8015cdc:	eb03 0e02 	add.w	lr, r3, r2
 8015ce0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ce2:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8015ce4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8015ce8:	449e      	add	lr, r3
 8015cea:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015cee:	e9c6 5501 	strd	r5, r5, [r6, #4]
 8015cf2:	e9c6 5504 	strd	r5, r5, [r6, #16]
 8015cf6:	e9c6 5507 	strd	r5, r5, [r6, #28]
 8015cfa:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 8015cfe:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 8015d02:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 8015d06:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 8015d0a:	f8da a000 	ldr.w	sl, [sl]
 8015d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8015d10:	44c6      	add	lr, r8
 8015d12:	f8dc 3000 	ldr.w	r3, [ip]
 8015d16:	602b      	str	r3, [r5, #0]
 8015d18:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 8015d1c:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 8015d20:	f002 f9ec 	bl	80180fc <rmw_create_wait_set>
 8015d24:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d26:	63f0      	str	r0, [r6, #60]	@ 0x3c
 8015d28:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015d2a:	b350      	cbz	r0, 8015d82 <rcl_wait_set_init+0xfe>
 8015d2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015d2e:	9302      	str	r3, [sp, #8]
 8015d30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015d32:	9301      	str	r3, [sp, #4]
 8015d34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d36:	9300      	str	r3, [sp, #0]
 8015d38:	4642      	mov	r2, r8
 8015d3a:	464b      	mov	r3, r9
 8015d3c:	4639      	mov	r1, r7
 8015d3e:	4620      	mov	r0, r4
 8015d40:	f7ff fdea 	bl	8015918 <rcl_wait_set_resize>
 8015d44:	4605      	mov	r5, r0
 8015d46:	2800      	cmp	r0, #0
 8015d48:	d0af      	beq.n	8015caa <rcl_wait_set_init+0x26>
 8015d4a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015d4c:	bb2b      	cbnz	r3, 8015d9a <rcl_wait_set_init+0x116>
 8015d4e:	2600      	movs	r6, #0
 8015d50:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8015d54:	9600      	str	r6, [sp, #0]
 8015d56:	4633      	mov	r3, r6
 8015d58:	4632      	mov	r2, r6
 8015d5a:	4631      	mov	r1, r6
 8015d5c:	4620      	mov	r0, r4
 8015d5e:	f7ff fddb 	bl	8015918 <rcl_wait_set_resize>
 8015d62:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8015d64:	2800      	cmp	r0, #0
 8015d66:	d0a0      	beq.n	8015caa <rcl_wait_set_init+0x26>
 8015d68:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015d6a:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8015d6c:	4798      	blx	r3
 8015d6e:	4628      	mov	r0, r5
 8015d70:	6326      	str	r6, [r4, #48]	@ 0x30
 8015d72:	b004      	add	sp, #16
 8015d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d78:	250b      	movs	r5, #11
 8015d7a:	4628      	mov	r0, r5
 8015d7c:	b004      	add	sp, #16
 8015d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d82:	2501      	movs	r5, #1
 8015d84:	f002 f9c4 	bl	8018110 <rmw_destroy_wait_set>
 8015d88:	2800      	cmp	r0, #0
 8015d8a:	bf18      	it	ne
 8015d8c:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8015d90:	e7dd      	b.n	8015d4e <rcl_wait_set_init+0xca>
 8015d92:	2565      	movs	r5, #101	@ 0x65
 8015d94:	e789      	b.n	8015caa <rcl_wait_set_init+0x26>
 8015d96:	250a      	movs	r5, #10
 8015d98:	e787      	b.n	8015caa <rcl_wait_set_init+0x26>
 8015d9a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015d9c:	e7f2      	b.n	8015d84 <rcl_wait_set_init+0x100>
 8015d9e:	bf00      	nop

08015da0 <rcl_wait_set_add_guard_condition>:
 8015da0:	b318      	cbz	r0, 8015dea <rcl_wait_set_add_guard_condition+0x4a>
 8015da2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015da4:	b570      	push	{r4, r5, r6, lr}
 8015da6:	4604      	mov	r4, r0
 8015da8:	b30b      	cbz	r3, 8015dee <rcl_wait_set_add_guard_condition+0x4e>
 8015daa:	b319      	cbz	r1, 8015df4 <rcl_wait_set_add_guard_condition+0x54>
 8015dac:	68dd      	ldr	r5, [r3, #12]
 8015dae:	68c0      	ldr	r0, [r0, #12]
 8015db0:	4285      	cmp	r5, r0
 8015db2:	d217      	bcs.n	8015de4 <rcl_wait_set_add_guard_condition+0x44>
 8015db4:	68a0      	ldr	r0, [r4, #8]
 8015db6:	1c6e      	adds	r6, r5, #1
 8015db8:	60de      	str	r6, [r3, #12]
 8015dba:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015dbe:	b102      	cbz	r2, 8015dc2 <rcl_wait_set_add_guard_condition+0x22>
 8015dc0:	6015      	str	r5, [r2, #0]
 8015dc2:	4608      	mov	r0, r1
 8015dc4:	f003 fd7e 	bl	80198c4 <rcl_guard_condition_get_rmw_handle>
 8015dc8:	b150      	cbz	r0, 8015de0 <rcl_wait_set_add_guard_condition+0x40>
 8015dca:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015dcc:	6842      	ldr	r2, [r0, #4]
 8015dce:	695b      	ldr	r3, [r3, #20]
 8015dd0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015dd4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015dd6:	6913      	ldr	r3, [r2, #16]
 8015dd8:	3301      	adds	r3, #1
 8015dda:	2000      	movs	r0, #0
 8015ddc:	6113      	str	r3, [r2, #16]
 8015dde:	bd70      	pop	{r4, r5, r6, pc}
 8015de0:	2001      	movs	r0, #1
 8015de2:	bd70      	pop	{r4, r5, r6, pc}
 8015de4:	f240 3086 	movw	r0, #902	@ 0x386
 8015de8:	bd70      	pop	{r4, r5, r6, pc}
 8015dea:	200b      	movs	r0, #11
 8015dec:	4770      	bx	lr
 8015dee:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015df2:	bd70      	pop	{r4, r5, r6, pc}
 8015df4:	200b      	movs	r0, #11
 8015df6:	bd70      	pop	{r4, r5, r6, pc}

08015df8 <rcl_wait_set_add_timer>:
 8015df8:	b328      	cbz	r0, 8015e46 <rcl_wait_set_add_timer+0x4e>
 8015dfa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015dfc:	b570      	push	{r4, r5, r6, lr}
 8015dfe:	4604      	mov	r4, r0
 8015e00:	b31b      	cbz	r3, 8015e4a <rcl_wait_set_add_timer+0x52>
 8015e02:	b329      	cbz	r1, 8015e50 <rcl_wait_set_add_timer+0x58>
 8015e04:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8015e06:	6965      	ldr	r5, [r4, #20]
 8015e08:	42a8      	cmp	r0, r5
 8015e0a:	d219      	bcs.n	8015e40 <rcl_wait_set_add_timer+0x48>
 8015e0c:	6925      	ldr	r5, [r4, #16]
 8015e0e:	1c46      	adds	r6, r0, #1
 8015e10:	641e      	str	r6, [r3, #64]	@ 0x40
 8015e12:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8015e16:	b102      	cbz	r2, 8015e1a <rcl_wait_set_add_timer+0x22>
 8015e18:	6010      	str	r0, [r2, #0]
 8015e1a:	4608      	mov	r0, r1
 8015e1c:	f7ff fc10 	bl	8015640 <rcl_timer_get_guard_condition>
 8015e20:	b168      	cbz	r0, 8015e3e <rcl_wait_set_add_timer+0x46>
 8015e22:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e24:	68e3      	ldr	r3, [r4, #12]
 8015e26:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	441d      	add	r5, r3
 8015e2c:	f003 fd4a 	bl	80198c4 <rcl_guard_condition_get_rmw_handle>
 8015e30:	b180      	cbz	r0, 8015e54 <rcl_wait_set_add_timer+0x5c>
 8015e32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e34:	6842      	ldr	r2, [r0, #4]
 8015e36:	695b      	ldr	r3, [r3, #20]
 8015e38:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e3c:	2000      	movs	r0, #0
 8015e3e:	bd70      	pop	{r4, r5, r6, pc}
 8015e40:	f240 3086 	movw	r0, #902	@ 0x386
 8015e44:	bd70      	pop	{r4, r5, r6, pc}
 8015e46:	200b      	movs	r0, #11
 8015e48:	4770      	bx	lr
 8015e4a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015e4e:	bd70      	pop	{r4, r5, r6, pc}
 8015e50:	200b      	movs	r0, #11
 8015e52:	bd70      	pop	{r4, r5, r6, pc}
 8015e54:	2001      	movs	r0, #1
 8015e56:	bd70      	pop	{r4, r5, r6, pc}

08015e58 <rcl_wait_set_add_client>:
 8015e58:	b318      	cbz	r0, 8015ea2 <rcl_wait_set_add_client+0x4a>
 8015e5a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015e5c:	b570      	push	{r4, r5, r6, lr}
 8015e5e:	4604      	mov	r4, r0
 8015e60:	b30b      	cbz	r3, 8015ea6 <rcl_wait_set_add_client+0x4e>
 8015e62:	b319      	cbz	r1, 8015eac <rcl_wait_set_add_client+0x54>
 8015e64:	699d      	ldr	r5, [r3, #24]
 8015e66:	69c0      	ldr	r0, [r0, #28]
 8015e68:	4285      	cmp	r5, r0
 8015e6a:	d217      	bcs.n	8015e9c <rcl_wait_set_add_client+0x44>
 8015e6c:	69a0      	ldr	r0, [r4, #24]
 8015e6e:	1c6e      	adds	r6, r5, #1
 8015e70:	619e      	str	r6, [r3, #24]
 8015e72:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015e76:	b102      	cbz	r2, 8015e7a <rcl_wait_set_add_client+0x22>
 8015e78:	6015      	str	r5, [r2, #0]
 8015e7a:	4608      	mov	r0, r1
 8015e7c:	f7fe fafc 	bl	8014478 <rcl_client_get_rmw_handle>
 8015e80:	b150      	cbz	r0, 8015e98 <rcl_wait_set_add_client+0x40>
 8015e82:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015e84:	6842      	ldr	r2, [r0, #4]
 8015e86:	6a1b      	ldr	r3, [r3, #32]
 8015e88:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015e8c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015e8e:	69d3      	ldr	r3, [r2, #28]
 8015e90:	3301      	adds	r3, #1
 8015e92:	2000      	movs	r0, #0
 8015e94:	61d3      	str	r3, [r2, #28]
 8015e96:	bd70      	pop	{r4, r5, r6, pc}
 8015e98:	2001      	movs	r0, #1
 8015e9a:	bd70      	pop	{r4, r5, r6, pc}
 8015e9c:	f240 3086 	movw	r0, #902	@ 0x386
 8015ea0:	bd70      	pop	{r4, r5, r6, pc}
 8015ea2:	200b      	movs	r0, #11
 8015ea4:	4770      	bx	lr
 8015ea6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015eaa:	bd70      	pop	{r4, r5, r6, pc}
 8015eac:	200b      	movs	r0, #11
 8015eae:	bd70      	pop	{r4, r5, r6, pc}

08015eb0 <rcl_wait_set_add_service>:
 8015eb0:	b318      	cbz	r0, 8015efa <rcl_wait_set_add_service+0x4a>
 8015eb2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015eb4:	b570      	push	{r4, r5, r6, lr}
 8015eb6:	4604      	mov	r4, r0
 8015eb8:	b30b      	cbz	r3, 8015efe <rcl_wait_set_add_service+0x4e>
 8015eba:	b319      	cbz	r1, 8015f04 <rcl_wait_set_add_service+0x54>
 8015ebc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8015ebe:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8015ec0:	4285      	cmp	r5, r0
 8015ec2:	d217      	bcs.n	8015ef4 <rcl_wait_set_add_service+0x44>
 8015ec4:	6a20      	ldr	r0, [r4, #32]
 8015ec6:	1c6e      	adds	r6, r5, #1
 8015ec8:	625e      	str	r6, [r3, #36]	@ 0x24
 8015eca:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8015ece:	b102      	cbz	r2, 8015ed2 <rcl_wait_set_add_service+0x22>
 8015ed0:	6015      	str	r5, [r2, #0]
 8015ed2:	4608      	mov	r0, r1
 8015ed4:	f7fe ff3e 	bl	8014d54 <rcl_service_get_rmw_handle>
 8015ed8:	b150      	cbz	r0, 8015ef0 <rcl_wait_set_add_service+0x40>
 8015eda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8015edc:	6842      	ldr	r2, [r0, #4]
 8015ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ee0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015ee4:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8015ee6:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8015ee8:	3301      	adds	r3, #1
 8015eea:	2000      	movs	r0, #0
 8015eec:	6293      	str	r3, [r2, #40]	@ 0x28
 8015eee:	bd70      	pop	{r4, r5, r6, pc}
 8015ef0:	2001      	movs	r0, #1
 8015ef2:	bd70      	pop	{r4, r5, r6, pc}
 8015ef4:	f240 3086 	movw	r0, #902	@ 0x386
 8015ef8:	bd70      	pop	{r4, r5, r6, pc}
 8015efa:	200b      	movs	r0, #11
 8015efc:	4770      	bx	lr
 8015efe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8015f02:	bd70      	pop	{r4, r5, r6, pc}
 8015f04:	200b      	movs	r0, #11
 8015f06:	bd70      	pop	{r4, r5, r6, pc}

08015f08 <rcl_wait>:
 8015f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f0c:	ed2d 8b02 	vpush	{d8}
 8015f10:	b08d      	sub	sp, #52	@ 0x34
 8015f12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8015f16:	2800      	cmp	r0, #0
 8015f18:	f000 8143 	beq.w	80161a2 <rcl_wait+0x29a>
 8015f1c:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8015f1e:	4605      	mov	r5, r0
 8015f20:	2e00      	cmp	r6, #0
 8015f22:	f000 8112 	beq.w	801614a <rcl_wait+0x242>
 8015f26:	6843      	ldr	r3, [r0, #4]
 8015f28:	b983      	cbnz	r3, 8015f4c <rcl_wait+0x44>
 8015f2a:	68eb      	ldr	r3, [r5, #12]
 8015f2c:	b973      	cbnz	r3, 8015f4c <rcl_wait+0x44>
 8015f2e:	696b      	ldr	r3, [r5, #20]
 8015f30:	b963      	cbnz	r3, 8015f4c <rcl_wait+0x44>
 8015f32:	69eb      	ldr	r3, [r5, #28]
 8015f34:	b953      	cbnz	r3, 8015f4c <rcl_wait+0x44>
 8015f36:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8015f38:	b943      	cbnz	r3, 8015f4c <rcl_wait+0x44>
 8015f3a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8015f3c:	b933      	cbnz	r3, 8015f4c <rcl_wait+0x44>
 8015f3e:	f240 3085 	movw	r0, #901	@ 0x385
 8015f42:	b00d      	add	sp, #52	@ 0x34
 8015f44:	ecbd 8b02 	vpop	{d8}
 8015f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4c:	9b04      	ldr	r3, [sp, #16]
 8015f4e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8015f50:	2b01      	cmp	r3, #1
 8015f52:	9b05      	ldr	r3, [sp, #20]
 8015f54:	f173 0300 	sbcs.w	r3, r3, #0
 8015f58:	f2c0 80f0 	blt.w	801613c <rcl_wait+0x234>
 8015f5c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8015f60:	4643      	mov	r3, r8
 8015f62:	2a00      	cmp	r2, #0
 8015f64:	f000 8133 	beq.w	80161ce <rcl_wait+0x2c6>
 8015f68:	2400      	movs	r4, #0
 8015f6a:	4613      	mov	r3, r2
 8015f6c:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 80161e0 <rcl_wait+0x2d8>
 8015f70:	46a2      	mov	sl, r4
 8015f72:	46a3      	mov	fp, r4
 8015f74:	f240 3921 	movw	r9, #801	@ 0x321
 8015f78:	4632      	mov	r2, r6
 8015f7a:	e014      	b.n	8015fa6 <rcl_wait+0x9e>
 8015f7c:	2800      	cmp	r0, #0
 8015f7e:	d1e0      	bne.n	8015f42 <rcl_wait+0x3a>
 8015f80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015f84:	4542      	cmp	r2, r8
 8015f86:	eb73 0107 	sbcs.w	r1, r3, r7
 8015f8a:	da03      	bge.n	8015f94 <rcl_wait+0x8c>
 8015f8c:	4690      	mov	r8, r2
 8015f8e:	461f      	mov	r7, r3
 8015f90:	f04f 0b01 	mov.w	fp, #1
 8015f94:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015f96:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015f98:	3401      	adds	r4, #1
 8015f9a:	f14a 0a00 	adc.w	sl, sl, #0
 8015f9e:	429c      	cmp	r4, r3
 8015fa0:	f17a 0100 	sbcs.w	r1, sl, #0
 8015fa4:	d228      	bcs.n	8015ff8 <rcl_wait+0xf0>
 8015fa6:	6928      	ldr	r0, [r5, #16]
 8015fa8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8015fac:	a908      	add	r1, sp, #32
 8015fae:	00a6      	lsls	r6, r4, #2
 8015fb0:	2800      	cmp	r0, #0
 8015fb2:	d0f1      	beq.n	8015f98 <rcl_wait+0x90>
 8015fb4:	68eb      	ldr	r3, [r5, #12]
 8015fb6:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8015fba:	4423      	add	r3, r4
 8015fbc:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8015fc0:	f1be 0f00 	cmp.w	lr, #0
 8015fc4:	d006      	beq.n	8015fd4 <rcl_wait+0xcc>
 8015fc6:	6913      	ldr	r3, [r2, #16]
 8015fc8:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8015fcc:	3301      	adds	r3, #1
 8015fce:	6113      	str	r3, [r2, #16]
 8015fd0:	692b      	ldr	r3, [r5, #16]
 8015fd2:	5998      	ldr	r0, [r3, r6]
 8015fd4:	ed8d 8b08 	vstr	d8, [sp, #32]
 8015fd8:	f7ff fb00 	bl	80155dc <rcl_timer_get_time_until_next_call>
 8015fdc:	4548      	cmp	r0, r9
 8015fde:	d1cd      	bne.n	8015f7c <rcl_wait+0x74>
 8015fe0:	692b      	ldr	r3, [r5, #16]
 8015fe2:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8015fe4:	2100      	movs	r1, #0
 8015fe6:	5199      	str	r1, [r3, r6]
 8015fe8:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8015fea:	3401      	adds	r4, #1
 8015fec:	f14a 0a00 	adc.w	sl, sl, #0
 8015ff0:	429c      	cmp	r4, r3
 8015ff2:	f17a 0100 	sbcs.w	r1, sl, #0
 8015ff6:	d3d6      	bcc.n	8015fa6 <rcl_wait+0x9e>
 8015ff8:	4616      	mov	r6, r2
 8015ffa:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8015ffe:	4313      	orrs	r3, r2
 8016000:	46d9      	mov	r9, fp
 8016002:	f040 80a9 	bne.w	8016158 <rcl_wait+0x250>
 8016006:	2300      	movs	r3, #0
 8016008:	2200      	movs	r2, #0
 801600a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801600e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016012:	ab08      	add	r3, sp, #32
 8016014:	9302      	str	r3, [sp, #8]
 8016016:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8016018:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 801601c:	e9cd 3200 	strd	r3, r2, [sp]
 8016020:	f106 0110 	add.w	r1, r6, #16
 8016024:	f106 031c 	add.w	r3, r6, #28
 8016028:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 801602c:	1d30      	adds	r0, r6, #4
 801602e:	f001 feed 	bl	8017e0c <rmw_wait>
 8016032:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016034:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016036:	4680      	mov	r8, r0
 8016038:	b1ca      	cbz	r2, 801606e <rcl_wait+0x166>
 801603a:	2400      	movs	r4, #0
 801603c:	4627      	mov	r7, r4
 801603e:	692a      	ldr	r2, [r5, #16]
 8016040:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8016044:	f10d 011f 	add.w	r1, sp, #31
 8016048:	00a6      	lsls	r6, r4, #2
 801604a:	b160      	cbz	r0, 8016066 <rcl_wait+0x15e>
 801604c:	f88d 701f 	strb.w	r7, [sp, #31]
 8016050:	f7ff fa8a 	bl	8015568 <rcl_timer_is_ready>
 8016054:	2800      	cmp	r0, #0
 8016056:	f47f af74 	bne.w	8015f42 <rcl_wait+0x3a>
 801605a:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801605e:	b90b      	cbnz	r3, 8016064 <rcl_wait+0x15c>
 8016060:	692a      	ldr	r2, [r5, #16]
 8016062:	5193      	str	r3, [r2, r6]
 8016064:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8016066:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016068:	3401      	adds	r4, #1
 801606a:	42a2      	cmp	r2, r4
 801606c:	d8e7      	bhi.n	801603e <rcl_wait+0x136>
 801606e:	f038 0002 	bics.w	r0, r8, #2
 8016072:	f040 8090 	bne.w	8016196 <rcl_wait+0x28e>
 8016076:	686e      	ldr	r6, [r5, #4]
 8016078:	4602      	mov	r2, r0
 801607a:	b91e      	cbnz	r6, 8016084 <rcl_wait+0x17c>
 801607c:	e00d      	b.n	801609a <rcl_wait+0x192>
 801607e:	3201      	adds	r2, #1
 8016080:	42b2      	cmp	r2, r6
 8016082:	d00a      	beq.n	801609a <rcl_wait+0x192>
 8016084:	6899      	ldr	r1, [r3, #8]
 8016086:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801608a:	2900      	cmp	r1, #0
 801608c:	d1f7      	bne.n	801607e <rcl_wait+0x176>
 801608e:	682c      	ldr	r4, [r5, #0]
 8016090:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016094:	3201      	adds	r2, #1
 8016096:	42b2      	cmp	r2, r6
 8016098:	d1f4      	bne.n	8016084 <rcl_wait+0x17c>
 801609a:	68ee      	ldr	r6, [r5, #12]
 801609c:	2200      	movs	r2, #0
 801609e:	b91e      	cbnz	r6, 80160a8 <rcl_wait+0x1a0>
 80160a0:	e00d      	b.n	80160be <rcl_wait+0x1b6>
 80160a2:	3201      	adds	r2, #1
 80160a4:	42b2      	cmp	r2, r6
 80160a6:	d00a      	beq.n	80160be <rcl_wait+0x1b6>
 80160a8:	6959      	ldr	r1, [r3, #20]
 80160aa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80160ae:	2900      	cmp	r1, #0
 80160b0:	d1f7      	bne.n	80160a2 <rcl_wait+0x19a>
 80160b2:	68ac      	ldr	r4, [r5, #8]
 80160b4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80160b8:	3201      	adds	r2, #1
 80160ba:	42b2      	cmp	r2, r6
 80160bc:	d1f4      	bne.n	80160a8 <rcl_wait+0x1a0>
 80160be:	69ee      	ldr	r6, [r5, #28]
 80160c0:	2200      	movs	r2, #0
 80160c2:	b91e      	cbnz	r6, 80160cc <rcl_wait+0x1c4>
 80160c4:	e00d      	b.n	80160e2 <rcl_wait+0x1da>
 80160c6:	3201      	adds	r2, #1
 80160c8:	42b2      	cmp	r2, r6
 80160ca:	d00a      	beq.n	80160e2 <rcl_wait+0x1da>
 80160cc:	6a19      	ldr	r1, [r3, #32]
 80160ce:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80160d2:	2900      	cmp	r1, #0
 80160d4:	d1f7      	bne.n	80160c6 <rcl_wait+0x1be>
 80160d6:	69ac      	ldr	r4, [r5, #24]
 80160d8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 80160dc:	3201      	adds	r2, #1
 80160de:	42b2      	cmp	r2, r6
 80160e0:	d1f4      	bne.n	80160cc <rcl_wait+0x1c4>
 80160e2:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 80160e4:	2200      	movs	r2, #0
 80160e6:	b91e      	cbnz	r6, 80160f0 <rcl_wait+0x1e8>
 80160e8:	e00d      	b.n	8016106 <rcl_wait+0x1fe>
 80160ea:	3201      	adds	r2, #1
 80160ec:	4296      	cmp	r6, r2
 80160ee:	d00a      	beq.n	8016106 <rcl_wait+0x1fe>
 80160f0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80160f2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80160f6:	2900      	cmp	r1, #0
 80160f8:	d1f7      	bne.n	80160ea <rcl_wait+0x1e2>
 80160fa:	6a2c      	ldr	r4, [r5, #32]
 80160fc:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016100:	3201      	adds	r2, #1
 8016102:	4296      	cmp	r6, r2
 8016104:	d1f4      	bne.n	80160f0 <rcl_wait+0x1e8>
 8016106:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8016108:	2200      	movs	r2, #0
 801610a:	b91e      	cbnz	r6, 8016114 <rcl_wait+0x20c>
 801610c:	e00d      	b.n	801612a <rcl_wait+0x222>
 801610e:	3201      	adds	r2, #1
 8016110:	42b2      	cmp	r2, r6
 8016112:	d00a      	beq.n	801612a <rcl_wait+0x222>
 8016114:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8016116:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801611a:	2900      	cmp	r1, #0
 801611c:	d1f7      	bne.n	801610e <rcl_wait+0x206>
 801611e:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8016120:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8016124:	3201      	adds	r2, #1
 8016126:	42b2      	cmp	r2, r6
 8016128:	d1f4      	bne.n	8016114 <rcl_wait+0x20c>
 801612a:	f1b8 0f02 	cmp.w	r8, #2
 801612e:	f47f af08 	bne.w	8015f42 <rcl_wait+0x3a>
 8016132:	464b      	mov	r3, r9
 8016134:	2b00      	cmp	r3, #0
 8016136:	bf08      	it	eq
 8016138:	2002      	moveq	r0, #2
 801613a:	e702      	b.n	8015f42 <rcl_wait+0x3a>
 801613c:	2a00      	cmp	r2, #0
 801613e:	d03a      	beq.n	80161b6 <rcl_wait+0x2ae>
 8016140:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8016144:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8016148:	e70e      	b.n	8015f68 <rcl_wait+0x60>
 801614a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801614e:	b00d      	add	sp, #52	@ 0x34
 8016150:	ecbd 8b02 	vpop	{d8}
 8016154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016158:	9b04      	ldr	r3, [sp, #16]
 801615a:	2b01      	cmp	r3, #1
 801615c:	9b05      	ldr	r3, [sp, #20]
 801615e:	f173 0300 	sbcs.w	r3, r3, #0
 8016162:	db24      	blt.n	80161ae <rcl_wait+0x2a6>
 8016164:	2f00      	cmp	r7, #0
 8016166:	bfbc      	itt	lt
 8016168:	f04f 0800 	movlt.w	r8, #0
 801616c:	4647      	movlt	r7, r8
 801616e:	a31e      	add	r3, pc, #120	@ (adr r3, 80161e8 <rcl_wait+0x2e0>)
 8016170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016174:	4640      	mov	r0, r8
 8016176:	4639      	mov	r1, r7
 8016178:	f7ea fca8 	bl	8000acc <__aeabi_ldivmod>
 801617c:	a31a      	add	r3, pc, #104	@ (adr r3, 80161e8 <rcl_wait+0x2e0>)
 801617e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016182:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016186:	4640      	mov	r0, r8
 8016188:	4639      	mov	r1, r7
 801618a:	f7ea fc9f 	bl	8000acc <__aeabi_ldivmod>
 801618e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8016192:	ab08      	add	r3, sp, #32
 8016194:	e73e      	b.n	8016014 <rcl_wait+0x10c>
 8016196:	2001      	movs	r0, #1
 8016198:	b00d      	add	sp, #52	@ 0x34
 801619a:	ecbd 8b02 	vpop	{d8}
 801619e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a2:	200b      	movs	r0, #11
 80161a4:	b00d      	add	sp, #52	@ 0x34
 80161a6:	ecbd 8b02 	vpop	{d8}
 80161aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161ae:	465b      	mov	r3, fp
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d1d7      	bne.n	8016164 <rcl_wait+0x25c>
 80161b4:	e72e      	b.n	8016014 <rcl_wait+0x10c>
 80161b6:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80161ba:	430b      	orrs	r3, r1
 80161bc:	bf08      	it	eq
 80161be:	4691      	moveq	r9, r2
 80161c0:	f43f af21 	beq.w	8016006 <rcl_wait+0xfe>
 80161c4:	9b04      	ldr	r3, [sp, #16]
 80161c6:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 80161ca:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 80161ce:	2b01      	cmp	r3, #1
 80161d0:	9b05      	ldr	r3, [sp, #20]
 80161d2:	f173 0300 	sbcs.w	r3, r3, #0
 80161d6:	f04f 0300 	mov.w	r3, #0
 80161da:	4699      	mov	r9, r3
 80161dc:	dac2      	bge.n	8016164 <rcl_wait+0x25c>
 80161de:	e719      	b.n	8016014 <rcl_wait+0x10c>
 80161e0:	ffffffff 	.word	0xffffffff
 80161e4:	7fffffff 	.word	0x7fffffff
 80161e8:	3b9aca00 	.word	0x3b9aca00
 80161ec:	00000000 	.word	0x00000000

080161f0 <rcl_action_take_goal_response>:
 80161f0:	2800      	cmp	r0, #0
 80161f2:	d039      	beq.n	8016268 <rcl_action_take_goal_response+0x78>
 80161f4:	b570      	push	{r4, r5, r6, lr}
 80161f6:	4604      	mov	r4, r0
 80161f8:	6800      	ldr	r0, [r0, #0]
 80161fa:	b380      	cbz	r0, 801625e <rcl_action_take_goal_response+0x6e>
 80161fc:	460d      	mov	r5, r1
 80161fe:	4616      	mov	r6, r2
 8016200:	f7fe f9be 	bl	8014580 <rcl_client_is_valid>
 8016204:	b330      	cbz	r0, 8016254 <rcl_action_take_goal_response+0x64>
 8016206:	6820      	ldr	r0, [r4, #0]
 8016208:	3004      	adds	r0, #4
 801620a:	f7fe f9b9 	bl	8014580 <rcl_client_is_valid>
 801620e:	b308      	cbz	r0, 8016254 <rcl_action_take_goal_response+0x64>
 8016210:	6820      	ldr	r0, [r4, #0]
 8016212:	3008      	adds	r0, #8
 8016214:	f7fe f9b4 	bl	8014580 <rcl_client_is_valid>
 8016218:	b1e0      	cbz	r0, 8016254 <rcl_action_take_goal_response+0x64>
 801621a:	6820      	ldr	r0, [r4, #0]
 801621c:	300c      	adds	r0, #12
 801621e:	f7fe fe5f 	bl	8014ee0 <rcl_subscription_is_valid>
 8016222:	b1b8      	cbz	r0, 8016254 <rcl_action_take_goal_response+0x64>
 8016224:	6820      	ldr	r0, [r4, #0]
 8016226:	3010      	adds	r0, #16
 8016228:	f7fe fe5a 	bl	8014ee0 <rcl_subscription_is_valid>
 801622c:	b190      	cbz	r0, 8016254 <rcl_action_take_goal_response+0x64>
 801622e:	b1cd      	cbz	r5, 8016264 <rcl_action_take_goal_response+0x74>
 8016230:	b1c6      	cbz	r6, 8016264 <rcl_action_take_goal_response+0x74>
 8016232:	6820      	ldr	r0, [r4, #0]
 8016234:	4632      	mov	r2, r6
 8016236:	4629      	mov	r1, r5
 8016238:	f7fe f95a 	bl	80144f0 <rcl_take_response>
 801623c:	b148      	cbz	r0, 8016252 <rcl_action_take_goal_response+0x62>
 801623e:	280a      	cmp	r0, #10
 8016240:	d007      	beq.n	8016252 <rcl_action_take_goal_response+0x62>
 8016242:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016246:	f640 0337 	movw	r3, #2103	@ 0x837
 801624a:	4290      	cmp	r0, r2
 801624c:	bf0c      	ite	eq
 801624e:	4618      	moveq	r0, r3
 8016250:	2001      	movne	r0, #1
 8016252:	bd70      	pop	{r4, r5, r6, pc}
 8016254:	f7f7 fef4 	bl	800e040 <rcutils_reset_error>
 8016258:	f640 0036 	movw	r0, #2102	@ 0x836
 801625c:	bd70      	pop	{r4, r5, r6, pc}
 801625e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016262:	bd70      	pop	{r4, r5, r6, pc}
 8016264:	200b      	movs	r0, #11
 8016266:	bd70      	pop	{r4, r5, r6, pc}
 8016268:	f640 0036 	movw	r0, #2102	@ 0x836
 801626c:	4770      	bx	lr
 801626e:	bf00      	nop

08016270 <rcl_action_send_result_request>:
 8016270:	b390      	cbz	r0, 80162d8 <rcl_action_send_result_request+0x68>
 8016272:	b570      	push	{r4, r5, r6, lr}
 8016274:	4604      	mov	r4, r0
 8016276:	6800      	ldr	r0, [r0, #0]
 8016278:	b348      	cbz	r0, 80162ce <rcl_action_send_result_request+0x5e>
 801627a:	460d      	mov	r5, r1
 801627c:	4616      	mov	r6, r2
 801627e:	f7fe f97f 	bl	8014580 <rcl_client_is_valid>
 8016282:	b1f8      	cbz	r0, 80162c4 <rcl_action_send_result_request+0x54>
 8016284:	6820      	ldr	r0, [r4, #0]
 8016286:	3004      	adds	r0, #4
 8016288:	f7fe f97a 	bl	8014580 <rcl_client_is_valid>
 801628c:	b1d0      	cbz	r0, 80162c4 <rcl_action_send_result_request+0x54>
 801628e:	6820      	ldr	r0, [r4, #0]
 8016290:	3008      	adds	r0, #8
 8016292:	f7fe f975 	bl	8014580 <rcl_client_is_valid>
 8016296:	b1a8      	cbz	r0, 80162c4 <rcl_action_send_result_request+0x54>
 8016298:	6820      	ldr	r0, [r4, #0]
 801629a:	300c      	adds	r0, #12
 801629c:	f7fe fe20 	bl	8014ee0 <rcl_subscription_is_valid>
 80162a0:	b180      	cbz	r0, 80162c4 <rcl_action_send_result_request+0x54>
 80162a2:	6820      	ldr	r0, [r4, #0]
 80162a4:	3010      	adds	r0, #16
 80162a6:	f7fe fe1b 	bl	8014ee0 <rcl_subscription_is_valid>
 80162aa:	b158      	cbz	r0, 80162c4 <rcl_action_send_result_request+0x54>
 80162ac:	b195      	cbz	r5, 80162d4 <rcl_action_send_result_request+0x64>
 80162ae:	b18e      	cbz	r6, 80162d4 <rcl_action_send_result_request+0x64>
 80162b0:	6820      	ldr	r0, [r4, #0]
 80162b2:	4632      	mov	r2, r6
 80162b4:	4629      	mov	r1, r5
 80162b6:	3008      	adds	r0, #8
 80162b8:	f7fe f8e4 	bl	8014484 <rcl_send_request>
 80162bc:	3800      	subs	r0, #0
 80162be:	bf18      	it	ne
 80162c0:	2001      	movne	r0, #1
 80162c2:	bd70      	pop	{r4, r5, r6, pc}
 80162c4:	f7f7 febc 	bl	800e040 <rcutils_reset_error>
 80162c8:	f640 0036 	movw	r0, #2102	@ 0x836
 80162cc:	bd70      	pop	{r4, r5, r6, pc}
 80162ce:	f640 0036 	movw	r0, #2102	@ 0x836
 80162d2:	bd70      	pop	{r4, r5, r6, pc}
 80162d4:	200b      	movs	r0, #11
 80162d6:	bd70      	pop	{r4, r5, r6, pc}
 80162d8:	f640 0036 	movw	r0, #2102	@ 0x836
 80162dc:	4770      	bx	lr
 80162de:	bf00      	nop

080162e0 <rcl_action_take_result_response>:
 80162e0:	2800      	cmp	r0, #0
 80162e2:	d03a      	beq.n	801635a <rcl_action_take_result_response+0x7a>
 80162e4:	b570      	push	{r4, r5, r6, lr}
 80162e6:	4604      	mov	r4, r0
 80162e8:	6800      	ldr	r0, [r0, #0]
 80162ea:	b388      	cbz	r0, 8016350 <rcl_action_take_result_response+0x70>
 80162ec:	460d      	mov	r5, r1
 80162ee:	4616      	mov	r6, r2
 80162f0:	f7fe f946 	bl	8014580 <rcl_client_is_valid>
 80162f4:	b338      	cbz	r0, 8016346 <rcl_action_take_result_response+0x66>
 80162f6:	6820      	ldr	r0, [r4, #0]
 80162f8:	3004      	adds	r0, #4
 80162fa:	f7fe f941 	bl	8014580 <rcl_client_is_valid>
 80162fe:	b310      	cbz	r0, 8016346 <rcl_action_take_result_response+0x66>
 8016300:	6820      	ldr	r0, [r4, #0]
 8016302:	3008      	adds	r0, #8
 8016304:	f7fe f93c 	bl	8014580 <rcl_client_is_valid>
 8016308:	b1e8      	cbz	r0, 8016346 <rcl_action_take_result_response+0x66>
 801630a:	6820      	ldr	r0, [r4, #0]
 801630c:	300c      	adds	r0, #12
 801630e:	f7fe fde7 	bl	8014ee0 <rcl_subscription_is_valid>
 8016312:	b1c0      	cbz	r0, 8016346 <rcl_action_take_result_response+0x66>
 8016314:	6820      	ldr	r0, [r4, #0]
 8016316:	3010      	adds	r0, #16
 8016318:	f7fe fde2 	bl	8014ee0 <rcl_subscription_is_valid>
 801631c:	b198      	cbz	r0, 8016346 <rcl_action_take_result_response+0x66>
 801631e:	b1d5      	cbz	r5, 8016356 <rcl_action_take_result_response+0x76>
 8016320:	b1ce      	cbz	r6, 8016356 <rcl_action_take_result_response+0x76>
 8016322:	6820      	ldr	r0, [r4, #0]
 8016324:	4632      	mov	r2, r6
 8016326:	4629      	mov	r1, r5
 8016328:	3008      	adds	r0, #8
 801632a:	f7fe f8e1 	bl	80144f0 <rcl_take_response>
 801632e:	b148      	cbz	r0, 8016344 <rcl_action_take_result_response+0x64>
 8016330:	280a      	cmp	r0, #10
 8016332:	d007      	beq.n	8016344 <rcl_action_take_result_response+0x64>
 8016334:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8016338:	f640 0337 	movw	r3, #2103	@ 0x837
 801633c:	4290      	cmp	r0, r2
 801633e:	bf0c      	ite	eq
 8016340:	4618      	moveq	r0, r3
 8016342:	2001      	movne	r0, #1
 8016344:	bd70      	pop	{r4, r5, r6, pc}
 8016346:	f7f7 fe7b 	bl	800e040 <rcutils_reset_error>
 801634a:	f640 0036 	movw	r0, #2102	@ 0x836
 801634e:	bd70      	pop	{r4, r5, r6, pc}
 8016350:	f640 0036 	movw	r0, #2102	@ 0x836
 8016354:	bd70      	pop	{r4, r5, r6, pc}
 8016356:	200b      	movs	r0, #11
 8016358:	bd70      	pop	{r4, r5, r6, pc}
 801635a:	f640 0036 	movw	r0, #2102	@ 0x836
 801635e:	4770      	bx	lr

08016360 <rcl_action_take_cancel_response>:
 8016360:	2800      	cmp	r0, #0
 8016362:	d03a      	beq.n	80163da <rcl_action_take_cancel_response+0x7a>
 8016364:	b570      	push	{r4, r5, r6, lr}
 8016366:	4604      	mov	r4, r0
 8016368:	6800      	ldr	r0, [r0, #0]
 801636a:	b388      	cbz	r0, 80163d0 <rcl_action_take_cancel_response+0x70>
 801636c:	460d      	mov	r5, r1
 801636e:	4616      	mov	r6, r2
 8016370:	f7fe f906 	bl	8014580 <rcl_client_is_valid>
 8016374:	b338      	cbz	r0, 80163c6 <rcl_action_take_cancel_response+0x66>
 8016376:	6820      	ldr	r0, [r4, #0]
 8016378:	3004      	adds	r0, #4
 801637a:	f7fe f901 	bl	8014580 <rcl_client_is_valid>
 801637e:	b310      	cbz	r0, 80163c6 <rcl_action_take_cancel_response+0x66>
 8016380:	6820      	ldr	r0, [r4, #0]
 8016382:	3008      	adds	r0, #8
 8016384:	f7fe f8fc 	bl	8014580 <rcl_client_is_valid>
 8016388:	b1e8      	cbz	r0, 80163c6 <rcl_action_take_cancel_response+0x66>
 801638a:	6820      	ldr	r0, [r4, #0]
 801638c:	300c      	adds	r0, #12
 801638e:	f7fe fda7 	bl	8014ee0 <rcl_subscription_is_valid>
 8016392:	b1c0      	cbz	r0, 80163c6 <rcl_action_take_cancel_response+0x66>
 8016394:	6820      	ldr	r0, [r4, #0]
 8016396:	3010      	adds	r0, #16
 8016398:	f7fe fda2 	bl	8014ee0 <rcl_subscription_is_valid>
 801639c:	b198      	cbz	r0, 80163c6 <rcl_action_take_cancel_response+0x66>
 801639e:	b1d5      	cbz	r5, 80163d6 <rcl_action_take_cancel_response+0x76>
 80163a0:	b1ce      	cbz	r6, 80163d6 <rcl_action_take_cancel_response+0x76>
 80163a2:	6820      	ldr	r0, [r4, #0]
 80163a4:	4632      	mov	r2, r6
 80163a6:	4629      	mov	r1, r5
 80163a8:	3004      	adds	r0, #4
 80163aa:	f7fe f8a1 	bl	80144f0 <rcl_take_response>
 80163ae:	b148      	cbz	r0, 80163c4 <rcl_action_take_cancel_response+0x64>
 80163b0:	280a      	cmp	r0, #10
 80163b2:	d007      	beq.n	80163c4 <rcl_action_take_cancel_response+0x64>
 80163b4:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80163b8:	f640 0337 	movw	r3, #2103	@ 0x837
 80163bc:	4290      	cmp	r0, r2
 80163be:	bf0c      	ite	eq
 80163c0:	4618      	moveq	r0, r3
 80163c2:	2001      	movne	r0, #1
 80163c4:	bd70      	pop	{r4, r5, r6, pc}
 80163c6:	f7f7 fe3b 	bl	800e040 <rcutils_reset_error>
 80163ca:	f640 0036 	movw	r0, #2102	@ 0x836
 80163ce:	bd70      	pop	{r4, r5, r6, pc}
 80163d0:	f640 0036 	movw	r0, #2102	@ 0x836
 80163d4:	bd70      	pop	{r4, r5, r6, pc}
 80163d6:	200b      	movs	r0, #11
 80163d8:	bd70      	pop	{r4, r5, r6, pc}
 80163da:	f640 0036 	movw	r0, #2102	@ 0x836
 80163de:	4770      	bx	lr

080163e0 <rcl_action_take_feedback>:
 80163e0:	2800      	cmp	r0, #0
 80163e2:	d038      	beq.n	8016456 <rcl_action_take_feedback+0x76>
 80163e4:	b530      	push	{r4, r5, lr}
 80163e6:	4604      	mov	r4, r0
 80163e8:	6800      	ldr	r0, [r0, #0]
 80163ea:	b091      	sub	sp, #68	@ 0x44
 80163ec:	b378      	cbz	r0, 801644e <rcl_action_take_feedback+0x6e>
 80163ee:	460d      	mov	r5, r1
 80163f0:	f7fe f8c6 	bl	8014580 <rcl_client_is_valid>
 80163f4:	b328      	cbz	r0, 8016442 <rcl_action_take_feedback+0x62>
 80163f6:	6820      	ldr	r0, [r4, #0]
 80163f8:	3004      	adds	r0, #4
 80163fa:	f7fe f8c1 	bl	8014580 <rcl_client_is_valid>
 80163fe:	b300      	cbz	r0, 8016442 <rcl_action_take_feedback+0x62>
 8016400:	6820      	ldr	r0, [r4, #0]
 8016402:	3008      	adds	r0, #8
 8016404:	f7fe f8bc 	bl	8014580 <rcl_client_is_valid>
 8016408:	b1d8      	cbz	r0, 8016442 <rcl_action_take_feedback+0x62>
 801640a:	6820      	ldr	r0, [r4, #0]
 801640c:	300c      	adds	r0, #12
 801640e:	f7fe fd67 	bl	8014ee0 <rcl_subscription_is_valid>
 8016412:	b1b0      	cbz	r0, 8016442 <rcl_action_take_feedback+0x62>
 8016414:	6820      	ldr	r0, [r4, #0]
 8016416:	3010      	adds	r0, #16
 8016418:	f7fe fd62 	bl	8014ee0 <rcl_subscription_is_valid>
 801641c:	b188      	cbz	r0, 8016442 <rcl_action_take_feedback+0x62>
 801641e:	b1ed      	cbz	r5, 801645c <rcl_action_take_feedback+0x7c>
 8016420:	6820      	ldr	r0, [r4, #0]
 8016422:	2300      	movs	r3, #0
 8016424:	466a      	mov	r2, sp
 8016426:	4629      	mov	r1, r5
 8016428:	300c      	adds	r0, #12
 801642a:	f7fe fcfb 	bl	8014e24 <rcl_take>
 801642e:	b160      	cbz	r0, 801644a <rcl_action_take_feedback+0x6a>
 8016430:	f240 1391 	movw	r3, #401	@ 0x191
 8016434:	4298      	cmp	r0, r3
 8016436:	d014      	beq.n	8016462 <rcl_action_take_feedback+0x82>
 8016438:	280a      	cmp	r0, #10
 801643a:	bf18      	it	ne
 801643c:	2001      	movne	r0, #1
 801643e:	b011      	add	sp, #68	@ 0x44
 8016440:	bd30      	pop	{r4, r5, pc}
 8016442:	f7f7 fdfd 	bl	800e040 <rcutils_reset_error>
 8016446:	f640 0036 	movw	r0, #2102	@ 0x836
 801644a:	b011      	add	sp, #68	@ 0x44
 801644c:	bd30      	pop	{r4, r5, pc}
 801644e:	f640 0036 	movw	r0, #2102	@ 0x836
 8016452:	b011      	add	sp, #68	@ 0x44
 8016454:	bd30      	pop	{r4, r5, pc}
 8016456:	f640 0036 	movw	r0, #2102	@ 0x836
 801645a:	4770      	bx	lr
 801645c:	200b      	movs	r0, #11
 801645e:	b011      	add	sp, #68	@ 0x44
 8016460:	bd30      	pop	{r4, r5, pc}
 8016462:	f640 0037 	movw	r0, #2103	@ 0x837
 8016466:	e7f0      	b.n	801644a <rcl_action_take_feedback+0x6a>

08016468 <rcl_action_wait_set_add_action_client>:
 8016468:	2800      	cmp	r0, #0
 801646a:	d048      	beq.n	80164fe <rcl_action_wait_set_add_action_client+0x96>
 801646c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801646e:	460c      	mov	r4, r1
 8016470:	2900      	cmp	r1, #0
 8016472:	d03c      	beq.n	80164ee <rcl_action_wait_set_add_action_client+0x86>
 8016474:	4605      	mov	r5, r0
 8016476:	6808      	ldr	r0, [r1, #0]
 8016478:	2800      	cmp	r0, #0
 801647a:	d038      	beq.n	80164ee <rcl_action_wait_set_add_action_client+0x86>
 801647c:	4617      	mov	r7, r2
 801647e:	461e      	mov	r6, r3
 8016480:	f7fe f87e 	bl	8014580 <rcl_client_is_valid>
 8016484:	b3b0      	cbz	r0, 80164f4 <rcl_action_wait_set_add_action_client+0x8c>
 8016486:	6820      	ldr	r0, [r4, #0]
 8016488:	3004      	adds	r0, #4
 801648a:	f7fe f879 	bl	8014580 <rcl_client_is_valid>
 801648e:	b388      	cbz	r0, 80164f4 <rcl_action_wait_set_add_action_client+0x8c>
 8016490:	6820      	ldr	r0, [r4, #0]
 8016492:	3008      	adds	r0, #8
 8016494:	f7fe f874 	bl	8014580 <rcl_client_is_valid>
 8016498:	b360      	cbz	r0, 80164f4 <rcl_action_wait_set_add_action_client+0x8c>
 801649a:	6820      	ldr	r0, [r4, #0]
 801649c:	300c      	adds	r0, #12
 801649e:	f7fe fd1f 	bl	8014ee0 <rcl_subscription_is_valid>
 80164a2:	b338      	cbz	r0, 80164f4 <rcl_action_wait_set_add_action_client+0x8c>
 80164a4:	6820      	ldr	r0, [r4, #0]
 80164a6:	3010      	adds	r0, #16
 80164a8:	f7fe fd1a 	bl	8014ee0 <rcl_subscription_is_valid>
 80164ac:	b310      	cbz	r0, 80164f4 <rcl_action_wait_set_add_action_client+0x8c>
 80164ae:	6821      	ldr	r1, [r4, #0]
 80164b0:	4628      	mov	r0, r5
 80164b2:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 80164b6:	f7ff fccf 	bl	8015e58 <rcl_wait_set_add_client>
 80164ba:	b9b8      	cbnz	r0, 80164ec <rcl_action_wait_set_add_action_client+0x84>
 80164bc:	6821      	ldr	r1, [r4, #0]
 80164be:	4628      	mov	r0, r5
 80164c0:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 80164c4:	3104      	adds	r1, #4
 80164c6:	f7ff fcc7 	bl	8015e58 <rcl_wait_set_add_client>
 80164ca:	b978      	cbnz	r0, 80164ec <rcl_action_wait_set_add_action_client+0x84>
 80164cc:	6821      	ldr	r1, [r4, #0]
 80164ce:	4628      	mov	r0, r5
 80164d0:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 80164d4:	3108      	adds	r1, #8
 80164d6:	f7ff fcbf 	bl	8015e58 <rcl_wait_set_add_client>
 80164da:	b938      	cbnz	r0, 80164ec <rcl_action_wait_set_add_action_client+0x84>
 80164dc:	6821      	ldr	r1, [r4, #0]
 80164de:	4628      	mov	r0, r5
 80164e0:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80164e4:	310c      	adds	r1, #12
 80164e6:	f7ff f96f 	bl	80157c8 <rcl_wait_set_add_subscription>
 80164ea:	b158      	cbz	r0, 8016504 <rcl_action_wait_set_add_action_client+0x9c>
 80164ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164ee:	f640 0036 	movw	r0, #2102	@ 0x836
 80164f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164f4:	f7f7 fda4 	bl	800e040 <rcutils_reset_error>
 80164f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80164fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80164fe:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016502:	4770      	bx	lr
 8016504:	6821      	ldr	r1, [r4, #0]
 8016506:	4628      	mov	r0, r5
 8016508:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 801650c:	3110      	adds	r1, #16
 801650e:	f7ff f95b 	bl	80157c8 <rcl_wait_set_add_subscription>
 8016512:	2800      	cmp	r0, #0
 8016514:	d1ea      	bne.n	80164ec <rcl_action_wait_set_add_action_client+0x84>
 8016516:	b11f      	cbz	r7, 8016520 <rcl_action_wait_set_add_action_client+0xb8>
 8016518:	6823      	ldr	r3, [r4, #0]
 801651a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 801651e:	603b      	str	r3, [r7, #0]
 8016520:	2e00      	cmp	r6, #0
 8016522:	d0e3      	beq.n	80164ec <rcl_action_wait_set_add_action_client+0x84>
 8016524:	6823      	ldr	r3, [r4, #0]
 8016526:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 801652a:	6033      	str	r3, [r6, #0]
 801652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801652e:	bf00      	nop

08016530 <rcl_action_client_wait_set_get_entities_ready>:
 8016530:	2800      	cmp	r0, #0
 8016532:	f000 808d 	beq.w	8016650 <rcl_action_client_wait_set_get_entities_ready+0x120>
 8016536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801653a:	460c      	mov	r4, r1
 801653c:	2900      	cmp	r1, #0
 801653e:	d077      	beq.n	8016630 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016540:	4605      	mov	r5, r0
 8016542:	6808      	ldr	r0, [r1, #0]
 8016544:	2800      	cmp	r0, #0
 8016546:	d073      	beq.n	8016630 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8016548:	4616      	mov	r6, r2
 801654a:	461f      	mov	r7, r3
 801654c:	f7fe f818 	bl	8014580 <rcl_client_is_valid>
 8016550:	2800      	cmp	r0, #0
 8016552:	d071      	beq.n	8016638 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016554:	6820      	ldr	r0, [r4, #0]
 8016556:	3004      	adds	r0, #4
 8016558:	f7fe f812 	bl	8014580 <rcl_client_is_valid>
 801655c:	2800      	cmp	r0, #0
 801655e:	d06b      	beq.n	8016638 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016560:	6820      	ldr	r0, [r4, #0]
 8016562:	3008      	adds	r0, #8
 8016564:	f7fe f80c 	bl	8014580 <rcl_client_is_valid>
 8016568:	2800      	cmp	r0, #0
 801656a:	d065      	beq.n	8016638 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801656c:	6820      	ldr	r0, [r4, #0]
 801656e:	300c      	adds	r0, #12
 8016570:	f7fe fcb6 	bl	8014ee0 <rcl_subscription_is_valid>
 8016574:	2800      	cmp	r0, #0
 8016576:	d05f      	beq.n	8016638 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016578:	6820      	ldr	r0, [r4, #0]
 801657a:	3010      	adds	r0, #16
 801657c:	f7fe fcb0 	bl	8014ee0 <rcl_subscription_is_valid>
 8016580:	2800      	cmp	r0, #0
 8016582:	d059      	beq.n	8016638 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8016584:	2e00      	cmp	r6, #0
 8016586:	d060      	beq.n	801664a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016588:	2f00      	cmp	r7, #0
 801658a:	d05e      	beq.n	801664a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801658c:	9b06      	ldr	r3, [sp, #24]
 801658e:	2b00      	cmp	r3, #0
 8016590:	d05b      	beq.n	801664a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016592:	9b07      	ldr	r3, [sp, #28]
 8016594:	2b00      	cmp	r3, #0
 8016596:	d058      	beq.n	801664a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8016598:	9b08      	ldr	r3, [sp, #32]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d055      	beq.n	801664a <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801659e:	6823      	ldr	r3, [r4, #0]
 80165a0:	686a      	ldr	r2, [r5, #4]
 80165a2:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 80165a6:	428a      	cmp	r2, r1
 80165a8:	d94c      	bls.n	8016644 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165aa:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 80165ae:	4282      	cmp	r2, r0
 80165b0:	d948      	bls.n	8016644 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165b2:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 80165b6:	69ea      	ldr	r2, [r5, #28]
 80165b8:	42a2      	cmp	r2, r4
 80165ba:	d943      	bls.n	8016644 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165bc:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 80165c0:	4562      	cmp	r2, ip
 80165c2:	d93f      	bls.n	8016644 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165c4:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 80165c8:	4572      	cmp	r2, lr
 80165ca:	d93b      	bls.n	8016644 <rcl_action_client_wait_set_get_entities_ready+0x114>
 80165cc:	69aa      	ldr	r2, [r5, #24]
 80165ce:	682d      	ldr	r5, [r5, #0]
 80165d0:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 80165d4:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80165d8:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80165dc:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80165e0:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80165e4:	f103 0c0c 	add.w	ip, r3, #12
 80165e8:	eba5 050c 	sub.w	r5, r5, ip
 80165ec:	fab5 f585 	clz	r5, r5
 80165f0:	096d      	lsrs	r5, r5, #5
 80165f2:	7035      	strb	r5, [r6, #0]
 80165f4:	f103 0510 	add.w	r5, r3, #16
 80165f8:	1b64      	subs	r4, r4, r5
 80165fa:	fab4 f484 	clz	r4, r4
 80165fe:	0964      	lsrs	r4, r4, #5
 8016600:	703c      	strb	r4, [r7, #0]
 8016602:	eba3 0008 	sub.w	r0, r3, r8
 8016606:	1d1c      	adds	r4, r3, #4
 8016608:	3308      	adds	r3, #8
 801660a:	1ad3      	subs	r3, r2, r3
 801660c:	fab0 f080 	clz	r0, r0
 8016610:	9a06      	ldr	r2, [sp, #24]
 8016612:	0940      	lsrs	r0, r0, #5
 8016614:	1b09      	subs	r1, r1, r4
 8016616:	7010      	strb	r0, [r2, #0]
 8016618:	fab1 f181 	clz	r1, r1
 801661c:	9a07      	ldr	r2, [sp, #28]
 801661e:	0949      	lsrs	r1, r1, #5
 8016620:	7011      	strb	r1, [r2, #0]
 8016622:	fab3 f383 	clz	r3, r3
 8016626:	9a08      	ldr	r2, [sp, #32]
 8016628:	095b      	lsrs	r3, r3, #5
 801662a:	2000      	movs	r0, #0
 801662c:	7013      	strb	r3, [r2, #0]
 801662e:	e001      	b.n	8016634 <rcl_action_client_wait_set_get_entities_ready+0x104>
 8016630:	f640 0036 	movw	r0, #2102	@ 0x836
 8016634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016638:	f7f7 fd02 	bl	800e040 <rcutils_reset_error>
 801663c:	f640 0036 	movw	r0, #2102	@ 0x836
 8016640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016644:	2001      	movs	r0, #1
 8016646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801664a:	200b      	movs	r0, #11
 801664c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016650:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016654:	4770      	bx	lr
 8016656:	bf00      	nop

08016658 <rcl_action_take_goal_request>:
 8016658:	2800      	cmp	r0, #0
 801665a:	d039      	beq.n	80166d0 <rcl_action_take_goal_request+0x78>
 801665c:	b570      	push	{r4, r5, r6, lr}
 801665e:	4604      	mov	r4, r0
 8016660:	6800      	ldr	r0, [r0, #0]
 8016662:	b380      	cbz	r0, 80166c6 <rcl_action_take_goal_request+0x6e>
 8016664:	460d      	mov	r5, r1
 8016666:	4616      	mov	r6, r2
 8016668:	f7fe fbd2 	bl	8014e10 <rcl_service_is_valid>
 801666c:	b330      	cbz	r0, 80166bc <rcl_action_take_goal_request+0x64>
 801666e:	6820      	ldr	r0, [r4, #0]
 8016670:	3004      	adds	r0, #4
 8016672:	f7fe fbcd 	bl	8014e10 <rcl_service_is_valid>
 8016676:	b308      	cbz	r0, 80166bc <rcl_action_take_goal_request+0x64>
 8016678:	6820      	ldr	r0, [r4, #0]
 801667a:	3008      	adds	r0, #8
 801667c:	f7fe fbc8 	bl	8014e10 <rcl_service_is_valid>
 8016680:	b1e0      	cbz	r0, 80166bc <rcl_action_take_goal_request+0x64>
 8016682:	6820      	ldr	r0, [r4, #0]
 8016684:	300c      	adds	r0, #12
 8016686:	f7f6 fd63 	bl	800d150 <rcl_publisher_is_valid>
 801668a:	b1b8      	cbz	r0, 80166bc <rcl_action_take_goal_request+0x64>
 801668c:	6820      	ldr	r0, [r4, #0]
 801668e:	3010      	adds	r0, #16
 8016690:	f7f6 fd5e 	bl	800d150 <rcl_publisher_is_valid>
 8016694:	b190      	cbz	r0, 80166bc <rcl_action_take_goal_request+0x64>
 8016696:	b1cd      	cbz	r5, 80166cc <rcl_action_take_goal_request+0x74>
 8016698:	b1c6      	cbz	r6, 80166cc <rcl_action_take_goal_request+0x74>
 801669a:	6820      	ldr	r0, [r4, #0]
 801669c:	4632      	mov	r2, r6
 801669e:	4629      	mov	r1, r5
 80166a0:	f7fe fb5e 	bl	8014d60 <rcl_take_request>
 80166a4:	b148      	cbz	r0, 80166ba <rcl_action_take_goal_request+0x62>
 80166a6:	280a      	cmp	r0, #10
 80166a8:	d007      	beq.n	80166ba <rcl_action_take_goal_request+0x62>
 80166aa:	f240 2259 	movw	r2, #601	@ 0x259
 80166ae:	f640 0399 	movw	r3, #2201	@ 0x899
 80166b2:	4290      	cmp	r0, r2
 80166b4:	bf0c      	ite	eq
 80166b6:	4618      	moveq	r0, r3
 80166b8:	2001      	movne	r0, #1
 80166ba:	bd70      	pop	{r4, r5, r6, pc}
 80166bc:	f7f7 fcc0 	bl	800e040 <rcutils_reset_error>
 80166c0:	f640 0098 	movw	r0, #2200	@ 0x898
 80166c4:	bd70      	pop	{r4, r5, r6, pc}
 80166c6:	f640 0098 	movw	r0, #2200	@ 0x898
 80166ca:	bd70      	pop	{r4, r5, r6, pc}
 80166cc:	200b      	movs	r0, #11
 80166ce:	bd70      	pop	{r4, r5, r6, pc}
 80166d0:	f640 0098 	movw	r0, #2200	@ 0x898
 80166d4:	4770      	bx	lr
 80166d6:	bf00      	nop

080166d8 <rcl_action_send_goal_response>:
 80166d8:	b390      	cbz	r0, 8016740 <rcl_action_send_goal_response+0x68>
 80166da:	b570      	push	{r4, r5, r6, lr}
 80166dc:	4604      	mov	r4, r0
 80166de:	6800      	ldr	r0, [r0, #0]
 80166e0:	b348      	cbz	r0, 8016736 <rcl_action_send_goal_response+0x5e>
 80166e2:	460d      	mov	r5, r1
 80166e4:	4616      	mov	r6, r2
 80166e6:	f7fe fb93 	bl	8014e10 <rcl_service_is_valid>
 80166ea:	b1f8      	cbz	r0, 801672c <rcl_action_send_goal_response+0x54>
 80166ec:	6820      	ldr	r0, [r4, #0]
 80166ee:	3004      	adds	r0, #4
 80166f0:	f7fe fb8e 	bl	8014e10 <rcl_service_is_valid>
 80166f4:	b1d0      	cbz	r0, 801672c <rcl_action_send_goal_response+0x54>
 80166f6:	6820      	ldr	r0, [r4, #0]
 80166f8:	3008      	adds	r0, #8
 80166fa:	f7fe fb89 	bl	8014e10 <rcl_service_is_valid>
 80166fe:	b1a8      	cbz	r0, 801672c <rcl_action_send_goal_response+0x54>
 8016700:	6820      	ldr	r0, [r4, #0]
 8016702:	300c      	adds	r0, #12
 8016704:	f7f6 fd24 	bl	800d150 <rcl_publisher_is_valid>
 8016708:	b180      	cbz	r0, 801672c <rcl_action_send_goal_response+0x54>
 801670a:	6820      	ldr	r0, [r4, #0]
 801670c:	3010      	adds	r0, #16
 801670e:	f7f6 fd1f 	bl	800d150 <rcl_publisher_is_valid>
 8016712:	b158      	cbz	r0, 801672c <rcl_action_send_goal_response+0x54>
 8016714:	b195      	cbz	r5, 801673c <rcl_action_send_goal_response+0x64>
 8016716:	b18e      	cbz	r6, 801673c <rcl_action_send_goal_response+0x64>
 8016718:	6820      	ldr	r0, [r4, #0]
 801671a:	4632      	mov	r2, r6
 801671c:	4629      	mov	r1, r5
 801671e:	f7fe fb5f 	bl	8014de0 <rcl_send_response>
 8016722:	b110      	cbz	r0, 801672a <rcl_action_send_goal_response+0x52>
 8016724:	2802      	cmp	r0, #2
 8016726:	bf18      	it	ne
 8016728:	2001      	movne	r0, #1
 801672a:	bd70      	pop	{r4, r5, r6, pc}
 801672c:	f7f7 fc88 	bl	800e040 <rcutils_reset_error>
 8016730:	f640 0098 	movw	r0, #2200	@ 0x898
 8016734:	bd70      	pop	{r4, r5, r6, pc}
 8016736:	f640 0098 	movw	r0, #2200	@ 0x898
 801673a:	bd70      	pop	{r4, r5, r6, pc}
 801673c:	200b      	movs	r0, #11
 801673e:	bd70      	pop	{r4, r5, r6, pc}
 8016740:	f640 0098 	movw	r0, #2200	@ 0x898
 8016744:	4770      	bx	lr
 8016746:	bf00      	nop

08016748 <rcl_action_take_result_request>:
 8016748:	2800      	cmp	r0, #0
 801674a:	d03a      	beq.n	80167c2 <rcl_action_take_result_request+0x7a>
 801674c:	b570      	push	{r4, r5, r6, lr}
 801674e:	4604      	mov	r4, r0
 8016750:	6800      	ldr	r0, [r0, #0]
 8016752:	b388      	cbz	r0, 80167b8 <rcl_action_take_result_request+0x70>
 8016754:	460d      	mov	r5, r1
 8016756:	4616      	mov	r6, r2
 8016758:	f7fe fb5a 	bl	8014e10 <rcl_service_is_valid>
 801675c:	b338      	cbz	r0, 80167ae <rcl_action_take_result_request+0x66>
 801675e:	6820      	ldr	r0, [r4, #0]
 8016760:	3004      	adds	r0, #4
 8016762:	f7fe fb55 	bl	8014e10 <rcl_service_is_valid>
 8016766:	b310      	cbz	r0, 80167ae <rcl_action_take_result_request+0x66>
 8016768:	6820      	ldr	r0, [r4, #0]
 801676a:	3008      	adds	r0, #8
 801676c:	f7fe fb50 	bl	8014e10 <rcl_service_is_valid>
 8016770:	b1e8      	cbz	r0, 80167ae <rcl_action_take_result_request+0x66>
 8016772:	6820      	ldr	r0, [r4, #0]
 8016774:	300c      	adds	r0, #12
 8016776:	f7f6 fceb 	bl	800d150 <rcl_publisher_is_valid>
 801677a:	b1c0      	cbz	r0, 80167ae <rcl_action_take_result_request+0x66>
 801677c:	6820      	ldr	r0, [r4, #0]
 801677e:	3010      	adds	r0, #16
 8016780:	f7f6 fce6 	bl	800d150 <rcl_publisher_is_valid>
 8016784:	b198      	cbz	r0, 80167ae <rcl_action_take_result_request+0x66>
 8016786:	b1d5      	cbz	r5, 80167be <rcl_action_take_result_request+0x76>
 8016788:	b1ce      	cbz	r6, 80167be <rcl_action_take_result_request+0x76>
 801678a:	6820      	ldr	r0, [r4, #0]
 801678c:	4632      	mov	r2, r6
 801678e:	4629      	mov	r1, r5
 8016790:	3008      	adds	r0, #8
 8016792:	f7fe fae5 	bl	8014d60 <rcl_take_request>
 8016796:	b148      	cbz	r0, 80167ac <rcl_action_take_result_request+0x64>
 8016798:	280a      	cmp	r0, #10
 801679a:	d007      	beq.n	80167ac <rcl_action_take_result_request+0x64>
 801679c:	f240 2259 	movw	r2, #601	@ 0x259
 80167a0:	f640 0399 	movw	r3, #2201	@ 0x899
 80167a4:	4290      	cmp	r0, r2
 80167a6:	bf0c      	ite	eq
 80167a8:	4618      	moveq	r0, r3
 80167aa:	2001      	movne	r0, #1
 80167ac:	bd70      	pop	{r4, r5, r6, pc}
 80167ae:	f7f7 fc47 	bl	800e040 <rcutils_reset_error>
 80167b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80167b6:	bd70      	pop	{r4, r5, r6, pc}
 80167b8:	f640 0098 	movw	r0, #2200	@ 0x898
 80167bc:	bd70      	pop	{r4, r5, r6, pc}
 80167be:	200b      	movs	r0, #11
 80167c0:	bd70      	pop	{r4, r5, r6, pc}
 80167c2:	f640 0098 	movw	r0, #2200	@ 0x898
 80167c6:	4770      	bx	lr

080167c8 <rcl_action_take_cancel_request>:
 80167c8:	2800      	cmp	r0, #0
 80167ca:	d03a      	beq.n	8016842 <rcl_action_take_cancel_request+0x7a>
 80167cc:	b570      	push	{r4, r5, r6, lr}
 80167ce:	4604      	mov	r4, r0
 80167d0:	6800      	ldr	r0, [r0, #0]
 80167d2:	b388      	cbz	r0, 8016838 <rcl_action_take_cancel_request+0x70>
 80167d4:	460d      	mov	r5, r1
 80167d6:	4616      	mov	r6, r2
 80167d8:	f7fe fb1a 	bl	8014e10 <rcl_service_is_valid>
 80167dc:	b338      	cbz	r0, 801682e <rcl_action_take_cancel_request+0x66>
 80167de:	6820      	ldr	r0, [r4, #0]
 80167e0:	3004      	adds	r0, #4
 80167e2:	f7fe fb15 	bl	8014e10 <rcl_service_is_valid>
 80167e6:	b310      	cbz	r0, 801682e <rcl_action_take_cancel_request+0x66>
 80167e8:	6820      	ldr	r0, [r4, #0]
 80167ea:	3008      	adds	r0, #8
 80167ec:	f7fe fb10 	bl	8014e10 <rcl_service_is_valid>
 80167f0:	b1e8      	cbz	r0, 801682e <rcl_action_take_cancel_request+0x66>
 80167f2:	6820      	ldr	r0, [r4, #0]
 80167f4:	300c      	adds	r0, #12
 80167f6:	f7f6 fcab 	bl	800d150 <rcl_publisher_is_valid>
 80167fa:	b1c0      	cbz	r0, 801682e <rcl_action_take_cancel_request+0x66>
 80167fc:	6820      	ldr	r0, [r4, #0]
 80167fe:	3010      	adds	r0, #16
 8016800:	f7f6 fca6 	bl	800d150 <rcl_publisher_is_valid>
 8016804:	b198      	cbz	r0, 801682e <rcl_action_take_cancel_request+0x66>
 8016806:	b1d5      	cbz	r5, 801683e <rcl_action_take_cancel_request+0x76>
 8016808:	b1ce      	cbz	r6, 801683e <rcl_action_take_cancel_request+0x76>
 801680a:	6820      	ldr	r0, [r4, #0]
 801680c:	4632      	mov	r2, r6
 801680e:	4629      	mov	r1, r5
 8016810:	3004      	adds	r0, #4
 8016812:	f7fe faa5 	bl	8014d60 <rcl_take_request>
 8016816:	b148      	cbz	r0, 801682c <rcl_action_take_cancel_request+0x64>
 8016818:	280a      	cmp	r0, #10
 801681a:	d007      	beq.n	801682c <rcl_action_take_cancel_request+0x64>
 801681c:	f240 2259 	movw	r2, #601	@ 0x259
 8016820:	f640 0399 	movw	r3, #2201	@ 0x899
 8016824:	4290      	cmp	r0, r2
 8016826:	bf0c      	ite	eq
 8016828:	4618      	moveq	r0, r3
 801682a:	2001      	movne	r0, #1
 801682c:	bd70      	pop	{r4, r5, r6, pc}
 801682e:	f7f7 fc07 	bl	800e040 <rcutils_reset_error>
 8016832:	f640 0098 	movw	r0, #2200	@ 0x898
 8016836:	bd70      	pop	{r4, r5, r6, pc}
 8016838:	f640 0098 	movw	r0, #2200	@ 0x898
 801683c:	bd70      	pop	{r4, r5, r6, pc}
 801683e:	200b      	movs	r0, #11
 8016840:	bd70      	pop	{r4, r5, r6, pc}
 8016842:	f640 0098 	movw	r0, #2200	@ 0x898
 8016846:	4770      	bx	lr

08016848 <rcl_action_send_cancel_response>:
 8016848:	b398      	cbz	r0, 80168b2 <rcl_action_send_cancel_response+0x6a>
 801684a:	b570      	push	{r4, r5, r6, lr}
 801684c:	4604      	mov	r4, r0
 801684e:	6800      	ldr	r0, [r0, #0]
 8016850:	b350      	cbz	r0, 80168a8 <rcl_action_send_cancel_response+0x60>
 8016852:	460d      	mov	r5, r1
 8016854:	4616      	mov	r6, r2
 8016856:	f7fe fadb 	bl	8014e10 <rcl_service_is_valid>
 801685a:	b300      	cbz	r0, 801689e <rcl_action_send_cancel_response+0x56>
 801685c:	6820      	ldr	r0, [r4, #0]
 801685e:	3004      	adds	r0, #4
 8016860:	f7fe fad6 	bl	8014e10 <rcl_service_is_valid>
 8016864:	b1d8      	cbz	r0, 801689e <rcl_action_send_cancel_response+0x56>
 8016866:	6820      	ldr	r0, [r4, #0]
 8016868:	3008      	adds	r0, #8
 801686a:	f7fe fad1 	bl	8014e10 <rcl_service_is_valid>
 801686e:	b1b0      	cbz	r0, 801689e <rcl_action_send_cancel_response+0x56>
 8016870:	6820      	ldr	r0, [r4, #0]
 8016872:	300c      	adds	r0, #12
 8016874:	f7f6 fc6c 	bl	800d150 <rcl_publisher_is_valid>
 8016878:	b188      	cbz	r0, 801689e <rcl_action_send_cancel_response+0x56>
 801687a:	6820      	ldr	r0, [r4, #0]
 801687c:	3010      	adds	r0, #16
 801687e:	f7f6 fc67 	bl	800d150 <rcl_publisher_is_valid>
 8016882:	b160      	cbz	r0, 801689e <rcl_action_send_cancel_response+0x56>
 8016884:	b19d      	cbz	r5, 80168ae <rcl_action_send_cancel_response+0x66>
 8016886:	b196      	cbz	r6, 80168ae <rcl_action_send_cancel_response+0x66>
 8016888:	6820      	ldr	r0, [r4, #0]
 801688a:	4632      	mov	r2, r6
 801688c:	4629      	mov	r1, r5
 801688e:	3004      	adds	r0, #4
 8016890:	f7fe faa6 	bl	8014de0 <rcl_send_response>
 8016894:	b110      	cbz	r0, 801689c <rcl_action_send_cancel_response+0x54>
 8016896:	2802      	cmp	r0, #2
 8016898:	bf18      	it	ne
 801689a:	2001      	movne	r0, #1
 801689c:	bd70      	pop	{r4, r5, r6, pc}
 801689e:	f7f7 fbcf 	bl	800e040 <rcutils_reset_error>
 80168a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80168a6:	bd70      	pop	{r4, r5, r6, pc}
 80168a8:	f640 0098 	movw	r0, #2200	@ 0x898
 80168ac:	bd70      	pop	{r4, r5, r6, pc}
 80168ae:	200b      	movs	r0, #11
 80168b0:	bd70      	pop	{r4, r5, r6, pc}
 80168b2:	f640 0098 	movw	r0, #2200	@ 0x898
 80168b6:	4770      	bx	lr

080168b8 <rcl_action_wait_set_add_action_server>:
 80168b8:	2800      	cmp	r0, #0
 80168ba:	d04d      	beq.n	8016958 <rcl_action_wait_set_add_action_server+0xa0>
 80168bc:	b570      	push	{r4, r5, r6, lr}
 80168be:	460c      	mov	r4, r1
 80168c0:	b159      	cbz	r1, 80168da <rcl_action_wait_set_add_action_server+0x22>
 80168c2:	4605      	mov	r5, r0
 80168c4:	6808      	ldr	r0, [r1, #0]
 80168c6:	b140      	cbz	r0, 80168da <rcl_action_wait_set_add_action_server+0x22>
 80168c8:	4616      	mov	r6, r2
 80168ca:	f7fe faa1 	bl	8014e10 <rcl_service_is_valid>
 80168ce:	b120      	cbz	r0, 80168da <rcl_action_wait_set_add_action_server+0x22>
 80168d0:	6820      	ldr	r0, [r4, #0]
 80168d2:	3004      	adds	r0, #4
 80168d4:	f7fe fa9c 	bl	8014e10 <rcl_service_is_valid>
 80168d8:	b910      	cbnz	r0, 80168e0 <rcl_action_wait_set_add_action_server+0x28>
 80168da:	f640 0098 	movw	r0, #2200	@ 0x898
 80168de:	bd70      	pop	{r4, r5, r6, pc}
 80168e0:	6820      	ldr	r0, [r4, #0]
 80168e2:	3008      	adds	r0, #8
 80168e4:	f7fe fa94 	bl	8014e10 <rcl_service_is_valid>
 80168e8:	2800      	cmp	r0, #0
 80168ea:	d0f6      	beq.n	80168da <rcl_action_wait_set_add_action_server+0x22>
 80168ec:	6820      	ldr	r0, [r4, #0]
 80168ee:	300c      	adds	r0, #12
 80168f0:	f7f6 fc46 	bl	800d180 <rcl_publisher_is_valid_except_context>
 80168f4:	2800      	cmp	r0, #0
 80168f6:	d0f0      	beq.n	80168da <rcl_action_wait_set_add_action_server+0x22>
 80168f8:	6820      	ldr	r0, [r4, #0]
 80168fa:	3010      	adds	r0, #16
 80168fc:	f7f6 fc40 	bl	800d180 <rcl_publisher_is_valid_except_context>
 8016900:	2800      	cmp	r0, #0
 8016902:	d0ea      	beq.n	80168da <rcl_action_wait_set_add_action_server+0x22>
 8016904:	6821      	ldr	r1, [r4, #0]
 8016906:	4628      	mov	r0, r5
 8016908:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 801690c:	f7ff fad0 	bl	8015eb0 <rcl_wait_set_add_service>
 8016910:	2800      	cmp	r0, #0
 8016912:	d1e4      	bne.n	80168de <rcl_action_wait_set_add_action_server+0x26>
 8016914:	6821      	ldr	r1, [r4, #0]
 8016916:	4628      	mov	r0, r5
 8016918:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 801691c:	3104      	adds	r1, #4
 801691e:	f7ff fac7 	bl	8015eb0 <rcl_wait_set_add_service>
 8016922:	2800      	cmp	r0, #0
 8016924:	d1db      	bne.n	80168de <rcl_action_wait_set_add_action_server+0x26>
 8016926:	6821      	ldr	r1, [r4, #0]
 8016928:	4628      	mov	r0, r5
 801692a:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 801692e:	3108      	adds	r1, #8
 8016930:	f7ff fabe 	bl	8015eb0 <rcl_wait_set_add_service>
 8016934:	2800      	cmp	r0, #0
 8016936:	d1d2      	bne.n	80168de <rcl_action_wait_set_add_action_server+0x26>
 8016938:	6821      	ldr	r1, [r4, #0]
 801693a:	4628      	mov	r0, r5
 801693c:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8016940:	3114      	adds	r1, #20
 8016942:	f7ff fa59 	bl	8015df8 <rcl_wait_set_add_timer>
 8016946:	2800      	cmp	r0, #0
 8016948:	d1c9      	bne.n	80168de <rcl_action_wait_set_add_action_server+0x26>
 801694a:	2e00      	cmp	r6, #0
 801694c:	d0c7      	beq.n	80168de <rcl_action_wait_set_add_action_server+0x26>
 801694e:	6823      	ldr	r3, [r4, #0]
 8016950:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8016954:	6033      	str	r3, [r6, #0]
 8016956:	bd70      	pop	{r4, r5, r6, pc}
 8016958:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801695c:	4770      	bx	lr
 801695e:	bf00      	nop

08016960 <rcl_action_server_wait_set_get_entities_ready>:
 8016960:	2800      	cmp	r0, #0
 8016962:	d05a      	beq.n	8016a1a <rcl_action_server_wait_set_get_entities_ready+0xba>
 8016964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016966:	460c      	mov	r4, r1
 8016968:	b161      	cbz	r1, 8016984 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801696a:	4605      	mov	r5, r0
 801696c:	6808      	ldr	r0, [r1, #0]
 801696e:	b148      	cbz	r0, 8016984 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016970:	4616      	mov	r6, r2
 8016972:	461f      	mov	r7, r3
 8016974:	f7fe fa4c 	bl	8014e10 <rcl_service_is_valid>
 8016978:	b120      	cbz	r0, 8016984 <rcl_action_server_wait_set_get_entities_ready+0x24>
 801697a:	6820      	ldr	r0, [r4, #0]
 801697c:	3004      	adds	r0, #4
 801697e:	f7fe fa47 	bl	8014e10 <rcl_service_is_valid>
 8016982:	b910      	cbnz	r0, 801698a <rcl_action_server_wait_set_get_entities_ready+0x2a>
 8016984:	f640 0098 	movw	r0, #2200	@ 0x898
 8016988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801698a:	6820      	ldr	r0, [r4, #0]
 801698c:	3008      	adds	r0, #8
 801698e:	f7fe fa3f 	bl	8014e10 <rcl_service_is_valid>
 8016992:	2800      	cmp	r0, #0
 8016994:	d0f6      	beq.n	8016984 <rcl_action_server_wait_set_get_entities_ready+0x24>
 8016996:	6820      	ldr	r0, [r4, #0]
 8016998:	300c      	adds	r0, #12
 801699a:	f7f6 fbf1 	bl	800d180 <rcl_publisher_is_valid_except_context>
 801699e:	2800      	cmp	r0, #0
 80169a0:	d0f0      	beq.n	8016984 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80169a2:	6820      	ldr	r0, [r4, #0]
 80169a4:	3010      	adds	r0, #16
 80169a6:	f7f6 fbeb 	bl	800d180 <rcl_publisher_is_valid_except_context>
 80169aa:	2800      	cmp	r0, #0
 80169ac:	d0ea      	beq.n	8016984 <rcl_action_server_wait_set_get_entities_ready+0x24>
 80169ae:	b3be      	cbz	r6, 8016a20 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169b0:	b3b7      	cbz	r7, 8016a20 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169b2:	9b06      	ldr	r3, [sp, #24]
 80169b4:	b3a3      	cbz	r3, 8016a20 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169b6:	9b07      	ldr	r3, [sp, #28]
 80169b8:	b393      	cbz	r3, 8016a20 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 80169ba:	6821      	ldr	r1, [r4, #0]
 80169bc:	692a      	ldr	r2, [r5, #16]
 80169be:	6a2c      	ldr	r4, [r5, #32]
 80169c0:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 80169c4:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80169c8:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 80169cc:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 80169d0:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 80169d4:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80169d8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80169dc:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80169e0:	1a64      	subs	r4, r4, r1
 80169e2:	fab4 f484 	clz	r4, r4
 80169e6:	0964      	lsrs	r4, r4, #5
 80169e8:	7034      	strb	r4, [r6, #0]
 80169ea:	1d0c      	adds	r4, r1, #4
 80169ec:	1b1b      	subs	r3, r3, r4
 80169ee:	fab3 f383 	clz	r3, r3
 80169f2:	095b      	lsrs	r3, r3, #5
 80169f4:	f101 0408 	add.w	r4, r1, #8
 80169f8:	703b      	strb	r3, [r7, #0]
 80169fa:	f101 0314 	add.w	r3, r1, #20
 80169fe:	1b01      	subs	r1, r0, r4
 8016a00:	1ad3      	subs	r3, r2, r3
 8016a02:	fab1 f181 	clz	r1, r1
 8016a06:	9a06      	ldr	r2, [sp, #24]
 8016a08:	0949      	lsrs	r1, r1, #5
 8016a0a:	7011      	strb	r1, [r2, #0]
 8016a0c:	fab3 f383 	clz	r3, r3
 8016a10:	9a07      	ldr	r2, [sp, #28]
 8016a12:	095b      	lsrs	r3, r3, #5
 8016a14:	2000      	movs	r0, #0
 8016a16:	7013      	strb	r3, [r2, #0]
 8016a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a1a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016a1e:	4770      	bx	lr
 8016a20:	200b      	movs	r0, #11
 8016a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016a24 <_execute_event_handler>:
 8016a24:	2002      	movs	r0, #2
 8016a26:	4770      	bx	lr

08016a28 <_cancel_goal_event_handler>:
 8016a28:	2003      	movs	r0, #3
 8016a2a:	4770      	bx	lr

08016a2c <_succeed_event_handler>:
 8016a2c:	2004      	movs	r0, #4
 8016a2e:	4770      	bx	lr

08016a30 <_abort_event_handler>:
 8016a30:	2006      	movs	r0, #6
 8016a32:	4770      	bx	lr

08016a34 <_canceled_event_handler>:
 8016a34:	2005      	movs	r0, #5
 8016a36:	4770      	bx	lr

08016a38 <rcl_action_transition_goal_state>:
 8016a38:	b2c2      	uxtb	r2, r0
 8016a3a:	2a06      	cmp	r2, #6
 8016a3c:	d80c      	bhi.n	8016a58 <rcl_action_transition_goal_state+0x20>
 8016a3e:	2904      	cmp	r1, #4
 8016a40:	d80a      	bhi.n	8016a58 <rcl_action_transition_goal_state+0x20>
 8016a42:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8016a46:	b410      	push	{r4}
 8016a48:	1853      	adds	r3, r2, r1
 8016a4a:	4c06      	ldr	r4, [pc, #24]	@ (8016a64 <rcl_action_transition_goal_state+0x2c>)
 8016a4c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8016a50:	b123      	cbz	r3, 8016a5c <rcl_action_transition_goal_state+0x24>
 8016a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a56:	4718      	bx	r3
 8016a58:	2000      	movs	r0, #0
 8016a5a:	4770      	bx	lr
 8016a5c:	2000      	movs	r0, #0
 8016a5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016a62:	4770      	bx	lr
 8016a64:	0801bef4 	.word	0x0801bef4

08016a68 <rcl_action_get_zero_initialized_cancel_response>:
 8016a68:	b510      	push	{r4, lr}
 8016a6a:	4c07      	ldr	r4, [pc, #28]	@ (8016a88 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8016a6c:	4686      	mov	lr, r0
 8016a6e:	4684      	mov	ip, r0
 8016a70:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a72:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a78:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a7c:	6823      	ldr	r3, [r4, #0]
 8016a7e:	f8cc 3000 	str.w	r3, [ip]
 8016a82:	4670      	mov	r0, lr
 8016a84:	bd10      	pop	{r4, pc}
 8016a86:	bf00      	nop
 8016a88:	0801bf80 	.word	0x0801bf80

08016a8c <rclc_action_send_result_request>:
 8016a8c:	b1d0      	cbz	r0, 8016ac4 <rclc_action_send_result_request+0x38>
 8016a8e:	b500      	push	{lr}
 8016a90:	4684      	mov	ip, r0
 8016a92:	b087      	sub	sp, #28
 8016a94:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8016a98:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8016a9c:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8016aa0:	f8dc 3015 	ldr.w	r3, [ip, #21]
 8016aa4:	f10d 0e08 	add.w	lr, sp, #8
 8016aa8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8016aac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8016ab0:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 8016ab4:	a902      	add	r1, sp, #8
 8016ab6:	3010      	adds	r0, #16
 8016ab8:	f7ff fbda 	bl	8016270 <rcl_action_send_result_request>
 8016abc:	b920      	cbnz	r0, 8016ac8 <rclc_action_send_result_request+0x3c>
 8016abe:	b007      	add	sp, #28
 8016ac0:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ac4:	200b      	movs	r0, #11
 8016ac6:	4770      	bx	lr
 8016ac8:	9001      	str	r0, [sp, #4]
 8016aca:	f7f7 fab9 	bl	800e040 <rcutils_reset_error>
 8016ace:	9801      	ldr	r0, [sp, #4]
 8016ad0:	b007      	add	sp, #28
 8016ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8016ad6:	bf00      	nop

08016ad8 <rclc_action_take_goal_handle>:
 8016ad8:	b160      	cbz	r0, 8016af4 <rclc_action_take_goal_handle+0x1c>
 8016ada:	6883      	ldr	r3, [r0, #8]
 8016adc:	b143      	cbz	r3, 8016af0 <rclc_action_take_goal_handle+0x18>
 8016ade:	6819      	ldr	r1, [r3, #0]
 8016ae0:	6081      	str	r1, [r0, #8]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	721a      	strb	r2, [r3, #8]
 8016ae6:	68c1      	ldr	r1, [r0, #12]
 8016ae8:	6019      	str	r1, [r3, #0]
 8016aea:	621a      	str	r2, [r3, #32]
 8016aec:	849a      	strh	r2, [r3, #36]	@ 0x24
 8016aee:	60c3      	str	r3, [r0, #12]
 8016af0:	4618      	mov	r0, r3
 8016af2:	4770      	bx	lr
 8016af4:	4603      	mov	r3, r0
 8016af6:	e7fb      	b.n	8016af0 <rclc_action_take_goal_handle+0x18>

08016af8 <rclc_action_remove_used_goal_handle>:
 8016af8:	b180      	cbz	r0, 8016b1c <rclc_action_remove_used_goal_handle+0x24>
 8016afa:	b179      	cbz	r1, 8016b1c <rclc_action_remove_used_goal_handle+0x24>
 8016afc:	68c3      	ldr	r3, [r0, #12]
 8016afe:	4299      	cmp	r1, r3
 8016b00:	d00d      	beq.n	8016b1e <rclc_action_remove_used_goal_handle+0x26>
 8016b02:	b12b      	cbz	r3, 8016b10 <rclc_action_remove_used_goal_handle+0x18>
 8016b04:	681a      	ldr	r2, [r3, #0]
 8016b06:	4291      	cmp	r1, r2
 8016b08:	d003      	beq.n	8016b12 <rclc_action_remove_used_goal_handle+0x1a>
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d1f9      	bne.n	8016b04 <rclc_action_remove_used_goal_handle+0xc>
 8016b10:	4770      	bx	lr
 8016b12:	680a      	ldr	r2, [r1, #0]
 8016b14:	601a      	str	r2, [r3, #0]
 8016b16:	6883      	ldr	r3, [r0, #8]
 8016b18:	600b      	str	r3, [r1, #0]
 8016b1a:	6081      	str	r1, [r0, #8]
 8016b1c:	4770      	bx	lr
 8016b1e:	680b      	ldr	r3, [r1, #0]
 8016b20:	60c3      	str	r3, [r0, #12]
 8016b22:	e7f8      	b.n	8016b16 <rclc_action_remove_used_goal_handle+0x1e>

08016b24 <rclc_action_find_goal_handle_by_uuid>:
 8016b24:	b538      	push	{r3, r4, r5, lr}
 8016b26:	b180      	cbz	r0, 8016b4a <rclc_action_find_goal_handle_by_uuid+0x26>
 8016b28:	460d      	mov	r5, r1
 8016b2a:	b181      	cbz	r1, 8016b4e <rclc_action_find_goal_handle_by_uuid+0x2a>
 8016b2c:	68c4      	ldr	r4, [r0, #12]
 8016b2e:	b914      	cbnz	r4, 8016b36 <rclc_action_find_goal_handle_by_uuid+0x12>
 8016b30:	e009      	b.n	8016b46 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b32:	6824      	ldr	r4, [r4, #0]
 8016b34:	b13c      	cbz	r4, 8016b46 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b36:	f104 0009 	add.w	r0, r4, #9
 8016b3a:	2210      	movs	r2, #16
 8016b3c:	4629      	mov	r1, r5
 8016b3e:	f003 fcf5 	bl	801a52c <memcmp>
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d1f5      	bne.n	8016b32 <rclc_action_find_goal_handle_by_uuid+0xe>
 8016b46:	4620      	mov	r0, r4
 8016b48:	bd38      	pop	{r3, r4, r5, pc}
 8016b4a:	4604      	mov	r4, r0
 8016b4c:	e7fb      	b.n	8016b46 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b4e:	460c      	mov	r4, r1
 8016b50:	e7f9      	b.n	8016b46 <rclc_action_find_goal_handle_by_uuid+0x22>
 8016b52:	bf00      	nop

08016b54 <rclc_action_find_first_handle_by_status>:
 8016b54:	b140      	cbz	r0, 8016b68 <rclc_action_find_first_handle_by_status+0x14>
 8016b56:	68c0      	ldr	r0, [r0, #12]
 8016b58:	b910      	cbnz	r0, 8016b60 <rclc_action_find_first_handle_by_status+0xc>
 8016b5a:	e005      	b.n	8016b68 <rclc_action_find_first_handle_by_status+0x14>
 8016b5c:	6800      	ldr	r0, [r0, #0]
 8016b5e:	b118      	cbz	r0, 8016b68 <rclc_action_find_first_handle_by_status+0x14>
 8016b60:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016b64:	428b      	cmp	r3, r1
 8016b66:	d1f9      	bne.n	8016b5c <rclc_action_find_first_handle_by_status+0x8>
 8016b68:	4770      	bx	lr
 8016b6a:	bf00      	nop

08016b6c <rclc_action_find_first_terminated_handle>:
 8016b6c:	b140      	cbz	r0, 8016b80 <rclc_action_find_first_terminated_handle+0x14>
 8016b6e:	68c0      	ldr	r0, [r0, #12]
 8016b70:	b910      	cbnz	r0, 8016b78 <rclc_action_find_first_terminated_handle+0xc>
 8016b72:	e005      	b.n	8016b80 <rclc_action_find_first_terminated_handle+0x14>
 8016b74:	6800      	ldr	r0, [r0, #0]
 8016b76:	b118      	cbz	r0, 8016b80 <rclc_action_find_first_terminated_handle+0x14>
 8016b78:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8016b7c:	2b03      	cmp	r3, #3
 8016b7e:	ddf9      	ble.n	8016b74 <rclc_action_find_first_terminated_handle+0x8>
 8016b80:	4770      	bx	lr
 8016b82:	bf00      	nop

08016b84 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8016b84:	b170      	cbz	r0, 8016ba4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016b86:	68c0      	ldr	r0, [r0, #12]
 8016b88:	b160      	cbz	r0, 8016ba4 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8016b8a:	b410      	push	{r4}
 8016b8c:	e001      	b.n	8016b92 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8016b8e:	6800      	ldr	r0, [r0, #0]
 8016b90:	b128      	cbz	r0, 8016b9e <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8016b92:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 8016b96:	4299      	cmp	r1, r3
 8016b98:	bf08      	it	eq
 8016b9a:	4294      	cmpeq	r4, r2
 8016b9c:	d1f7      	bne.n	8016b8e <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8016b9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016ba2:	4770      	bx	lr
 8016ba4:	4770      	bx	lr
 8016ba6:	bf00      	nop

08016ba8 <rclc_action_find_handle_by_result_request_sequence_number>:
 8016ba8:	b170      	cbz	r0, 8016bc8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016baa:	68c0      	ldr	r0, [r0, #12]
 8016bac:	b160      	cbz	r0, 8016bc8 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8016bae:	b410      	push	{r4}
 8016bb0:	e001      	b.n	8016bb6 <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8016bb2:	6800      	ldr	r0, [r0, #0]
 8016bb4:	b128      	cbz	r0, 8016bc2 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 8016bb6:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8016bba:	4299      	cmp	r1, r3
 8016bbc:	bf08      	it	eq
 8016bbe:	4294      	cmpeq	r4, r2
 8016bc0:	d1f7      	bne.n	8016bb2 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8016bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bc6:	4770      	bx	lr
 8016bc8:	4770      	bx	lr
 8016bca:	bf00      	nop

08016bcc <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8016bcc:	b170      	cbz	r0, 8016bec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016bce:	68c0      	ldr	r0, [r0, #12]
 8016bd0:	b160      	cbz	r0, 8016bec <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8016bd2:	b410      	push	{r4}
 8016bd4:	e001      	b.n	8016bda <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 8016bd6:	6800      	ldr	r0, [r0, #0]
 8016bd8:	b128      	cbz	r0, 8016be6 <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 8016bda:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 8016bde:	4299      	cmp	r1, r3
 8016be0:	bf08      	it	eq
 8016be2:	4294      	cmpeq	r4, r2
 8016be4:	d1f7      	bne.n	8016bd6 <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 8016be6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016bea:	4770      	bx	lr
 8016bec:	4770      	bx	lr
 8016bee:	bf00      	nop

08016bf0 <rclc_action_find_first_handle_with_goal_response>:
 8016bf0:	b140      	cbz	r0, 8016c04 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016bf2:	68c0      	ldr	r0, [r0, #12]
 8016bf4:	b910      	cbnz	r0, 8016bfc <rclc_action_find_first_handle_with_goal_response+0xc>
 8016bf6:	e005      	b.n	8016c04 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016bf8:	6800      	ldr	r0, [r0, #0]
 8016bfa:	b118      	cbz	r0, 8016c04 <rclc_action_find_first_handle_with_goal_response+0x14>
 8016bfc:	f890 3020 	ldrb.w	r3, [r0, #32]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d0f9      	beq.n	8016bf8 <rclc_action_find_first_handle_with_goal_response+0x8>
 8016c04:	4770      	bx	lr
 8016c06:	bf00      	nop

08016c08 <rclc_action_find_first_handle_with_result_response>:
 8016c08:	b140      	cbz	r0, 8016c1c <rclc_action_find_first_handle_with_result_response+0x14>
 8016c0a:	68c0      	ldr	r0, [r0, #12]
 8016c0c:	b910      	cbnz	r0, 8016c14 <rclc_action_find_first_handle_with_result_response+0xc>
 8016c0e:	e005      	b.n	8016c1c <rclc_action_find_first_handle_with_result_response+0x14>
 8016c10:	6800      	ldr	r0, [r0, #0]
 8016c12:	b118      	cbz	r0, 8016c1c <rclc_action_find_first_handle_with_result_response+0x14>
 8016c14:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d0f9      	beq.n	8016c10 <rclc_action_find_first_handle_with_result_response+0x8>
 8016c1c:	4770      	bx	lr
 8016c1e:	bf00      	nop

08016c20 <rclc_action_server_response_goal_request>:
 8016c20:	b198      	cbz	r0, 8016c4a <rclc_action_server_response_goal_request+0x2a>
 8016c22:	b510      	push	{r4, lr}
 8016c24:	6844      	ldr	r4, [r0, #4]
 8016c26:	b086      	sub	sp, #24
 8016c28:	2200      	movs	r2, #0
 8016c2a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 8016c2e:	460b      	mov	r3, r1
 8016c30:	9205      	str	r2, [sp, #20]
 8016c32:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 8016c36:	aa03      	add	r2, sp, #12
 8016c38:	f104 0010 	add.w	r0, r4, #16
 8016c3c:	f88d 300c 	strb.w	r3, [sp, #12]
 8016c40:	f7ff fd4a 	bl	80166d8 <rcl_action_send_goal_response>
 8016c44:	b918      	cbnz	r0, 8016c4e <rclc_action_server_response_goal_request+0x2e>
 8016c46:	b006      	add	sp, #24
 8016c48:	bd10      	pop	{r4, pc}
 8016c4a:	200b      	movs	r0, #11
 8016c4c:	4770      	bx	lr
 8016c4e:	9001      	str	r0, [sp, #4]
 8016c50:	f7f7 f9f6 	bl	800e040 <rcutils_reset_error>
 8016c54:	9801      	ldr	r0, [sp, #4]
 8016c56:	b006      	add	sp, #24
 8016c58:	bd10      	pop	{r4, pc}
 8016c5a:	bf00      	nop
 8016c5c:	0000      	movs	r0, r0
	...

08016c60 <rclc_action_server_goal_cancel_accept>:
 8016c60:	b310      	cbz	r0, 8016ca8 <rclc_action_server_goal_cancel_accept+0x48>
 8016c62:	b510      	push	{r4, lr}
 8016c64:	b090      	sub	sp, #64	@ 0x40
 8016c66:	4604      	mov	r4, r0
 8016c68:	a806      	add	r0, sp, #24
 8016c6a:	f7ff fefd 	bl	8016a68 <rcl_action_get_zero_initialized_cancel_response>
 8016c6e:	2300      	movs	r3, #0
 8016c70:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8016c74:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8016c78:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8016c7c:	f88d 3018 	strb.w	r3, [sp, #24]
 8016c80:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8016c84:	f8cd d01c 	str.w	sp, [sp, #28]
 8016c88:	46ec      	mov	ip, sp
 8016c8a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016c8e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8016cb0 <rclc_action_server_goal_cancel_accept+0x50>
 8016c92:	6860      	ldr	r0, [r4, #4]
 8016c94:	aa06      	add	r2, sp, #24
 8016c96:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8016c9a:	3010      	adds	r0, #16
 8016c9c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016ca0:	f7ff fdd2 	bl	8016848 <rcl_action_send_cancel_response>
 8016ca4:	b010      	add	sp, #64	@ 0x40
 8016ca6:	bd10      	pop	{r4, pc}
 8016ca8:	200b      	movs	r0, #11
 8016caa:	4770      	bx	lr
 8016cac:	f3af 8000 	nop.w
 8016cb0:	00000001 	.word	0x00000001
 8016cb4:	00000001 	.word	0x00000001

08016cb8 <rclc_action_server_goal_cancel_reject>:
 8016cb8:	b082      	sub	sp, #8
 8016cba:	b530      	push	{r4, r5, lr}
 8016cbc:	b08b      	sub	sp, #44	@ 0x2c
 8016cbe:	ac0e      	add	r4, sp, #56	@ 0x38
 8016cc0:	e884 000c 	stmia.w	r4, {r2, r3}
 8016cc4:	b188      	cbz	r0, 8016cea <rclc_action_server_goal_cancel_reject+0x32>
 8016cc6:	4604      	mov	r4, r0
 8016cc8:	a801      	add	r0, sp, #4
 8016cca:	460d      	mov	r5, r1
 8016ccc:	f7ff fecc 	bl	8016a68 <rcl_action_get_zero_initialized_cancel_response>
 8016cd0:	aa01      	add	r2, sp, #4
 8016cd2:	a90e      	add	r1, sp, #56	@ 0x38
 8016cd4:	f104 0010 	add.w	r0, r4, #16
 8016cd8:	f88d 5004 	strb.w	r5, [sp, #4]
 8016cdc:	f7ff fdb4 	bl	8016848 <rcl_action_send_cancel_response>
 8016ce0:	b00b      	add	sp, #44	@ 0x2c
 8016ce2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ce6:	b002      	add	sp, #8
 8016ce8:	4770      	bx	lr
 8016cea:	200b      	movs	r0, #11
 8016cec:	b00b      	add	sp, #44	@ 0x2c
 8016cee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016cf2:	b002      	add	sp, #8
 8016cf4:	4770      	bx	lr
 8016cf6:	bf00      	nop

08016cf8 <__atomic_load_8>:
 8016cf8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016cfc:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016d00:	4a15      	ldr	r2, [pc, #84]	@ (8016d58 <__atomic_load_8+0x60>)
 8016d02:	4b16      	ldr	r3, [pc, #88]	@ (8016d5c <__atomic_load_8+0x64>)
 8016d04:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016d08:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016d0c:	fb02 f101 	mul.w	r1, r2, r1
 8016d10:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016d14:	fba3 2301 	umull	r2, r3, r3, r1
 8016d18:	091b      	lsrs	r3, r3, #4
 8016d1a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8016d1e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 8016d22:	b4d0      	push	{r4, r6, r7}
 8016d24:	4c0e      	ldr	r4, [pc, #56]	@ (8016d60 <__atomic_load_8+0x68>)
 8016d26:	1ac9      	subs	r1, r1, r3
 8016d28:	1862      	adds	r2, r4, r1
 8016d2a:	f04f 0c01 	mov.w	ip, #1
 8016d2e:	e8d2 3f4f 	ldrexb	r3, [r2]
 8016d32:	e8c2 cf46 	strexb	r6, ip, [r2]
 8016d36:	2e00      	cmp	r6, #0
 8016d38:	d1f9      	bne.n	8016d2e <__atomic_load_8+0x36>
 8016d3a:	f3bf 8f5b 	dmb	ish
 8016d3e:	b2db      	uxtb	r3, r3
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d1f4      	bne.n	8016d2e <__atomic_load_8+0x36>
 8016d44:	e9d0 6700 	ldrd	r6, r7, [r0]
 8016d48:	f3bf 8f5b 	dmb	ish
 8016d4c:	5463      	strb	r3, [r4, r1]
 8016d4e:	4630      	mov	r0, r6
 8016d50:	4639      	mov	r1, r7
 8016d52:	bcd0      	pop	{r4, r6, r7}
 8016d54:	4770      	bx	lr
 8016d56:	bf00      	nop
 8016d58:	27d4eb2d 	.word	0x27d4eb2d
 8016d5c:	b21642c9 	.word	0xb21642c9
 8016d60:	2000afe4 	.word	0x2000afe4

08016d64 <__atomic_store_8>:
 8016d64:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8016d68:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8016d6c:	b570      	push	{r4, r5, r6, lr}
 8016d6e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8016d72:	4c14      	ldr	r4, [pc, #80]	@ (8016dc4 <__atomic_store_8+0x60>)
 8016d74:	4d14      	ldr	r5, [pc, #80]	@ (8016dc8 <__atomic_store_8+0x64>)
 8016d76:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8016d7a:	fb04 f101 	mul.w	r1, r4, r1
 8016d7e:	4c13      	ldr	r4, [pc, #76]	@ (8016dcc <__atomic_store_8+0x68>)
 8016d80:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8016d84:	fba4 4e01 	umull	r4, lr, r4, r1
 8016d88:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8016d8c:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8016d90:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8016d94:	eba1 0e0e 	sub.w	lr, r1, lr
 8016d98:	eb05 0c0e 	add.w	ip, r5, lr
 8016d9c:	f04f 0401 	mov.w	r4, #1
 8016da0:	e8dc 1f4f 	ldrexb	r1, [ip]
 8016da4:	e8cc 4f46 	strexb	r6, r4, [ip]
 8016da8:	2e00      	cmp	r6, #0
 8016daa:	d1f9      	bne.n	8016da0 <__atomic_store_8+0x3c>
 8016dac:	f3bf 8f5b 	dmb	ish
 8016db0:	b2c9      	uxtb	r1, r1
 8016db2:	2900      	cmp	r1, #0
 8016db4:	d1f4      	bne.n	8016da0 <__atomic_store_8+0x3c>
 8016db6:	e9c0 2300 	strd	r2, r3, [r0]
 8016dba:	f3bf 8f5b 	dmb	ish
 8016dbe:	f805 100e 	strb.w	r1, [r5, lr]
 8016dc2:	bd70      	pop	{r4, r5, r6, pc}
 8016dc4:	27d4eb2d 	.word	0x27d4eb2d
 8016dc8:	2000afe4 	.word	0x2000afe4
 8016dcc:	b21642c9 	.word	0xb21642c9

08016dd0 <__atomic_exchange_8>:
 8016dd0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8016dd4:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8016dd8:	4916      	ldr	r1, [pc, #88]	@ (8016e34 <__atomic_exchange_8+0x64>)
 8016dda:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8016dde:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8016de2:	fb01 fc0c 	mul.w	ip, r1, ip
 8016de6:	4914      	ldr	r1, [pc, #80]	@ (8016e38 <__atomic_exchange_8+0x68>)
 8016de8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8016dec:	b570      	push	{r4, r5, r6, lr}
 8016dee:	4605      	mov	r5, r0
 8016df0:	fba1 010c 	umull	r0, r1, r1, ip
 8016df4:	0909      	lsrs	r1, r1, #4
 8016df6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8016dfa:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8016dfe:	4e0f      	ldr	r6, [pc, #60]	@ (8016e3c <__atomic_exchange_8+0x6c>)
 8016e00:	ebac 0c01 	sub.w	ip, ip, r1
 8016e04:	eb06 010c 	add.w	r1, r6, ip
 8016e08:	f04f 0e01 	mov.w	lr, #1
 8016e0c:	e8d1 4f4f 	ldrexb	r4, [r1]
 8016e10:	e8c1 ef40 	strexb	r0, lr, [r1]
 8016e14:	2800      	cmp	r0, #0
 8016e16:	d1f9      	bne.n	8016e0c <__atomic_exchange_8+0x3c>
 8016e18:	f3bf 8f5b 	dmb	ish
 8016e1c:	b2e4      	uxtb	r4, r4
 8016e1e:	2c00      	cmp	r4, #0
 8016e20:	d1f4      	bne.n	8016e0c <__atomic_exchange_8+0x3c>
 8016e22:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016e26:	e9c5 2300 	strd	r2, r3, [r5]
 8016e2a:	f3bf 8f5b 	dmb	ish
 8016e2e:	f806 400c 	strb.w	r4, [r6, ip]
 8016e32:	bd70      	pop	{r4, r5, r6, pc}
 8016e34:	27d4eb2d 	.word	0x27d4eb2d
 8016e38:	b21642c9 	.word	0xb21642c9
 8016e3c:	2000afe4 	.word	0x2000afe4

08016e40 <rcutils_get_env>:
 8016e40:	b168      	cbz	r0, 8016e5e <rcutils_get_env+0x1e>
 8016e42:	b510      	push	{r4, lr}
 8016e44:	460c      	mov	r4, r1
 8016e46:	b129      	cbz	r1, 8016e54 <rcutils_get_env+0x14>
 8016e48:	f002 fed8 	bl	8019bfc <getenv>
 8016e4c:	b120      	cbz	r0, 8016e58 <rcutils_get_env+0x18>
 8016e4e:	6020      	str	r0, [r4, #0]
 8016e50:	2000      	movs	r0, #0
 8016e52:	bd10      	pop	{r4, pc}
 8016e54:	4803      	ldr	r0, [pc, #12]	@ (8016e64 <rcutils_get_env+0x24>)
 8016e56:	bd10      	pop	{r4, pc}
 8016e58:	4b03      	ldr	r3, [pc, #12]	@ (8016e68 <rcutils_get_env+0x28>)
 8016e5a:	6023      	str	r3, [r4, #0]
 8016e5c:	bd10      	pop	{r4, pc}
 8016e5e:	4803      	ldr	r0, [pc, #12]	@ (8016e6c <rcutils_get_env+0x2c>)
 8016e60:	4770      	bx	lr
 8016e62:	bf00      	nop
 8016e64:	0801b7c8 	.word	0x0801b7c8
 8016e68:	0801bba4 	.word	0x0801bba4
 8016e6c:	0801b7ac 	.word	0x0801b7ac

08016e70 <rcutils_format_string_limit>:
 8016e70:	b40f      	push	{r0, r1, r2, r3}
 8016e72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e74:	b083      	sub	sp, #12
 8016e76:	ac08      	add	r4, sp, #32
 8016e78:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8016e7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8016e7e:	b34e      	cbz	r6, 8016ed4 <rcutils_format_string_limit+0x64>
 8016e80:	a808      	add	r0, sp, #32
 8016e82:	f7f7 f8b7 	bl	800dff4 <rcutils_allocator_is_valid>
 8016e86:	b328      	cbz	r0, 8016ed4 <rcutils_format_string_limit+0x64>
 8016e88:	2100      	movs	r1, #0
 8016e8a:	ab0f      	add	r3, sp, #60	@ 0x3c
 8016e8c:	4632      	mov	r2, r6
 8016e8e:	4608      	mov	r0, r1
 8016e90:	e9cd 3300 	strd	r3, r3, [sp]
 8016e94:	f000 f8f4 	bl	8017080 <rcutils_vsnprintf>
 8016e98:	1c43      	adds	r3, r0, #1
 8016e9a:	4605      	mov	r5, r0
 8016e9c:	d01a      	beq.n	8016ed4 <rcutils_format_string_limit+0x64>
 8016e9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016ea0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016ea2:	1c47      	adds	r7, r0, #1
 8016ea4:	429f      	cmp	r7, r3
 8016ea6:	bf84      	itt	hi
 8016ea8:	461f      	movhi	r7, r3
 8016eaa:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8016eae:	4638      	mov	r0, r7
 8016eb0:	9b08      	ldr	r3, [sp, #32]
 8016eb2:	4798      	blx	r3
 8016eb4:	4604      	mov	r4, r0
 8016eb6:	b168      	cbz	r0, 8016ed4 <rcutils_format_string_limit+0x64>
 8016eb8:	9b01      	ldr	r3, [sp, #4]
 8016eba:	4632      	mov	r2, r6
 8016ebc:	4639      	mov	r1, r7
 8016ebe:	f000 f8df 	bl	8017080 <rcutils_vsnprintf>
 8016ec2:	2800      	cmp	r0, #0
 8016ec4:	db02      	blt.n	8016ecc <rcutils_format_string_limit+0x5c>
 8016ec6:	2300      	movs	r3, #0
 8016ec8:	5563      	strb	r3, [r4, r5]
 8016eca:	e004      	b.n	8016ed6 <rcutils_format_string_limit+0x66>
 8016ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016ece:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8016ed0:	4620      	mov	r0, r4
 8016ed2:	4798      	blx	r3
 8016ed4:	2400      	movs	r4, #0
 8016ed6:	4620      	mov	r0, r4
 8016ed8:	b003      	add	sp, #12
 8016eda:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8016ede:	b004      	add	sp, #16
 8016ee0:	4770      	bx	lr
 8016ee2:	bf00      	nop

08016ee4 <rcutils_repl_str>:
 8016ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ee8:	ed2d 8b02 	vpush	{d8}
 8016eec:	b087      	sub	sp, #28
 8016eee:	4680      	mov	r8, r0
 8016ef0:	4608      	mov	r0, r1
 8016ef2:	f8cd 8004 	str.w	r8, [sp, #4]
 8016ef6:	ee08 2a10 	vmov	s16, r2
 8016efa:	468a      	mov	sl, r1
 8016efc:	4699      	mov	r9, r3
 8016efe:	f7e9 f999 	bl	8000234 <strlen>
 8016f02:	2600      	movs	r6, #0
 8016f04:	4647      	mov	r7, r8
 8016f06:	9002      	str	r0, [sp, #8]
 8016f08:	46b3      	mov	fp, r6
 8016f0a:	2510      	movs	r5, #16
 8016f0c:	46b0      	mov	r8, r6
 8016f0e:	e01d      	b.n	8016f4c <rcutils_repl_str+0x68>
 8016f10:	f10b 0b01 	add.w	fp, fp, #1
 8016f14:	455e      	cmp	r6, fp
 8016f16:	d211      	bcs.n	8016f3c <rcutils_repl_str+0x58>
 8016f18:	442e      	add	r6, r5
 8016f1a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8016f1e:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8016f22:	00b1      	lsls	r1, r6, #2
 8016f24:	4798      	blx	r3
 8016f26:	2800      	cmp	r0, #0
 8016f28:	f000 8088 	beq.w	801703c <rcutils_repl_str+0x158>
 8016f2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016f30:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8016f34:	4680      	mov	r8, r0
 8016f36:	bf28      	it	cs
 8016f38:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8016f3c:	9a01      	ldr	r2, [sp, #4]
 8016f3e:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8016f42:	1aa2      	subs	r2, r4, r2
 8016f44:	f843 2c04 	str.w	r2, [r3, #-4]
 8016f48:	9b02      	ldr	r3, [sp, #8]
 8016f4a:	18e7      	adds	r7, r4, r3
 8016f4c:	4651      	mov	r1, sl
 8016f4e:	4638      	mov	r0, r7
 8016f50:	f003 fb3d 	bl	801a5ce <strstr>
 8016f54:	4604      	mov	r4, r0
 8016f56:	4640      	mov	r0, r8
 8016f58:	2c00      	cmp	r4, #0
 8016f5a:	d1d9      	bne.n	8016f10 <rcutils_repl_str+0x2c>
 8016f5c:	46b8      	mov	r8, r7
 8016f5e:	4607      	mov	r7, r0
 8016f60:	4640      	mov	r0, r8
 8016f62:	f7e9 f967 	bl	8000234 <strlen>
 8016f66:	9b01      	ldr	r3, [sp, #4]
 8016f68:	eba8 0303 	sub.w	r3, r8, r3
 8016f6c:	181c      	adds	r4, r3, r0
 8016f6e:	9404      	str	r4, [sp, #16]
 8016f70:	f1bb 0f00 	cmp.w	fp, #0
 8016f74:	d04a      	beq.n	801700c <rcutils_repl_str+0x128>
 8016f76:	ee18 0a10 	vmov	r0, s16
 8016f7a:	f7e9 f95b 	bl	8000234 <strlen>
 8016f7e:	9b02      	ldr	r3, [sp, #8]
 8016f80:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8016f84:	1ac3      	subs	r3, r0, r3
 8016f86:	fb0b 4303 	mla	r3, fp, r3, r4
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	9305      	str	r3, [sp, #20]
 8016f8e:	4606      	mov	r6, r0
 8016f90:	f8d9 3000 	ldr.w	r3, [r9]
 8016f94:	1c50      	adds	r0, r2, #1
 8016f96:	4798      	blx	r3
 8016f98:	9003      	str	r0, [sp, #12]
 8016f9a:	2800      	cmp	r0, #0
 8016f9c:	d04f      	beq.n	801703e <rcutils_repl_str+0x15a>
 8016f9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016fa2:	683a      	ldr	r2, [r7, #0]
 8016fa4:	4641      	mov	r1, r8
 8016fa6:	f003 fbb4 	bl	801a712 <memcpy>
 8016faa:	683d      	ldr	r5, [r7, #0]
 8016fac:	9b03      	ldr	r3, [sp, #12]
 8016fae:	9701      	str	r7, [sp, #4]
 8016fb0:	46ba      	mov	sl, r7
 8016fb2:	441d      	add	r5, r3
 8016fb4:	9f02      	ldr	r7, [sp, #8]
 8016fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8016fba:	2401      	movs	r4, #1
 8016fbc:	46d1      	mov	r9, sl
 8016fbe:	ee18 aa10 	vmov	sl, s16
 8016fc2:	e00a      	b.n	8016fda <rcutils_repl_str+0xf6>
 8016fc4:	f8d9 5000 	ldr.w	r5, [r9]
 8016fc8:	1aaa      	subs	r2, r5, r2
 8016fca:	1885      	adds	r5, r0, r2
 8016fcc:	f003 fba1 	bl	801a712 <memcpy>
 8016fd0:	45a3      	cmp	fp, r4
 8016fd2:	f104 0201 	add.w	r2, r4, #1
 8016fd6:	d935      	bls.n	8017044 <rcutils_repl_str+0x160>
 8016fd8:	4614      	mov	r4, r2
 8016fda:	4632      	mov	r2, r6
 8016fdc:	4651      	mov	r1, sl
 8016fde:	4628      	mov	r0, r5
 8016fe0:	f003 fb97 	bl	801a712 <memcpy>
 8016fe4:	f859 2b04 	ldr.w	r2, [r9], #4
 8016fe8:	45a3      	cmp	fp, r4
 8016fea:	443a      	add	r2, r7
 8016fec:	eb05 0006 	add.w	r0, r5, r6
 8016ff0:	eb08 0102 	add.w	r1, r8, r2
 8016ff4:	d1e6      	bne.n	8016fc4 <rcutils_repl_str+0xe0>
 8016ff6:	9b04      	ldr	r3, [sp, #16]
 8016ff8:	1a9a      	subs	r2, r3, r2
 8016ffa:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8016ffe:	f003 fb88 	bl	801a712 <memcpy>
 8017002:	9a03      	ldr	r2, [sp, #12]
 8017004:	9905      	ldr	r1, [sp, #20]
 8017006:	2300      	movs	r3, #0
 8017008:	5453      	strb	r3, [r2, r1]
 801700a:	e00b      	b.n	8017024 <rcutils_repl_str+0x140>
 801700c:	4620      	mov	r0, r4
 801700e:	f8d9 3000 	ldr.w	r3, [r9]
 8017012:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8017016:	3001      	adds	r0, #1
 8017018:	4798      	blx	r3
 801701a:	9003      	str	r0, [sp, #12]
 801701c:	b110      	cbz	r0, 8017024 <rcutils_repl_str+0x140>
 801701e:	9901      	ldr	r1, [sp, #4]
 8017020:	f003 fb6f 	bl	801a702 <strcpy>
 8017024:	4638      	mov	r0, r7
 8017026:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801702a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 801702e:	4798      	blx	r3
 8017030:	9803      	ldr	r0, [sp, #12]
 8017032:	b007      	add	sp, #28
 8017034:	ecbd 8b02 	vpop	{d8}
 8017038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801703c:	4647      	mov	r7, r8
 801703e:	2300      	movs	r3, #0
 8017040:	9303      	str	r3, [sp, #12]
 8017042:	e7ef      	b.n	8017024 <rcutils_repl_str+0x140>
 8017044:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8017048:	e7db      	b.n	8017002 <rcutils_repl_str+0x11e>
 801704a:	bf00      	nop

0801704c <rcutils_snprintf>:
 801704c:	b40c      	push	{r2, r3}
 801704e:	b530      	push	{r4, r5, lr}
 8017050:	b083      	sub	sp, #12
 8017052:	ab06      	add	r3, sp, #24
 8017054:	f853 2b04 	ldr.w	r2, [r3], #4
 8017058:	9301      	str	r3, [sp, #4]
 801705a:	b152      	cbz	r2, 8017072 <rcutils_snprintf+0x26>
 801705c:	b138      	cbz	r0, 801706e <rcutils_snprintf+0x22>
 801705e:	b141      	cbz	r1, 8017072 <rcutils_snprintf+0x26>
 8017060:	f003 f9c2 	bl	801a3e8 <vsniprintf>
 8017064:	b003      	add	sp, #12
 8017066:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801706a:	b002      	add	sp, #8
 801706c:	4770      	bx	lr
 801706e:	2900      	cmp	r1, #0
 8017070:	d0f6      	beq.n	8017060 <rcutils_snprintf+0x14>
 8017072:	f003 fb19 	bl	801a6a8 <__errno>
 8017076:	2316      	movs	r3, #22
 8017078:	6003      	str	r3, [r0, #0]
 801707a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801707e:	e7f1      	b.n	8017064 <rcutils_snprintf+0x18>

08017080 <rcutils_vsnprintf>:
 8017080:	b570      	push	{r4, r5, r6, lr}
 8017082:	b13a      	cbz	r2, 8017094 <rcutils_vsnprintf+0x14>
 8017084:	b120      	cbz	r0, 8017090 <rcutils_vsnprintf+0x10>
 8017086:	b129      	cbz	r1, 8017094 <rcutils_vsnprintf+0x14>
 8017088:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801708c:	f003 b9ac 	b.w	801a3e8 <vsniprintf>
 8017090:	2900      	cmp	r1, #0
 8017092:	d0f9      	beq.n	8017088 <rcutils_vsnprintf+0x8>
 8017094:	f003 fb08 	bl	801a6a8 <__errno>
 8017098:	2316      	movs	r3, #22
 801709a:	6003      	str	r3, [r0, #0]
 801709c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80170a0:	bd70      	pop	{r4, r5, r6, pc}
 80170a2:	bf00      	nop

080170a4 <rcutils_strdup>:
 80170a4:	b084      	sub	sp, #16
 80170a6:	b570      	push	{r4, r5, r6, lr}
 80170a8:	b082      	sub	sp, #8
 80170aa:	ac07      	add	r4, sp, #28
 80170ac:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80170b0:	4605      	mov	r5, r0
 80170b2:	b1b0      	cbz	r0, 80170e2 <rcutils_strdup+0x3e>
 80170b4:	f7e9 f8be 	bl	8000234 <strlen>
 80170b8:	1c42      	adds	r2, r0, #1
 80170ba:	9b07      	ldr	r3, [sp, #28]
 80170bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80170be:	9201      	str	r2, [sp, #4]
 80170c0:	4606      	mov	r6, r0
 80170c2:	4610      	mov	r0, r2
 80170c4:	4798      	blx	r3
 80170c6:	4604      	mov	r4, r0
 80170c8:	b128      	cbz	r0, 80170d6 <rcutils_strdup+0x32>
 80170ca:	9a01      	ldr	r2, [sp, #4]
 80170cc:	4629      	mov	r1, r5
 80170ce:	f003 fb20 	bl	801a712 <memcpy>
 80170d2:	2300      	movs	r3, #0
 80170d4:	55a3      	strb	r3, [r4, r6]
 80170d6:	4620      	mov	r0, r4
 80170d8:	b002      	add	sp, #8
 80170da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80170de:	b004      	add	sp, #16
 80170e0:	4770      	bx	lr
 80170e2:	4604      	mov	r4, r0
 80170e4:	e7f7      	b.n	80170d6 <rcutils_strdup+0x32>
 80170e6:	bf00      	nop

080170e8 <rcutils_strndup>:
 80170e8:	b082      	sub	sp, #8
 80170ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80170ec:	ac06      	add	r4, sp, #24
 80170ee:	e884 000c 	stmia.w	r4, {r2, r3}
 80170f2:	4605      	mov	r5, r0
 80170f4:	b188      	cbz	r0, 801711a <rcutils_strndup+0x32>
 80170f6:	1c4f      	adds	r7, r1, #1
 80170f8:	460e      	mov	r6, r1
 80170fa:	4638      	mov	r0, r7
 80170fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80170fe:	4790      	blx	r2
 8017100:	4604      	mov	r4, r0
 8017102:	b128      	cbz	r0, 8017110 <rcutils_strndup+0x28>
 8017104:	463a      	mov	r2, r7
 8017106:	4629      	mov	r1, r5
 8017108:	f003 fb03 	bl	801a712 <memcpy>
 801710c:	2300      	movs	r3, #0
 801710e:	55a3      	strb	r3, [r4, r6]
 8017110:	4620      	mov	r0, r4
 8017112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017116:	b002      	add	sp, #8
 8017118:	4770      	bx	lr
 801711a:	4604      	mov	r4, r0
 801711c:	e7f8      	b.n	8017110 <rcutils_strndup+0x28>
 801711e:	bf00      	nop

08017120 <rcutils_get_zero_initialized_string_map>:
 8017120:	4b01      	ldr	r3, [pc, #4]	@ (8017128 <rcutils_get_zero_initialized_string_map+0x8>)
 8017122:	2000      	movs	r0, #0
 8017124:	6018      	str	r0, [r3, #0]
 8017126:	4770      	bx	lr
 8017128:	2000affc 	.word	0x2000affc

0801712c <rcutils_string_map_reserve>:
 801712c:	2800      	cmp	r0, #0
 801712e:	d05f      	beq.n	80171f0 <rcutils_string_map_reserve+0xc4>
 8017130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017134:	460c      	mov	r4, r1
 8017136:	6801      	ldr	r1, [r0, #0]
 8017138:	b082      	sub	sp, #8
 801713a:	4605      	mov	r5, r0
 801713c:	b129      	cbz	r1, 801714a <rcutils_string_map_reserve+0x1e>
 801713e:	68cb      	ldr	r3, [r1, #12]
 8017140:	42a3      	cmp	r3, r4
 8017142:	d906      	bls.n	8017152 <rcutils_string_map_reserve+0x26>
 8017144:	461c      	mov	r4, r3
 8017146:	2900      	cmp	r1, #0
 8017148:	d1f9      	bne.n	801713e <rcutils_string_map_reserve+0x12>
 801714a:	201f      	movs	r0, #31
 801714c:	b002      	add	sp, #8
 801714e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017152:	688b      	ldr	r3, [r1, #8]
 8017154:	42a3      	cmp	r3, r4
 8017156:	d047      	beq.n	80171e8 <rcutils_string_map_reserve+0xbc>
 8017158:	6a0e      	ldr	r6, [r1, #32]
 801715a:	2c00      	cmp	r4, #0
 801715c:	d034      	beq.n	80171c8 <rcutils_string_map_reserve+0x9c>
 801715e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8017162:	d243      	bcs.n	80171ec <rcutils_string_map_reserve+0xc0>
 8017164:	00a7      	lsls	r7, r4, #2
 8017166:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801716a:	6808      	ldr	r0, [r1, #0]
 801716c:	4632      	mov	r2, r6
 801716e:	4639      	mov	r1, r7
 8017170:	47c0      	blx	r8
 8017172:	2800      	cmp	r0, #0
 8017174:	d03a      	beq.n	80171ec <rcutils_string_map_reserve+0xc0>
 8017176:	682b      	ldr	r3, [r5, #0]
 8017178:	4632      	mov	r2, r6
 801717a:	6018      	str	r0, [r3, #0]
 801717c:	4639      	mov	r1, r7
 801717e:	6858      	ldr	r0, [r3, #4]
 8017180:	47c0      	blx	r8
 8017182:	2800      	cmp	r0, #0
 8017184:	d032      	beq.n	80171ec <rcutils_string_map_reserve+0xc0>
 8017186:	682d      	ldr	r5, [r5, #0]
 8017188:	68ab      	ldr	r3, [r5, #8]
 801718a:	6068      	str	r0, [r5, #4]
 801718c:	42a3      	cmp	r3, r4
 801718e:	d226      	bcs.n	80171de <rcutils_string_map_reserve+0xb2>
 8017190:	682a      	ldr	r2, [r5, #0]
 8017192:	eb00 0c07 	add.w	ip, r0, r7
 8017196:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 801719a:	45e6      	cmp	lr, ip
 801719c:	ea4f 0183 	mov.w	r1, r3, lsl #2
 80171a0:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80171a4:	d203      	bcs.n	80171ae <rcutils_string_map_reserve+0x82>
 80171a6:	eb02 0c07 	add.w	ip, r2, r7
 80171aa:	4566      	cmp	r6, ip
 80171ac:	d322      	bcc.n	80171f4 <rcutils_string_map_reserve+0xc8>
 80171ae:	1ae3      	subs	r3, r4, r3
 80171b0:	009a      	lsls	r2, r3, #2
 80171b2:	4670      	mov	r0, lr
 80171b4:	2100      	movs	r1, #0
 80171b6:	9201      	str	r2, [sp, #4]
 80171b8:	f003 f9e2 	bl	801a580 <memset>
 80171bc:	9a01      	ldr	r2, [sp, #4]
 80171be:	2100      	movs	r1, #0
 80171c0:	4630      	mov	r0, r6
 80171c2:	f003 f9dd 	bl	801a580 <memset>
 80171c6:	e00a      	b.n	80171de <rcutils_string_map_reserve+0xb2>
 80171c8:	694f      	ldr	r7, [r1, #20]
 80171ca:	6808      	ldr	r0, [r1, #0]
 80171cc:	4631      	mov	r1, r6
 80171ce:	47b8      	blx	r7
 80171d0:	682b      	ldr	r3, [r5, #0]
 80171d2:	4631      	mov	r1, r6
 80171d4:	6858      	ldr	r0, [r3, #4]
 80171d6:	601c      	str	r4, [r3, #0]
 80171d8:	47b8      	blx	r7
 80171da:	682d      	ldr	r5, [r5, #0]
 80171dc:	606c      	str	r4, [r5, #4]
 80171de:	2000      	movs	r0, #0
 80171e0:	60ac      	str	r4, [r5, #8]
 80171e2:	b002      	add	sp, #8
 80171e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80171e8:	2000      	movs	r0, #0
 80171ea:	e7af      	b.n	801714c <rcutils_string_map_reserve+0x20>
 80171ec:	200a      	movs	r0, #10
 80171ee:	e7ad      	b.n	801714c <rcutils_string_map_reserve+0x20>
 80171f0:	200b      	movs	r0, #11
 80171f2:	4770      	bx	lr
 80171f4:	1f0b      	subs	r3, r1, #4
 80171f6:	4418      	add	r0, r3
 80171f8:	4413      	add	r3, r2
 80171fa:	3a04      	subs	r2, #4
 80171fc:	4417      	add	r7, r2
 80171fe:	2200      	movs	r2, #0
 8017200:	f843 2f04 	str.w	r2, [r3, #4]!
 8017204:	42bb      	cmp	r3, r7
 8017206:	f840 2f04 	str.w	r2, [r0, #4]!
 801720a:	d1f9      	bne.n	8017200 <rcutils_string_map_reserve+0xd4>
 801720c:	e7e7      	b.n	80171de <rcutils_string_map_reserve+0xb2>
 801720e:	bf00      	nop

08017210 <rcutils_string_map_init>:
 8017210:	b082      	sub	sp, #8
 8017212:	b570      	push	{r4, r5, r6, lr}
 8017214:	ac04      	add	r4, sp, #16
 8017216:	e884 000c 	stmia.w	r4, {r2, r3}
 801721a:	b380      	cbz	r0, 801727e <rcutils_string_map_init+0x6e>
 801721c:	6806      	ldr	r6, [r0, #0]
 801721e:	4604      	mov	r4, r0
 8017220:	b12e      	cbz	r6, 801722e <rcutils_string_map_init+0x1e>
 8017222:	251e      	movs	r5, #30
 8017224:	4628      	mov	r0, r5
 8017226:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801722a:	b002      	add	sp, #8
 801722c:	4770      	bx	lr
 801722e:	a804      	add	r0, sp, #16
 8017230:	460d      	mov	r5, r1
 8017232:	f7f6 fedf 	bl	800dff4 <rcutils_allocator_is_valid>
 8017236:	b310      	cbz	r0, 801727e <rcutils_string_map_init+0x6e>
 8017238:	9b04      	ldr	r3, [sp, #16]
 801723a:	9908      	ldr	r1, [sp, #32]
 801723c:	2024      	movs	r0, #36	@ 0x24
 801723e:	4798      	blx	r3
 8017240:	6020      	str	r0, [r4, #0]
 8017242:	b310      	cbz	r0, 801728a <rcutils_string_map_init+0x7a>
 8017244:	f10d 0e10 	add.w	lr, sp, #16
 8017248:	e9c0 6600 	strd	r6, r6, [r0]
 801724c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8017250:	f100 0c10 	add.w	ip, r0, #16
 8017254:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017258:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801725c:	f8de 3000 	ldr.w	r3, [lr]
 8017260:	f8cc 3000 	str.w	r3, [ip]
 8017264:	4629      	mov	r1, r5
 8017266:	4620      	mov	r0, r4
 8017268:	f7ff ff60 	bl	801712c <rcutils_string_map_reserve>
 801726c:	4605      	mov	r5, r0
 801726e:	2800      	cmp	r0, #0
 8017270:	d0d8      	beq.n	8017224 <rcutils_string_map_init+0x14>
 8017272:	9b05      	ldr	r3, [sp, #20]
 8017274:	9908      	ldr	r1, [sp, #32]
 8017276:	6820      	ldr	r0, [r4, #0]
 8017278:	4798      	blx	r3
 801727a:	6026      	str	r6, [r4, #0]
 801727c:	e7d2      	b.n	8017224 <rcutils_string_map_init+0x14>
 801727e:	250b      	movs	r5, #11
 8017280:	4628      	mov	r0, r5
 8017282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017286:	b002      	add	sp, #8
 8017288:	4770      	bx	lr
 801728a:	250a      	movs	r5, #10
 801728c:	e7ca      	b.n	8017224 <rcutils_string_map_init+0x14>
 801728e:	bf00      	nop

08017290 <rcutils_string_map_fini>:
 8017290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017294:	b082      	sub	sp, #8
 8017296:	2800      	cmp	r0, #0
 8017298:	d03a      	beq.n	8017310 <rcutils_string_map_fini+0x80>
 801729a:	6804      	ldr	r4, [r0, #0]
 801729c:	4606      	mov	r6, r0
 801729e:	2c00      	cmp	r4, #0
 80172a0:	d032      	beq.n	8017308 <rcutils_string_map_fini+0x78>
 80172a2:	68a3      	ldr	r3, [r4, #8]
 80172a4:	b32b      	cbz	r3, 80172f2 <rcutils_string_map_fini+0x62>
 80172a6:	2500      	movs	r5, #0
 80172a8:	6822      	ldr	r2, [r4, #0]
 80172aa:	462f      	mov	r7, r5
 80172ac:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80172b0:	b1e0      	cbz	r0, 80172ec <rcutils_string_map_fini+0x5c>
 80172b2:	6a21      	ldr	r1, [r4, #32]
 80172b4:	f8d4 8014 	ldr.w	r8, [r4, #20]
 80172b8:	9101      	str	r1, [sp, #4]
 80172ba:	47c0      	blx	r8
 80172bc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80172c0:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80172c4:	9901      	ldr	r1, [sp, #4]
 80172c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80172ca:	47c0      	blx	r8
 80172cc:	68e3      	ldr	r3, [r4, #12]
 80172ce:	6862      	ldr	r2, [r4, #4]
 80172d0:	3b01      	subs	r3, #1
 80172d2:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 80172d6:	60e3      	str	r3, [r4, #12]
 80172d8:	6834      	ldr	r4, [r6, #0]
 80172da:	68a3      	ldr	r3, [r4, #8]
 80172dc:	3501      	adds	r5, #1
 80172de:	429d      	cmp	r5, r3
 80172e0:	d207      	bcs.n	80172f2 <rcutils_string_map_fini+0x62>
 80172e2:	6822      	ldr	r2, [r4, #0]
 80172e4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 80172e8:	2800      	cmp	r0, #0
 80172ea:	d1e2      	bne.n	80172b2 <rcutils_string_map_fini+0x22>
 80172ec:	3501      	adds	r5, #1
 80172ee:	429d      	cmp	r5, r3
 80172f0:	d3dc      	bcc.n	80172ac <rcutils_string_map_fini+0x1c>
 80172f2:	2100      	movs	r1, #0
 80172f4:	4630      	mov	r0, r6
 80172f6:	f7ff ff19 	bl	801712c <rcutils_string_map_reserve>
 80172fa:	4604      	mov	r4, r0
 80172fc:	b920      	cbnz	r0, 8017308 <rcutils_string_map_fini+0x78>
 80172fe:	6830      	ldr	r0, [r6, #0]
 8017300:	6943      	ldr	r3, [r0, #20]
 8017302:	6a01      	ldr	r1, [r0, #32]
 8017304:	4798      	blx	r3
 8017306:	6034      	str	r4, [r6, #0]
 8017308:	4620      	mov	r0, r4
 801730a:	b002      	add	sp, #8
 801730c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017310:	240b      	movs	r4, #11
 8017312:	4620      	mov	r0, r4
 8017314:	b002      	add	sp, #8
 8017316:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801731a:	bf00      	nop

0801731c <rcutils_string_map_getn>:
 801731c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017320:	b300      	cbz	r0, 8017364 <rcutils_string_map_getn+0x48>
 8017322:	6807      	ldr	r7, [r0, #0]
 8017324:	b1ff      	cbz	r7, 8017366 <rcutils_string_map_getn+0x4a>
 8017326:	4688      	mov	r8, r1
 8017328:	b1e1      	cbz	r1, 8017364 <rcutils_string_map_getn+0x48>
 801732a:	f8d7 a008 	ldr.w	sl, [r7, #8]
 801732e:	683e      	ldr	r6, [r7, #0]
 8017330:	f1ba 0f00 	cmp.w	sl, #0
 8017334:	d016      	beq.n	8017364 <rcutils_string_map_getn+0x48>
 8017336:	4691      	mov	r9, r2
 8017338:	3e04      	subs	r6, #4
 801733a:	2400      	movs	r4, #0
 801733c:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8017340:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017344:	4628      	mov	r0, r5
 8017346:	3401      	adds	r4, #1
 8017348:	b155      	cbz	r5, 8017360 <rcutils_string_map_getn+0x44>
 801734a:	f7e8 ff73 	bl	8000234 <strlen>
 801734e:	4548      	cmp	r0, r9
 8017350:	4602      	mov	r2, r0
 8017352:	4629      	mov	r1, r5
 8017354:	bf38      	it	cc
 8017356:	464a      	movcc	r2, r9
 8017358:	4640      	mov	r0, r8
 801735a:	f003 f926 	bl	801a5aa <strncmp>
 801735e:	b128      	cbz	r0, 801736c <rcutils_string_map_getn+0x50>
 8017360:	45a2      	cmp	sl, r4
 8017362:	d1eb      	bne.n	801733c <rcutils_string_map_getn+0x20>
 8017364:	2700      	movs	r7, #0
 8017366:	4638      	mov	r0, r7
 8017368:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	f853 700b 	ldr.w	r7, [r3, fp]
 8017372:	4638      	mov	r0, r7
 8017374:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017378 <rmw_get_zero_initialized_context>:
 8017378:	b510      	push	{r4, lr}
 801737a:	4604      	mov	r4, r0
 801737c:	3010      	adds	r0, #16
 801737e:	f7f6 fecb 	bl	800e118 <rmw_get_zero_initialized_init_options>
 8017382:	2300      	movs	r3, #0
 8017384:	2000      	movs	r0, #0
 8017386:	2100      	movs	r1, #0
 8017388:	e9c4 0100 	strd	r0, r1, [r4]
 801738c:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8017390:	60a3      	str	r3, [r4, #8]
 8017392:	4620      	mov	r0, r4
 8017394:	bd10      	pop	{r4, pc}
 8017396:	bf00      	nop

08017398 <rmw_time_equal>:
 8017398:	b4f0      	push	{r4, r5, r6, r7}
 801739a:	b084      	sub	sp, #16
 801739c:	ac04      	add	r4, sp, #16
 801739e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80173a2:	4603      	mov	r3, r0
 80173a4:	4924      	ldr	r1, [pc, #144]	@ (8017438 <rmw_time_equal+0xa0>)
 80173a6:	9e03      	ldr	r6, [sp, #12]
 80173a8:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 80173ac:	2202      	movs	r2, #2
 80173ae:	4299      	cmp	r1, r3
 80173b0:	41aa      	sbcs	r2, r5
 80173b2:	d330      	bcc.n	8017416 <rmw_time_equal+0x7e>
 80173b4:	4c21      	ldr	r4, [pc, #132]	@ (801743c <rmw_time_equal+0xa4>)
 80173b6:	fba3 3204 	umull	r3, r2, r3, r4
 80173ba:	fb04 2205 	mla	r2, r4, r5, r2
 80173be:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80173c2:	43dd      	mvns	r5, r3
 80173c4:	1a8c      	subs	r4, r1, r2
 80173c6:	4285      	cmp	r5, r0
 80173c8:	41b4      	sbcs	r4, r6
 80173ca:	d332      	bcc.n	8017432 <rmw_time_equal+0x9a>
 80173cc:	eb10 0c03 	adds.w	ip, r0, r3
 80173d0:	eb42 0106 	adc.w	r1, r2, r6
 80173d4:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80173d8:	4817      	ldr	r0, [pc, #92]	@ (8017438 <rmw_time_equal+0xa0>)
 80173da:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80173dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80173de:	2202      	movs	r2, #2
 80173e0:	4298      	cmp	r0, r3
 80173e2:	41b2      	sbcs	r2, r6
 80173e4:	d31c      	bcc.n	8017420 <rmw_time_equal+0x88>
 80173e6:	4c15      	ldr	r4, [pc, #84]	@ (801743c <rmw_time_equal+0xa4>)
 80173e8:	fba3 3204 	umull	r3, r2, r3, r4
 80173ec:	fb04 2206 	mla	r2, r4, r6, r2
 80173f0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80173f4:	43de      	mvns	r6, r3
 80173f6:	1a84      	subs	r4, r0, r2
 80173f8:	42ae      	cmp	r6, r5
 80173fa:	41bc      	sbcs	r4, r7
 80173fc:	d315      	bcc.n	801742a <rmw_time_equal+0x92>
 80173fe:	195b      	adds	r3, r3, r5
 8017400:	eb42 0207 	adc.w	r2, r2, r7
 8017404:	428a      	cmp	r2, r1
 8017406:	bf08      	it	eq
 8017408:	4563      	cmpeq	r3, ip
 801740a:	bf0c      	ite	eq
 801740c:	2001      	moveq	r0, #1
 801740e:	2000      	movne	r0, #0
 8017410:	b004      	add	sp, #16
 8017412:	bcf0      	pop	{r4, r5, r6, r7}
 8017414:	4770      	bx	lr
 8017416:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801741a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801741e:	e7d9      	b.n	80173d4 <rmw_time_equal+0x3c>
 8017420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8017424:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8017428:	e7ec      	b.n	8017404 <rmw_time_equal+0x6c>
 801742a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801742e:	4602      	mov	r2, r0
 8017430:	e7e8      	b.n	8017404 <rmw_time_equal+0x6c>
 8017432:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8017436:	e7cd      	b.n	80173d4 <rmw_time_equal+0x3c>
 8017438:	25c17d04 	.word	0x25c17d04
 801743c:	3b9aca00 	.word	0x3b9aca00

08017440 <rmw_time_total_nsec>:
 8017440:	b470      	push	{r4, r5, r6}
 8017442:	b085      	sub	sp, #20
 8017444:	ac04      	add	r4, sp, #16
 8017446:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801744a:	4603      	mov	r3, r0
 801744c:	4912      	ldr	r1, [pc, #72]	@ (8017498 <rmw_time_total_nsec+0x58>)
 801744e:	9e03      	ldr	r6, [sp, #12]
 8017450:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8017454:	2202      	movs	r2, #2
 8017456:	4299      	cmp	r1, r3
 8017458:	41aa      	sbcs	r2, r5
 801745a:	d311      	bcc.n	8017480 <rmw_time_total_nsec+0x40>
 801745c:	4c0f      	ldr	r4, [pc, #60]	@ (801749c <rmw_time_total_nsec+0x5c>)
 801745e:	fba3 3204 	umull	r3, r2, r3, r4
 8017462:	fb04 2205 	mla	r2, r4, r5, r2
 8017466:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801746a:	43dd      	mvns	r5, r3
 801746c:	1a8c      	subs	r4, r1, r2
 801746e:	4285      	cmp	r5, r0
 8017470:	41b4      	sbcs	r4, r6
 8017472:	d30c      	bcc.n	801748e <rmw_time_total_nsec+0x4e>
 8017474:	1818      	adds	r0, r3, r0
 8017476:	eb42 0106 	adc.w	r1, r2, r6
 801747a:	b005      	add	sp, #20
 801747c:	bc70      	pop	{r4, r5, r6}
 801747e:	4770      	bx	lr
 8017480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017484:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8017488:	b005      	add	sp, #20
 801748a:	bc70      	pop	{r4, r5, r6}
 801748c:	4770      	bx	lr
 801748e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017492:	b005      	add	sp, #20
 8017494:	bc70      	pop	{r4, r5, r6}
 8017496:	4770      	bx	lr
 8017498:	25c17d04 	.word	0x25c17d04
 801749c:	3b9aca00 	.word	0x3b9aca00

080174a0 <rmw_get_zero_initialized_message_info>:
 80174a0:	b510      	push	{r4, lr}
 80174a2:	2240      	movs	r2, #64	@ 0x40
 80174a4:	4604      	mov	r4, r0
 80174a6:	2100      	movs	r1, #0
 80174a8:	f003 f86a 	bl	801a580 <memset>
 80174ac:	4620      	mov	r0, r4
 80174ae:	bd10      	pop	{r4, pc}

080174b0 <rmw_validate_full_topic_name>:
 80174b0:	2800      	cmp	r0, #0
 80174b2:	d057      	beq.n	8017564 <rmw_validate_full_topic_name+0xb4>
 80174b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174b8:	460d      	mov	r5, r1
 80174ba:	2900      	cmp	r1, #0
 80174bc:	d054      	beq.n	8017568 <rmw_validate_full_topic_name+0xb8>
 80174be:	4616      	mov	r6, r2
 80174c0:	4604      	mov	r4, r0
 80174c2:	f7e8 feb7 	bl	8000234 <strlen>
 80174c6:	b148      	cbz	r0, 80174dc <rmw_validate_full_topic_name+0x2c>
 80174c8:	7823      	ldrb	r3, [r4, #0]
 80174ca:	2b2f      	cmp	r3, #47	@ 0x2f
 80174cc:	d00d      	beq.n	80174ea <rmw_validate_full_topic_name+0x3a>
 80174ce:	2302      	movs	r3, #2
 80174d0:	602b      	str	r3, [r5, #0]
 80174d2:	b13e      	cbz	r6, 80174e4 <rmw_validate_full_topic_name+0x34>
 80174d4:	2000      	movs	r0, #0
 80174d6:	6030      	str	r0, [r6, #0]
 80174d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174dc:	2301      	movs	r3, #1
 80174de:	602b      	str	r3, [r5, #0]
 80174e0:	2e00      	cmp	r6, #0
 80174e2:	d1f7      	bne.n	80174d4 <rmw_validate_full_topic_name+0x24>
 80174e4:	2000      	movs	r0, #0
 80174e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80174ea:	1e43      	subs	r3, r0, #1
 80174ec:	5ce2      	ldrb	r2, [r4, r3]
 80174ee:	2a2f      	cmp	r2, #47	@ 0x2f
 80174f0:	d03c      	beq.n	801756c <rmw_validate_full_topic_name+0xbc>
 80174f2:	1e63      	subs	r3, r4, #1
 80174f4:	eb03 0800 	add.w	r8, r3, r0
 80174f8:	f1c4 0e01 	rsb	lr, r4, #1
 80174fc:	eb0e 0703 	add.w	r7, lr, r3
 8017500:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8017504:	f021 0220 	bic.w	r2, r1, #32
 8017508:	3a41      	subs	r2, #65	@ 0x41
 801750a:	2a19      	cmp	r2, #25
 801750c:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 8017510:	d90b      	bls.n	801752a <rmw_validate_full_topic_name+0x7a>
 8017512:	295f      	cmp	r1, #95	@ 0x5f
 8017514:	d009      	beq.n	801752a <rmw_validate_full_topic_name+0x7a>
 8017516:	f1bc 0f0a 	cmp.w	ip, #10
 801751a:	d906      	bls.n	801752a <rmw_validate_full_topic_name+0x7a>
 801751c:	2304      	movs	r3, #4
 801751e:	602b      	str	r3, [r5, #0]
 8017520:	2e00      	cmp	r6, #0
 8017522:	d0df      	beq.n	80174e4 <rmw_validate_full_topic_name+0x34>
 8017524:	6037      	str	r7, [r6, #0]
 8017526:	2000      	movs	r0, #0
 8017528:	e7d6      	b.n	80174d8 <rmw_validate_full_topic_name+0x28>
 801752a:	4543      	cmp	r3, r8
 801752c:	d1e6      	bne.n	80174fc <rmw_validate_full_topic_name+0x4c>
 801752e:	4f1a      	ldr	r7, [pc, #104]	@ (8017598 <rmw_validate_full_topic_name+0xe8>)
 8017530:	2301      	movs	r3, #1
 8017532:	e004      	b.n	801753e <rmw_validate_full_topic_name+0x8e>
 8017534:	4298      	cmp	r0, r3
 8017536:	f104 0401 	add.w	r4, r4, #1
 801753a:	d91c      	bls.n	8017576 <rmw_validate_full_topic_name+0xc6>
 801753c:	4613      	mov	r3, r2
 801753e:	4298      	cmp	r0, r3
 8017540:	f103 0201 	add.w	r2, r3, #1
 8017544:	d0f6      	beq.n	8017534 <rmw_validate_full_topic_name+0x84>
 8017546:	7821      	ldrb	r1, [r4, #0]
 8017548:	292f      	cmp	r1, #47	@ 0x2f
 801754a:	d1f3      	bne.n	8017534 <rmw_validate_full_topic_name+0x84>
 801754c:	7861      	ldrb	r1, [r4, #1]
 801754e:	292f      	cmp	r1, #47	@ 0x2f
 8017550:	d01c      	beq.n	801758c <rmw_validate_full_topic_name+0xdc>
 8017552:	5dc9      	ldrb	r1, [r1, r7]
 8017554:	0749      	lsls	r1, r1, #29
 8017556:	d5ed      	bpl.n	8017534 <rmw_validate_full_topic_name+0x84>
 8017558:	2206      	movs	r2, #6
 801755a:	602a      	str	r2, [r5, #0]
 801755c:	2e00      	cmp	r6, #0
 801755e:	d0c1      	beq.n	80174e4 <rmw_validate_full_topic_name+0x34>
 8017560:	6033      	str	r3, [r6, #0]
 8017562:	e7bf      	b.n	80174e4 <rmw_validate_full_topic_name+0x34>
 8017564:	200b      	movs	r0, #11
 8017566:	4770      	bx	lr
 8017568:	200b      	movs	r0, #11
 801756a:	e7b5      	b.n	80174d8 <rmw_validate_full_topic_name+0x28>
 801756c:	2203      	movs	r2, #3
 801756e:	602a      	str	r2, [r5, #0]
 8017570:	2e00      	cmp	r6, #0
 8017572:	d1f5      	bne.n	8017560 <rmw_validate_full_topic_name+0xb0>
 8017574:	e7b6      	b.n	80174e4 <rmw_validate_full_topic_name+0x34>
 8017576:	28f7      	cmp	r0, #247	@ 0xf7
 8017578:	d802      	bhi.n	8017580 <rmw_validate_full_topic_name+0xd0>
 801757a:	2000      	movs	r0, #0
 801757c:	6028      	str	r0, [r5, #0]
 801757e:	e7ab      	b.n	80174d8 <rmw_validate_full_topic_name+0x28>
 8017580:	2307      	movs	r3, #7
 8017582:	602b      	str	r3, [r5, #0]
 8017584:	2e00      	cmp	r6, #0
 8017586:	d0ad      	beq.n	80174e4 <rmw_validate_full_topic_name+0x34>
 8017588:	23f6      	movs	r3, #246	@ 0xf6
 801758a:	e7e9      	b.n	8017560 <rmw_validate_full_topic_name+0xb0>
 801758c:	2205      	movs	r2, #5
 801758e:	602a      	str	r2, [r5, #0]
 8017590:	2e00      	cmp	r6, #0
 8017592:	d1e5      	bne.n	8017560 <rmw_validate_full_topic_name+0xb0>
 8017594:	e7a6      	b.n	80174e4 <rmw_validate_full_topic_name+0x34>
 8017596:	bf00      	nop
 8017598:	0801c0df 	.word	0x0801c0df

0801759c <rmw_validate_namespace_with_size>:
 801759c:	b340      	cbz	r0, 80175f0 <rmw_validate_namespace_with_size+0x54>
 801759e:	b570      	push	{r4, r5, r6, lr}
 80175a0:	4614      	mov	r4, r2
 80175a2:	b0c2      	sub	sp, #264	@ 0x108
 80175a4:	b332      	cbz	r2, 80175f4 <rmw_validate_namespace_with_size+0x58>
 80175a6:	2901      	cmp	r1, #1
 80175a8:	460d      	mov	r5, r1
 80175aa:	461e      	mov	r6, r3
 80175ac:	d102      	bne.n	80175b4 <rmw_validate_namespace_with_size+0x18>
 80175ae:	7803      	ldrb	r3, [r0, #0]
 80175b0:	2b2f      	cmp	r3, #47	@ 0x2f
 80175b2:	d012      	beq.n	80175da <rmw_validate_namespace_with_size+0x3e>
 80175b4:	aa01      	add	r2, sp, #4
 80175b6:	4669      	mov	r1, sp
 80175b8:	f7ff ff7a 	bl	80174b0 <rmw_validate_full_topic_name>
 80175bc:	b978      	cbnz	r0, 80175de <rmw_validate_namespace_with_size+0x42>
 80175be:	9b00      	ldr	r3, [sp, #0]
 80175c0:	b14b      	cbz	r3, 80175d6 <rmw_validate_namespace_with_size+0x3a>
 80175c2:	2b07      	cmp	r3, #7
 80175c4:	d007      	beq.n	80175d6 <rmw_validate_namespace_with_size+0x3a>
 80175c6:	1e5a      	subs	r2, r3, #1
 80175c8:	2a05      	cmp	r2, #5
 80175ca:	d82b      	bhi.n	8017624 <rmw_validate_namespace_with_size+0x88>
 80175cc:	e8df f002 	tbb	[pc, r2]
 80175d0:	1e212427 	.word	0x1e212427
 80175d4:	141b      	.short	0x141b
 80175d6:	2df5      	cmp	r5, #245	@ 0xf5
 80175d8:	d803      	bhi.n	80175e2 <rmw_validate_namespace_with_size+0x46>
 80175da:	2000      	movs	r0, #0
 80175dc:	6020      	str	r0, [r4, #0]
 80175de:	b042      	add	sp, #264	@ 0x108
 80175e0:	bd70      	pop	{r4, r5, r6, pc}
 80175e2:	2307      	movs	r3, #7
 80175e4:	6023      	str	r3, [r4, #0]
 80175e6:	2e00      	cmp	r6, #0
 80175e8:	d0f9      	beq.n	80175de <rmw_validate_namespace_with_size+0x42>
 80175ea:	23f4      	movs	r3, #244	@ 0xf4
 80175ec:	6033      	str	r3, [r6, #0]
 80175ee:	e7f6      	b.n	80175de <rmw_validate_namespace_with_size+0x42>
 80175f0:	200b      	movs	r0, #11
 80175f2:	4770      	bx	lr
 80175f4:	200b      	movs	r0, #11
 80175f6:	e7f2      	b.n	80175de <rmw_validate_namespace_with_size+0x42>
 80175f8:	2306      	movs	r3, #6
 80175fa:	6023      	str	r3, [r4, #0]
 80175fc:	2e00      	cmp	r6, #0
 80175fe:	d0ee      	beq.n	80175de <rmw_validate_namespace_with_size+0x42>
 8017600:	9b01      	ldr	r3, [sp, #4]
 8017602:	6033      	str	r3, [r6, #0]
 8017604:	e7eb      	b.n	80175de <rmw_validate_namespace_with_size+0x42>
 8017606:	2305      	movs	r3, #5
 8017608:	6023      	str	r3, [r4, #0]
 801760a:	e7f7      	b.n	80175fc <rmw_validate_namespace_with_size+0x60>
 801760c:	2304      	movs	r3, #4
 801760e:	6023      	str	r3, [r4, #0]
 8017610:	e7f4      	b.n	80175fc <rmw_validate_namespace_with_size+0x60>
 8017612:	2303      	movs	r3, #3
 8017614:	6023      	str	r3, [r4, #0]
 8017616:	e7f1      	b.n	80175fc <rmw_validate_namespace_with_size+0x60>
 8017618:	2302      	movs	r3, #2
 801761a:	6023      	str	r3, [r4, #0]
 801761c:	e7ee      	b.n	80175fc <rmw_validate_namespace_with_size+0x60>
 801761e:	2301      	movs	r3, #1
 8017620:	6023      	str	r3, [r4, #0]
 8017622:	e7eb      	b.n	80175fc <rmw_validate_namespace_with_size+0x60>
 8017624:	4a03      	ldr	r2, [pc, #12]	@ (8017634 <rmw_validate_namespace_with_size+0x98>)
 8017626:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801762a:	a802      	add	r0, sp, #8
 801762c:	f7ff fd0e 	bl	801704c <rcutils_snprintf>
 8017630:	2001      	movs	r0, #1
 8017632:	e7d4      	b.n	80175de <rmw_validate_namespace_with_size+0x42>
 8017634:	0801b7e4 	.word	0x0801b7e4

08017638 <rmw_validate_namespace>:
 8017638:	b168      	cbz	r0, 8017656 <rmw_validate_namespace+0x1e>
 801763a:	b570      	push	{r4, r5, r6, lr}
 801763c:	460d      	mov	r5, r1
 801763e:	4616      	mov	r6, r2
 8017640:	4604      	mov	r4, r0
 8017642:	f7e8 fdf7 	bl	8000234 <strlen>
 8017646:	4633      	mov	r3, r6
 8017648:	4601      	mov	r1, r0
 801764a:	462a      	mov	r2, r5
 801764c:	4620      	mov	r0, r4
 801764e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017652:	f7ff bfa3 	b.w	801759c <rmw_validate_namespace_with_size>
 8017656:	200b      	movs	r0, #11
 8017658:	4770      	bx	lr
 801765a:	bf00      	nop

0801765c <rmw_namespace_validation_result_string>:
 801765c:	2807      	cmp	r0, #7
 801765e:	bf9a      	itte	ls
 8017660:	4b02      	ldrls	r3, [pc, #8]	@ (801766c <rmw_namespace_validation_result_string+0x10>)
 8017662:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017666:	4802      	ldrhi	r0, [pc, #8]	@ (8017670 <rmw_namespace_validation_result_string+0x14>)
 8017668:	4770      	bx	lr
 801766a:	bf00      	nop
 801766c:	0801bfa4 	.word	0x0801bfa4
 8017670:	0801b834 	.word	0x0801b834

08017674 <rmw_validate_node_name>:
 8017674:	2800      	cmp	r0, #0
 8017676:	d03b      	beq.n	80176f0 <rmw_validate_node_name+0x7c>
 8017678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801767c:	460d      	mov	r5, r1
 801767e:	2900      	cmp	r1, #0
 8017680:	d038      	beq.n	80176f4 <rmw_validate_node_name+0x80>
 8017682:	4616      	mov	r6, r2
 8017684:	4604      	mov	r4, r0
 8017686:	f7e8 fdd5 	bl	8000234 <strlen>
 801768a:	b1e0      	cbz	r0, 80176c6 <rmw_validate_node_name+0x52>
 801768c:	1e63      	subs	r3, r4, #1
 801768e:	eb03 0800 	add.w	r8, r3, r0
 8017692:	f1c4 0101 	rsb	r1, r4, #1
 8017696:	18cf      	adds	r7, r1, r3
 8017698:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 801769c:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 80176a0:	f02e 0c20 	bic.w	ip, lr, #32
 80176a4:	2a09      	cmp	r2, #9
 80176a6:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 80176aa:	d914      	bls.n	80176d6 <rmw_validate_node_name+0x62>
 80176ac:	f1bc 0f19 	cmp.w	ip, #25
 80176b0:	d911      	bls.n	80176d6 <rmw_validate_node_name+0x62>
 80176b2:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 80176b6:	d00e      	beq.n	80176d6 <rmw_validate_node_name+0x62>
 80176b8:	2302      	movs	r3, #2
 80176ba:	602b      	str	r3, [r5, #0]
 80176bc:	b106      	cbz	r6, 80176c0 <rmw_validate_node_name+0x4c>
 80176be:	6037      	str	r7, [r6, #0]
 80176c0:	2000      	movs	r0, #0
 80176c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176c6:	2301      	movs	r3, #1
 80176c8:	602b      	str	r3, [r5, #0]
 80176ca:	2e00      	cmp	r6, #0
 80176cc:	d0f8      	beq.n	80176c0 <rmw_validate_node_name+0x4c>
 80176ce:	2000      	movs	r0, #0
 80176d0:	6030      	str	r0, [r6, #0]
 80176d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176d6:	4543      	cmp	r3, r8
 80176d8:	d1dd      	bne.n	8017696 <rmw_validate_node_name+0x22>
 80176da:	7822      	ldrb	r2, [r4, #0]
 80176dc:	4b0d      	ldr	r3, [pc, #52]	@ (8017714 <rmw_validate_node_name+0xa0>)
 80176de:	5cd3      	ldrb	r3, [r2, r3]
 80176e0:	f013 0304 	ands.w	r3, r3, #4
 80176e4:	d110      	bne.n	8017708 <rmw_validate_node_name+0x94>
 80176e6:	28ff      	cmp	r0, #255	@ 0xff
 80176e8:	d806      	bhi.n	80176f8 <rmw_validate_node_name+0x84>
 80176ea:	602b      	str	r3, [r5, #0]
 80176ec:	4618      	mov	r0, r3
 80176ee:	e7e8      	b.n	80176c2 <rmw_validate_node_name+0x4e>
 80176f0:	200b      	movs	r0, #11
 80176f2:	4770      	bx	lr
 80176f4:	200b      	movs	r0, #11
 80176f6:	e7e4      	b.n	80176c2 <rmw_validate_node_name+0x4e>
 80176f8:	2204      	movs	r2, #4
 80176fa:	602a      	str	r2, [r5, #0]
 80176fc:	2e00      	cmp	r6, #0
 80176fe:	d0df      	beq.n	80176c0 <rmw_validate_node_name+0x4c>
 8017700:	22fe      	movs	r2, #254	@ 0xfe
 8017702:	6032      	str	r2, [r6, #0]
 8017704:	4618      	mov	r0, r3
 8017706:	e7dc      	b.n	80176c2 <rmw_validate_node_name+0x4e>
 8017708:	2303      	movs	r3, #3
 801770a:	602b      	str	r3, [r5, #0]
 801770c:	2e00      	cmp	r6, #0
 801770e:	d1de      	bne.n	80176ce <rmw_validate_node_name+0x5a>
 8017710:	e7d6      	b.n	80176c0 <rmw_validate_node_name+0x4c>
 8017712:	bf00      	nop
 8017714:	0801c0df 	.word	0x0801c0df

08017718 <rmw_node_name_validation_result_string>:
 8017718:	2804      	cmp	r0, #4
 801771a:	bf9a      	itte	ls
 801771c:	4b02      	ldrls	r3, [pc, #8]	@ (8017728 <rmw_node_name_validation_result_string+0x10>)
 801771e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8017722:	4802      	ldrhi	r0, [pc, #8]	@ (801772c <rmw_node_name_validation_result_string+0x14>)
 8017724:	4770      	bx	lr
 8017726:	bf00      	nop
 8017728:	0801bfc4 	.word	0x0801bfc4
 801772c:	0801b9dc 	.word	0x0801b9dc

08017730 <on_status>:
 8017730:	b082      	sub	sp, #8
 8017732:	b002      	add	sp, #8
 8017734:	4770      	bx	lr
 8017736:	bf00      	nop

08017738 <on_topic>:
 8017738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801773c:	4a22      	ldr	r2, [pc, #136]	@ (80177c8 <on_topic+0x90>)
 801773e:	b094      	sub	sp, #80	@ 0x50
 8017740:	6812      	ldr	r2, [r2, #0]
 8017742:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8017744:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8017748:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 801774c:	b3c2      	cbz	r2, 80177c0 <on_topic+0x88>
 801774e:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8017752:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8017756:	e001      	b.n	801775c <on_topic+0x24>
 8017758:	6852      	ldr	r2, [r2, #4]
 801775a:	b38a      	cbz	r2, 80177c0 <on_topic+0x88>
 801775c:	6894      	ldr	r4, [r2, #8]
 801775e:	8aa3      	ldrh	r3, [r4, #20]
 8017760:	428b      	cmp	r3, r1
 8017762:	d1f9      	bne.n	8017758 <on_topic+0x20>
 8017764:	7da3      	ldrb	r3, [r4, #22]
 8017766:	4283      	cmp	r3, r0
 8017768:	d1f6      	bne.n	8017758 <on_topic+0x20>
 801776a:	2248      	movs	r2, #72	@ 0x48
 801776c:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8017770:	4668      	mov	r0, sp
 8017772:	f002 ffce 	bl	801a712 <memcpy>
 8017776:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 801777a:	cb0c      	ldmia	r3, {r2, r3}
 801777c:	4620      	mov	r0, r4
 801777e:	f7f7 fcf9 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 8017782:	4607      	mov	r7, r0
 8017784:	b1e0      	cbz	r0, 80177c0 <on_topic+0x88>
 8017786:	f8d0 8008 	ldr.w	r8, [r0, #8]
 801778a:	4632      	mov	r2, r6
 801778c:	4628      	mov	r0, r5
 801778e:	f108 0110 	add.w	r1, r8, #16
 8017792:	f000 ff69 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8017796:	b930      	cbnz	r0, 80177a6 <on_topic+0x6e>
 8017798:	480c      	ldr	r0, [pc, #48]	@ (80177cc <on_topic+0x94>)
 801779a:	4639      	mov	r1, r7
 801779c:	b014      	add	sp, #80	@ 0x50
 801779e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177a2:	f000 b8bd 	b.w	8017920 <put_memory>
 80177a6:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 80177aa:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 80177ae:	f7f7 fadf 	bl	800ed70 <rmw_uros_epoch_nanos>
 80177b2:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 80177b6:	2305      	movs	r3, #5
 80177b8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80177bc:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80177c0:	b014      	add	sp, #80	@ 0x50
 80177c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c6:	bf00      	nop
 80177c8:	2000afac 	.word	0x2000afac
 80177cc:	2000af9c 	.word	0x2000af9c

080177d0 <on_request>:
 80177d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177d4:	4823      	ldr	r0, [pc, #140]	@ (8017864 <on_request+0x94>)
 80177d6:	b094      	sub	sp, #80	@ 0x50
 80177d8:	6800      	ldr	r0, [r0, #0]
 80177da:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80177dc:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80177e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80177e2:	2800      	cmp	r0, #0
 80177e4:	d03b      	beq.n	801785e <on_request+0x8e>
 80177e6:	461d      	mov	r5, r3
 80177e8:	e001      	b.n	80177ee <on_request+0x1e>
 80177ea:	6840      	ldr	r0, [r0, #4]
 80177ec:	b3b8      	cbz	r0, 801785e <on_request+0x8e>
 80177ee:	6884      	ldr	r4, [r0, #8]
 80177f0:	8b21      	ldrh	r1, [r4, #24]
 80177f2:	4291      	cmp	r1, r2
 80177f4:	d1f9      	bne.n	80177ea <on_request+0x1a>
 80177f6:	2248      	movs	r2, #72	@ 0x48
 80177f8:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80177fc:	4668      	mov	r0, sp
 80177fe:	f002 ff88 	bl	801a712 <memcpy>
 8017802:	f104 0320 	add.w	r3, r4, #32
 8017806:	cb0c      	ldmia	r3, {r2, r3}
 8017808:	4620      	mov	r0, r4
 801780a:	f7f7 fcb3 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 801780e:	4680      	mov	r8, r0
 8017810:	b328      	cbz	r0, 801785e <on_request+0x8e>
 8017812:	4638      	mov	r0, r7
 8017814:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8017818:	4632      	mov	r2, r6
 801781a:	f107 0110 	add.w	r1, r7, #16
 801781e:	f000 ff23 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 8017822:	b930      	cbnz	r0, 8017832 <on_request+0x62>
 8017824:	4810      	ldr	r0, [pc, #64]	@ (8017868 <on_request+0x98>)
 8017826:	4641      	mov	r1, r8
 8017828:	b014      	add	sp, #80	@ 0x50
 801782a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801782e:	f000 b877 	b.w	8017920 <put_memory>
 8017832:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017834:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8017838:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 801783c:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8017840:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017844:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017848:	e88c 0003 	stmia.w	ip, {r0, r1}
 801784c:	f7f7 fa90 	bl	800ed70 <rmw_uros_epoch_nanos>
 8017850:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 8017854:	2303      	movs	r3, #3
 8017856:	e942 0102 	strd	r0, r1, [r2, #-8]
 801785a:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 801785e:	b014      	add	sp, #80	@ 0x50
 8017860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017864:	2000af7c 	.word	0x2000af7c
 8017868:	2000af9c 	.word	0x2000af9c

0801786c <on_reply>:
 801786c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017870:	4821      	ldr	r0, [pc, #132]	@ (80178f8 <on_reply+0x8c>)
 8017872:	b094      	sub	sp, #80	@ 0x50
 8017874:	6800      	ldr	r0, [r0, #0]
 8017876:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8017878:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 801787c:	9113      	str	r1, [sp, #76]	@ 0x4c
 801787e:	b3b8      	cbz	r0, 80178f0 <on_reply+0x84>
 8017880:	461d      	mov	r5, r3
 8017882:	e001      	b.n	8017888 <on_reply+0x1c>
 8017884:	6840      	ldr	r0, [r0, #4]
 8017886:	b398      	cbz	r0, 80178f0 <on_reply+0x84>
 8017888:	6884      	ldr	r4, [r0, #8]
 801788a:	8b21      	ldrh	r1, [r4, #24]
 801788c:	4291      	cmp	r1, r2
 801788e:	d1f9      	bne.n	8017884 <on_reply+0x18>
 8017890:	2248      	movs	r2, #72	@ 0x48
 8017892:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8017896:	4668      	mov	r0, sp
 8017898:	f002 ff3b 	bl	801a712 <memcpy>
 801789c:	f104 0320 	add.w	r3, r4, #32
 80178a0:	cb0c      	ldmia	r3, {r2, r3}
 80178a2:	4620      	mov	r0, r4
 80178a4:	f7f7 fc66 	bl	800f174 <rmw_uxrce_get_static_input_buffer_for_entity>
 80178a8:	4680      	mov	r8, r0
 80178aa:	b308      	cbz	r0, 80178f0 <on_reply+0x84>
 80178ac:	4638      	mov	r0, r7
 80178ae:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80178b2:	4632      	mov	r2, r6
 80178b4:	f107 0110 	add.w	r1, r7, #16
 80178b8:	f000 fed6 	bl	8018668 <ucdr_deserialize_array_uint8_t>
 80178bc:	b930      	cbnz	r0, 80178cc <on_reply+0x60>
 80178be:	480f      	ldr	r0, [pc, #60]	@ (80178fc <on_reply+0x90>)
 80178c0:	4641      	mov	r1, r8
 80178c2:	b014      	add	sp, #80	@ 0x50
 80178c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80178c8:	f000 b82a 	b.w	8017920 <put_memory>
 80178cc:	2200      	movs	r2, #0
 80178ce:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80178d2:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80178d6:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80178da:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80178de:	f7f7 fa47 	bl	800ed70 <rmw_uros_epoch_nanos>
 80178e2:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80178e6:	2304      	movs	r3, #4
 80178e8:	e942 0102 	strd	r0, r1, [r2, #-8]
 80178ec:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80178f0:	b014      	add	sp, #80	@ 0x50
 80178f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80178f6:	bf00      	nop
 80178f8:	2000668c 	.word	0x2000668c
 80178fc:	2000af9c 	.word	0x2000af9c

08017900 <get_memory>:
 8017900:	4603      	mov	r3, r0
 8017902:	6840      	ldr	r0, [r0, #4]
 8017904:	b158      	cbz	r0, 801791e <get_memory+0x1e>
 8017906:	6842      	ldr	r2, [r0, #4]
 8017908:	605a      	str	r2, [r3, #4]
 801790a:	b10a      	cbz	r2, 8017910 <get_memory+0x10>
 801790c:	2100      	movs	r1, #0
 801790e:	6011      	str	r1, [r2, #0]
 8017910:	681a      	ldr	r2, [r3, #0]
 8017912:	6042      	str	r2, [r0, #4]
 8017914:	b102      	cbz	r2, 8017918 <get_memory+0x18>
 8017916:	6010      	str	r0, [r2, #0]
 8017918:	2200      	movs	r2, #0
 801791a:	6002      	str	r2, [r0, #0]
 801791c:	6018      	str	r0, [r3, #0]
 801791e:	4770      	bx	lr

08017920 <put_memory>:
 8017920:	680b      	ldr	r3, [r1, #0]
 8017922:	b10b      	cbz	r3, 8017928 <put_memory+0x8>
 8017924:	684a      	ldr	r2, [r1, #4]
 8017926:	605a      	str	r2, [r3, #4]
 8017928:	684a      	ldr	r2, [r1, #4]
 801792a:	b102      	cbz	r2, 801792e <put_memory+0xe>
 801792c:	6013      	str	r3, [r2, #0]
 801792e:	6803      	ldr	r3, [r0, #0]
 8017930:	428b      	cmp	r3, r1
 8017932:	6843      	ldr	r3, [r0, #4]
 8017934:	bf08      	it	eq
 8017936:	6002      	streq	r2, [r0, #0]
 8017938:	604b      	str	r3, [r1, #4]
 801793a:	b103      	cbz	r3, 801793e <put_memory+0x1e>
 801793c:	6019      	str	r1, [r3, #0]
 801793e:	2300      	movs	r3, #0
 8017940:	600b      	str	r3, [r1, #0]
 8017942:	6041      	str	r1, [r0, #4]
 8017944:	4770      	bx	lr
 8017946:	bf00      	nop

08017948 <rmw_destroy_client>:
 8017948:	b570      	push	{r4, r5, r6, lr}
 801794a:	b128      	cbz	r0, 8017958 <rmw_destroy_client+0x10>
 801794c:	4604      	mov	r4, r0
 801794e:	6800      	ldr	r0, [r0, #0]
 8017950:	460d      	mov	r5, r1
 8017952:	f7f7 fd83 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 8017956:	b910      	cbnz	r0, 801795e <rmw_destroy_client+0x16>
 8017958:	2401      	movs	r4, #1
 801795a:	4620      	mov	r0, r4
 801795c:	bd70      	pop	{r4, r5, r6, pc}
 801795e:	6863      	ldr	r3, [r4, #4]
 8017960:	2b00      	cmp	r3, #0
 8017962:	d0f9      	beq.n	8017958 <rmw_destroy_client+0x10>
 8017964:	2d00      	cmp	r5, #0
 8017966:	d0f7      	beq.n	8017958 <rmw_destroy_client+0x10>
 8017968:	6828      	ldr	r0, [r5, #0]
 801796a:	f7f7 fd77 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 801796e:	2800      	cmp	r0, #0
 8017970:	d0f2      	beq.n	8017958 <rmw_destroy_client+0x10>
 8017972:	686e      	ldr	r6, [r5, #4]
 8017974:	2e00      	cmp	r6, #0
 8017976:	d0ef      	beq.n	8017958 <rmw_destroy_client+0x10>
 8017978:	6864      	ldr	r4, [r4, #4]
 801797a:	6932      	ldr	r2, [r6, #16]
 801797c:	6920      	ldr	r0, [r4, #16]
 801797e:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017982:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017986:	6819      	ldr	r1, [r3, #0]
 8017988:	f7f9 fc24 	bl	80111d4 <uxr_buffer_cancel_data>
 801798c:	4602      	mov	r2, r0
 801798e:	6920      	ldr	r0, [r4, #16]
 8017990:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017994:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017998:	f7f7 fce0 	bl	800f35c <run_xrce_session>
 801799c:	6920      	ldr	r0, [r4, #16]
 801799e:	6932      	ldr	r2, [r6, #16]
 80179a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80179a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80179a8:	6819      	ldr	r1, [r3, #0]
 80179aa:	f7f9 f9c7 	bl	8010d3c <uxr_buffer_delete_entity>
 80179ae:	4602      	mov	r2, r0
 80179b0:	6920      	ldr	r0, [r4, #16]
 80179b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80179b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80179ba:	f7f7 fccf 	bl	800f35c <run_xrce_session>
 80179be:	2800      	cmp	r0, #0
 80179c0:	4628      	mov	r0, r5
 80179c2:	bf14      	ite	ne
 80179c4:	2400      	movne	r4, #0
 80179c6:	2402      	moveq	r4, #2
 80179c8:	f7f7 fbb2 	bl	800f130 <rmw_uxrce_fini_client_memory>
 80179cc:	e7c5      	b.n	801795a <rmw_destroy_client+0x12>
 80179ce:	bf00      	nop

080179d0 <rmw_get_implementation_identifier>:
 80179d0:	4b01      	ldr	r3, [pc, #4]	@ (80179d8 <rmw_get_implementation_identifier+0x8>)
 80179d2:	6818      	ldr	r0, [r3, #0]
 80179d4:	4770      	bx	lr
 80179d6:	bf00      	nop
 80179d8:	0801bfd8 	.word	0x0801bfd8

080179dc <create_topic>:
 80179dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179e0:	4605      	mov	r5, r0
 80179e2:	b084      	sub	sp, #16
 80179e4:	4822      	ldr	r0, [pc, #136]	@ (8017a70 <create_topic+0x94>)
 80179e6:	460f      	mov	r7, r1
 80179e8:	4616      	mov	r6, r2
 80179ea:	f7ff ff89 	bl	8017900 <get_memory>
 80179ee:	4604      	mov	r4, r0
 80179f0:	2800      	cmp	r0, #0
 80179f2:	d039      	beq.n	8017a68 <create_topic+0x8c>
 80179f4:	692b      	ldr	r3, [r5, #16]
 80179f6:	6884      	ldr	r4, [r0, #8]
 80179f8:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8017a78 <create_topic+0x9c>
 80179fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017a00:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8017a04:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 8017a08:	1c42      	adds	r2, r0, #1
 8017a0a:	2102      	movs	r1, #2
 8017a0c:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8017a10:	f7f9 fbb0 	bl	8011174 <uxr_object_id>
 8017a14:	223c      	movs	r2, #60	@ 0x3c
 8017a16:	6120      	str	r0, [r4, #16]
 8017a18:	4641      	mov	r1, r8
 8017a1a:	4638      	mov	r0, r7
 8017a1c:	f7f7 fd04 	bl	800f428 <generate_topic_name>
 8017a20:	b1f0      	cbz	r0, 8017a60 <create_topic+0x84>
 8017a22:	4f14      	ldr	r7, [pc, #80]	@ (8017a74 <create_topic+0x98>)
 8017a24:	4630      	mov	r0, r6
 8017a26:	2264      	movs	r2, #100	@ 0x64
 8017a28:	4639      	mov	r1, r7
 8017a2a:	f7f7 fccd 	bl	800f3c8 <generate_type_name>
 8017a2e:	b1b8      	cbz	r0, 8017a60 <create_topic+0x84>
 8017a30:	6928      	ldr	r0, [r5, #16]
 8017a32:	2306      	movs	r3, #6
 8017a34:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8017a38:	f8cd 8000 	str.w	r8, [sp]
 8017a3c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8017a40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a44:	6811      	ldr	r1, [r2, #0]
 8017a46:	696b      	ldr	r3, [r5, #20]
 8017a48:	6922      	ldr	r2, [r4, #16]
 8017a4a:	f7f9 f9f5 	bl	8010e38 <uxr_buffer_create_topic_bin>
 8017a4e:	4602      	mov	r2, r0
 8017a50:	6928      	ldr	r0, [r5, #16]
 8017a52:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 8017a56:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8017a5a:	f7f7 fc7f 	bl	800f35c <run_xrce_session>
 8017a5e:	b918      	cbnz	r0, 8017a68 <create_topic+0x8c>
 8017a60:	4620      	mov	r0, r4
 8017a62:	f7f7 fb7b 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 8017a66:	2400      	movs	r4, #0
 8017a68:	4620      	mov	r0, r4
 8017a6a:	b004      	add	sp, #16
 8017a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a70:	2000afbc 	.word	0x2000afbc
 8017a74:	2000b03c 	.word	0x2000b03c
 8017a78:	2000b000 	.word	0x2000b000

08017a7c <destroy_topic>:
 8017a7c:	b538      	push	{r3, r4, r5, lr}
 8017a7e:	6985      	ldr	r5, [r0, #24]
 8017a80:	b1d5      	cbz	r5, 8017ab8 <destroy_topic+0x3c>
 8017a82:	4604      	mov	r4, r0
 8017a84:	6928      	ldr	r0, [r5, #16]
 8017a86:	6922      	ldr	r2, [r4, #16]
 8017a88:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8017a8c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017a90:	6819      	ldr	r1, [r3, #0]
 8017a92:	f7f9 f953 	bl	8010d3c <uxr_buffer_delete_entity>
 8017a96:	4602      	mov	r2, r0
 8017a98:	6928      	ldr	r0, [r5, #16]
 8017a9a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8017a9e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8017aa2:	f7f7 fc5b 	bl	800f35c <run_xrce_session>
 8017aa6:	2800      	cmp	r0, #0
 8017aa8:	4620      	mov	r0, r4
 8017aaa:	bf14      	ite	ne
 8017aac:	2400      	movne	r4, #0
 8017aae:	2402      	moveq	r4, #2
 8017ab0:	f7f7 fb54 	bl	800f15c <rmw_uxrce_fini_topic_memory>
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	bd38      	pop	{r3, r4, r5, pc}
 8017ab8:	2401      	movs	r4, #1
 8017aba:	4620      	mov	r0, r4
 8017abc:	bd38      	pop	{r3, r4, r5, pc}
 8017abe:	bf00      	nop

08017ac0 <rmw_send_request>:
 8017ac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017ac4:	4604      	mov	r4, r0
 8017ac6:	6800      	ldr	r0, [r0, #0]
 8017ac8:	b08b      	sub	sp, #44	@ 0x2c
 8017aca:	460e      	mov	r6, r1
 8017acc:	4615      	mov	r5, r2
 8017ace:	b128      	cbz	r0, 8017adc <rmw_send_request+0x1c>
 8017ad0:	4b21      	ldr	r3, [pc, #132]	@ (8017b58 <rmw_send_request+0x98>)
 8017ad2:	6819      	ldr	r1, [r3, #0]
 8017ad4:	f7e8 fba4 	bl	8000220 <strcmp>
 8017ad8:	2800      	cmp	r0, #0
 8017ada:	d139      	bne.n	8017b50 <rmw_send_request+0x90>
 8017adc:	6864      	ldr	r4, [r4, #4]
 8017ade:	6963      	ldr	r3, [r4, #20]
 8017ae0:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 8017ae4:	689b      	ldr	r3, [r3, #8]
 8017ae6:	4798      	blx	r3
 8017ae8:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8017aec:	4630      	mov	r0, r6
 8017aee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017af2:	4798      	blx	r3
 8017af4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017af8:	9000      	str	r0, [sp, #0]
 8017afa:	6922      	ldr	r2, [r4, #16]
 8017afc:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 8017afe:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8017b02:	ab02      	add	r3, sp, #8
 8017b04:	f7fb fc0e 	bl	8013324 <uxr_prepare_output_stream>
 8017b08:	2700      	movs	r7, #0
 8017b0a:	6028      	str	r0, [r5, #0]
 8017b0c:	606f      	str	r7, [r5, #4]
 8017b0e:	b198      	cbz	r0, 8017b38 <rmw_send_request+0x78>
 8017b10:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8017b14:	a902      	add	r1, sp, #8
 8017b16:	4630      	mov	r0, r6
 8017b18:	4798      	blx	r3
 8017b1a:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8017b1e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8017b22:	2b01      	cmp	r3, #1
 8017b24:	d00c      	beq.n	8017b40 <rmw_send_request+0x80>
 8017b26:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8017b28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b2c:	f7fa f928 	bl	8011d80 <uxr_run_session_until_confirm_delivery>
 8017b30:	4638      	mov	r0, r7
 8017b32:	b00b      	add	sp, #44	@ 0x2c
 8017b34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b38:	2001      	movs	r0, #1
 8017b3a:	b00b      	add	sp, #44	@ 0x2c
 8017b3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b40:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017b44:	f7f9 fd5c 	bl	8011600 <uxr_flash_output_streams>
 8017b48:	4638      	mov	r0, r7
 8017b4a:	b00b      	add	sp, #44	@ 0x2c
 8017b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b50:	200c      	movs	r0, #12
 8017b52:	b00b      	add	sp, #44	@ 0x2c
 8017b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017b58:	0801bfd8 	.word	0x0801bfd8

08017b5c <rmw_take_request>:
 8017b5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017b60:	4605      	mov	r5, r0
 8017b62:	6800      	ldr	r0, [r0, #0]
 8017b64:	b089      	sub	sp, #36	@ 0x24
 8017b66:	460c      	mov	r4, r1
 8017b68:	4690      	mov	r8, r2
 8017b6a:	461e      	mov	r6, r3
 8017b6c:	b128      	cbz	r0, 8017b7a <rmw_take_request+0x1e>
 8017b6e:	4b28      	ldr	r3, [pc, #160]	@ (8017c10 <rmw_take_request+0xb4>)
 8017b70:	6819      	ldr	r1, [r3, #0]
 8017b72:	f7e8 fb55 	bl	8000220 <strcmp>
 8017b76:	2800      	cmp	r0, #0
 8017b78:	d146      	bne.n	8017c08 <rmw_take_request+0xac>
 8017b7a:	b10e      	cbz	r6, 8017b80 <rmw_take_request+0x24>
 8017b7c:	2300      	movs	r3, #0
 8017b7e:	7033      	strb	r3, [r6, #0]
 8017b80:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8017b84:	f7f7 fb6c 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017b88:	4648      	mov	r0, r9
 8017b8a:	f7f7 fb43 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017b8e:	4607      	mov	r7, r0
 8017b90:	b3b0      	cbz	r0, 8017c00 <rmw_take_request+0xa4>
 8017b92:	6885      	ldr	r5, [r0, #8]
 8017b94:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8017b98:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8017b9c:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8017ba0:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8017ba4:	7423      	strb	r3, [r4, #16]
 8017ba6:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8017baa:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8017bae:	74e2      	strb	r2, [r4, #19]
 8017bb0:	f8a4 3011 	strh.w	r3, [r4, #17]
 8017bb4:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 8017bb8:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 8017bbc:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 8017bc0:	61e1      	str	r1, [r4, #28]
 8017bc2:	6162      	str	r2, [r4, #20]
 8017bc4:	61a3      	str	r3, [r4, #24]
 8017bc6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8017bca:	689b      	ldr	r3, [r3, #8]
 8017bcc:	4798      	blx	r3
 8017bce:	6844      	ldr	r4, [r0, #4]
 8017bd0:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8017bd4:	f105 0110 	add.w	r1, r5, #16
 8017bd8:	4668      	mov	r0, sp
 8017bda:	f7f8 ffbb 	bl	8010b54 <ucdr_init_buffer>
 8017bde:	68e3      	ldr	r3, [r4, #12]
 8017be0:	4641      	mov	r1, r8
 8017be2:	4668      	mov	r0, sp
 8017be4:	4798      	blx	r3
 8017be6:	4639      	mov	r1, r7
 8017be8:	4604      	mov	r4, r0
 8017bea:	480a      	ldr	r0, [pc, #40]	@ (8017c14 <rmw_take_request+0xb8>)
 8017bec:	f7ff fe98 	bl	8017920 <put_memory>
 8017bf0:	b106      	cbz	r6, 8017bf4 <rmw_take_request+0x98>
 8017bf2:	7034      	strb	r4, [r6, #0]
 8017bf4:	f084 0001 	eor.w	r0, r4, #1
 8017bf8:	b2c0      	uxtb	r0, r0
 8017bfa:	b009      	add	sp, #36	@ 0x24
 8017bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c00:	2001      	movs	r0, #1
 8017c02:	b009      	add	sp, #36	@ 0x24
 8017c04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c08:	200c      	movs	r0, #12
 8017c0a:	b009      	add	sp, #36	@ 0x24
 8017c0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017c10:	0801bfd8 	.word	0x0801bfd8
 8017c14:	2000af9c 	.word	0x2000af9c

08017c18 <rmw_send_response>:
 8017c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c1a:	4605      	mov	r5, r0
 8017c1c:	6800      	ldr	r0, [r0, #0]
 8017c1e:	b091      	sub	sp, #68	@ 0x44
 8017c20:	460c      	mov	r4, r1
 8017c22:	4616      	mov	r6, r2
 8017c24:	b128      	cbz	r0, 8017c32 <rmw_send_response+0x1a>
 8017c26:	4b29      	ldr	r3, [pc, #164]	@ (8017ccc <rmw_send_response+0xb4>)
 8017c28:	6819      	ldr	r1, [r3, #0]
 8017c2a:	f7e8 faf9 	bl	8000220 <strcmp>
 8017c2e:	2800      	cmp	r0, #0
 8017c30:	d141      	bne.n	8017cb6 <rmw_send_response+0x9e>
 8017c32:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 8017c36:	9306      	str	r3, [sp, #24]
 8017c38:	4623      	mov	r3, r4
 8017c3a:	9207      	str	r2, [sp, #28]
 8017c3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017c40:	686d      	ldr	r5, [r5, #4]
 8017c42:	789b      	ldrb	r3, [r3, #2]
 8017c44:	68a1      	ldr	r1, [r4, #8]
 8017c46:	f88d 2017 	strb.w	r2, [sp, #23]
 8017c4a:	f88d 3016 	strb.w	r3, [sp, #22]
 8017c4e:	68e2      	ldr	r2, [r4, #12]
 8017c50:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8017c54:	6860      	ldr	r0, [r4, #4]
 8017c56:	f8ad 3014 	strh.w	r3, [sp, #20]
 8017c5a:	ab02      	add	r3, sp, #8
 8017c5c:	c307      	stmia	r3!, {r0, r1, r2}
 8017c5e:	696b      	ldr	r3, [r5, #20]
 8017c60:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 8017c62:	68db      	ldr	r3, [r3, #12]
 8017c64:	4798      	blx	r3
 8017c66:	6844      	ldr	r4, [r0, #4]
 8017c68:	4630      	mov	r0, r6
 8017c6a:	6923      	ldr	r3, [r4, #16]
 8017c6c:	4798      	blx	r3
 8017c6e:	f100 0318 	add.w	r3, r0, #24
 8017c72:	6938      	ldr	r0, [r7, #16]
 8017c74:	9300      	str	r3, [sp, #0]
 8017c76:	692a      	ldr	r2, [r5, #16]
 8017c78:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8017c7a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017c7e:	ab08      	add	r3, sp, #32
 8017c80:	f7fb fb50 	bl	8013324 <uxr_prepare_output_stream>
 8017c84:	b910      	cbnz	r0, 8017c8c <rmw_send_response+0x74>
 8017c86:	2001      	movs	r0, #1
 8017c88:	b011      	add	sp, #68	@ 0x44
 8017c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c8c:	a902      	add	r1, sp, #8
 8017c8e:	a808      	add	r0, sp, #32
 8017c90:	f7fc fba2 	bl	80143d8 <uxr_serialize_SampleIdentity>
 8017c94:	68a3      	ldr	r3, [r4, #8]
 8017c96:	a908      	add	r1, sp, #32
 8017c98:	4630      	mov	r0, r6
 8017c9a:	4798      	blx	r3
 8017c9c:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8017ca0:	6938      	ldr	r0, [r7, #16]
 8017ca2:	2b01      	cmp	r3, #1
 8017ca4:	d00a      	beq.n	8017cbc <rmw_send_response+0xa4>
 8017ca6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8017ca8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cac:	f7fa f868 	bl	8011d80 <uxr_run_session_until_confirm_delivery>
 8017cb0:	2000      	movs	r0, #0
 8017cb2:	b011      	add	sp, #68	@ 0x44
 8017cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cb6:	200c      	movs	r0, #12
 8017cb8:	b011      	add	sp, #68	@ 0x44
 8017cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cbc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8017cc0:	f7f9 fc9e 	bl	8011600 <uxr_flash_output_streams>
 8017cc4:	2000      	movs	r0, #0
 8017cc6:	b011      	add	sp, #68	@ 0x44
 8017cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017cca:	bf00      	nop
 8017ccc:	0801bfd8 	.word	0x0801bfd8

08017cd0 <rmw_take_response>:
 8017cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017cd4:	4604      	mov	r4, r0
 8017cd6:	6800      	ldr	r0, [r0, #0]
 8017cd8:	b088      	sub	sp, #32
 8017cda:	4688      	mov	r8, r1
 8017cdc:	4617      	mov	r7, r2
 8017cde:	461d      	mov	r5, r3
 8017ce0:	b120      	cbz	r0, 8017cec <rmw_take_response+0x1c>
 8017ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8017d5c <rmw_take_response+0x8c>)
 8017ce4:	6819      	ldr	r1, [r3, #0]
 8017ce6:	f7e8 fa9b 	bl	8000220 <strcmp>
 8017cea:	bb78      	cbnz	r0, 8017d4c <rmw_take_response+0x7c>
 8017cec:	b10d      	cbz	r5, 8017cf2 <rmw_take_response+0x22>
 8017cee:	2300      	movs	r3, #0
 8017cf0:	702b      	strb	r3, [r5, #0]
 8017cf2:	6864      	ldr	r4, [r4, #4]
 8017cf4:	f7f7 fab4 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017cf8:	4620      	mov	r0, r4
 8017cfa:	f7f7 fa8b 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017cfe:	4606      	mov	r6, r0
 8017d00:	b340      	cbz	r0, 8017d54 <rmw_take_response+0x84>
 8017d02:	6963      	ldr	r3, [r4, #20]
 8017d04:	6884      	ldr	r4, [r0, #8]
 8017d06:	68db      	ldr	r3, [r3, #12]
 8017d08:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8017d0c:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8017d10:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8017d14:	4798      	blx	r3
 8017d16:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8017d1a:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8017d1e:	f104 0110 	add.w	r1, r4, #16
 8017d22:	4668      	mov	r0, sp
 8017d24:	f7f8 ff16 	bl	8010b54 <ucdr_init_buffer>
 8017d28:	4639      	mov	r1, r7
 8017d2a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d2e:	4668      	mov	r0, sp
 8017d30:	4798      	blx	r3
 8017d32:	4631      	mov	r1, r6
 8017d34:	4604      	mov	r4, r0
 8017d36:	480a      	ldr	r0, [pc, #40]	@ (8017d60 <rmw_take_response+0x90>)
 8017d38:	f7ff fdf2 	bl	8017920 <put_memory>
 8017d3c:	b105      	cbz	r5, 8017d40 <rmw_take_response+0x70>
 8017d3e:	702c      	strb	r4, [r5, #0]
 8017d40:	f084 0001 	eor.w	r0, r4, #1
 8017d44:	b2c0      	uxtb	r0, r0
 8017d46:	b008      	add	sp, #32
 8017d48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d4c:	200c      	movs	r0, #12
 8017d4e:	b008      	add	sp, #32
 8017d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d54:	2001      	movs	r0, #1
 8017d56:	b008      	add	sp, #32
 8017d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d5c:	0801bfd8 	.word	0x0801bfd8
 8017d60:	2000af9c 	.word	0x2000af9c

08017d64 <rmw_take_with_info>:
 8017d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017d66:	4604      	mov	r4, r0
 8017d68:	6800      	ldr	r0, [r0, #0]
 8017d6a:	b089      	sub	sp, #36	@ 0x24
 8017d6c:	460f      	mov	r7, r1
 8017d6e:	4615      	mov	r5, r2
 8017d70:	b128      	cbz	r0, 8017d7e <rmw_take_with_info+0x1a>
 8017d72:	4b24      	ldr	r3, [pc, #144]	@ (8017e04 <rmw_take_with_info+0xa0>)
 8017d74:	6819      	ldr	r1, [r3, #0]
 8017d76:	f7e8 fa53 	bl	8000220 <strcmp>
 8017d7a:	2800      	cmp	r0, #0
 8017d7c:	d13e      	bne.n	8017dfc <rmw_take_with_info+0x98>
 8017d7e:	b305      	cbz	r5, 8017dc2 <rmw_take_with_info+0x5e>
 8017d80:	6864      	ldr	r4, [r4, #4]
 8017d82:	2300      	movs	r3, #0
 8017d84:	702b      	strb	r3, [r5, #0]
 8017d86:	f7f7 fa6b 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017d8a:	4620      	mov	r0, r4
 8017d8c:	f7f7 fa42 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017d90:	4606      	mov	r6, r0
 8017d92:	b1f0      	cbz	r0, 8017dd2 <rmw_take_with_info+0x6e>
 8017d94:	6881      	ldr	r1, [r0, #8]
 8017d96:	4668      	mov	r0, sp
 8017d98:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017d9c:	3110      	adds	r1, #16
 8017d9e:	f7f8 fed9 	bl	8010b54 <ucdr_init_buffer>
 8017da2:	69a3      	ldr	r3, [r4, #24]
 8017da4:	4639      	mov	r1, r7
 8017da6:	68db      	ldr	r3, [r3, #12]
 8017da8:	4668      	mov	r0, sp
 8017daa:	4798      	blx	r3
 8017dac:	4631      	mov	r1, r6
 8017dae:	4604      	mov	r4, r0
 8017db0:	4815      	ldr	r0, [pc, #84]	@ (8017e08 <rmw_take_with_info+0xa4>)
 8017db2:	f7ff fdb5 	bl	8017920 <put_memory>
 8017db6:	702c      	strb	r4, [r5, #0]
 8017db8:	f084 0001 	eor.w	r0, r4, #1
 8017dbc:	b2c0      	uxtb	r0, r0
 8017dbe:	b009      	add	sp, #36	@ 0x24
 8017dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dc2:	6864      	ldr	r4, [r4, #4]
 8017dc4:	f7f7 fa4c 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017dc8:	4620      	mov	r0, r4
 8017dca:	f7f7 fa23 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017dce:	4605      	mov	r5, r0
 8017dd0:	b910      	cbnz	r0, 8017dd8 <rmw_take_with_info+0x74>
 8017dd2:	2001      	movs	r0, #1
 8017dd4:	b009      	add	sp, #36	@ 0x24
 8017dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017dd8:	68a9      	ldr	r1, [r5, #8]
 8017dda:	4668      	mov	r0, sp
 8017ddc:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8017de0:	3110      	adds	r1, #16
 8017de2:	f7f8 feb7 	bl	8010b54 <ucdr_init_buffer>
 8017de6:	69a3      	ldr	r3, [r4, #24]
 8017de8:	4639      	mov	r1, r7
 8017dea:	68db      	ldr	r3, [r3, #12]
 8017dec:	4668      	mov	r0, sp
 8017dee:	4798      	blx	r3
 8017df0:	4629      	mov	r1, r5
 8017df2:	4604      	mov	r4, r0
 8017df4:	4804      	ldr	r0, [pc, #16]	@ (8017e08 <rmw_take_with_info+0xa4>)
 8017df6:	f7ff fd93 	bl	8017920 <put_memory>
 8017dfa:	e7dd      	b.n	8017db8 <rmw_take_with_info+0x54>
 8017dfc:	200c      	movs	r0, #12
 8017dfe:	b009      	add	sp, #36	@ 0x24
 8017e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e02:	bf00      	nop
 8017e04:	0801bfd8 	.word	0x0801bfd8
 8017e08:	2000af9c 	.word	0x2000af9c

08017e0c <rmw_wait>:
 8017e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017e10:	b089      	sub	sp, #36	@ 0x24
 8017e12:	4605      	mov	r5, r0
 8017e14:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8017e16:	460e      	mov	r6, r1
 8017e18:	4698      	mov	r8, r3
 8017e1a:	4691      	mov	r9, r2
 8017e1c:	2a00      	cmp	r2, #0
 8017e1e:	f000 810a 	beq.w	8018036 <rmw_wait+0x22a>
 8017e22:	b16c      	cbz	r4, 8017e40 <rmw_wait+0x34>
 8017e24:	4bae      	ldr	r3, [pc, #696]	@ (80180e0 <rmw_wait+0x2d4>)
 8017e26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8017e28:	af04      	add	r7, sp, #16
 8017e2a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8017e2e:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8017e32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8017e36:	f7ff faaf 	bl	8017398 <rmw_time_equal>
 8017e3a:	2800      	cmp	r0, #0
 8017e3c:	f000 8127 	beq.w	801808e <rmw_wait+0x282>
 8017e40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8017e44:	f7f7 fa0c 	bl	800f260 <rmw_uxrce_clean_expired_static_input_buffer>
 8017e48:	4ba6      	ldr	r3, [pc, #664]	@ (80180e4 <rmw_wait+0x2d8>)
 8017e4a:	681c      	ldr	r4, [r3, #0]
 8017e4c:	b14c      	cbz	r4, 8017e62 <rmw_wait+0x56>
 8017e4e:	4623      	mov	r3, r4
 8017e50:	2100      	movs	r1, #0
 8017e52:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8017e56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017e5a:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d1f7      	bne.n	8017e52 <rmw_wait+0x46>
 8017e62:	f1b9 0f00 	cmp.w	r9, #0
 8017e66:	d011      	beq.n	8017e8c <rmw_wait+0x80>
 8017e68:	f8d9 1000 	ldr.w	r1, [r9]
 8017e6c:	b171      	cbz	r1, 8017e8c <rmw_wait+0x80>
 8017e6e:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8017e72:	2300      	movs	r3, #0
 8017e74:	2001      	movs	r0, #1
 8017e76:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017e7a:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017e7c:	6912      	ldr	r2, [r2, #16]
 8017e7e:	3301      	adds	r3, #1
 8017e80:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017e84:	4299      	cmp	r1, r3
 8017e86:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017e8a:	d1f4      	bne.n	8017e76 <rmw_wait+0x6a>
 8017e8c:	f1b8 0f00 	cmp.w	r8, #0
 8017e90:	d011      	beq.n	8017eb6 <rmw_wait+0xaa>
 8017e92:	f8d8 1000 	ldr.w	r1, [r8]
 8017e96:	b171      	cbz	r1, 8017eb6 <rmw_wait+0xaa>
 8017e98:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	2001      	movs	r0, #1
 8017ea0:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017ea4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8017ea6:	6912      	ldr	r2, [r2, #16]
 8017ea8:	3301      	adds	r3, #1
 8017eaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017eae:	4299      	cmp	r1, r3
 8017eb0:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017eb4:	d1f4      	bne.n	8017ea0 <rmw_wait+0x94>
 8017eb6:	b185      	cbz	r5, 8017eda <rmw_wait+0xce>
 8017eb8:	6829      	ldr	r1, [r5, #0]
 8017eba:	b171      	cbz	r1, 8017eda <rmw_wait+0xce>
 8017ebc:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	2001      	movs	r0, #1
 8017ec4:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8017ec8:	6a12      	ldr	r2, [r2, #32]
 8017eca:	6912      	ldr	r2, [r2, #16]
 8017ecc:	3301      	adds	r3, #1
 8017ece:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017ed2:	4299      	cmp	r1, r3
 8017ed4:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8017ed8:	d1f4      	bne.n	8017ec4 <rmw_wait+0xb8>
 8017eda:	b34c      	cbz	r4, 8017f30 <rmw_wait+0x124>
 8017edc:	4622      	mov	r2, r4
 8017ede:	2300      	movs	r3, #0
 8017ee0:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8017ee4:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8017ee8:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8017eec:	440b      	add	r3, r1
 8017eee:	b2db      	uxtb	r3, r3
 8017ef0:	2a00      	cmp	r2, #0
 8017ef2:	d1f5      	bne.n	8017ee0 <rmw_wait+0xd4>
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	f000 8084 	beq.w	8018002 <rmw_wait+0x1f6>
 8017efa:	1c7a      	adds	r2, r7, #1
 8017efc:	d00d      	beq.n	8017f1a <rmw_wait+0x10e>
 8017efe:	ee07 7a90 	vmov	s15, r7
 8017f02:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8017f06:	ee07 3a90 	vmov	s15, r3
 8017f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017f12:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8017f16:	ee17 7a90 	vmov	r7, s15
 8017f1a:	68a0      	ldr	r0, [r4, #8]
 8017f1c:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8017f20:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	f040 8090 	bne.w	801804a <rmw_wait+0x23e>
 8017f2a:	6864      	ldr	r4, [r4, #4]
 8017f2c:	2c00      	cmp	r4, #0
 8017f2e:	d1f4      	bne.n	8017f1a <rmw_wait+0x10e>
 8017f30:	f1b9 0f00 	cmp.w	r9, #0
 8017f34:	f000 80bc 	beq.w	80180b0 <rmw_wait+0x2a4>
 8017f38:	f8d9 7000 	ldr.w	r7, [r9]
 8017f3c:	2f00      	cmp	r7, #0
 8017f3e:	f000 808e 	beq.w	801805e <rmw_wait+0x252>
 8017f42:	2400      	movs	r4, #0
 8017f44:	4627      	mov	r7, r4
 8017f46:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8017f4a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017f4e:	f7f7 f961 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017f52:	2800      	cmp	r0, #0
 8017f54:	d05f      	beq.n	8018016 <rmw_wait+0x20a>
 8017f56:	f8d9 3000 	ldr.w	r3, [r9]
 8017f5a:	3401      	adds	r4, #1
 8017f5c:	42a3      	cmp	r3, r4
 8017f5e:	f04f 0701 	mov.w	r7, #1
 8017f62:	d8f0      	bhi.n	8017f46 <rmw_wait+0x13a>
 8017f64:	f1b8 0f00 	cmp.w	r8, #0
 8017f68:	d012      	beq.n	8017f90 <rmw_wait+0x184>
 8017f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8017f6e:	b17b      	cbz	r3, 8017f90 <rmw_wait+0x184>
 8017f70:	2400      	movs	r4, #0
 8017f72:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017f76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017f7a:	f7f7 f94b 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017f7e:	2800      	cmp	r0, #0
 8017f80:	d051      	beq.n	8018026 <rmw_wait+0x21a>
 8017f82:	f8d8 3000 	ldr.w	r3, [r8]
 8017f86:	3401      	adds	r4, #1
 8017f88:	42a3      	cmp	r3, r4
 8017f8a:	f04f 0701 	mov.w	r7, #1
 8017f8e:	d8f0      	bhi.n	8017f72 <rmw_wait+0x166>
 8017f90:	b1dd      	cbz	r5, 8017fca <rmw_wait+0x1be>
 8017f92:	682b      	ldr	r3, [r5, #0]
 8017f94:	b1cb      	cbz	r3, 8017fca <rmw_wait+0x1be>
 8017f96:	2400      	movs	r4, #0
 8017f98:	686b      	ldr	r3, [r5, #4]
 8017f9a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017f9e:	f7f7 f939 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fa2:	b158      	cbz	r0, 8017fbc <rmw_wait+0x1b0>
 8017fa4:	682b      	ldr	r3, [r5, #0]
 8017fa6:	3401      	adds	r4, #1
 8017fa8:	42a3      	cmp	r3, r4
 8017faa:	d969      	bls.n	8018080 <rmw_wait+0x274>
 8017fac:	686b      	ldr	r3, [r5, #4]
 8017fae:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8017fb2:	2701      	movs	r7, #1
 8017fb4:	f7f7 f92e 	bl	800f214 <rmw_uxrce_find_static_input_buffer_by_owner>
 8017fb8:	2800      	cmp	r0, #0
 8017fba:	d1f3      	bne.n	8017fa4 <rmw_wait+0x198>
 8017fbc:	e9d5 3200 	ldrd	r3, r2, [r5]
 8017fc0:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8017fc4:	3401      	adds	r4, #1
 8017fc6:	42a3      	cmp	r3, r4
 8017fc8:	d8e6      	bhi.n	8017f98 <rmw_wait+0x18c>
 8017fca:	b1a6      	cbz	r6, 8017ff6 <rmw_wait+0x1ea>
 8017fcc:	6834      	ldr	r4, [r6, #0]
 8017fce:	b194      	cbz	r4, 8017ff6 <rmw_wait+0x1ea>
 8017fd0:	2300      	movs	r3, #0
 8017fd2:	461d      	mov	r5, r3
 8017fd4:	e004      	b.n	8017fe0 <rmw_wait+0x1d4>
 8017fd6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8017fda:	3301      	adds	r3, #1
 8017fdc:	42a3      	cmp	r3, r4
 8017fde:	d00a      	beq.n	8017ff6 <rmw_wait+0x1ea>
 8017fe0:	6870      	ldr	r0, [r6, #4]
 8017fe2:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8017fe6:	7c0a      	ldrb	r2, [r1, #16]
 8017fe8:	2a00      	cmp	r2, #0
 8017fea:	d0f4      	beq.n	8017fd6 <rmw_wait+0x1ca>
 8017fec:	3301      	adds	r3, #1
 8017fee:	42a3      	cmp	r3, r4
 8017ff0:	740d      	strb	r5, [r1, #16]
 8017ff2:	4617      	mov	r7, r2
 8017ff4:	d1f4      	bne.n	8017fe0 <rmw_wait+0x1d4>
 8017ff6:	2f00      	cmp	r7, #0
 8017ff8:	d03e      	beq.n	8018078 <rmw_wait+0x26c>
 8017ffa:	2000      	movs	r0, #0
 8017ffc:	b009      	add	sp, #36	@ 0x24
 8017ffe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018002:	68a0      	ldr	r0, [r4, #8]
 8018004:	2100      	movs	r1, #0
 8018006:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801800a:	f7f9 fe7f 	bl	8011d0c <uxr_run_session_timeout>
 801800e:	6864      	ldr	r4, [r4, #4]
 8018010:	2c00      	cmp	r4, #0
 8018012:	d1f6      	bne.n	8018002 <rmw_wait+0x1f6>
 8018014:	e78c      	b.n	8017f30 <rmw_wait+0x124>
 8018016:	e9d9 3200 	ldrd	r3, r2, [r9]
 801801a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801801e:	3401      	adds	r4, #1
 8018020:	42a3      	cmp	r3, r4
 8018022:	d890      	bhi.n	8017f46 <rmw_wait+0x13a>
 8018024:	e79e      	b.n	8017f64 <rmw_wait+0x158>
 8018026:	e9d8 3200 	ldrd	r3, r2, [r8]
 801802a:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801802e:	3401      	adds	r4, #1
 8018030:	429c      	cmp	r4, r3
 8018032:	d39e      	bcc.n	8017f72 <rmw_wait+0x166>
 8018034:	e7ac      	b.n	8017f90 <rmw_wait+0x184>
 8018036:	2b00      	cmp	r3, #0
 8018038:	f47f aef3 	bne.w	8017e22 <rmw_wait+0x16>
 801803c:	2800      	cmp	r0, #0
 801803e:	f47f aef0 	bne.w	8017e22 <rmw_wait+0x16>
 8018042:	2900      	cmp	r1, #0
 8018044:	f47f aeed 	bne.w	8017e22 <rmw_wait+0x16>
 8018048:	e7d7      	b.n	8017ffa <rmw_wait+0x1ee>
 801804a:	4639      	mov	r1, r7
 801804c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8018050:	f7f9 fe76 	bl	8011d40 <uxr_run_session_until_data>
 8018054:	6864      	ldr	r4, [r4, #4]
 8018056:	2c00      	cmp	r4, #0
 8018058:	f47f af5f 	bne.w	8017f1a <rmw_wait+0x10e>
 801805c:	e768      	b.n	8017f30 <rmw_wait+0x124>
 801805e:	f1b8 0f00 	cmp.w	r8, #0
 8018062:	d032      	beq.n	80180ca <rmw_wait+0x2be>
 8018064:	f8d8 3000 	ldr.w	r3, [r8]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d181      	bne.n	8017f70 <rmw_wait+0x164>
 801806c:	461f      	mov	r7, r3
 801806e:	2d00      	cmp	r5, #0
 8018070:	d18f      	bne.n	8017f92 <rmw_wait+0x186>
 8018072:	462f      	mov	r7, r5
 8018074:	2e00      	cmp	r6, #0
 8018076:	d1a9      	bne.n	8017fcc <rmw_wait+0x1c0>
 8018078:	2002      	movs	r0, #2
 801807a:	b009      	add	sp, #36	@ 0x24
 801807c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018080:	2e00      	cmp	r6, #0
 8018082:	d0ba      	beq.n	8017ffa <rmw_wait+0x1ee>
 8018084:	6834      	ldr	r4, [r6, #0]
 8018086:	2701      	movs	r7, #1
 8018088:	2c00      	cmp	r4, #0
 801808a:	d1a1      	bne.n	8017fd0 <rmw_wait+0x1c4>
 801808c:	e7b5      	b.n	8017ffa <rmw_wait+0x1ee>
 801808e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8018092:	f7ff f9d5 	bl	8017440 <rmw_time_total_nsec>
 8018096:	2300      	movs	r3, #0
 8018098:	4a13      	ldr	r2, [pc, #76]	@ (80180e8 <rmw_wait+0x2dc>)
 801809a:	f7e8 fd67 	bl	8000b6c <__aeabi_uldivmod>
 801809e:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80180a2:	f171 0300 	sbcs.w	r3, r1, #0
 80180a6:	4607      	mov	r7, r0
 80180a8:	bfa8      	it	ge
 80180aa:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80180ae:	e6c9      	b.n	8017e44 <rmw_wait+0x38>
 80180b0:	f1b8 0f00 	cmp.w	r8, #0
 80180b4:	d009      	beq.n	80180ca <rmw_wait+0x2be>
 80180b6:	f8d8 3000 	ldr.w	r3, [r8]
 80180ba:	464f      	mov	r7, r9
 80180bc:	2b00      	cmp	r3, #0
 80180be:	f47f af57 	bne.w	8017f70 <rmw_wait+0x164>
 80180c2:	2d00      	cmp	r5, #0
 80180c4:	f47f af65 	bne.w	8017f92 <rmw_wait+0x186>
 80180c8:	e7d3      	b.n	8018072 <rmw_wait+0x266>
 80180ca:	b17d      	cbz	r5, 80180ec <rmw_wait+0x2e0>
 80180cc:	682b      	ldr	r3, [r5, #0]
 80180ce:	4647      	mov	r7, r8
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	f47f af60 	bne.w	8017f96 <rmw_wait+0x18a>
 80180d6:	2e00      	cmp	r6, #0
 80180d8:	f47f af78 	bne.w	8017fcc <rmw_wait+0x1c0>
 80180dc:	e7cc      	b.n	8018078 <rmw_wait+0x26c>
 80180de:	bf00      	nop
 80180e0:	0801b430 	.word	0x0801b430
 80180e4:	2000af8c 	.word	0x2000af8c
 80180e8:	000f4240 	.word	0x000f4240
 80180ec:	2e00      	cmp	r6, #0
 80180ee:	d0c3      	beq.n	8018078 <rmw_wait+0x26c>
 80180f0:	6834      	ldr	r4, [r6, #0]
 80180f2:	462f      	mov	r7, r5
 80180f4:	2c00      	cmp	r4, #0
 80180f6:	f47f af6b 	bne.w	8017fd0 <rmw_wait+0x1c4>
 80180fa:	e7bd      	b.n	8018078 <rmw_wait+0x26c>

080180fc <rmw_create_wait_set>:
 80180fc:	b508      	push	{r3, lr}
 80180fe:	4803      	ldr	r0, [pc, #12]	@ (801810c <rmw_create_wait_set+0x10>)
 8018100:	f7ff fbfe 	bl	8017900 <get_memory>
 8018104:	b108      	cbz	r0, 801810a <rmw_create_wait_set+0xe>
 8018106:	6880      	ldr	r0, [r0, #8]
 8018108:	3010      	adds	r0, #16
 801810a:	bd08      	pop	{r3, pc}
 801810c:	2000afcc 	.word	0x2000afcc

08018110 <rmw_destroy_wait_set>:
 8018110:	b508      	push	{r3, lr}
 8018112:	4b08      	ldr	r3, [pc, #32]	@ (8018134 <rmw_destroy_wait_set+0x24>)
 8018114:	6819      	ldr	r1, [r3, #0]
 8018116:	b911      	cbnz	r1, 801811e <rmw_destroy_wait_set+0xe>
 8018118:	e00a      	b.n	8018130 <rmw_destroy_wait_set+0x20>
 801811a:	6849      	ldr	r1, [r1, #4]
 801811c:	b141      	cbz	r1, 8018130 <rmw_destroy_wait_set+0x20>
 801811e:	688b      	ldr	r3, [r1, #8]
 8018120:	3310      	adds	r3, #16
 8018122:	4298      	cmp	r0, r3
 8018124:	d1f9      	bne.n	801811a <rmw_destroy_wait_set+0xa>
 8018126:	4803      	ldr	r0, [pc, #12]	@ (8018134 <rmw_destroy_wait_set+0x24>)
 8018128:	f7ff fbfa 	bl	8017920 <put_memory>
 801812c:	2000      	movs	r0, #0
 801812e:	bd08      	pop	{r3, pc}
 8018130:	2001      	movs	r0, #1
 8018132:	bd08      	pop	{r3, pc}
 8018134:	2000afcc 	.word	0x2000afcc

08018138 <rosidl_runtime_c__double__Sequence__init>:
 8018138:	b530      	push	{r4, r5, lr}
 801813a:	4604      	mov	r4, r0
 801813c:	b087      	sub	sp, #28
 801813e:	b130      	cbz	r0, 801814e <rosidl_runtime_c__double__Sequence__init+0x16>
 8018140:	460d      	mov	r5, r1
 8018142:	b931      	cbnz	r1, 8018152 <rosidl_runtime_c__double__Sequence__init+0x1a>
 8018144:	4608      	mov	r0, r1
 8018146:	e9c4 0500 	strd	r0, r5, [r4]
 801814a:	60a5      	str	r5, [r4, #8]
 801814c:	2001      	movs	r0, #1
 801814e:	b007      	add	sp, #28
 8018150:	bd30      	pop	{r4, r5, pc}
 8018152:	a801      	add	r0, sp, #4
 8018154:	f7f5 ff40 	bl	800dfd8 <rcutils_get_default_allocator>
 8018158:	9b01      	ldr	r3, [sp, #4]
 801815a:	9905      	ldr	r1, [sp, #20]
 801815c:	00e8      	lsls	r0, r5, #3
 801815e:	4798      	blx	r3
 8018160:	2800      	cmp	r0, #0
 8018162:	d1f0      	bne.n	8018146 <rosidl_runtime_c__double__Sequence__init+0xe>
 8018164:	e7f3      	b.n	801814e <rosidl_runtime_c__double__Sequence__init+0x16>
 8018166:	bf00      	nop

08018168 <rosidl_runtime_c__double__Sequence__fini>:
 8018168:	b188      	cbz	r0, 801818e <rosidl_runtime_c__double__Sequence__fini+0x26>
 801816a:	b510      	push	{r4, lr}
 801816c:	6803      	ldr	r3, [r0, #0]
 801816e:	b086      	sub	sp, #24
 8018170:	4604      	mov	r4, r0
 8018172:	b153      	cbz	r3, 801818a <rosidl_runtime_c__double__Sequence__fini+0x22>
 8018174:	a801      	add	r0, sp, #4
 8018176:	f7f5 ff2f 	bl	800dfd8 <rcutils_get_default_allocator>
 801817a:	9b02      	ldr	r3, [sp, #8]
 801817c:	9905      	ldr	r1, [sp, #20]
 801817e:	6820      	ldr	r0, [r4, #0]
 8018180:	4798      	blx	r3
 8018182:	2300      	movs	r3, #0
 8018184:	e9c4 3300 	strd	r3, r3, [r4]
 8018188:	60a3      	str	r3, [r4, #8]
 801818a:	b006      	add	sp, #24
 801818c:	bd10      	pop	{r4, pc}
 801818e:	4770      	bx	lr

08018190 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 8018190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018194:	6805      	ldr	r5, [r0, #0]
 8018196:	4604      	mov	r4, r0
 8018198:	4628      	mov	r0, r5
 801819a:	460e      	mov	r6, r1
 801819c:	f7e8 f840 	bl	8000220 <strcmp>
 80181a0:	b1c8      	cbz	r0, 80181d6 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80181a2:	4b11      	ldr	r3, [pc, #68]	@ (80181e8 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	429d      	cmp	r5, r3
 80181a8:	d112      	bne.n	80181d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80181aa:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80181ae:	f8d8 4000 	ldr.w	r4, [r8]
 80181b2:	b16c      	cbz	r4, 80181d0 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80181b4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80181b8:	2700      	movs	r7, #0
 80181ba:	3d04      	subs	r5, #4
 80181bc:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80181c0:	4631      	mov	r1, r6
 80181c2:	f7e8 f82d 	bl	8000220 <strcmp>
 80181c6:	00bb      	lsls	r3, r7, #2
 80181c8:	b140      	cbz	r0, 80181dc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 80181ca:	3701      	adds	r7, #1
 80181cc:	42bc      	cmp	r4, r7
 80181ce:	d1f5      	bne.n	80181bc <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 80181d0:	2000      	movs	r0, #0
 80181d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181d6:	4620      	mov	r0, r4
 80181d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181dc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80181e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80181e4:	58d3      	ldr	r3, [r2, r3]
 80181e6:	4718      	bx	r3
 80181e8:	20000194 	.word	0x20000194

080181ec <std_msgs__msg__Float64MultiArray__init>:
 80181ec:	b570      	push	{r4, r5, r6, lr}
 80181ee:	4605      	mov	r5, r0
 80181f0:	b1b0      	cbz	r0, 8018220 <std_msgs__msg__Float64MultiArray__init+0x34>
 80181f2:	f000 f8b5 	bl	8018360 <std_msgs__msg__MultiArrayLayout__init>
 80181f6:	4604      	mov	r4, r0
 80181f8:	b148      	cbz	r0, 801820e <std_msgs__msg__Float64MultiArray__init+0x22>
 80181fa:	f105 0610 	add.w	r6, r5, #16
 80181fe:	2100      	movs	r1, #0
 8018200:	4630      	mov	r0, r6
 8018202:	f7ff ff99 	bl	8018138 <rosidl_runtime_c__double__Sequence__init>
 8018206:	4604      	mov	r4, r0
 8018208:	b168      	cbz	r0, 8018226 <std_msgs__msg__Float64MultiArray__init+0x3a>
 801820a:	4620      	mov	r0, r4
 801820c:	bd70      	pop	{r4, r5, r6, pc}
 801820e:	4628      	mov	r0, r5
 8018210:	f000 f8b8 	bl	8018384 <std_msgs__msg__MultiArrayLayout__fini>
 8018214:	f105 0010 	add.w	r0, r5, #16
 8018218:	f7ff ffa6 	bl	8018168 <rosidl_runtime_c__double__Sequence__fini>
 801821c:	4620      	mov	r0, r4
 801821e:	bd70      	pop	{r4, r5, r6, pc}
 8018220:	4604      	mov	r4, r0
 8018222:	4620      	mov	r0, r4
 8018224:	bd70      	pop	{r4, r5, r6, pc}
 8018226:	4628      	mov	r0, r5
 8018228:	f000 f8ac 	bl	8018384 <std_msgs__msg__MultiArrayLayout__fini>
 801822c:	4630      	mov	r0, r6
 801822e:	f7ff ff9b 	bl	8018168 <rosidl_runtime_c__double__Sequence__fini>
 8018232:	e7ea      	b.n	801820a <std_msgs__msg__Float64MultiArray__init+0x1e>

08018234 <std_msgs__msg__Float64MultiArray__fini>:
 8018234:	b148      	cbz	r0, 801824a <std_msgs__msg__Float64MultiArray__fini+0x16>
 8018236:	b510      	push	{r4, lr}
 8018238:	4604      	mov	r4, r0
 801823a:	f000 f8a3 	bl	8018384 <std_msgs__msg__MultiArrayLayout__fini>
 801823e:	f104 0010 	add.w	r0, r4, #16
 8018242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018246:	f7ff bf8f 	b.w	8018168 <rosidl_runtime_c__double__Sequence__fini>
 801824a:	4770      	bx	lr

0801824c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 801824c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018250:	b086      	sub	sp, #24
 8018252:	4682      	mov	sl, r0
 8018254:	4689      	mov	r9, r1
 8018256:	a801      	add	r0, sp, #4
 8018258:	f7f5 febe 	bl	800dfd8 <rcutils_get_default_allocator>
 801825c:	f1b9 0f00 	cmp.w	r9, #0
 8018260:	d02f      	beq.n	80182c2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8018262:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8018266:	2114      	movs	r1, #20
 8018268:	4642      	mov	r2, r8
 801826a:	4648      	mov	r0, r9
 801826c:	4798      	blx	r3
 801826e:	4607      	mov	r7, r0
 8018270:	b388      	cbz	r0, 80182d6 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x8a>
 8018272:	4606      	mov	r6, r0
 8018274:	2400      	movs	r4, #0
 8018276:	e004      	b.n	8018282 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x36>
 8018278:	3401      	adds	r4, #1
 801827a:	45a1      	cmp	r9, r4
 801827c:	f106 0614 	add.w	r6, r6, #20
 8018280:	d020      	beq.n	80182c4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8018282:	4630      	mov	r0, r6
 8018284:	f001 fc2e 	bl	8019ae4 <rosidl_runtime_c__String__init>
 8018288:	4605      	mov	r5, r0
 801828a:	2800      	cmp	r0, #0
 801828c:	d1f4      	bne.n	8018278 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 801828e:	4630      	mov	r0, r6
 8018290:	f001 fc3e 	bl	8019b10 <rosidl_runtime_c__String__fini>
 8018294:	45a1      	cmp	r9, r4
 8018296:	d915      	bls.n	80182c4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x78>
 8018298:	b15c      	cbz	r4, 80182b2 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x66>
 801829a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801829e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80182a2:	3c14      	subs	r4, #20
 80182a4:	4620      	mov	r0, r4
 80182a6:	f001 fc33 	bl	8019b10 <rosidl_runtime_c__String__fini>
 80182aa:	42a7      	cmp	r7, r4
 80182ac:	f1a4 0414 	sub.w	r4, r4, #20
 80182b0:	d1f8      	bne.n	80182a4 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x58>
 80182b2:	4638      	mov	r0, r7
 80182b4:	9b02      	ldr	r3, [sp, #8]
 80182b6:	4641      	mov	r1, r8
 80182b8:	4798      	blx	r3
 80182ba:	4628      	mov	r0, r5
 80182bc:	b006      	add	sp, #24
 80182be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182c2:	464f      	mov	r7, r9
 80182c4:	e9ca 7900 	strd	r7, r9, [sl]
 80182c8:	f8ca 9008 	str.w	r9, [sl, #8]
 80182cc:	2501      	movs	r5, #1
 80182ce:	4628      	mov	r0, r5
 80182d0:	b006      	add	sp, #24
 80182d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182d6:	4605      	mov	r5, r0
 80182d8:	e7f9      	b.n	80182ce <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x82>
 80182da:	bf00      	nop

080182dc <std_msgs__msg__MultiArrayDimension__init>:
 80182dc:	b538      	push	{r3, r4, r5, lr}
 80182de:	4604      	mov	r4, r0
 80182e0:	b128      	cbz	r0, 80182ee <std_msgs__msg__MultiArrayDimension__init+0x12>
 80182e2:	f001 fbff 	bl	8019ae4 <rosidl_runtime_c__String__init>
 80182e6:	4605      	mov	r5, r0
 80182e8:	b120      	cbz	r0, 80182f4 <std_msgs__msg__MultiArrayDimension__init+0x18>
 80182ea:	4628      	mov	r0, r5
 80182ec:	bd38      	pop	{r3, r4, r5, pc}
 80182ee:	4605      	mov	r5, r0
 80182f0:	4628      	mov	r0, r5
 80182f2:	bd38      	pop	{r3, r4, r5, pc}
 80182f4:	4620      	mov	r0, r4
 80182f6:	f001 fc0b 	bl	8019b10 <rosidl_runtime_c__String__fini>
 80182fa:	4628      	mov	r0, r5
 80182fc:	bd38      	pop	{r3, r4, r5, pc}
 80182fe:	bf00      	nop

08018300 <std_msgs__msg__MultiArrayDimension__fini>:
 8018300:	b108      	cbz	r0, 8018306 <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8018302:	f001 bc05 	b.w	8019b10 <rosidl_runtime_c__String__fini>
 8018306:	4770      	bx	lr

08018308 <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8018308:	b108      	cbz	r0, 801830e <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 801830a:	f7ff bf9f 	b.w	801824c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 801830e:	4770      	bx	lr

08018310 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8018310:	b320      	cbz	r0, 801835c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8018312:	b530      	push	{r4, r5, lr}
 8018314:	4605      	mov	r5, r0
 8018316:	b087      	sub	sp, #28
 8018318:	a801      	add	r0, sp, #4
 801831a:	f7f5 fe5d 	bl	800dfd8 <rcutils_get_default_allocator>
 801831e:	682a      	ldr	r2, [r5, #0]
 8018320:	b1b2      	cbz	r2, 8018350 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8018322:	68a9      	ldr	r1, [r5, #8]
 8018324:	b161      	cbz	r1, 8018340 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8018326:	2400      	movs	r4, #0
 8018328:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 801832c:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8018330:	d010      	beq.n	8018354 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8018332:	f001 fbed 	bl	8019b10 <rosidl_runtime_c__String__fini>
 8018336:	68a9      	ldr	r1, [r5, #8]
 8018338:	682a      	ldr	r2, [r5, #0]
 801833a:	3401      	adds	r4, #1
 801833c:	428c      	cmp	r4, r1
 801833e:	d3f3      	bcc.n	8018328 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8018340:	9b02      	ldr	r3, [sp, #8]
 8018342:	9905      	ldr	r1, [sp, #20]
 8018344:	4610      	mov	r0, r2
 8018346:	4798      	blx	r3
 8018348:	2300      	movs	r3, #0
 801834a:	e9c5 3300 	strd	r3, r3, [r5]
 801834e:	60ab      	str	r3, [r5, #8]
 8018350:	b007      	add	sp, #28
 8018352:	bd30      	pop	{r4, r5, pc}
 8018354:	3401      	adds	r4, #1
 8018356:	428c      	cmp	r4, r1
 8018358:	d3e6      	bcc.n	8018328 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 801835a:	e7f1      	b.n	8018340 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 801835c:	4770      	bx	lr
 801835e:	bf00      	nop

08018360 <std_msgs__msg__MultiArrayLayout__init>:
 8018360:	b538      	push	{r3, r4, r5, lr}
 8018362:	4604      	mov	r4, r0
 8018364:	b130      	cbz	r0, 8018374 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8018366:	2100      	movs	r1, #0
 8018368:	f7ff ffce 	bl	8018308 <std_msgs__msg__MultiArrayDimension__Sequence__init>
 801836c:	4605      	mov	r5, r0
 801836e:	b120      	cbz	r0, 801837a <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8018370:	4628      	mov	r0, r5
 8018372:	bd38      	pop	{r3, r4, r5, pc}
 8018374:	4605      	mov	r5, r0
 8018376:	4628      	mov	r0, r5
 8018378:	bd38      	pop	{r3, r4, r5, pc}
 801837a:	4620      	mov	r0, r4
 801837c:	f7ff ffc8 	bl	8018310 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8018380:	4628      	mov	r0, r5
 8018382:	bd38      	pop	{r3, r4, r5, pc}

08018384 <std_msgs__msg__MultiArrayLayout__fini>:
 8018384:	b108      	cbz	r0, 801838a <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8018386:	f7ff bfc3 	b.w	8018310 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 801838a:	4770      	bx	lr

0801838c <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 801838c:	f7ff bfa6 	b.w	80182dc <std_msgs__msg__MultiArrayDimension__init>

08018390 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8018390:	f7ff bfb6 	b.w	8018300 <std_msgs__msg__MultiArrayDimension__fini>

08018394 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8018394:	4b04      	ldr	r3, [pc, #16]	@ (80183a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8018396:	681a      	ldr	r2, [r3, #0]
 8018398:	b10a      	cbz	r2, 801839e <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 801839a:	4803      	ldr	r0, [pc, #12]	@ (80183a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 801839c:	4770      	bx	lr
 801839e:	4a03      	ldr	r2, [pc, #12]	@ (80183ac <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 80183a0:	4801      	ldr	r0, [pc, #4]	@ (80183a8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 80183a2:	6812      	ldr	r2, [r2, #0]
 80183a4:	601a      	str	r2, [r3, #0]
 80183a6:	4770      	bx	lr
 80183a8:	20000250 	.word	0x20000250
 80183ac:	20000198 	.word	0x20000198

080183b0 <_MultiArrayDimension__cdr_serialize>:
 80183b0:	b1d0      	cbz	r0, 80183e8 <_MultiArrayDimension__cdr_serialize+0x38>
 80183b2:	b570      	push	{r4, r5, r6, lr}
 80183b4:	6806      	ldr	r6, [r0, #0]
 80183b6:	460d      	mov	r5, r1
 80183b8:	4604      	mov	r4, r0
 80183ba:	b196      	cbz	r6, 80183e2 <_MultiArrayDimension__cdr_serialize+0x32>
 80183bc:	4630      	mov	r0, r6
 80183be:	f7e7 ff39 	bl	8000234 <strlen>
 80183c2:	1c42      	adds	r2, r0, #1
 80183c4:	4631      	mov	r1, r6
 80183c6:	6060      	str	r0, [r4, #4]
 80183c8:	4628      	mov	r0, r5
 80183ca:	f7f8 fc33 	bl	8010c34 <ucdr_serialize_sequence_char>
 80183ce:	68e1      	ldr	r1, [r4, #12]
 80183d0:	4628      	mov	r0, r5
 80183d2:	f7f7 fc89 	bl	800fce8 <ucdr_serialize_uint32_t>
 80183d6:	6921      	ldr	r1, [r4, #16]
 80183d8:	4628      	mov	r0, r5
 80183da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183de:	f7f7 bc83 	b.w	800fce8 <ucdr_serialize_uint32_t>
 80183e2:	4632      	mov	r2, r6
 80183e4:	4630      	mov	r0, r6
 80183e6:	e7ed      	b.n	80183c4 <_MultiArrayDimension__cdr_serialize+0x14>
 80183e8:	4770      	bx	lr
 80183ea:	bf00      	nop

080183ec <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 80183ec:	b570      	push	{r4, r5, r6, lr}
 80183ee:	4604      	mov	r4, r0
 80183f0:	b1b0      	cbz	r0, 8018420 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 80183f2:	460d      	mov	r5, r1
 80183f4:	4628      	mov	r0, r5
 80183f6:	2104      	movs	r1, #4
 80183f8:	f7f8 fbb0 	bl	8010b5c <ucdr_alignment>
 80183fc:	6866      	ldr	r6, [r4, #4]
 80183fe:	1d6b      	adds	r3, r5, #5
 8018400:	4433      	add	r3, r6
 8018402:	181e      	adds	r6, r3, r0
 8018404:	2104      	movs	r1, #4
 8018406:	4630      	mov	r0, r6
 8018408:	f7f8 fba8 	bl	8010b5c <ucdr_alignment>
 801840c:	1d04      	adds	r4, r0, #4
 801840e:	4434      	add	r4, r6
 8018410:	2104      	movs	r1, #4
 8018412:	4620      	mov	r0, r4
 8018414:	f7f8 fba2 	bl	8010b5c <ucdr_alignment>
 8018418:	f1c5 0504 	rsb	r5, r5, #4
 801841c:	4428      	add	r0, r5
 801841e:	4420      	add	r0, r4
 8018420:	bd70      	pop	{r4, r5, r6, pc}
 8018422:	bf00      	nop

08018424 <_MultiArrayDimension__cdr_deserialize>:
 8018424:	b570      	push	{r4, r5, r6, lr}
 8018426:	460c      	mov	r4, r1
 8018428:	b082      	sub	sp, #8
 801842a:	b1d9      	cbz	r1, 8018464 <_MultiArrayDimension__cdr_deserialize+0x40>
 801842c:	688e      	ldr	r6, [r1, #8]
 801842e:	6809      	ldr	r1, [r1, #0]
 8018430:	ab01      	add	r3, sp, #4
 8018432:	4632      	mov	r2, r6
 8018434:	4605      	mov	r5, r0
 8018436:	f7f8 fc0f 	bl	8010c58 <ucdr_deserialize_sequence_char>
 801843a:	9b01      	ldr	r3, [sp, #4]
 801843c:	b970      	cbnz	r0, 801845c <_MultiArrayDimension__cdr_deserialize+0x38>
 801843e:	429e      	cmp	r6, r3
 8018440:	d313      	bcc.n	801846a <_MultiArrayDimension__cdr_deserialize+0x46>
 8018442:	f104 010c 	add.w	r1, r4, #12
 8018446:	4628      	mov	r0, r5
 8018448:	f7f7 fd7e 	bl	800ff48 <ucdr_deserialize_uint32_t>
 801844c:	f104 0110 	add.w	r1, r4, #16
 8018450:	4628      	mov	r0, r5
 8018452:	b002      	add	sp, #8
 8018454:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018458:	f7f7 bd76 	b.w	800ff48 <ucdr_deserialize_uint32_t>
 801845c:	b103      	cbz	r3, 8018460 <_MultiArrayDimension__cdr_deserialize+0x3c>
 801845e:	3b01      	subs	r3, #1
 8018460:	6063      	str	r3, [r4, #4]
 8018462:	e7ee      	b.n	8018442 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8018464:	4608      	mov	r0, r1
 8018466:	b002      	add	sp, #8
 8018468:	bd70      	pop	{r4, r5, r6, pc}
 801846a:	2101      	movs	r1, #1
 801846c:	75a8      	strb	r0, [r5, #22]
 801846e:	7569      	strb	r1, [r5, #21]
 8018470:	6060      	str	r0, [r4, #4]
 8018472:	4628      	mov	r0, r5
 8018474:	f7f8 fb88 	bl	8010b88 <ucdr_align_to>
 8018478:	9901      	ldr	r1, [sp, #4]
 801847a:	4628      	mov	r0, r5
 801847c:	f7f8 fbba 	bl	8010bf4 <ucdr_advance_buffer>
 8018480:	e7df      	b.n	8018442 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8018482:	bf00      	nop

08018484 <_MultiArrayDimension__max_serialized_size>:
 8018484:	b510      	push	{r4, lr}
 8018486:	2104      	movs	r1, #4
 8018488:	2000      	movs	r0, #0
 801848a:	f7f8 fb67 	bl	8010b5c <ucdr_alignment>
 801848e:	1d04      	adds	r4, r0, #4
 8018490:	2104      	movs	r1, #4
 8018492:	4620      	mov	r0, r4
 8018494:	f7f8 fb62 	bl	8010b5c <ucdr_alignment>
 8018498:	3004      	adds	r0, #4
 801849a:	4420      	add	r0, r4
 801849c:	bd10      	pop	{r4, pc}
 801849e:	bf00      	nop

080184a0 <_MultiArrayDimension__get_serialized_size>:
 80184a0:	b510      	push	{r4, lr}
 80184a2:	4604      	mov	r4, r0
 80184a4:	b190      	cbz	r0, 80184cc <_MultiArrayDimension__get_serialized_size+0x2c>
 80184a6:	2104      	movs	r1, #4
 80184a8:	2000      	movs	r0, #0
 80184aa:	f7f8 fb57 	bl	8010b5c <ucdr_alignment>
 80184ae:	6863      	ldr	r3, [r4, #4]
 80184b0:	3305      	adds	r3, #5
 80184b2:	181c      	adds	r4, r3, r0
 80184b4:	2104      	movs	r1, #4
 80184b6:	4620      	mov	r0, r4
 80184b8:	f7f8 fb50 	bl	8010b5c <ucdr_alignment>
 80184bc:	3004      	adds	r0, #4
 80184be:	4404      	add	r4, r0
 80184c0:	2104      	movs	r1, #4
 80184c2:	4620      	mov	r0, r4
 80184c4:	f7f8 fb4a 	bl	8010b5c <ucdr_alignment>
 80184c8:	3004      	adds	r0, #4
 80184ca:	4420      	add	r0, r4
 80184cc:	bd10      	pop	{r4, pc}
 80184ce:	bf00      	nop

080184d0 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 80184d0:	4800      	ldr	r0, [pc, #0]	@ (80184d4 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 80184d2:	4770      	bx	lr
 80184d4:	2000025c 	.word	0x2000025c

080184d8 <ucdr_serialize_endian_array_char>:
 80184d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184dc:	4619      	mov	r1, r3
 80184de:	461f      	mov	r7, r3
 80184e0:	4605      	mov	r5, r0
 80184e2:	4690      	mov	r8, r2
 80184e4:	f7f8 fae2 	bl	8010aac <ucdr_check_buffer_available_for>
 80184e8:	b9e0      	cbnz	r0, 8018524 <ucdr_serialize_endian_array_char+0x4c>
 80184ea:	463e      	mov	r6, r7
 80184ec:	e009      	b.n	8018502 <ucdr_serialize_endian_array_char+0x2a>
 80184ee:	68a8      	ldr	r0, [r5, #8]
 80184f0:	f002 f90f 	bl	801a712 <memcpy>
 80184f4:	68ab      	ldr	r3, [r5, #8]
 80184f6:	6928      	ldr	r0, [r5, #16]
 80184f8:	4423      	add	r3, r4
 80184fa:	4420      	add	r0, r4
 80184fc:	1b36      	subs	r6, r6, r4
 80184fe:	60ab      	str	r3, [r5, #8]
 8018500:	6128      	str	r0, [r5, #16]
 8018502:	4631      	mov	r1, r6
 8018504:	2201      	movs	r2, #1
 8018506:	4628      	mov	r0, r5
 8018508:	f7f8 fb58 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 801850c:	1bb9      	subs	r1, r7, r6
 801850e:	4441      	add	r1, r8
 8018510:	4604      	mov	r4, r0
 8018512:	4602      	mov	r2, r0
 8018514:	2800      	cmp	r0, #0
 8018516:	d1ea      	bne.n	80184ee <ucdr_serialize_endian_array_char+0x16>
 8018518:	2301      	movs	r3, #1
 801851a:	7da8      	ldrb	r0, [r5, #22]
 801851c:	756b      	strb	r3, [r5, #21]
 801851e:	4058      	eors	r0, r3
 8018520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018524:	463a      	mov	r2, r7
 8018526:	68a8      	ldr	r0, [r5, #8]
 8018528:	4641      	mov	r1, r8
 801852a:	f002 f8f2 	bl	801a712 <memcpy>
 801852e:	68aa      	ldr	r2, [r5, #8]
 8018530:	692b      	ldr	r3, [r5, #16]
 8018532:	443a      	add	r2, r7
 8018534:	443b      	add	r3, r7
 8018536:	60aa      	str	r2, [r5, #8]
 8018538:	612b      	str	r3, [r5, #16]
 801853a:	e7ed      	b.n	8018518 <ucdr_serialize_endian_array_char+0x40>

0801853c <ucdr_deserialize_endian_array_char>:
 801853c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018540:	4619      	mov	r1, r3
 8018542:	461f      	mov	r7, r3
 8018544:	4605      	mov	r5, r0
 8018546:	4690      	mov	r8, r2
 8018548:	f7f8 fab0 	bl	8010aac <ucdr_check_buffer_available_for>
 801854c:	b9e0      	cbnz	r0, 8018588 <ucdr_deserialize_endian_array_char+0x4c>
 801854e:	463e      	mov	r6, r7
 8018550:	e009      	b.n	8018566 <ucdr_deserialize_endian_array_char+0x2a>
 8018552:	68a9      	ldr	r1, [r5, #8]
 8018554:	f002 f8dd 	bl	801a712 <memcpy>
 8018558:	68ab      	ldr	r3, [r5, #8]
 801855a:	6928      	ldr	r0, [r5, #16]
 801855c:	4423      	add	r3, r4
 801855e:	4420      	add	r0, r4
 8018560:	1b36      	subs	r6, r6, r4
 8018562:	60ab      	str	r3, [r5, #8]
 8018564:	6128      	str	r0, [r5, #16]
 8018566:	2201      	movs	r2, #1
 8018568:	4631      	mov	r1, r6
 801856a:	4628      	mov	r0, r5
 801856c:	f7f8 fb26 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 8018570:	4604      	mov	r4, r0
 8018572:	1bb8      	subs	r0, r7, r6
 8018574:	4440      	add	r0, r8
 8018576:	4622      	mov	r2, r4
 8018578:	2c00      	cmp	r4, #0
 801857a:	d1ea      	bne.n	8018552 <ucdr_deserialize_endian_array_char+0x16>
 801857c:	2301      	movs	r3, #1
 801857e:	7da8      	ldrb	r0, [r5, #22]
 8018580:	756b      	strb	r3, [r5, #21]
 8018582:	4058      	eors	r0, r3
 8018584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018588:	463a      	mov	r2, r7
 801858a:	68a9      	ldr	r1, [r5, #8]
 801858c:	4640      	mov	r0, r8
 801858e:	f002 f8c0 	bl	801a712 <memcpy>
 8018592:	68aa      	ldr	r2, [r5, #8]
 8018594:	692b      	ldr	r3, [r5, #16]
 8018596:	443a      	add	r2, r7
 8018598:	443b      	add	r3, r7
 801859a:	60aa      	str	r2, [r5, #8]
 801859c:	612b      	str	r3, [r5, #16]
 801859e:	e7ed      	b.n	801857c <ucdr_deserialize_endian_array_char+0x40>

080185a0 <ucdr_serialize_array_uint8_t>:
 80185a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185a4:	4688      	mov	r8, r1
 80185a6:	4611      	mov	r1, r2
 80185a8:	4617      	mov	r7, r2
 80185aa:	4605      	mov	r5, r0
 80185ac:	f7f8 fa7e 	bl	8010aac <ucdr_check_buffer_available_for>
 80185b0:	b9e0      	cbnz	r0, 80185ec <ucdr_serialize_array_uint8_t+0x4c>
 80185b2:	463e      	mov	r6, r7
 80185b4:	e009      	b.n	80185ca <ucdr_serialize_array_uint8_t+0x2a>
 80185b6:	68a8      	ldr	r0, [r5, #8]
 80185b8:	f002 f8ab 	bl	801a712 <memcpy>
 80185bc:	68aa      	ldr	r2, [r5, #8]
 80185be:	692b      	ldr	r3, [r5, #16]
 80185c0:	4422      	add	r2, r4
 80185c2:	4423      	add	r3, r4
 80185c4:	1b36      	subs	r6, r6, r4
 80185c6:	60aa      	str	r2, [r5, #8]
 80185c8:	612b      	str	r3, [r5, #16]
 80185ca:	4631      	mov	r1, r6
 80185cc:	2201      	movs	r2, #1
 80185ce:	4628      	mov	r0, r5
 80185d0:	f7f8 faf4 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 80185d4:	1bb9      	subs	r1, r7, r6
 80185d6:	4441      	add	r1, r8
 80185d8:	4604      	mov	r4, r0
 80185da:	4602      	mov	r2, r0
 80185dc:	2800      	cmp	r0, #0
 80185de:	d1ea      	bne.n	80185b6 <ucdr_serialize_array_uint8_t+0x16>
 80185e0:	2301      	movs	r3, #1
 80185e2:	7da8      	ldrb	r0, [r5, #22]
 80185e4:	756b      	strb	r3, [r5, #21]
 80185e6:	4058      	eors	r0, r3
 80185e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185ec:	463a      	mov	r2, r7
 80185ee:	68a8      	ldr	r0, [r5, #8]
 80185f0:	4641      	mov	r1, r8
 80185f2:	f002 f88e 	bl	801a712 <memcpy>
 80185f6:	68aa      	ldr	r2, [r5, #8]
 80185f8:	692b      	ldr	r3, [r5, #16]
 80185fa:	443a      	add	r2, r7
 80185fc:	443b      	add	r3, r7
 80185fe:	60aa      	str	r2, [r5, #8]
 8018600:	612b      	str	r3, [r5, #16]
 8018602:	e7ed      	b.n	80185e0 <ucdr_serialize_array_uint8_t+0x40>

08018604 <ucdr_serialize_endian_array_uint8_t>:
 8018604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018608:	4619      	mov	r1, r3
 801860a:	461f      	mov	r7, r3
 801860c:	4605      	mov	r5, r0
 801860e:	4690      	mov	r8, r2
 8018610:	f7f8 fa4c 	bl	8010aac <ucdr_check_buffer_available_for>
 8018614:	b9e0      	cbnz	r0, 8018650 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8018616:	463e      	mov	r6, r7
 8018618:	e009      	b.n	801862e <ucdr_serialize_endian_array_uint8_t+0x2a>
 801861a:	68a8      	ldr	r0, [r5, #8]
 801861c:	f002 f879 	bl	801a712 <memcpy>
 8018620:	68ab      	ldr	r3, [r5, #8]
 8018622:	6928      	ldr	r0, [r5, #16]
 8018624:	4423      	add	r3, r4
 8018626:	4420      	add	r0, r4
 8018628:	1b36      	subs	r6, r6, r4
 801862a:	60ab      	str	r3, [r5, #8]
 801862c:	6128      	str	r0, [r5, #16]
 801862e:	4631      	mov	r1, r6
 8018630:	2201      	movs	r2, #1
 8018632:	4628      	mov	r0, r5
 8018634:	f7f8 fac2 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 8018638:	1bb9      	subs	r1, r7, r6
 801863a:	4441      	add	r1, r8
 801863c:	4604      	mov	r4, r0
 801863e:	4602      	mov	r2, r0
 8018640:	2800      	cmp	r0, #0
 8018642:	d1ea      	bne.n	801861a <ucdr_serialize_endian_array_uint8_t+0x16>
 8018644:	2301      	movs	r3, #1
 8018646:	7da8      	ldrb	r0, [r5, #22]
 8018648:	756b      	strb	r3, [r5, #21]
 801864a:	4058      	eors	r0, r3
 801864c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018650:	463a      	mov	r2, r7
 8018652:	68a8      	ldr	r0, [r5, #8]
 8018654:	4641      	mov	r1, r8
 8018656:	f002 f85c 	bl	801a712 <memcpy>
 801865a:	68aa      	ldr	r2, [r5, #8]
 801865c:	692b      	ldr	r3, [r5, #16]
 801865e:	443a      	add	r2, r7
 8018660:	443b      	add	r3, r7
 8018662:	60aa      	str	r2, [r5, #8]
 8018664:	612b      	str	r3, [r5, #16]
 8018666:	e7ed      	b.n	8018644 <ucdr_serialize_endian_array_uint8_t+0x40>

08018668 <ucdr_deserialize_array_uint8_t>:
 8018668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801866c:	4688      	mov	r8, r1
 801866e:	4611      	mov	r1, r2
 8018670:	4617      	mov	r7, r2
 8018672:	4605      	mov	r5, r0
 8018674:	f7f8 fa1a 	bl	8010aac <ucdr_check_buffer_available_for>
 8018678:	b9e0      	cbnz	r0, 80186b4 <ucdr_deserialize_array_uint8_t+0x4c>
 801867a:	463e      	mov	r6, r7
 801867c:	e009      	b.n	8018692 <ucdr_deserialize_array_uint8_t+0x2a>
 801867e:	68a9      	ldr	r1, [r5, #8]
 8018680:	f002 f847 	bl	801a712 <memcpy>
 8018684:	68aa      	ldr	r2, [r5, #8]
 8018686:	692b      	ldr	r3, [r5, #16]
 8018688:	4422      	add	r2, r4
 801868a:	4423      	add	r3, r4
 801868c:	1b36      	subs	r6, r6, r4
 801868e:	60aa      	str	r2, [r5, #8]
 8018690:	612b      	str	r3, [r5, #16]
 8018692:	2201      	movs	r2, #1
 8018694:	4631      	mov	r1, r6
 8018696:	4628      	mov	r0, r5
 8018698:	f7f8 fa90 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 801869c:	4604      	mov	r4, r0
 801869e:	1bb8      	subs	r0, r7, r6
 80186a0:	4440      	add	r0, r8
 80186a2:	4622      	mov	r2, r4
 80186a4:	2c00      	cmp	r4, #0
 80186a6:	d1ea      	bne.n	801867e <ucdr_deserialize_array_uint8_t+0x16>
 80186a8:	2301      	movs	r3, #1
 80186aa:	7da8      	ldrb	r0, [r5, #22]
 80186ac:	756b      	strb	r3, [r5, #21]
 80186ae:	4058      	eors	r0, r3
 80186b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80186b4:	463a      	mov	r2, r7
 80186b6:	68a9      	ldr	r1, [r5, #8]
 80186b8:	4640      	mov	r0, r8
 80186ba:	f002 f82a 	bl	801a712 <memcpy>
 80186be:	68aa      	ldr	r2, [r5, #8]
 80186c0:	692b      	ldr	r3, [r5, #16]
 80186c2:	443a      	add	r2, r7
 80186c4:	443b      	add	r3, r7
 80186c6:	60aa      	str	r2, [r5, #8]
 80186c8:	612b      	str	r3, [r5, #16]
 80186ca:	e7ed      	b.n	80186a8 <ucdr_deserialize_array_uint8_t+0x40>

080186cc <ucdr_deserialize_endian_array_uint8_t>:
 80186cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d0:	4619      	mov	r1, r3
 80186d2:	461f      	mov	r7, r3
 80186d4:	4605      	mov	r5, r0
 80186d6:	4690      	mov	r8, r2
 80186d8:	f7f8 f9e8 	bl	8010aac <ucdr_check_buffer_available_for>
 80186dc:	b9e0      	cbnz	r0, 8018718 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 80186de:	463e      	mov	r6, r7
 80186e0:	e009      	b.n	80186f6 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 80186e2:	68a9      	ldr	r1, [r5, #8]
 80186e4:	f002 f815 	bl	801a712 <memcpy>
 80186e8:	68ab      	ldr	r3, [r5, #8]
 80186ea:	6928      	ldr	r0, [r5, #16]
 80186ec:	4423      	add	r3, r4
 80186ee:	4420      	add	r0, r4
 80186f0:	1b36      	subs	r6, r6, r4
 80186f2:	60ab      	str	r3, [r5, #8]
 80186f4:	6128      	str	r0, [r5, #16]
 80186f6:	2201      	movs	r2, #1
 80186f8:	4631      	mov	r1, r6
 80186fa:	4628      	mov	r0, r5
 80186fc:	f7f8 fa5e 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 8018700:	4604      	mov	r4, r0
 8018702:	1bb8      	subs	r0, r7, r6
 8018704:	4440      	add	r0, r8
 8018706:	4622      	mov	r2, r4
 8018708:	2c00      	cmp	r4, #0
 801870a:	d1ea      	bne.n	80186e2 <ucdr_deserialize_endian_array_uint8_t+0x16>
 801870c:	2301      	movs	r3, #1
 801870e:	7da8      	ldrb	r0, [r5, #22]
 8018710:	756b      	strb	r3, [r5, #21]
 8018712:	4058      	eors	r0, r3
 8018714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018718:	463a      	mov	r2, r7
 801871a:	68a9      	ldr	r1, [r5, #8]
 801871c:	4640      	mov	r0, r8
 801871e:	f001 fff8 	bl	801a712 <memcpy>
 8018722:	68aa      	ldr	r2, [r5, #8]
 8018724:	692b      	ldr	r3, [r5, #16]
 8018726:	443a      	add	r2, r7
 8018728:	443b      	add	r3, r7
 801872a:	60aa      	str	r2, [r5, #8]
 801872c:	612b      	str	r3, [r5, #16]
 801872e:	e7ed      	b.n	801870c <ucdr_deserialize_endian_array_uint8_t+0x40>

08018730 <ucdr_serialize_endian_array_double>:
 8018730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018734:	4688      	mov	r8, r1
 8018736:	2108      	movs	r1, #8
 8018738:	4604      	mov	r4, r0
 801873a:	4616      	mov	r6, r2
 801873c:	461f      	mov	r7, r3
 801873e:	f7f8 fa15 	bl	8010b6c <ucdr_buffer_alignment>
 8018742:	4601      	mov	r1, r0
 8018744:	4620      	mov	r0, r4
 8018746:	7d65      	ldrb	r5, [r4, #21]
 8018748:	f7f8 fa54 	bl	8010bf4 <ucdr_advance_buffer>
 801874c:	f1b8 0f01 	cmp.w	r8, #1
 8018750:	7565      	strb	r5, [r4, #21]
 8018752:	d00f      	beq.n	8018774 <ucdr_serialize_endian_array_double+0x44>
 8018754:	2500      	movs	r5, #0
 8018756:	b147      	cbz	r7, 801876a <ucdr_serialize_endian_array_double+0x3a>
 8018758:	ecb6 0b02 	vldmia	r6!, {d0}
 801875c:	4641      	mov	r1, r8
 801875e:	4620      	mov	r0, r4
 8018760:	3501      	adds	r5, #1
 8018762:	f7f8 f803 	bl	801076c <ucdr_serialize_endian_double>
 8018766:	42af      	cmp	r7, r5
 8018768:	d1f6      	bne.n	8018758 <ucdr_serialize_endian_array_double+0x28>
 801876a:	7da0      	ldrb	r0, [r4, #22]
 801876c:	f080 0001 	eor.w	r0, r0, #1
 8018770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018774:	00ff      	lsls	r7, r7, #3
 8018776:	4639      	mov	r1, r7
 8018778:	4620      	mov	r0, r4
 801877a:	f7f8 f997 	bl	8010aac <ucdr_check_buffer_available_for>
 801877e:	b9f8      	cbnz	r0, 80187c0 <ucdr_serialize_endian_array_double+0x90>
 8018780:	46b8      	mov	r8, r7
 8018782:	e00a      	b.n	801879a <ucdr_serialize_endian_array_double+0x6a>
 8018784:	68a0      	ldr	r0, [r4, #8]
 8018786:	f001 ffc4 	bl	801a712 <memcpy>
 801878a:	68a2      	ldr	r2, [r4, #8]
 801878c:	6923      	ldr	r3, [r4, #16]
 801878e:	442a      	add	r2, r5
 8018790:	442b      	add	r3, r5
 8018792:	eba8 0805 	sub.w	r8, r8, r5
 8018796:	60a2      	str	r2, [r4, #8]
 8018798:	6123      	str	r3, [r4, #16]
 801879a:	4641      	mov	r1, r8
 801879c:	2208      	movs	r2, #8
 801879e:	4620      	mov	r0, r4
 80187a0:	f7f8 fa0c 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 80187a4:	eba7 0108 	sub.w	r1, r7, r8
 80187a8:	4431      	add	r1, r6
 80187aa:	4605      	mov	r5, r0
 80187ac:	4602      	mov	r2, r0
 80187ae:	2800      	cmp	r0, #0
 80187b0:	d1e8      	bne.n	8018784 <ucdr_serialize_endian_array_double+0x54>
 80187b2:	7da0      	ldrb	r0, [r4, #22]
 80187b4:	2308      	movs	r3, #8
 80187b6:	7563      	strb	r3, [r4, #21]
 80187b8:	f080 0001 	eor.w	r0, r0, #1
 80187bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80187c0:	463a      	mov	r2, r7
 80187c2:	68a0      	ldr	r0, [r4, #8]
 80187c4:	4631      	mov	r1, r6
 80187c6:	f001 ffa4 	bl	801a712 <memcpy>
 80187ca:	68a2      	ldr	r2, [r4, #8]
 80187cc:	6923      	ldr	r3, [r4, #16]
 80187ce:	443a      	add	r2, r7
 80187d0:	441f      	add	r7, r3
 80187d2:	60a2      	str	r2, [r4, #8]
 80187d4:	6127      	str	r7, [r4, #16]
 80187d6:	e7ec      	b.n	80187b2 <ucdr_serialize_endian_array_double+0x82>

080187d8 <ucdr_deserialize_endian_array_double>:
 80187d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187dc:	4688      	mov	r8, r1
 80187de:	2108      	movs	r1, #8
 80187e0:	4605      	mov	r5, r0
 80187e2:	4614      	mov	r4, r2
 80187e4:	461f      	mov	r7, r3
 80187e6:	f7f8 f9c1 	bl	8010b6c <ucdr_buffer_alignment>
 80187ea:	4601      	mov	r1, r0
 80187ec:	4628      	mov	r0, r5
 80187ee:	7d6e      	ldrb	r6, [r5, #21]
 80187f0:	f7f8 fa00 	bl	8010bf4 <ucdr_advance_buffer>
 80187f4:	f1b8 0f01 	cmp.w	r8, #1
 80187f8:	756e      	strb	r6, [r5, #21]
 80187fa:	d010      	beq.n	801881e <ucdr_deserialize_endian_array_double+0x46>
 80187fc:	2600      	movs	r6, #0
 80187fe:	b14f      	cbz	r7, 8018814 <ucdr_deserialize_endian_array_double+0x3c>
 8018800:	4622      	mov	r2, r4
 8018802:	4641      	mov	r1, r8
 8018804:	4628      	mov	r0, r5
 8018806:	3601      	adds	r6, #1
 8018808:	f7f8 f882 	bl	8010910 <ucdr_deserialize_endian_double>
 801880c:	42b7      	cmp	r7, r6
 801880e:	f104 0408 	add.w	r4, r4, #8
 8018812:	d1f5      	bne.n	8018800 <ucdr_deserialize_endian_array_double+0x28>
 8018814:	7da8      	ldrb	r0, [r5, #22]
 8018816:	f080 0001 	eor.w	r0, r0, #1
 801881a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801881e:	00ff      	lsls	r7, r7, #3
 8018820:	4639      	mov	r1, r7
 8018822:	4628      	mov	r0, r5
 8018824:	f7f8 f942 	bl	8010aac <ucdr_check_buffer_available_for>
 8018828:	b9f8      	cbnz	r0, 801886a <ucdr_deserialize_endian_array_double+0x92>
 801882a:	46b8      	mov	r8, r7
 801882c:	e00a      	b.n	8018844 <ucdr_deserialize_endian_array_double+0x6c>
 801882e:	68a9      	ldr	r1, [r5, #8]
 8018830:	f001 ff6f 	bl	801a712 <memcpy>
 8018834:	68aa      	ldr	r2, [r5, #8]
 8018836:	692b      	ldr	r3, [r5, #16]
 8018838:	4432      	add	r2, r6
 801883a:	4433      	add	r3, r6
 801883c:	eba8 0806 	sub.w	r8, r8, r6
 8018840:	60aa      	str	r2, [r5, #8]
 8018842:	612b      	str	r3, [r5, #16]
 8018844:	2208      	movs	r2, #8
 8018846:	4641      	mov	r1, r8
 8018848:	4628      	mov	r0, r5
 801884a:	f7f8 f9b7 	bl	8010bbc <ucdr_check_final_buffer_behavior_array>
 801884e:	4606      	mov	r6, r0
 8018850:	eba7 0008 	sub.w	r0, r7, r8
 8018854:	4420      	add	r0, r4
 8018856:	4632      	mov	r2, r6
 8018858:	2e00      	cmp	r6, #0
 801885a:	d1e8      	bne.n	801882e <ucdr_deserialize_endian_array_double+0x56>
 801885c:	7da8      	ldrb	r0, [r5, #22]
 801885e:	2308      	movs	r3, #8
 8018860:	756b      	strb	r3, [r5, #21]
 8018862:	f080 0001 	eor.w	r0, r0, #1
 8018866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801886a:	463a      	mov	r2, r7
 801886c:	68a9      	ldr	r1, [r5, #8]
 801886e:	4620      	mov	r0, r4
 8018870:	f001 ff4f 	bl	801a712 <memcpy>
 8018874:	68aa      	ldr	r2, [r5, #8]
 8018876:	692b      	ldr	r3, [r5, #16]
 8018878:	443a      	add	r2, r7
 801887a:	441f      	add	r7, r3
 801887c:	60aa      	str	r2, [r5, #8]
 801887e:	612f      	str	r7, [r5, #16]
 8018880:	e7ec      	b.n	801885c <ucdr_deserialize_endian_array_double+0x84>
 8018882:	bf00      	nop

08018884 <ucdr_serialize_string>:
 8018884:	b510      	push	{r4, lr}
 8018886:	b082      	sub	sp, #8
 8018888:	4604      	mov	r4, r0
 801888a:	4608      	mov	r0, r1
 801888c:	9101      	str	r1, [sp, #4]
 801888e:	f7e7 fcd1 	bl	8000234 <strlen>
 8018892:	9901      	ldr	r1, [sp, #4]
 8018894:	1c42      	adds	r2, r0, #1
 8018896:	4620      	mov	r0, r4
 8018898:	b002      	add	sp, #8
 801889a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801889e:	f7f8 b9c9 	b.w	8010c34 <ucdr_serialize_sequence_char>
 80188a2:	bf00      	nop

080188a4 <ucdr_deserialize_string>:
 80188a4:	b500      	push	{lr}
 80188a6:	b083      	sub	sp, #12
 80188a8:	ab01      	add	r3, sp, #4
 80188aa:	f7f8 f9d5 	bl	8010c58 <ucdr_deserialize_sequence_char>
 80188ae:	b003      	add	sp, #12
 80188b0:	f85d fb04 	ldr.w	pc, [sp], #4

080188b4 <uxr_init_input_best_effort_stream>:
 80188b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80188b8:	8003      	strh	r3, [r0, #0]
 80188ba:	4770      	bx	lr

080188bc <uxr_reset_input_best_effort_stream>:
 80188bc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80188c0:	8003      	strh	r3, [r0, #0]
 80188c2:	4770      	bx	lr

080188c4 <uxr_receive_best_effort_message>:
 80188c4:	b538      	push	{r3, r4, r5, lr}
 80188c6:	4604      	mov	r4, r0
 80188c8:	8800      	ldrh	r0, [r0, #0]
 80188ca:	460d      	mov	r5, r1
 80188cc:	f000 fd42 	bl	8019354 <uxr_seq_num_cmp>
 80188d0:	4603      	mov	r3, r0
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 80188d8:	bfb8      	it	lt
 80188da:	8025      	strhlt	r5, [r4, #0]
 80188dc:	bd38      	pop	{r3, r4, r5, pc}
 80188de:	bf00      	nop

080188e0 <on_full_input_buffer>:
 80188e0:	b570      	push	{r4, r5, r6, lr}
 80188e2:	4605      	mov	r5, r0
 80188e4:	460c      	mov	r4, r1
 80188e6:	682b      	ldr	r3, [r5, #0]
 80188e8:	6809      	ldr	r1, [r1, #0]
 80188ea:	8920      	ldrh	r0, [r4, #8]
 80188ec:	6862      	ldr	r2, [r4, #4]
 80188ee:	fbb2 f2f0 	udiv	r2, r2, r0
 80188f2:	eba3 0c01 	sub.w	ip, r3, r1
 80188f6:	fbbc fcf2 	udiv	ip, ip, r2
 80188fa:	f10c 0c01 	add.w	ip, ip, #1
 80188fe:	fa1f f38c 	uxth.w	r3, ip
 8018902:	fbb3 f6f0 	udiv	r6, r3, r0
 8018906:	fb00 3316 	mls	r3, r0, r6, r3
 801890a:	b29b      	uxth	r3, r3
 801890c:	fb02 f303 	mul.w	r3, r2, r3
 8018910:	1d18      	adds	r0, r3, #4
 8018912:	4408      	add	r0, r1
 8018914:	7d26      	ldrb	r6, [r4, #20]
 8018916:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801891a:	b116      	cbz	r6, 8018922 <on_full_input_buffer+0x42>
 801891c:	2600      	movs	r6, #0
 801891e:	f840 6c04 	str.w	r6, [r0, #-4]
 8018922:	2a03      	cmp	r2, #3
 8018924:	d801      	bhi.n	801892a <on_full_input_buffer+0x4a>
 8018926:	2001      	movs	r0, #1
 8018928:	bd70      	pop	{r4, r5, r6, pc}
 801892a:	3308      	adds	r3, #8
 801892c:	4419      	add	r1, r3
 801892e:	4628      	mov	r0, r5
 8018930:	692b      	ldr	r3, [r5, #16]
 8018932:	3a04      	subs	r2, #4
 8018934:	f7f8 f906 	bl	8010b44 <ucdr_init_buffer_origin>
 8018938:	4628      	mov	r0, r5
 801893a:	4903      	ldr	r1, [pc, #12]	@ (8018948 <on_full_input_buffer+0x68>)
 801893c:	4622      	mov	r2, r4
 801893e:	f7f8 f8dd 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 8018942:	2000      	movs	r0, #0
 8018944:	bd70      	pop	{r4, r5, r6, pc}
 8018946:	bf00      	nop
 8018948:	080188e1 	.word	0x080188e1

0801894c <uxr_init_input_reliable_stream>:
 801894c:	b500      	push	{lr}
 801894e:	e9c0 1200 	strd	r1, r2, [r0]
 8018952:	f04f 0e00 	mov.w	lr, #0
 8018956:	9a01      	ldr	r2, [sp, #4]
 8018958:	8103      	strh	r3, [r0, #8]
 801895a:	6102      	str	r2, [r0, #16]
 801895c:	f880 e014 	strb.w	lr, [r0, #20]
 8018960:	b1d3      	cbz	r3, 8018998 <uxr_init_input_reliable_stream+0x4c>
 8018962:	f8c1 e000 	str.w	lr, [r1]
 8018966:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801896a:	f1bc 0f01 	cmp.w	ip, #1
 801896e:	d913      	bls.n	8018998 <uxr_init_input_reliable_stream+0x4c>
 8018970:	2301      	movs	r3, #1
 8018972:	fbb3 f1fc 	udiv	r1, r3, ip
 8018976:	fb0c 3111 	mls	r1, ip, r1, r3
 801897a:	b289      	uxth	r1, r1
 801897c:	6842      	ldr	r2, [r0, #4]
 801897e:	fbb2 f2fc 	udiv	r2, r2, ip
 8018982:	fb01 f202 	mul.w	r2, r1, r2
 8018986:	6801      	ldr	r1, [r0, #0]
 8018988:	f841 e002 	str.w	lr, [r1, r2]
 801898c:	3301      	adds	r3, #1
 801898e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018992:	b29b      	uxth	r3, r3
 8018994:	459c      	cmp	ip, r3
 8018996:	d8ec      	bhi.n	8018972 <uxr_init_input_reliable_stream+0x26>
 8018998:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801899c:	60c3      	str	r3, [r0, #12]
 801899e:	f85d fb04 	ldr.w	pc, [sp], #4
 80189a2:	bf00      	nop

080189a4 <uxr_reset_input_reliable_stream>:
 80189a4:	8901      	ldrh	r1, [r0, #8]
 80189a6:	b1e9      	cbz	r1, 80189e4 <uxr_reset_input_reliable_stream+0x40>
 80189a8:	f04f 0c00 	mov.w	ip, #0
 80189ac:	b500      	push	{lr}
 80189ae:	4663      	mov	r3, ip
 80189b0:	46e6      	mov	lr, ip
 80189b2:	fbb3 f2f1 	udiv	r2, r3, r1
 80189b6:	fb01 3312 	mls	r3, r1, r2, r3
 80189ba:	b29b      	uxth	r3, r3
 80189bc:	6842      	ldr	r2, [r0, #4]
 80189be:	fbb2 f2f1 	udiv	r2, r2, r1
 80189c2:	fb02 f303 	mul.w	r3, r2, r3
 80189c6:	6802      	ldr	r2, [r0, #0]
 80189c8:	f842 e003 	str.w	lr, [r2, r3]
 80189cc:	f10c 0c01 	add.w	ip, ip, #1
 80189d0:	8901      	ldrh	r1, [r0, #8]
 80189d2:	fa1f f38c 	uxth.w	r3, ip
 80189d6:	4299      	cmp	r1, r3
 80189d8:	d8eb      	bhi.n	80189b2 <uxr_reset_input_reliable_stream+0xe>
 80189da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189de:	60c3      	str	r3, [r0, #12]
 80189e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80189e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80189e8:	60c3      	str	r3, [r0, #12]
 80189ea:	4770      	bx	lr

080189ec <uxr_receive_reliable_message>:
 80189ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189f0:	4604      	mov	r4, r0
 80189f2:	460d      	mov	r5, r1
 80189f4:	8901      	ldrh	r1, [r0, #8]
 80189f6:	8980      	ldrh	r0, [r0, #12]
 80189f8:	4690      	mov	r8, r2
 80189fa:	461f      	mov	r7, r3
 80189fc:	f000 fca2 	bl	8019344 <uxr_seq_num_add>
 8018a00:	4629      	mov	r1, r5
 8018a02:	4606      	mov	r6, r0
 8018a04:	89a0      	ldrh	r0, [r4, #12]
 8018a06:	f000 fca5 	bl	8019354 <uxr_seq_num_cmp>
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	db0a      	blt.n	8018a24 <uxr_receive_reliable_message+0x38>
 8018a0e:	2600      	movs	r6, #0
 8018a10:	89e0      	ldrh	r0, [r4, #14]
 8018a12:	4629      	mov	r1, r5
 8018a14:	f000 fc9e 	bl	8019354 <uxr_seq_num_cmp>
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	da00      	bge.n	8018a1e <uxr_receive_reliable_message+0x32>
 8018a1c:	81e5      	strh	r5, [r4, #14]
 8018a1e:	4630      	mov	r0, r6
 8018a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a24:	4630      	mov	r0, r6
 8018a26:	4629      	mov	r1, r5
 8018a28:	f000 fc94 	bl	8019354 <uxr_seq_num_cmp>
 8018a2c:	2800      	cmp	r0, #0
 8018a2e:	dbee      	blt.n	8018a0e <uxr_receive_reliable_message+0x22>
 8018a30:	6923      	ldr	r3, [r4, #16]
 8018a32:	4640      	mov	r0, r8
 8018a34:	4798      	blx	r3
 8018a36:	2101      	movs	r1, #1
 8018a38:	4681      	mov	r9, r0
 8018a3a:	89a0      	ldrh	r0, [r4, #12]
 8018a3c:	f000 fc82 	bl	8019344 <uxr_seq_num_add>
 8018a40:	f1b9 0f00 	cmp.w	r9, #0
 8018a44:	d101      	bne.n	8018a4a <uxr_receive_reliable_message+0x5e>
 8018a46:	4285      	cmp	r5, r0
 8018a48:	d047      	beq.n	8018ada <uxr_receive_reliable_message+0xee>
 8018a4a:	8922      	ldrh	r2, [r4, #8]
 8018a4c:	fbb5 f0f2 	udiv	r0, r5, r2
 8018a50:	fb02 5010 	mls	r0, r2, r0, r5
 8018a54:	b280      	uxth	r0, r0
 8018a56:	6863      	ldr	r3, [r4, #4]
 8018a58:	fbb3 f3f2 	udiv	r3, r3, r2
 8018a5c:	fb00 f303 	mul.w	r3, r0, r3
 8018a60:	6820      	ldr	r0, [r4, #0]
 8018a62:	3304      	adds	r3, #4
 8018a64:	4418      	add	r0, r3
 8018a66:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018a6a:	2b00      	cmp	r3, #0
 8018a6c:	d1cf      	bne.n	8018a0e <uxr_receive_reliable_message+0x22>
 8018a6e:	4641      	mov	r1, r8
 8018a70:	463a      	mov	r2, r7
 8018a72:	f001 fe4e 	bl	801a712 <memcpy>
 8018a76:	8921      	ldrh	r1, [r4, #8]
 8018a78:	fbb5 f2f1 	udiv	r2, r5, r1
 8018a7c:	fb01 5212 	mls	r2, r1, r2, r5
 8018a80:	b292      	uxth	r2, r2
 8018a82:	6863      	ldr	r3, [r4, #4]
 8018a84:	fbb3 f3f1 	udiv	r3, r3, r1
 8018a88:	fb02 f303 	mul.w	r3, r2, r3
 8018a8c:	6822      	ldr	r2, [r4, #0]
 8018a8e:	50d7      	str	r7, [r2, r3]
 8018a90:	9a08      	ldr	r2, [sp, #32]
 8018a92:	2301      	movs	r3, #1
 8018a94:	7013      	strb	r3, [r2, #0]
 8018a96:	f1b9 0f00 	cmp.w	r9, #0
 8018a9a:	d0b8      	beq.n	8018a0e <uxr_receive_reliable_message+0x22>
 8018a9c:	89a6      	ldrh	r6, [r4, #12]
 8018a9e:	4630      	mov	r0, r6
 8018aa0:	2101      	movs	r1, #1
 8018aa2:	f000 fc4f 	bl	8019344 <uxr_seq_num_add>
 8018aa6:	8922      	ldrh	r2, [r4, #8]
 8018aa8:	6863      	ldr	r3, [r4, #4]
 8018aaa:	fbb3 f3f2 	udiv	r3, r3, r2
 8018aae:	4606      	mov	r6, r0
 8018ab0:	fbb0 f0f2 	udiv	r0, r0, r2
 8018ab4:	fb02 6010 	mls	r0, r2, r0, r6
 8018ab8:	b280      	uxth	r0, r0
 8018aba:	fb00 f303 	mul.w	r3, r0, r3
 8018abe:	6820      	ldr	r0, [r4, #0]
 8018ac0:	3304      	adds	r3, #4
 8018ac2:	4418      	add	r0, r3
 8018ac4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018ac8:	2b00      	cmp	r3, #0
 8018aca:	d0a0      	beq.n	8018a0e <uxr_receive_reliable_message+0x22>
 8018acc:	6923      	ldr	r3, [r4, #16]
 8018ace:	4798      	blx	r3
 8018ad0:	2802      	cmp	r0, #2
 8018ad2:	d008      	beq.n	8018ae6 <uxr_receive_reliable_message+0xfa>
 8018ad4:	2801      	cmp	r0, #1
 8018ad6:	d0e2      	beq.n	8018a9e <uxr_receive_reliable_message+0xb2>
 8018ad8:	e799      	b.n	8018a0e <uxr_receive_reliable_message+0x22>
 8018ada:	9b08      	ldr	r3, [sp, #32]
 8018adc:	81a5      	strh	r5, [r4, #12]
 8018ade:	2601      	movs	r6, #1
 8018ae0:	f883 9000 	strb.w	r9, [r3]
 8018ae4:	e794      	b.n	8018a10 <uxr_receive_reliable_message+0x24>
 8018ae6:	2601      	movs	r6, #1
 8018ae8:	e792      	b.n	8018a10 <uxr_receive_reliable_message+0x24>
 8018aea:	bf00      	nop

08018aec <uxr_next_input_reliable_buffer_available>:
 8018aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018af0:	4604      	mov	r4, r0
 8018af2:	460f      	mov	r7, r1
 8018af4:	8980      	ldrh	r0, [r0, #12]
 8018af6:	2101      	movs	r1, #1
 8018af8:	4690      	mov	r8, r2
 8018afa:	f000 fc23 	bl	8019344 <uxr_seq_num_add>
 8018afe:	8922      	ldrh	r2, [r4, #8]
 8018b00:	fbb0 f6f2 	udiv	r6, r0, r2
 8018b04:	fb02 0616 	mls	r6, r2, r6, r0
 8018b08:	b2b6      	uxth	r6, r6
 8018b0a:	6863      	ldr	r3, [r4, #4]
 8018b0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018b10:	fb06 f303 	mul.w	r3, r6, r3
 8018b14:	6826      	ldr	r6, [r4, #0]
 8018b16:	3304      	adds	r3, #4
 8018b18:	441e      	add	r6, r3
 8018b1a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 8018b1e:	f1b9 0f00 	cmp.w	r9, #0
 8018b22:	d023      	beq.n	8018b6c <uxr_next_input_reliable_buffer_available+0x80>
 8018b24:	6923      	ldr	r3, [r4, #16]
 8018b26:	4605      	mov	r5, r0
 8018b28:	4630      	mov	r0, r6
 8018b2a:	4798      	blx	r3
 8018b2c:	4682      	mov	sl, r0
 8018b2e:	b300      	cbz	r0, 8018b72 <uxr_next_input_reliable_buffer_available+0x86>
 8018b30:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8018b34:	2101      	movs	r1, #1
 8018b36:	4650      	mov	r0, sl
 8018b38:	f000 fc04 	bl	8019344 <uxr_seq_num_add>
 8018b3c:	8921      	ldrh	r1, [r4, #8]
 8018b3e:	fbb0 f2f1 	udiv	r2, r0, r1
 8018b42:	4682      	mov	sl, r0
 8018b44:	fb01 0212 	mls	r2, r1, r2, r0
 8018b48:	e9d4 0300 	ldrd	r0, r3, [r4]
 8018b4c:	b292      	uxth	r2, r2
 8018b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b52:	fb02 f303 	mul.w	r3, r2, r3
 8018b56:	3304      	adds	r3, #4
 8018b58:	4418      	add	r0, r3
 8018b5a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8018b5e:	b12b      	cbz	r3, 8018b6c <uxr_next_input_reliable_buffer_available+0x80>
 8018b60:	6923      	ldr	r3, [r4, #16]
 8018b62:	4798      	blx	r3
 8018b64:	2802      	cmp	r0, #2
 8018b66:	d01b      	beq.n	8018ba0 <uxr_next_input_reliable_buffer_available+0xb4>
 8018b68:	2801      	cmp	r0, #1
 8018b6a:	d0e3      	beq.n	8018b34 <uxr_next_input_reliable_buffer_available+0x48>
 8018b6c:	2000      	movs	r0, #0
 8018b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b72:	464a      	mov	r2, r9
 8018b74:	4631      	mov	r1, r6
 8018b76:	4638      	mov	r0, r7
 8018b78:	f7f7 ffec 	bl	8010b54 <ucdr_init_buffer>
 8018b7c:	8921      	ldrh	r1, [r4, #8]
 8018b7e:	fbb5 f2f1 	udiv	r2, r5, r1
 8018b82:	fb01 5212 	mls	r2, r1, r2, r5
 8018b86:	b292      	uxth	r2, r2
 8018b88:	6863      	ldr	r3, [r4, #4]
 8018b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8018b8e:	fb02 f303 	mul.w	r3, r2, r3
 8018b92:	6822      	ldr	r2, [r4, #0]
 8018b94:	f842 a003 	str.w	sl, [r2, r3]
 8018b98:	2001      	movs	r0, #1
 8018b9a:	81a5      	strh	r5, [r4, #12]
 8018b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ba0:	8920      	ldrh	r0, [r4, #8]
 8018ba2:	fbb5 f3f0 	udiv	r3, r5, r0
 8018ba6:	fb00 5513 	mls	r5, r0, r3, r5
 8018baa:	b2ad      	uxth	r5, r5
 8018bac:	6863      	ldr	r3, [r4, #4]
 8018bae:	fbb3 f3f0 	udiv	r3, r3, r0
 8018bb2:	fb03 f505 	mul.w	r5, r3, r5
 8018bb6:	6823      	ldr	r3, [r4, #0]
 8018bb8:	2000      	movs	r0, #0
 8018bba:	5158      	str	r0, [r3, r5]
 8018bbc:	eb06 0108 	add.w	r1, r6, r8
 8018bc0:	eba9 0208 	sub.w	r2, r9, r8
 8018bc4:	4638      	mov	r0, r7
 8018bc6:	f7f7 ffc5 	bl	8010b54 <ucdr_init_buffer>
 8018bca:	4638      	mov	r0, r7
 8018bcc:	4903      	ldr	r1, [pc, #12]	@ (8018bdc <uxr_next_input_reliable_buffer_available+0xf0>)
 8018bce:	4622      	mov	r2, r4
 8018bd0:	f7f7 ff94 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 8018bd4:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8018bd8:	2001      	movs	r0, #1
 8018bda:	e7c8      	b.n	8018b6e <uxr_next_input_reliable_buffer_available+0x82>
 8018bdc:	080188e1 	.word	0x080188e1

08018be0 <uxr_process_heartbeat>:
 8018be0:	b538      	push	{r3, r4, r5, lr}
 8018be2:	4611      	mov	r1, r2
 8018be4:	4604      	mov	r4, r0
 8018be6:	89c0      	ldrh	r0, [r0, #14]
 8018be8:	4615      	mov	r5, r2
 8018bea:	f000 fbb3 	bl	8019354 <uxr_seq_num_cmp>
 8018bee:	2800      	cmp	r0, #0
 8018bf0:	bfb8      	it	lt
 8018bf2:	81e5      	strhlt	r5, [r4, #14]
 8018bf4:	bd38      	pop	{r3, r4, r5, pc}
 8018bf6:	bf00      	nop

08018bf8 <uxr_compute_acknack>:
 8018bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bfc:	8903      	ldrh	r3, [r0, #8]
 8018bfe:	8985      	ldrh	r5, [r0, #12]
 8018c00:	4604      	mov	r4, r0
 8018c02:	460e      	mov	r6, r1
 8018c04:	b1d3      	cbz	r3, 8018c3c <uxr_compute_acknack+0x44>
 8018c06:	4628      	mov	r0, r5
 8018c08:	2701      	movs	r7, #1
 8018c0a:	e003      	b.n	8018c14 <uxr_compute_acknack+0x1c>
 8018c0c:	4567      	cmp	r7, ip
 8018c0e:	d215      	bcs.n	8018c3c <uxr_compute_acknack+0x44>
 8018c10:	89a0      	ldrh	r0, [r4, #12]
 8018c12:	3701      	adds	r7, #1
 8018c14:	b2b9      	uxth	r1, r7
 8018c16:	f000 fb95 	bl	8019344 <uxr_seq_num_add>
 8018c1a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c1e:	fbb0 f3fc 	udiv	r3, r0, ip
 8018c22:	fb0c 0313 	mls	r3, ip, r3, r0
 8018c26:	b29a      	uxth	r2, r3
 8018c28:	e9d4 1300 	ldrd	r1, r3, [r4]
 8018c2c:	fbb3 f3fc 	udiv	r3, r3, ip
 8018c30:	fb02 f303 	mul.w	r3, r2, r3
 8018c34:	58cb      	ldr	r3, [r1, r3]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d1e8      	bne.n	8018c0c <uxr_compute_acknack+0x14>
 8018c3a:	4605      	mov	r5, r0
 8018c3c:	8035      	strh	r5, [r6, #0]
 8018c3e:	2101      	movs	r1, #1
 8018c40:	4628      	mov	r0, r5
 8018c42:	89e7      	ldrh	r7, [r4, #14]
 8018c44:	f000 fb82 	bl	801934c <uxr_seq_num_sub>
 8018c48:	4601      	mov	r1, r0
 8018c4a:	4638      	mov	r0, r7
 8018c4c:	f000 fb7e 	bl	801934c <uxr_seq_num_sub>
 8018c50:	4605      	mov	r5, r0
 8018c52:	b318      	cbz	r0, 8018c9c <uxr_compute_acknack+0xa4>
 8018c54:	f04f 0900 	mov.w	r9, #0
 8018c58:	464f      	mov	r7, r9
 8018c5a:	f04f 0801 	mov.w	r8, #1
 8018c5e:	fa1f f189 	uxth.w	r1, r9
 8018c62:	8830      	ldrh	r0, [r6, #0]
 8018c64:	f000 fb6e 	bl	8019344 <uxr_seq_num_add>
 8018c68:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8018c6c:	fbb0 f3fc 	udiv	r3, r0, ip
 8018c70:	e9d4 1200 	ldrd	r1, r2, [r4]
 8018c74:	fb03 001c 	mls	r0, r3, ip, r0
 8018c78:	b283      	uxth	r3, r0
 8018c7a:	fbb2 f2fc 	udiv	r2, r2, ip
 8018c7e:	fb02 f303 	mul.w	r3, r2, r3
 8018c82:	fa08 f209 	lsl.w	r2, r8, r9
 8018c86:	58cb      	ldr	r3, [r1, r3]
 8018c88:	f109 0901 	add.w	r9, r9, #1
 8018c8c:	b90b      	cbnz	r3, 8018c92 <uxr_compute_acknack+0x9a>
 8018c8e:	4317      	orrs	r7, r2
 8018c90:	b2bf      	uxth	r7, r7
 8018c92:	454d      	cmp	r5, r9
 8018c94:	d1e3      	bne.n	8018c5e <uxr_compute_acknack+0x66>
 8018c96:	4638      	mov	r0, r7
 8018c98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c9c:	4607      	mov	r7, r0
 8018c9e:	4638      	mov	r0, r7
 8018ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08018ca4 <uxr_init_output_best_effort_stream>:
 8018ca4:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8018ca8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 8018cac:	6001      	str	r1, [r0, #0]
 8018cae:	7303      	strb	r3, [r0, #12]
 8018cb0:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8018cb4:	4770      	bx	lr
 8018cb6:	bf00      	nop

08018cb8 <uxr_reset_output_best_effort_stream>:
 8018cb8:	7b02      	ldrb	r2, [r0, #12]
 8018cba:	6042      	str	r2, [r0, #4]
 8018cbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8018cc0:	81c3      	strh	r3, [r0, #14]
 8018cc2:	4770      	bx	lr

08018cc4 <uxr_prepare_best_effort_buffer_to_write>:
 8018cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018cc6:	4604      	mov	r4, r0
 8018cc8:	b083      	sub	sp, #12
 8018cca:	6840      	ldr	r0, [r0, #4]
 8018ccc:	460d      	mov	r5, r1
 8018cce:	4616      	mov	r6, r2
 8018cd0:	f7fa fa68 	bl	80131a4 <uxr_submessage_padding>
 8018cd4:	6863      	ldr	r3, [r4, #4]
 8018cd6:	4418      	add	r0, r3
 8018cd8:	68a3      	ldr	r3, [r4, #8]
 8018cda:	1942      	adds	r2, r0, r5
 8018cdc:	4293      	cmp	r3, r2
 8018cde:	bf2c      	ite	cs
 8018ce0:	2701      	movcs	r7, #1
 8018ce2:	2700      	movcc	r7, #0
 8018ce4:	d202      	bcs.n	8018cec <uxr_prepare_best_effort_buffer_to_write+0x28>
 8018ce6:	4638      	mov	r0, r7
 8018ce8:	b003      	add	sp, #12
 8018cea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018cec:	9000      	str	r0, [sp, #0]
 8018cee:	6821      	ldr	r1, [r4, #0]
 8018cf0:	4630      	mov	r0, r6
 8018cf2:	2300      	movs	r3, #0
 8018cf4:	f7f7 ff1c 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8018cf8:	6861      	ldr	r1, [r4, #4]
 8018cfa:	4638      	mov	r0, r7
 8018cfc:	4429      	add	r1, r5
 8018cfe:	6061      	str	r1, [r4, #4]
 8018d00:	b003      	add	sp, #12
 8018d02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d04 <uxr_prepare_best_effort_buffer_to_send>:
 8018d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d08:	4604      	mov	r4, r0
 8018d0a:	461d      	mov	r5, r3
 8018d0c:	6840      	ldr	r0, [r0, #4]
 8018d0e:	7b23      	ldrb	r3, [r4, #12]
 8018d10:	4298      	cmp	r0, r3
 8018d12:	bf8c      	ite	hi
 8018d14:	2601      	movhi	r6, #1
 8018d16:	2600      	movls	r6, #0
 8018d18:	d802      	bhi.n	8018d20 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8018d1a:	4630      	mov	r0, r6
 8018d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d20:	4688      	mov	r8, r1
 8018d22:	89e0      	ldrh	r0, [r4, #14]
 8018d24:	2101      	movs	r1, #1
 8018d26:	4617      	mov	r7, r2
 8018d28:	f000 fb0c 	bl	8019344 <uxr_seq_num_add>
 8018d2c:	6823      	ldr	r3, [r4, #0]
 8018d2e:	81e0      	strh	r0, [r4, #14]
 8018d30:	8028      	strh	r0, [r5, #0]
 8018d32:	f8c8 3000 	str.w	r3, [r8]
 8018d36:	6863      	ldr	r3, [r4, #4]
 8018d38:	603b      	str	r3, [r7, #0]
 8018d3a:	7b23      	ldrb	r3, [r4, #12]
 8018d3c:	6063      	str	r3, [r4, #4]
 8018d3e:	4630      	mov	r0, r6
 8018d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018d44 <on_full_output_buffer>:
 8018d44:	b538      	push	{r3, r4, r5, lr}
 8018d46:	6802      	ldr	r2, [r0, #0]
 8018d48:	460c      	mov	r4, r1
 8018d4a:	6809      	ldr	r1, [r1, #0]
 8018d4c:	8923      	ldrh	r3, [r4, #8]
 8018d4e:	eba2 0c01 	sub.w	ip, r2, r1
 8018d52:	6862      	ldr	r2, [r4, #4]
 8018d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8018d58:	fbbc fcf2 	udiv	ip, ip, r2
 8018d5c:	f10c 0c01 	add.w	ip, ip, #1
 8018d60:	fa1f fc8c 	uxth.w	ip, ip
 8018d64:	fbbc fef3 	udiv	lr, ip, r3
 8018d68:	fb03 c31e 	mls	r3, r3, lr, ip
 8018d6c:	b29b      	uxth	r3, r3
 8018d6e:	fb02 f303 	mul.w	r3, r2, r3
 8018d72:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8018d76:	58ca      	ldr	r2, [r1, r3]
 8018d78:	4463      	add	r3, ip
 8018d7a:	eba2 020c 	sub.w	r2, r2, ip
 8018d7e:	3308      	adds	r3, #8
 8018d80:	4605      	mov	r5, r0
 8018d82:	4419      	add	r1, r3
 8018d84:	3a04      	subs	r2, #4
 8018d86:	6903      	ldr	r3, [r0, #16]
 8018d88:	f7f7 fedc 	bl	8010b44 <ucdr_init_buffer_origin>
 8018d8c:	4628      	mov	r0, r5
 8018d8e:	4903      	ldr	r1, [pc, #12]	@ (8018d9c <on_full_output_buffer+0x58>)
 8018d90:	4622      	mov	r2, r4
 8018d92:	f7f7 feb3 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 8018d96:	2000      	movs	r0, #0
 8018d98:	bd38      	pop	{r3, r4, r5, pc}
 8018d9a:	bf00      	nop
 8018d9c:	08018d45 	.word	0x08018d45

08018da0 <uxr_init_output_reliable_stream>:
 8018da0:	b410      	push	{r4}
 8018da2:	f89d c004 	ldrb.w	ip, [sp, #4]
 8018da6:	8103      	strh	r3, [r0, #8]
 8018da8:	e9c0 1200 	strd	r1, r2, [r0]
 8018dac:	f880 c00c 	strb.w	ip, [r0, #12]
 8018db0:	b1d3      	cbz	r3, 8018de8 <uxr_init_output_reliable_stream+0x48>
 8018db2:	f8c1 c000 	str.w	ip, [r1]
 8018db6:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018dba:	f1bc 0f01 	cmp.w	ip, #1
 8018dbe:	d913      	bls.n	8018de8 <uxr_init_output_reliable_stream+0x48>
 8018dc0:	2301      	movs	r3, #1
 8018dc2:	fbb3 f1fc 	udiv	r1, r3, ip
 8018dc6:	fb0c 3111 	mls	r1, ip, r1, r3
 8018dca:	b289      	uxth	r1, r1
 8018dcc:	6842      	ldr	r2, [r0, #4]
 8018dce:	6804      	ldr	r4, [r0, #0]
 8018dd0:	fbb2 f2fc 	udiv	r2, r2, ip
 8018dd4:	fb01 f202 	mul.w	r2, r1, r2
 8018dd8:	7b01      	ldrb	r1, [r0, #12]
 8018dda:	50a1      	str	r1, [r4, r2]
 8018ddc:	3301      	adds	r3, #1
 8018dde:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8018de2:	b29b      	uxth	r3, r3
 8018de4:	459c      	cmp	ip, r3
 8018de6:	d8ec      	bhi.n	8018dc2 <uxr_init_output_reliable_stream+0x22>
 8018de8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018dec:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018df0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018df4:	4905      	ldr	r1, [pc, #20]	@ (8018e0c <uxr_init_output_reliable_stream+0x6c>)
 8018df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dfa:	f8c0 100e 	str.w	r1, [r0, #14]
 8018dfe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e02:	2300      	movs	r3, #0
 8018e04:	8242      	strh	r2, [r0, #18]
 8018e06:	8403      	strh	r3, [r0, #32]
 8018e08:	4770      	bx	lr
 8018e0a:	bf00      	nop
 8018e0c:	ffff0000 	.word	0xffff0000

08018e10 <uxr_reset_output_reliable_stream>:
 8018e10:	8901      	ldrh	r1, [r0, #8]
 8018e12:	b1b1      	cbz	r1, 8018e42 <uxr_reset_output_reliable_stream+0x32>
 8018e14:	f04f 0c00 	mov.w	ip, #0
 8018e18:	4663      	mov	r3, ip
 8018e1a:	fbb3 f2f1 	udiv	r2, r3, r1
 8018e1e:	fb01 3312 	mls	r3, r1, r2, r3
 8018e22:	b29b      	uxth	r3, r3
 8018e24:	6842      	ldr	r2, [r0, #4]
 8018e26:	fbb2 f2f1 	udiv	r2, r2, r1
 8018e2a:	6801      	ldr	r1, [r0, #0]
 8018e2c:	fb02 f303 	mul.w	r3, r2, r3
 8018e30:	7b02      	ldrb	r2, [r0, #12]
 8018e32:	50ca      	str	r2, [r1, r3]
 8018e34:	f10c 0c01 	add.w	ip, ip, #1
 8018e38:	8901      	ldrh	r1, [r0, #8]
 8018e3a:	fa1f f38c 	uxth.w	r3, ip
 8018e3e:	4299      	cmp	r1, r3
 8018e40:	d8eb      	bhi.n	8018e1a <uxr_reset_output_reliable_stream+0xa>
 8018e42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8018e46:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8018e4a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8018e4e:	4904      	ldr	r1, [pc, #16]	@ (8018e60 <uxr_reset_output_reliable_stream+0x50>)
 8018e50:	f8c0 100e 	str.w	r1, [r0, #14]
 8018e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018e58:	2300      	movs	r3, #0
 8018e5a:	8242      	strh	r2, [r0, #18]
 8018e5c:	8403      	strh	r3, [r0, #32]
 8018e5e:	4770      	bx	lr
 8018e60:	ffff0000 	.word	0xffff0000

08018e64 <uxr_prepare_reliable_buffer_to_write>:
 8018e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e68:	4604      	mov	r4, r0
 8018e6a:	b091      	sub	sp, #68	@ 0x44
 8018e6c:	8900      	ldrh	r0, [r0, #8]
 8018e6e:	89e6      	ldrh	r6, [r4, #14]
 8018e70:	6823      	ldr	r3, [r4, #0]
 8018e72:	9204      	str	r2, [sp, #16]
 8018e74:	fbb6 f2f0 	udiv	r2, r6, r0
 8018e78:	fb00 6212 	mls	r2, r0, r2, r6
 8018e7c:	b292      	uxth	r2, r2
 8018e7e:	6865      	ldr	r5, [r4, #4]
 8018e80:	fbb5 f5f0 	udiv	r5, r5, r0
 8018e84:	fb05 3202 	mla	r2, r5, r2, r3
 8018e88:	3204      	adds	r2, #4
 8018e8a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 8018e8e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8018e92:	9203      	str	r2, [sp, #12]
 8018e94:	468b      	mov	fp, r1
 8018e96:	1f2f      	subs	r7, r5, #4
 8018e98:	2800      	cmp	r0, #0
 8018e9a:	f000 814c 	beq.w	8019136 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 8018e9e:	f04f 0c00 	mov.w	ip, #0
 8018ea2:	46e2      	mov	sl, ip
 8018ea4:	4661      	mov	r1, ip
 8018ea6:	fbb1 f2f0 	udiv	r2, r1, r0
 8018eaa:	fb00 1212 	mls	r2, r0, r2, r1
 8018eae:	b292      	uxth	r2, r2
 8018eb0:	fb05 f202 	mul.w	r2, r5, r2
 8018eb4:	f10c 0c01 	add.w	ip, ip, #1
 8018eb8:	589a      	ldr	r2, [r3, r2]
 8018eba:	454a      	cmp	r2, r9
 8018ebc:	bf08      	it	eq
 8018ebe:	f10a 0a01 	addeq.w	sl, sl, #1
 8018ec2:	fa1f f18c 	uxth.w	r1, ip
 8018ec6:	bf08      	it	eq
 8018ec8:	fa1f fa8a 	uxtheq.w	sl, sl
 8018ecc:	4281      	cmp	r1, r0
 8018ece:	d3ea      	bcc.n	8018ea6 <uxr_prepare_reliable_buffer_to_write+0x42>
 8018ed0:	4640      	mov	r0, r8
 8018ed2:	2104      	movs	r1, #4
 8018ed4:	f8cd a014 	str.w	sl, [sp, #20]
 8018ed8:	f7f7 fe40 	bl	8010b5c <ucdr_alignment>
 8018edc:	4480      	add	r8, r0
 8018ede:	eb08 020b 	add.w	r2, r8, fp
 8018ee2:	42ba      	cmp	r2, r7
 8018ee4:	f240 80cd 	bls.w	8019082 <uxr_prepare_reliable_buffer_to_write+0x21e>
 8018ee8:	7b22      	ldrb	r2, [r4, #12]
 8018eea:	445a      	add	r2, fp
 8018eec:	42ba      	cmp	r2, r7
 8018eee:	f240 80b5 	bls.w	801905c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 8018ef2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 8018ef6:	33fc      	adds	r3, #252	@ 0xfc
 8018ef8:	b2ba      	uxth	r2, r7
 8018efa:	4413      	add	r3, r2
 8018efc:	b29b      	uxth	r3, r3
 8018efe:	fb0a f903 	mul.w	r9, sl, r3
 8018f02:	45d9      	cmp	r9, fp
 8018f04:	9305      	str	r3, [sp, #20]
 8018f06:	9306      	str	r3, [sp, #24]
 8018f08:	f0c0 80b7 	bcc.w	801907a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018f0c:	f108 0304 	add.w	r3, r8, #4
 8018f10:	42bb      	cmp	r3, r7
 8018f12:	f080 80db 	bcs.w	80190cc <uxr_prepare_reliable_buffer_to_write+0x268>
 8018f16:	f1a2 0904 	sub.w	r9, r2, #4
 8018f1a:	eba9 0908 	sub.w	r9, r9, r8
 8018f1e:	9b05      	ldr	r3, [sp, #20]
 8018f20:	fa1f f989 	uxth.w	r9, r9
 8018f24:	ebab 0b09 	sub.w	fp, fp, r9
 8018f28:	fbbb f2f3 	udiv	r2, fp, r3
 8018f2c:	fb03 b312 	mls	r3, r3, r2, fp
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	f000 80c8 	beq.w	80190c6 <uxr_prepare_reliable_buffer_to_write+0x262>
 8018f36:	3201      	adds	r2, #1
 8018f38:	b292      	uxth	r2, r2
 8018f3a:	9306      	str	r3, [sp, #24]
 8018f3c:	4552      	cmp	r2, sl
 8018f3e:	f200 809c 	bhi.w	801907a <uxr_prepare_reliable_buffer_to_write+0x216>
 8018f42:	f10d 0b20 	add.w	fp, sp, #32
 8018f46:	2a00      	cmp	r2, #0
 8018f48:	d042      	beq.n	8018fd0 <uxr_prepare_reliable_buffer_to_write+0x16c>
 8018f4a:	f8cd 801c 	str.w	r8, [sp, #28]
 8018f4e:	f04f 0a00 	mov.w	sl, #0
 8018f52:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8018f56:	9505      	str	r5, [sp, #20]
 8018f58:	f10d 0b20 	add.w	fp, sp, #32
 8018f5c:	4615      	mov	r5, r2
 8018f5e:	e000      	b.n	8018f62 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8018f60:	46c1      	mov	r9, r8
 8018f62:	8920      	ldrh	r0, [r4, #8]
 8018f64:	fbb6 f2f0 	udiv	r2, r6, r0
 8018f68:	fb00 6112 	mls	r1, r0, r2, r6
 8018f6c:	b28a      	uxth	r2, r1
 8018f6e:	6863      	ldr	r3, [r4, #4]
 8018f70:	fbb3 f1f0 	udiv	r1, r3, r0
 8018f74:	6823      	ldr	r3, [r4, #0]
 8018f76:	fb02 f101 	mul.w	r1, r2, r1
 8018f7a:	3104      	adds	r1, #4
 8018f7c:	4419      	add	r1, r3
 8018f7e:	4658      	mov	r0, fp
 8018f80:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8018f84:	9200      	str	r2, [sp, #0]
 8018f86:	2300      	movs	r3, #0
 8018f88:	463a      	mov	r2, r7
 8018f8a:	f7f7 fdd1 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8018f8e:	464a      	mov	r2, r9
 8018f90:	2300      	movs	r3, #0
 8018f92:	210d      	movs	r1, #13
 8018f94:	4658      	mov	r0, fp
 8018f96:	f7fa f8c5 	bl	8013124 <uxr_buffer_submessage_header>
 8018f9a:	8921      	ldrh	r1, [r4, #8]
 8018f9c:	fbb6 f2f1 	udiv	r2, r6, r1
 8018fa0:	fb01 6212 	mls	r2, r1, r2, r6
 8018fa4:	b292      	uxth	r2, r2
 8018fa6:	6863      	ldr	r3, [r4, #4]
 8018fa8:	fbb3 f3f1 	udiv	r3, r3, r1
 8018fac:	fb02 f303 	mul.w	r3, r2, r3
 8018fb0:	6822      	ldr	r2, [r4, #0]
 8018fb2:	4630      	mov	r0, r6
 8018fb4:	50d7      	str	r7, [r2, r3]
 8018fb6:	2101      	movs	r1, #1
 8018fb8:	f000 f9c4 	bl	8019344 <uxr_seq_num_add>
 8018fbc:	f10a 0a01 	add.w	sl, sl, #1
 8018fc0:	fa1f f38a 	uxth.w	r3, sl
 8018fc4:	429d      	cmp	r5, r3
 8018fc6:	4606      	mov	r6, r0
 8018fc8:	d8ca      	bhi.n	8018f60 <uxr_prepare_reliable_buffer_to_write+0xfc>
 8018fca:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018fce:	9d05      	ldr	r5, [sp, #20]
 8018fd0:	8920      	ldrh	r0, [r4, #8]
 8018fd2:	fbb6 f3f0 	udiv	r3, r6, r0
 8018fd6:	fb00 6313 	mls	r3, r0, r3, r6
 8018fda:	b299      	uxth	r1, r3
 8018fdc:	6863      	ldr	r3, [r4, #4]
 8018fde:	fbb3 f3f0 	udiv	r3, r3, r0
 8018fe2:	fb01 f303 	mul.w	r3, r1, r3
 8018fe6:	6821      	ldr	r1, [r4, #0]
 8018fe8:	3304      	adds	r3, #4
 8018fea:	4419      	add	r1, r3
 8018fec:	463a      	mov	r2, r7
 8018fee:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8018ff2:	9000      	str	r0, [sp, #0]
 8018ff4:	2300      	movs	r3, #0
 8018ff6:	4658      	mov	r0, fp
 8018ff8:	f7f7 fd9a 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8018ffc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8019000:	4658      	mov	r0, fp
 8019002:	fa1f f289 	uxth.w	r2, r9
 8019006:	2302      	movs	r3, #2
 8019008:	210d      	movs	r1, #13
 801900a:	f7fa f88b 	bl	8013124 <uxr_buffer_submessage_header>
 801900e:	9b03      	ldr	r3, [sp, #12]
 8019010:	8927      	ldrh	r7, [r4, #8]
 8019012:	7b20      	ldrb	r0, [r4, #12]
 8019014:	f108 0104 	add.w	r1, r8, #4
 8019018:	440b      	add	r3, r1
 801901a:	4619      	mov	r1, r3
 801901c:	fbb6 f3f7 	udiv	r3, r6, r7
 8019020:	fb07 6313 	mls	r3, r7, r3, r6
 8019024:	f1a5 0208 	sub.w	r2, r5, #8
 8019028:	b29d      	uxth	r5, r3
 801902a:	3004      	adds	r0, #4
 801902c:	6863      	ldr	r3, [r4, #4]
 801902e:	fbb3 f3f7 	udiv	r3, r3, r7
 8019032:	fb05 f303 	mul.w	r3, r5, r3
 8019036:	6825      	ldr	r5, [r4, #0]
 8019038:	4448      	add	r0, r9
 801903a:	50e8      	str	r0, [r5, r3]
 801903c:	9d04      	ldr	r5, [sp, #16]
 801903e:	eba2 0208 	sub.w	r2, r2, r8
 8019042:	4628      	mov	r0, r5
 8019044:	f7f7 fd86 	bl	8010b54 <ucdr_init_buffer>
 8019048:	4628      	mov	r0, r5
 801904a:	493c      	ldr	r1, [pc, #240]	@ (801913c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801904c:	4622      	mov	r2, r4
 801904e:	f7f7 fd55 	bl	8010afc <ucdr_set_on_full_buffer_callback>
 8019052:	2001      	movs	r0, #1
 8019054:	81e6      	strh	r6, [r4, #14]
 8019056:	b011      	add	sp, #68	@ 0x44
 8019058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801905c:	2101      	movs	r1, #1
 801905e:	89e0      	ldrh	r0, [r4, #14]
 8019060:	f000 f970 	bl	8019344 <uxr_seq_num_add>
 8019064:	8921      	ldrh	r1, [r4, #8]
 8019066:	4605      	mov	r5, r0
 8019068:	8a60      	ldrh	r0, [r4, #18]
 801906a:	f000 f96b 	bl	8019344 <uxr_seq_num_add>
 801906e:	4601      	mov	r1, r0
 8019070:	4628      	mov	r0, r5
 8019072:	f000 f96f 	bl	8019354 <uxr_seq_num_cmp>
 8019076:	2800      	cmp	r0, #0
 8019078:	dd42      	ble.n	8019100 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801907a:	2000      	movs	r0, #0
 801907c:	b011      	add	sp, #68	@ 0x44
 801907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019082:	8921      	ldrh	r1, [r4, #8]
 8019084:	8a60      	ldrh	r0, [r4, #18]
 8019086:	9205      	str	r2, [sp, #20]
 8019088:	f000 f95c 	bl	8019344 <uxr_seq_num_add>
 801908c:	4601      	mov	r1, r0
 801908e:	4630      	mov	r0, r6
 8019090:	f000 f960 	bl	8019354 <uxr_seq_num_cmp>
 8019094:	2800      	cmp	r0, #0
 8019096:	9a05      	ldr	r2, [sp, #20]
 8019098:	dcef      	bgt.n	801907a <uxr_prepare_reliable_buffer_to_write+0x216>
 801909a:	8927      	ldrh	r7, [r4, #8]
 801909c:	fbb6 f3f7 	udiv	r3, r6, r7
 80190a0:	fb07 6313 	mls	r3, r7, r3, r6
 80190a4:	b29d      	uxth	r5, r3
 80190a6:	6863      	ldr	r3, [r4, #4]
 80190a8:	6824      	ldr	r4, [r4, #0]
 80190aa:	fbb3 f3f7 	udiv	r3, r3, r7
 80190ae:	fb05 f303 	mul.w	r3, r5, r3
 80190b2:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 80190b6:	50e2      	str	r2, [r4, r3]
 80190b8:	2300      	movs	r3, #0
 80190ba:	f8cd 8000 	str.w	r8, [sp]
 80190be:	f7f7 fd37 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 80190c2:	2001      	movs	r0, #1
 80190c4:	e7da      	b.n	801907c <uxr_prepare_reliable_buffer_to_write+0x218>
 80190c6:	b293      	uxth	r3, r2
 80190c8:	461a      	mov	r2, r3
 80190ca:	e737      	b.n	8018f3c <uxr_prepare_reliable_buffer_to_write+0xd8>
 80190cc:	4630      	mov	r0, r6
 80190ce:	2101      	movs	r1, #1
 80190d0:	9207      	str	r2, [sp, #28]
 80190d2:	f000 f937 	bl	8019344 <uxr_seq_num_add>
 80190d6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80190da:	fbb0 f1fc 	udiv	r1, r0, ip
 80190de:	fb0c 0111 	mls	r1, ip, r1, r0
 80190e2:	4606      	mov	r6, r0
 80190e4:	b288      	uxth	r0, r1
 80190e6:	6863      	ldr	r3, [r4, #4]
 80190e8:	fbb3 f1fc 	udiv	r1, r3, ip
 80190ec:	6823      	ldr	r3, [r4, #0]
 80190ee:	9a07      	ldr	r2, [sp, #28]
 80190f0:	fb00 f101 	mul.w	r1, r0, r1
 80190f4:	3104      	adds	r1, #4
 80190f6:	440b      	add	r3, r1
 80190f8:	9303      	str	r3, [sp, #12]
 80190fa:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80190fe:	e70a      	b.n	8018f16 <uxr_prepare_reliable_buffer_to_write+0xb2>
 8019100:	8921      	ldrh	r1, [r4, #8]
 8019102:	fbb5 f3f1 	udiv	r3, r5, r1
 8019106:	fb01 5313 	mls	r3, r1, r3, r5
 801910a:	b29a      	uxth	r2, r3
 801910c:	6863      	ldr	r3, [r4, #4]
 801910e:	fbb3 f3f1 	udiv	r3, r3, r1
 8019112:	6821      	ldr	r1, [r4, #0]
 8019114:	9804      	ldr	r0, [sp, #16]
 8019116:	fb02 f303 	mul.w	r3, r2, r3
 801911a:	3304      	adds	r3, #4
 801911c:	7b22      	ldrb	r2, [r4, #12]
 801911e:	4419      	add	r1, r3
 8019120:	445a      	add	r2, fp
 8019122:	f841 2c04 	str.w	r2, [r1, #-4]
 8019126:	7b23      	ldrb	r3, [r4, #12]
 8019128:	9300      	str	r3, [sp, #0]
 801912a:	2300      	movs	r3, #0
 801912c:	f7f7 fd00 	bl	8010b30 <ucdr_init_buffer_origin_offset>
 8019130:	81e5      	strh	r5, [r4, #14]
 8019132:	2001      	movs	r0, #1
 8019134:	e7a2      	b.n	801907c <uxr_prepare_reliable_buffer_to_write+0x218>
 8019136:	4682      	mov	sl, r0
 8019138:	e6ca      	b.n	8018ed0 <uxr_prepare_reliable_buffer_to_write+0x6c>
 801913a:	bf00      	nop
 801913c:	08018d45 	.word	0x08018d45

08019140 <uxr_prepare_next_reliable_buffer_to_send>:
 8019140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019142:	4604      	mov	r4, r0
 8019144:	460f      	mov	r7, r1
 8019146:	8a00      	ldrh	r0, [r0, #16]
 8019148:	2101      	movs	r1, #1
 801914a:	4616      	mov	r6, r2
 801914c:	461d      	mov	r5, r3
 801914e:	f000 f8f9 	bl	8019344 <uxr_seq_num_add>
 8019152:	8028      	strh	r0, [r5, #0]
 8019154:	8922      	ldrh	r2, [r4, #8]
 8019156:	fbb0 f3f2 	udiv	r3, r0, r2
 801915a:	fb02 0c13 	mls	ip, r2, r3, r0
 801915e:	fa1f fc8c 	uxth.w	ip, ip
 8019162:	6863      	ldr	r3, [r4, #4]
 8019164:	fbb3 f3f2 	udiv	r3, r3, r2
 8019168:	fb0c fc03 	mul.w	ip, ip, r3
 801916c:	6823      	ldr	r3, [r4, #0]
 801916e:	89e1      	ldrh	r1, [r4, #14]
 8019170:	f10c 0c04 	add.w	ip, ip, #4
 8019174:	4463      	add	r3, ip
 8019176:	603b      	str	r3, [r7, #0]
 8019178:	6823      	ldr	r3, [r4, #0]
 801917a:	449c      	add	ip, r3
 801917c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8019180:	6033      	str	r3, [r6, #0]
 8019182:	f000 f8e7 	bl	8019354 <uxr_seq_num_cmp>
 8019186:	2800      	cmp	r0, #0
 8019188:	dd01      	ble.n	801918e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801918a:	2000      	movs	r0, #0
 801918c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801918e:	7b23      	ldrb	r3, [r4, #12]
 8019190:	6832      	ldr	r2, [r6, #0]
 8019192:	429a      	cmp	r2, r3
 8019194:	d9f9      	bls.n	801918a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8019196:	8a61      	ldrh	r1, [r4, #18]
 8019198:	8a20      	ldrh	r0, [r4, #16]
 801919a:	f000 f8d7 	bl	801934c <uxr_seq_num_sub>
 801919e:	8923      	ldrh	r3, [r4, #8]
 80191a0:	4283      	cmp	r3, r0
 80191a2:	d0f2      	beq.n	801918a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80191a4:	8828      	ldrh	r0, [r5, #0]
 80191a6:	89e3      	ldrh	r3, [r4, #14]
 80191a8:	8220      	strh	r0, [r4, #16]
 80191aa:	4298      	cmp	r0, r3
 80191ac:	d001      	beq.n	80191b2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80191ae:	2001      	movs	r0, #1
 80191b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191b2:	2101      	movs	r1, #1
 80191b4:	f000 f8c6 	bl	8019344 <uxr_seq_num_add>
 80191b8:	81e0      	strh	r0, [r4, #14]
 80191ba:	2001      	movs	r0, #1
 80191bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191be:	bf00      	nop

080191c0 <uxr_update_output_stream_heartbeat_timestamp>:
 80191c0:	b570      	push	{r4, r5, r6, lr}
 80191c2:	8a01      	ldrh	r1, [r0, #16]
 80191c4:	4604      	mov	r4, r0
 80191c6:	8a40      	ldrh	r0, [r0, #18]
 80191c8:	4615      	mov	r5, r2
 80191ca:	461e      	mov	r6, r3
 80191cc:	f000 f8c2 	bl	8019354 <uxr_seq_num_cmp>
 80191d0:	2800      	cmp	r0, #0
 80191d2:	db07      	blt.n	80191e4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 80191d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80191d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80191dc:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80191e0:	2000      	movs	r0, #0
 80191e2:	bd70      	pop	{r4, r5, r6, pc}
 80191e4:	f894 0020 	ldrb.w	r0, [r4, #32]
 80191e8:	b940      	cbnz	r0, 80191fc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 80191ea:	2301      	movs	r3, #1
 80191ec:	f884 3020 	strb.w	r3, [r4, #32]
 80191f0:	3564      	adds	r5, #100	@ 0x64
 80191f2:	f146 0600 	adc.w	r6, r6, #0
 80191f6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80191fa:	bd70      	pop	{r4, r5, r6, pc}
 80191fc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8019200:	4295      	cmp	r5, r2
 8019202:	eb76 0303 	sbcs.w	r3, r6, r3
 8019206:	bfa5      	ittet	ge
 8019208:	3001      	addge	r0, #1
 801920a:	f884 0020 	strbge.w	r0, [r4, #32]
 801920e:	2000      	movlt	r0, #0
 8019210:	2001      	movge	r0, #1
 8019212:	e7ed      	b.n	80191f0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08019214 <uxr_begin_output_nack_buffer_it>:
 8019214:	8a40      	ldrh	r0, [r0, #18]
 8019216:	4770      	bx	lr

08019218 <uxr_next_reliable_nack_buffer_to_send>:
 8019218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801921c:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8019220:	b082      	sub	sp, #8
 8019222:	f1b8 0f00 	cmp.w	r8, #0
 8019226:	d011      	beq.n	801924c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8019228:	4604      	mov	r4, r0
 801922a:	8818      	ldrh	r0, [r3, #0]
 801922c:	460e      	mov	r6, r1
 801922e:	4617      	mov	r7, r2
 8019230:	461d      	mov	r5, r3
 8019232:	2101      	movs	r1, #1
 8019234:	f000 f886 	bl	8019344 <uxr_seq_num_add>
 8019238:	8028      	strh	r0, [r5, #0]
 801923a:	8a21      	ldrh	r1, [r4, #16]
 801923c:	f000 f88a 	bl	8019354 <uxr_seq_num_cmp>
 8019240:	2800      	cmp	r0, #0
 8019242:	dd07      	ble.n	8019254 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8019244:	f04f 0800 	mov.w	r8, #0
 8019248:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 801924c:	4640      	mov	r0, r8
 801924e:	b002      	add	sp, #8
 8019250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019254:	8921      	ldrh	r1, [r4, #8]
 8019256:	8828      	ldrh	r0, [r5, #0]
 8019258:	6823      	ldr	r3, [r4, #0]
 801925a:	fbb0 f2f1 	udiv	r2, r0, r1
 801925e:	fb01 0c12 	mls	ip, r1, r2, r0
 8019262:	fa1f f28c 	uxth.w	r2, ip
 8019266:	9301      	str	r3, [sp, #4]
 8019268:	6863      	ldr	r3, [r4, #4]
 801926a:	fbb3 fcf1 	udiv	ip, r3, r1
 801926e:	9b01      	ldr	r3, [sp, #4]
 8019270:	fb02 fc0c 	mul.w	ip, r2, ip
 8019274:	f10c 0c04 	add.w	ip, ip, #4
 8019278:	4463      	add	r3, ip
 801927a:	6033      	str	r3, [r6, #0]
 801927c:	6823      	ldr	r3, [r4, #0]
 801927e:	4463      	add	r3, ip
 8019280:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8019284:	603b      	str	r3, [r7, #0]
 8019286:	7b22      	ldrb	r2, [r4, #12]
 8019288:	429a      	cmp	r2, r3
 801928a:	d0d2      	beq.n	8019232 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 801928c:	4640      	mov	r0, r8
 801928e:	b002      	add	sp, #8
 8019290:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019294 <uxr_process_acknack>:
 8019294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019296:	4604      	mov	r4, r0
 8019298:	460e      	mov	r6, r1
 801929a:	4610      	mov	r0, r2
 801929c:	2101      	movs	r1, #1
 801929e:	f000 f855 	bl	801934c <uxr_seq_num_sub>
 80192a2:	8a61      	ldrh	r1, [r4, #18]
 80192a4:	f000 f852 	bl	801934c <uxr_seq_num_sub>
 80192a8:	b1c0      	cbz	r0, 80192dc <uxr_process_acknack+0x48>
 80192aa:	4605      	mov	r5, r0
 80192ac:	2700      	movs	r7, #0
 80192ae:	2101      	movs	r1, #1
 80192b0:	8a60      	ldrh	r0, [r4, #18]
 80192b2:	f000 f847 	bl	8019344 <uxr_seq_num_add>
 80192b6:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80192ba:	fbb0 f1fc 	udiv	r1, r0, ip
 80192be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80192c2:	fb0c 0111 	mls	r1, ip, r1, r0
 80192c6:	b289      	uxth	r1, r1
 80192c8:	3701      	adds	r7, #1
 80192ca:	fbb3 f3fc 	udiv	r3, r3, ip
 80192ce:	fb01 f303 	mul.w	r3, r1, r3
 80192d2:	42bd      	cmp	r5, r7
 80192d4:	7b21      	ldrb	r1, [r4, #12]
 80192d6:	8260      	strh	r0, [r4, #18]
 80192d8:	50d1      	str	r1, [r2, r3]
 80192da:	d1e8      	bne.n	80192ae <uxr_process_acknack+0x1a>
 80192dc:	3e00      	subs	r6, #0
 80192de:	f04f 0300 	mov.w	r3, #0
 80192e2:	bf18      	it	ne
 80192e4:	2601      	movne	r6, #1
 80192e6:	f884 3020 	strb.w	r3, [r4, #32]
 80192ea:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 80192ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080192f0 <uxr_is_output_up_to_date>:
 80192f0:	8a01      	ldrh	r1, [r0, #16]
 80192f2:	8a40      	ldrh	r0, [r0, #18]
 80192f4:	b508      	push	{r3, lr}
 80192f6:	f000 f82d 	bl	8019354 <uxr_seq_num_cmp>
 80192fa:	fab0 f080 	clz	r0, r0
 80192fe:	0940      	lsrs	r0, r0, #5
 8019300:	bd08      	pop	{r3, pc}
 8019302:	bf00      	nop

08019304 <get_available_free_slots>:
 8019304:	8902      	ldrh	r2, [r0, #8]
 8019306:	b1da      	cbz	r2, 8019340 <get_available_free_slots+0x3c>
 8019308:	b530      	push	{r4, r5, lr}
 801930a:	2100      	movs	r1, #0
 801930c:	6843      	ldr	r3, [r0, #4]
 801930e:	6805      	ldr	r5, [r0, #0]
 8019310:	7b04      	ldrb	r4, [r0, #12]
 8019312:	fbb3 fef2 	udiv	lr, r3, r2
 8019316:	4608      	mov	r0, r1
 8019318:	460b      	mov	r3, r1
 801931a:	fbb3 fcf2 	udiv	ip, r3, r2
 801931e:	fb02 331c 	mls	r3, r2, ip, r3
 8019322:	b29b      	uxth	r3, r3
 8019324:	fb0e f303 	mul.w	r3, lr, r3
 8019328:	3101      	adds	r1, #1
 801932a:	f855 c003 	ldr.w	ip, [r5, r3]
 801932e:	4564      	cmp	r4, ip
 8019330:	bf08      	it	eq
 8019332:	3001      	addeq	r0, #1
 8019334:	b28b      	uxth	r3, r1
 8019336:	bf08      	it	eq
 8019338:	b280      	uxtheq	r0, r0
 801933a:	4293      	cmp	r3, r2
 801933c:	d3ed      	bcc.n	801931a <get_available_free_slots+0x16>
 801933e:	bd30      	pop	{r4, r5, pc}
 8019340:	4610      	mov	r0, r2
 8019342:	4770      	bx	lr

08019344 <uxr_seq_num_add>:
 8019344:	4408      	add	r0, r1
 8019346:	b280      	uxth	r0, r0
 8019348:	4770      	bx	lr
 801934a:	bf00      	nop

0801934c <uxr_seq_num_sub>:
 801934c:	1a40      	subs	r0, r0, r1
 801934e:	b280      	uxth	r0, r0
 8019350:	4770      	bx	lr
 8019352:	bf00      	nop

08019354 <uxr_seq_num_cmp>:
 8019354:	4288      	cmp	r0, r1
 8019356:	d011      	beq.n	801937c <uxr_seq_num_cmp+0x28>
 8019358:	d309      	bcc.n	801936e <uxr_seq_num_cmp+0x1a>
 801935a:	4288      	cmp	r0, r1
 801935c:	d910      	bls.n	8019380 <uxr_seq_num_cmp+0x2c>
 801935e:	1a40      	subs	r0, r0, r1
 8019360:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8019364:	bfd4      	ite	le
 8019366:	2001      	movle	r0, #1
 8019368:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801936c:	4770      	bx	lr
 801936e:	1a0b      	subs	r3, r1, r0
 8019370:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019374:	daf1      	bge.n	801935a <uxr_seq_num_cmp+0x6>
 8019376:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801937a:	4770      	bx	lr
 801937c:	2000      	movs	r0, #0
 801937e:	4770      	bx	lr
 8019380:	2001      	movs	r0, #1
 8019382:	4770      	bx	lr

08019384 <rcl_get_default_domain_id>:
 8019384:	b530      	push	{r4, r5, lr}
 8019386:	b083      	sub	sp, #12
 8019388:	2300      	movs	r3, #0
 801938a:	9300      	str	r3, [sp, #0]
 801938c:	b1d0      	cbz	r0, 80193c4 <rcl_get_default_domain_id+0x40>
 801938e:	4604      	mov	r4, r0
 8019390:	4669      	mov	r1, sp
 8019392:	4815      	ldr	r0, [pc, #84]	@ (80193e8 <rcl_get_default_domain_id+0x64>)
 8019394:	f7fd fd54 	bl	8016e40 <rcutils_get_env>
 8019398:	4602      	mov	r2, r0
 801939a:	b110      	cbz	r0, 80193a2 <rcl_get_default_domain_id+0x1e>
 801939c:	2001      	movs	r0, #1
 801939e:	b003      	add	sp, #12
 80193a0:	bd30      	pop	{r4, r5, pc}
 80193a2:	9b00      	ldr	r3, [sp, #0]
 80193a4:	b18b      	cbz	r3, 80193ca <rcl_get_default_domain_id+0x46>
 80193a6:	7818      	ldrb	r0, [r3, #0]
 80193a8:	2800      	cmp	r0, #0
 80193aa:	d0f8      	beq.n	801939e <rcl_get_default_domain_id+0x1a>
 80193ac:	a901      	add	r1, sp, #4
 80193ae:	4618      	mov	r0, r3
 80193b0:	9201      	str	r2, [sp, #4]
 80193b2:	f000 fe39 	bl	801a028 <strtoul>
 80193b6:	4605      	mov	r5, r0
 80193b8:	b150      	cbz	r0, 80193d0 <rcl_get_default_domain_id+0x4c>
 80193ba:	1c43      	adds	r3, r0, #1
 80193bc:	d00d      	beq.n	80193da <rcl_get_default_domain_id+0x56>
 80193be:	6025      	str	r5, [r4, #0]
 80193c0:	2000      	movs	r0, #0
 80193c2:	e7ec      	b.n	801939e <rcl_get_default_domain_id+0x1a>
 80193c4:	200b      	movs	r0, #11
 80193c6:	b003      	add	sp, #12
 80193c8:	bd30      	pop	{r4, r5, pc}
 80193ca:	4618      	mov	r0, r3
 80193cc:	b003      	add	sp, #12
 80193ce:	bd30      	pop	{r4, r5, pc}
 80193d0:	9b01      	ldr	r3, [sp, #4]
 80193d2:	781b      	ldrb	r3, [r3, #0]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d0f2      	beq.n	80193be <rcl_get_default_domain_id+0x3a>
 80193d8:	e7e0      	b.n	801939c <rcl_get_default_domain_id+0x18>
 80193da:	f001 f965 	bl	801a6a8 <__errno>
 80193de:	6803      	ldr	r3, [r0, #0]
 80193e0:	2b22      	cmp	r3, #34	@ 0x22
 80193e2:	d1ec      	bne.n	80193be <rcl_get_default_domain_id+0x3a>
 80193e4:	e7da      	b.n	801939c <rcl_get_default_domain_id+0x18>
 80193e6:	bf00      	nop
 80193e8:	0801bb24 	.word	0x0801bb24

080193ec <rcl_expand_topic_name>:
 80193ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193f0:	b08b      	sub	sp, #44	@ 0x2c
 80193f2:	9306      	str	r3, [sp, #24]
 80193f4:	2800      	cmp	r0, #0
 80193f6:	f000 80ad 	beq.w	8019554 <rcl_expand_topic_name+0x168>
 80193fa:	460e      	mov	r6, r1
 80193fc:	2900      	cmp	r1, #0
 80193fe:	f000 80a9 	beq.w	8019554 <rcl_expand_topic_name+0x168>
 8019402:	4617      	mov	r7, r2
 8019404:	2a00      	cmp	r2, #0
 8019406:	f000 80a5 	beq.w	8019554 <rcl_expand_topic_name+0x168>
 801940a:	2b00      	cmp	r3, #0
 801940c:	f000 80a2 	beq.w	8019554 <rcl_expand_topic_name+0x168>
 8019410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019412:	2b00      	cmp	r3, #0
 8019414:	f000 809e 	beq.w	8019554 <rcl_expand_topic_name+0x168>
 8019418:	2200      	movs	r2, #0
 801941a:	a909      	add	r1, sp, #36	@ 0x24
 801941c:	4680      	mov	r8, r0
 801941e:	f000 fa57 	bl	80198d0 <rcl_validate_topic_name>
 8019422:	4604      	mov	r4, r0
 8019424:	2800      	cmp	r0, #0
 8019426:	f040 8096 	bne.w	8019556 <rcl_expand_topic_name+0x16a>
 801942a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801942c:	2b00      	cmp	r3, #0
 801942e:	f040 809a 	bne.w	8019566 <rcl_expand_topic_name+0x17a>
 8019432:	4602      	mov	r2, r0
 8019434:	a909      	add	r1, sp, #36	@ 0x24
 8019436:	4630      	mov	r0, r6
 8019438:	f7fe f91c 	bl	8017674 <rmw_validate_node_name>
 801943c:	2800      	cmp	r0, #0
 801943e:	f040 808e 	bne.w	801955e <rcl_expand_topic_name+0x172>
 8019442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019444:	2a00      	cmp	r2, #0
 8019446:	f040 8093 	bne.w	8019570 <rcl_expand_topic_name+0x184>
 801944a:	a909      	add	r1, sp, #36	@ 0x24
 801944c:	4638      	mov	r0, r7
 801944e:	f7fe f8f3 	bl	8017638 <rmw_validate_namespace>
 8019452:	2800      	cmp	r0, #0
 8019454:	f040 8083 	bne.w	801955e <rcl_expand_topic_name+0x172>
 8019458:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801945a:	2c00      	cmp	r4, #0
 801945c:	f040 80ed 	bne.w	801963a <rcl_expand_topic_name+0x24e>
 8019460:	217b      	movs	r1, #123	@ 0x7b
 8019462:	4640      	mov	r0, r8
 8019464:	f001 f894 	bl	801a590 <strchr>
 8019468:	f898 3000 	ldrb.w	r3, [r8]
 801946c:	2b2f      	cmp	r3, #47	@ 0x2f
 801946e:	4605      	mov	r5, r0
 8019470:	f000 809e 	beq.w	80195b0 <rcl_expand_topic_name+0x1c4>
 8019474:	2b7e      	cmp	r3, #126	@ 0x7e
 8019476:	f040 80a2 	bne.w	80195be <rcl_expand_topic_name+0x1d2>
 801947a:	4638      	mov	r0, r7
 801947c:	f7e6 feda 	bl	8000234 <strlen>
 8019480:	4a82      	ldr	r2, [pc, #520]	@ (801968c <rcl_expand_topic_name+0x2a0>)
 8019482:	4b83      	ldr	r3, [pc, #524]	@ (8019690 <rcl_expand_topic_name+0x2a4>)
 8019484:	2801      	cmp	r0, #1
 8019486:	bf18      	it	ne
 8019488:	4613      	movne	r3, r2
 801948a:	9302      	str	r3, [sp, #8]
 801948c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801948e:	9300      	str	r3, [sp, #0]
 8019490:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8019494:	f108 0301 	add.w	r3, r8, #1
 8019498:	9305      	str	r3, [sp, #20]
 801949a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801949e:	9301      	str	r3, [sp, #4]
 80194a0:	ab14      	add	r3, sp, #80	@ 0x50
 80194a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80194a4:	f7fd fce4 	bl	8016e70 <rcutils_format_string_limit>
 80194a8:	4682      	mov	sl, r0
 80194aa:	2800      	cmp	r0, #0
 80194ac:	f000 80c7 	beq.w	801963e <rcl_expand_topic_name+0x252>
 80194b0:	2d00      	cmp	r5, #0
 80194b2:	f000 80a2 	beq.w	80195fa <rcl_expand_topic_name+0x20e>
 80194b6:	217b      	movs	r1, #123	@ 0x7b
 80194b8:	f001 f86a 	bl	801a590 <strchr>
 80194bc:	46d1      	mov	r9, sl
 80194be:	4605      	mov	r5, r0
 80194c0:	9407      	str	r4, [sp, #28]
 80194c2:	46d3      	mov	fp, sl
 80194c4:	464c      	mov	r4, r9
 80194c6:	2d00      	cmp	r5, #0
 80194c8:	f000 80be 	beq.w	8019648 <rcl_expand_topic_name+0x25c>
 80194cc:	217d      	movs	r1, #125	@ 0x7d
 80194ce:	4620      	mov	r0, r4
 80194d0:	f001 f85e 	bl	801a590 <strchr>
 80194d4:	eba0 0905 	sub.w	r9, r0, r5
 80194d8:	f109 0a01 	add.w	sl, r9, #1
 80194dc:	486d      	ldr	r0, [pc, #436]	@ (8019694 <rcl_expand_topic_name+0x2a8>)
 80194de:	4652      	mov	r2, sl
 80194e0:	4629      	mov	r1, r5
 80194e2:	f001 f862 	bl	801a5aa <strncmp>
 80194e6:	2800      	cmp	r0, #0
 80194e8:	d067      	beq.n	80195ba <rcl_expand_topic_name+0x1ce>
 80194ea:	486b      	ldr	r0, [pc, #428]	@ (8019698 <rcl_expand_topic_name+0x2ac>)
 80194ec:	4652      	mov	r2, sl
 80194ee:	4629      	mov	r1, r5
 80194f0:	f001 f85b 	bl	801a5aa <strncmp>
 80194f4:	b130      	cbz	r0, 8019504 <rcl_expand_topic_name+0x118>
 80194f6:	4869      	ldr	r0, [pc, #420]	@ (801969c <rcl_expand_topic_name+0x2b0>)
 80194f8:	4652      	mov	r2, sl
 80194fa:	4629      	mov	r1, r5
 80194fc:	f001 f855 	bl	801a5aa <strncmp>
 8019500:	2800      	cmp	r0, #0
 8019502:	d137      	bne.n	8019574 <rcl_expand_topic_name+0x188>
 8019504:	46b9      	mov	r9, r7
 8019506:	ab16      	add	r3, sp, #88	@ 0x58
 8019508:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801950c:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019510:	ab14      	add	r3, sp, #80	@ 0x50
 8019512:	4628      	mov	r0, r5
 8019514:	cb0c      	ldmia	r3, {r2, r3}
 8019516:	4651      	mov	r1, sl
 8019518:	f7fd fde6 	bl	80170e8 <rcutils_strndup>
 801951c:	4605      	mov	r5, r0
 801951e:	2800      	cmp	r0, #0
 8019520:	f000 809c 	beq.w	801965c <rcl_expand_topic_name+0x270>
 8019524:	464a      	mov	r2, r9
 8019526:	4620      	mov	r0, r4
 8019528:	ab14      	add	r3, sp, #80	@ 0x50
 801952a:	4629      	mov	r1, r5
 801952c:	f7fd fcda 	bl	8016ee4 <rcutils_repl_str>
 8019530:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019532:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019534:	4604      	mov	r4, r0
 8019536:	4628      	mov	r0, r5
 8019538:	4798      	blx	r3
 801953a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801953c:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801953e:	4658      	mov	r0, fp
 8019540:	4798      	blx	r3
 8019542:	2c00      	cmp	r4, #0
 8019544:	d07b      	beq.n	801963e <rcl_expand_topic_name+0x252>
 8019546:	217b      	movs	r1, #123	@ 0x7b
 8019548:	4620      	mov	r0, r4
 801954a:	f001 f821 	bl	801a590 <strchr>
 801954e:	46a3      	mov	fp, r4
 8019550:	4605      	mov	r5, r0
 8019552:	e7b8      	b.n	80194c6 <rcl_expand_topic_name+0xda>
 8019554:	240b      	movs	r4, #11
 8019556:	4620      	mov	r0, r4
 8019558:	b00b      	add	sp, #44	@ 0x2c
 801955a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801955e:	f7fb f819 	bl	8014594 <rcl_convert_rmw_ret_to_rcl_ret>
 8019562:	4604      	mov	r4, r0
 8019564:	e7f7      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 8019566:	2467      	movs	r4, #103	@ 0x67
 8019568:	4620      	mov	r0, r4
 801956a:	b00b      	add	sp, #44	@ 0x2c
 801956c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019570:	24c9      	movs	r4, #201	@ 0xc9
 8019572:	e7f0      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 8019574:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8019578:	9806      	ldr	r0, [sp, #24]
 801957a:	1c69      	adds	r1, r5, #1
 801957c:	f7fd fece 	bl	801731c <rcutils_string_map_getn>
 8019580:	4681      	mov	r9, r0
 8019582:	2800      	cmp	r0, #0
 8019584:	d1bf      	bne.n	8019506 <rcl_expand_topic_name+0x11a>
 8019586:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019588:	aa16      	add	r2, sp, #88	@ 0x58
 801958a:	6018      	str	r0, [r3, #0]
 801958c:	ca07      	ldmia	r2, {r0, r1, r2}
 801958e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8019592:	ab14      	add	r3, sp, #80	@ 0x50
 8019594:	cb0c      	ldmia	r3, {r2, r3}
 8019596:	4651      	mov	r1, sl
 8019598:	4628      	mov	r0, r5
 801959a:	f7fd fda5 	bl	80170e8 <rcutils_strndup>
 801959e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80195a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80195a2:	4798      	blx	r3
 80195a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80195a6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80195a8:	4658      	mov	r0, fp
 80195aa:	2469      	movs	r4, #105	@ 0x69
 80195ac:	4798      	blx	r3
 80195ae:	e7d2      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 80195b0:	2800      	cmp	r0, #0
 80195b2:	d05b      	beq.n	801966c <rcl_expand_topic_name+0x280>
 80195b4:	46c1      	mov	r9, r8
 80195b6:	46a2      	mov	sl, r4
 80195b8:	e782      	b.n	80194c0 <rcl_expand_topic_name+0xd4>
 80195ba:	46b1      	mov	r9, r6
 80195bc:	e7a3      	b.n	8019506 <rcl_expand_topic_name+0x11a>
 80195be:	2800      	cmp	r0, #0
 80195c0:	d1f8      	bne.n	80195b4 <rcl_expand_topic_name+0x1c8>
 80195c2:	4638      	mov	r0, r7
 80195c4:	f7e6 fe36 	bl	8000234 <strlen>
 80195c8:	4a35      	ldr	r2, [pc, #212]	@ (80196a0 <rcl_expand_topic_name+0x2b4>)
 80195ca:	4b36      	ldr	r3, [pc, #216]	@ (80196a4 <rcl_expand_topic_name+0x2b8>)
 80195cc:	f8cd 8010 	str.w	r8, [sp, #16]
 80195d0:	2801      	cmp	r0, #1
 80195d2:	bf18      	it	ne
 80195d4:	4613      	movne	r3, r2
 80195d6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80195da:	e9cd 1301 	strd	r1, r3, [sp, #4]
 80195de:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80195e0:	9703      	str	r7, [sp, #12]
 80195e2:	9200      	str	r2, [sp, #0]
 80195e4:	ab14      	add	r3, sp, #80	@ 0x50
 80195e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80195e8:	f7fd fc42 	bl	8016e70 <rcutils_format_string_limit>
 80195ec:	4682      	mov	sl, r0
 80195ee:	4653      	mov	r3, sl
 80195f0:	b32b      	cbz	r3, 801963e <rcl_expand_topic_name+0x252>
 80195f2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80195f4:	f8c3 a000 	str.w	sl, [r3]
 80195f8:	e7ad      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 80195fa:	f89a 3000 	ldrb.w	r3, [sl]
 80195fe:	2b2f      	cmp	r3, #47	@ 0x2f
 8019600:	d0f7      	beq.n	80195f2 <rcl_expand_topic_name+0x206>
 8019602:	4638      	mov	r0, r7
 8019604:	f7e6 fe16 	bl	8000234 <strlen>
 8019608:	4a25      	ldr	r2, [pc, #148]	@ (80196a0 <rcl_expand_topic_name+0x2b4>)
 801960a:	4b26      	ldr	r3, [pc, #152]	@ (80196a4 <rcl_expand_topic_name+0x2b8>)
 801960c:	f8cd a010 	str.w	sl, [sp, #16]
 8019610:	2801      	cmp	r0, #1
 8019612:	bf18      	it	ne
 8019614:	4613      	movne	r3, r2
 8019616:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801961a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801961e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019620:	9703      	str	r7, [sp, #12]
 8019622:	9200      	str	r2, [sp, #0]
 8019624:	ab14      	add	r3, sp, #80	@ 0x50
 8019626:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019628:	f7fd fc22 	bl	8016e70 <rcutils_format_string_limit>
 801962c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801962e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019630:	4605      	mov	r5, r0
 8019632:	4650      	mov	r0, sl
 8019634:	4798      	blx	r3
 8019636:	46aa      	mov	sl, r5
 8019638:	e7d9      	b.n	80195ee <rcl_expand_topic_name+0x202>
 801963a:	24ca      	movs	r4, #202	@ 0xca
 801963c:	e78b      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 801963e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8019640:	2300      	movs	r3, #0
 8019642:	6013      	str	r3, [r2, #0]
 8019644:	240a      	movs	r4, #10
 8019646:	e786      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 8019648:	465b      	mov	r3, fp
 801964a:	9c07      	ldr	r4, [sp, #28]
 801964c:	46da      	mov	sl, fp
 801964e:	2b00      	cmp	r3, #0
 8019650:	d1d3      	bne.n	80195fa <rcl_expand_topic_name+0x20e>
 8019652:	f898 3000 	ldrb.w	r3, [r8]
 8019656:	2b2f      	cmp	r3, #47	@ 0x2f
 8019658:	d0cb      	beq.n	80195f2 <rcl_expand_topic_name+0x206>
 801965a:	e7b2      	b.n	80195c2 <rcl_expand_topic_name+0x1d6>
 801965c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8019660:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8019662:	6015      	str	r5, [r2, #0]
 8019664:	4658      	mov	r0, fp
 8019666:	4798      	blx	r3
 8019668:	240a      	movs	r4, #10
 801966a:	e774      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 801966c:	ab17      	add	r3, sp, #92	@ 0x5c
 801966e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8019672:	e88d 0003 	stmia.w	sp, {r0, r1}
 8019676:	ab14      	add	r3, sp, #80	@ 0x50
 8019678:	cb0e      	ldmia	r3, {r1, r2, r3}
 801967a:	4640      	mov	r0, r8
 801967c:	f7fd fd12 	bl	80170a4 <rcutils_strdup>
 8019680:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019682:	2800      	cmp	r0, #0
 8019684:	6018      	str	r0, [r3, #0]
 8019686:	bf08      	it	eq
 8019688:	240a      	moveq	r4, #10
 801968a:	e764      	b.n	8019556 <rcl_expand_topic_name+0x16a>
 801968c:	0801bb34 	.word	0x0801bb34
 8019690:	0801b620 	.word	0x0801b620
 8019694:	0801bb3c 	.word	0x0801bb3c
 8019698:	0801bb44 	.word	0x0801bb44
 801969c:	0801bb4c 	.word	0x0801bb4c
 80196a0:	0801b5e8 	.word	0x0801b5e8
 80196a4:	0801b630 	.word	0x0801b630

080196a8 <rcl_get_default_topic_name_substitutions>:
 80196a8:	2800      	cmp	r0, #0
 80196aa:	bf0c      	ite	eq
 80196ac:	200b      	moveq	r0, #11
 80196ae:	2000      	movne	r0, #0
 80196b0:	4770      	bx	lr
 80196b2:	bf00      	nop

080196b4 <rcl_get_zero_initialized_guard_condition>:
 80196b4:	4a03      	ldr	r2, [pc, #12]	@ (80196c4 <rcl_get_zero_initialized_guard_condition+0x10>)
 80196b6:	4603      	mov	r3, r0
 80196b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80196bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80196c0:	4618      	mov	r0, r3
 80196c2:	4770      	bx	lr
 80196c4:	0801bff8 	.word	0x0801bff8

080196c8 <rcl_guard_condition_init>:
 80196c8:	b082      	sub	sp, #8
 80196ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80196cc:	b087      	sub	sp, #28
 80196ce:	ac0c      	add	r4, sp, #48	@ 0x30
 80196d0:	e884 000c 	stmia.w	r4, {r2, r3}
 80196d4:	46a6      	mov	lr, r4
 80196d6:	460d      	mov	r5, r1
 80196d8:	4604      	mov	r4, r0
 80196da:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196de:	f10d 0c04 	add.w	ip, sp, #4
 80196e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196e6:	f8de 3000 	ldr.w	r3, [lr]
 80196ea:	f8cc 3000 	str.w	r3, [ip]
 80196ee:	a801      	add	r0, sp, #4
 80196f0:	f7f4 fc80 	bl	800dff4 <rcutils_allocator_is_valid>
 80196f4:	b338      	cbz	r0, 8019746 <rcl_guard_condition_init+0x7e>
 80196f6:	b334      	cbz	r4, 8019746 <rcl_guard_condition_init+0x7e>
 80196f8:	6866      	ldr	r6, [r4, #4]
 80196fa:	b9ee      	cbnz	r6, 8019738 <rcl_guard_condition_init+0x70>
 80196fc:	b31d      	cbz	r5, 8019746 <rcl_guard_condition_init+0x7e>
 80196fe:	4628      	mov	r0, r5
 8019700:	f7fa ff66 	bl	80145d0 <rcl_context_is_valid>
 8019704:	b308      	cbz	r0, 801974a <rcl_guard_condition_init+0x82>
 8019706:	9b01      	ldr	r3, [sp, #4]
 8019708:	9905      	ldr	r1, [sp, #20]
 801970a:	201c      	movs	r0, #28
 801970c:	4798      	blx	r3
 801970e:	4607      	mov	r7, r0
 8019710:	6060      	str	r0, [r4, #4]
 8019712:	b310      	cbz	r0, 801975a <rcl_guard_condition_init+0x92>
 8019714:	6828      	ldr	r0, [r5, #0]
 8019716:	3028      	adds	r0, #40	@ 0x28
 8019718:	f000 f9ac 	bl	8019a74 <rmw_create_guard_condition>
 801971c:	6038      	str	r0, [r7, #0]
 801971e:	6860      	ldr	r0, [r4, #4]
 8019720:	6805      	ldr	r5, [r0, #0]
 8019722:	b1a5      	cbz	r5, 801974e <rcl_guard_condition_init+0x86>
 8019724:	2301      	movs	r3, #1
 8019726:	ac01      	add	r4, sp, #4
 8019728:	7103      	strb	r3, [r0, #4]
 801972a:	f100 0708 	add.w	r7, r0, #8
 801972e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019730:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8019732:	6823      	ldr	r3, [r4, #0]
 8019734:	603b      	str	r3, [r7, #0]
 8019736:	e000      	b.n	801973a <rcl_guard_condition_init+0x72>
 8019738:	2664      	movs	r6, #100	@ 0x64
 801973a:	4630      	mov	r0, r6
 801973c:	b007      	add	sp, #28
 801973e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8019742:	b002      	add	sp, #8
 8019744:	4770      	bx	lr
 8019746:	260b      	movs	r6, #11
 8019748:	e7f7      	b.n	801973a <rcl_guard_condition_init+0x72>
 801974a:	2665      	movs	r6, #101	@ 0x65
 801974c:	e7f5      	b.n	801973a <rcl_guard_condition_init+0x72>
 801974e:	9b02      	ldr	r3, [sp, #8]
 8019750:	9905      	ldr	r1, [sp, #20]
 8019752:	4798      	blx	r3
 8019754:	2601      	movs	r6, #1
 8019756:	6065      	str	r5, [r4, #4]
 8019758:	e7ef      	b.n	801973a <rcl_guard_condition_init+0x72>
 801975a:	260a      	movs	r6, #10
 801975c:	e7ed      	b.n	801973a <rcl_guard_condition_init+0x72>
 801975e:	bf00      	nop

08019760 <rcl_guard_condition_init_from_rmw>:
 8019760:	b082      	sub	sp, #8
 8019762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019766:	b086      	sub	sp, #24
 8019768:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801976c:	4604      	mov	r4, r0
 801976e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8019772:	460e      	mov	r6, r1
 8019774:	4617      	mov	r7, r2
 8019776:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801977a:	f10d 0e04 	add.w	lr, sp, #4
 801977e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8019782:	f8dc 3000 	ldr.w	r3, [ip]
 8019786:	f8ce 3000 	str.w	r3, [lr]
 801978a:	a801      	add	r0, sp, #4
 801978c:	f7f4 fc32 	bl	800dff4 <rcutils_allocator_is_valid>
 8019790:	b350      	cbz	r0, 80197e8 <rcl_guard_condition_init_from_rmw+0x88>
 8019792:	b34c      	cbz	r4, 80197e8 <rcl_guard_condition_init_from_rmw+0x88>
 8019794:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8019798:	f1b8 0f00 	cmp.w	r8, #0
 801979c:	d11e      	bne.n	80197dc <rcl_guard_condition_init_from_rmw+0x7c>
 801979e:	b31f      	cbz	r7, 80197e8 <rcl_guard_condition_init_from_rmw+0x88>
 80197a0:	4638      	mov	r0, r7
 80197a2:	f7fa ff15 	bl	80145d0 <rcl_context_is_valid>
 80197a6:	b328      	cbz	r0, 80197f4 <rcl_guard_condition_init_from_rmw+0x94>
 80197a8:	9b01      	ldr	r3, [sp, #4]
 80197aa:	9905      	ldr	r1, [sp, #20]
 80197ac:	201c      	movs	r0, #28
 80197ae:	4798      	blx	r3
 80197b0:	4605      	mov	r5, r0
 80197b2:	6060      	str	r0, [r4, #4]
 80197b4:	b358      	cbz	r0, 801980e <rcl_guard_condition_init_from_rmw+0xae>
 80197b6:	b1fe      	cbz	r6, 80197f8 <rcl_guard_condition_init_from_rmw+0x98>
 80197b8:	6006      	str	r6, [r0, #0]
 80197ba:	f880 8004 	strb.w	r8, [r0, #4]
 80197be:	ac01      	add	r4, sp, #4
 80197c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80197c2:	f105 0c08 	add.w	ip, r5, #8
 80197c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80197ca:	6823      	ldr	r3, [r4, #0]
 80197cc:	f8cc 3000 	str.w	r3, [ip]
 80197d0:	2000      	movs	r0, #0
 80197d2:	b006      	add	sp, #24
 80197d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197d8:	b002      	add	sp, #8
 80197da:	4770      	bx	lr
 80197dc:	2064      	movs	r0, #100	@ 0x64
 80197de:	b006      	add	sp, #24
 80197e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197e4:	b002      	add	sp, #8
 80197e6:	4770      	bx	lr
 80197e8:	200b      	movs	r0, #11
 80197ea:	b006      	add	sp, #24
 80197ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80197f0:	b002      	add	sp, #8
 80197f2:	4770      	bx	lr
 80197f4:	2065      	movs	r0, #101	@ 0x65
 80197f6:	e7f2      	b.n	80197de <rcl_guard_condition_init_from_rmw+0x7e>
 80197f8:	6838      	ldr	r0, [r7, #0]
 80197fa:	3028      	adds	r0, #40	@ 0x28
 80197fc:	f000 f93a 	bl	8019a74 <rmw_create_guard_condition>
 8019800:	6028      	str	r0, [r5, #0]
 8019802:	6865      	ldr	r5, [r4, #4]
 8019804:	682e      	ldr	r6, [r5, #0]
 8019806:	b126      	cbz	r6, 8019812 <rcl_guard_condition_init_from_rmw+0xb2>
 8019808:	2301      	movs	r3, #1
 801980a:	712b      	strb	r3, [r5, #4]
 801980c:	e7d7      	b.n	80197be <rcl_guard_condition_init_from_rmw+0x5e>
 801980e:	200a      	movs	r0, #10
 8019810:	e7e5      	b.n	80197de <rcl_guard_condition_init_from_rmw+0x7e>
 8019812:	4628      	mov	r0, r5
 8019814:	9b02      	ldr	r3, [sp, #8]
 8019816:	9905      	ldr	r1, [sp, #20]
 8019818:	4798      	blx	r3
 801981a:	6066      	str	r6, [r4, #4]
 801981c:	2001      	movs	r0, #1
 801981e:	e7de      	b.n	80197de <rcl_guard_condition_init_from_rmw+0x7e>

08019820 <rcl_guard_condition_fini>:
 8019820:	b570      	push	{r4, r5, r6, lr}
 8019822:	b082      	sub	sp, #8
 8019824:	b1f0      	cbz	r0, 8019864 <rcl_guard_condition_fini+0x44>
 8019826:	6843      	ldr	r3, [r0, #4]
 8019828:	4604      	mov	r4, r0
 801982a:	b163      	cbz	r3, 8019846 <rcl_guard_condition_fini+0x26>
 801982c:	6818      	ldr	r0, [r3, #0]
 801982e:	68de      	ldr	r6, [r3, #12]
 8019830:	6999      	ldr	r1, [r3, #24]
 8019832:	b160      	cbz	r0, 801984e <rcl_guard_condition_fini+0x2e>
 8019834:	791d      	ldrb	r5, [r3, #4]
 8019836:	b965      	cbnz	r5, 8019852 <rcl_guard_condition_fini+0x32>
 8019838:	4618      	mov	r0, r3
 801983a:	47b0      	blx	r6
 801983c:	2300      	movs	r3, #0
 801983e:	4628      	mov	r0, r5
 8019840:	6063      	str	r3, [r4, #4]
 8019842:	b002      	add	sp, #8
 8019844:	bd70      	pop	{r4, r5, r6, pc}
 8019846:	461d      	mov	r5, r3
 8019848:	4628      	mov	r0, r5
 801984a:	b002      	add	sp, #8
 801984c:	bd70      	pop	{r4, r5, r6, pc}
 801984e:	4605      	mov	r5, r0
 8019850:	e7f2      	b.n	8019838 <rcl_guard_condition_fini+0x18>
 8019852:	9101      	str	r1, [sp, #4]
 8019854:	f000 f922 	bl	8019a9c <rmw_destroy_guard_condition>
 8019858:	1e05      	subs	r5, r0, #0
 801985a:	6863      	ldr	r3, [r4, #4]
 801985c:	9901      	ldr	r1, [sp, #4]
 801985e:	bf18      	it	ne
 8019860:	2501      	movne	r5, #1
 8019862:	e7e9      	b.n	8019838 <rcl_guard_condition_fini+0x18>
 8019864:	250b      	movs	r5, #11
 8019866:	4628      	mov	r0, r5
 8019868:	b002      	add	sp, #8
 801986a:	bd70      	pop	{r4, r5, r6, pc}

0801986c <rcl_guard_condition_get_default_options>:
 801986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801986e:	b087      	sub	sp, #28
 8019870:	4606      	mov	r6, r0
 8019872:	4668      	mov	r0, sp
 8019874:	f7f4 fbb0 	bl	800dfd8 <rcutils_get_default_allocator>
 8019878:	4b09      	ldr	r3, [pc, #36]	@ (80198a0 <rcl_guard_condition_get_default_options+0x34>)
 801987a:	46ee      	mov	lr, sp
 801987c:	469c      	mov	ip, r3
 801987e:	461d      	mov	r5, r3
 8019880:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019884:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801988a:	4634      	mov	r4, r6
 801988c:	f8de 7000 	ldr.w	r7, [lr]
 8019890:	f8cc 7000 	str.w	r7, [ip]
 8019894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8019896:	4630      	mov	r0, r6
 8019898:	6027      	str	r7, [r4, #0]
 801989a:	b007      	add	sp, #28
 801989c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801989e:	bf00      	nop
 80198a0:	2000b0a0 	.word	0x2000b0a0

080198a4 <rcl_trigger_guard_condition>:
 80198a4:	b148      	cbz	r0, 80198ba <rcl_trigger_guard_condition+0x16>
 80198a6:	b508      	push	{r3, lr}
 80198a8:	6843      	ldr	r3, [r0, #4]
 80198aa:	b143      	cbz	r3, 80198be <rcl_trigger_guard_condition+0x1a>
 80198ac:	6818      	ldr	r0, [r3, #0]
 80198ae:	f000 f909 	bl	8019ac4 <rmw_trigger_guard_condition>
 80198b2:	3800      	subs	r0, #0
 80198b4:	bf18      	it	ne
 80198b6:	2001      	movne	r0, #1
 80198b8:	bd08      	pop	{r3, pc}
 80198ba:	200b      	movs	r0, #11
 80198bc:	4770      	bx	lr
 80198be:	200b      	movs	r0, #11
 80198c0:	bd08      	pop	{r3, pc}
 80198c2:	bf00      	nop

080198c4 <rcl_guard_condition_get_rmw_handle>:
 80198c4:	b110      	cbz	r0, 80198cc <rcl_guard_condition_get_rmw_handle+0x8>
 80198c6:	6840      	ldr	r0, [r0, #4]
 80198c8:	b100      	cbz	r0, 80198cc <rcl_guard_condition_get_rmw_handle+0x8>
 80198ca:	6800      	ldr	r0, [r0, #0]
 80198cc:	4770      	bx	lr
 80198ce:	bf00      	nop

080198d0 <rcl_validate_topic_name>:
 80198d0:	2800      	cmp	r0, #0
 80198d2:	d07a      	beq.n	80199ca <rcl_validate_topic_name+0xfa>
 80198d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198d8:	460e      	mov	r6, r1
 80198da:	2900      	cmp	r1, #0
 80198dc:	d07c      	beq.n	80199d8 <rcl_validate_topic_name+0x108>
 80198de:	4617      	mov	r7, r2
 80198e0:	4605      	mov	r5, r0
 80198e2:	f7e6 fca7 	bl	8000234 <strlen>
 80198e6:	b1b0      	cbz	r0, 8019916 <rcl_validate_topic_name+0x46>
 80198e8:	f895 9000 	ldrb.w	r9, [r5]
 80198ec:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8019a70 <rcl_validate_topic_name+0x1a0>
 80198f0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80198f4:	f013 0304 	ands.w	r3, r3, #4
 80198f8:	d169      	bne.n	80199ce <rcl_validate_topic_name+0xfe>
 80198fa:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80198fe:	f815 2008 	ldrb.w	r2, [r5, r8]
 8019902:	2a2f      	cmp	r2, #47	@ 0x2f
 8019904:	d10e      	bne.n	8019924 <rcl_validate_topic_name+0x54>
 8019906:	2202      	movs	r2, #2
 8019908:	6032      	str	r2, [r6, #0]
 801990a:	b36f      	cbz	r7, 8019968 <rcl_validate_topic_name+0x98>
 801990c:	f8c7 8000 	str.w	r8, [r7]
 8019910:	4618      	mov	r0, r3
 8019912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019916:	2301      	movs	r3, #1
 8019918:	6033      	str	r3, [r6, #0]
 801991a:	b32f      	cbz	r7, 8019968 <rcl_validate_topic_name+0x98>
 801991c:	2000      	movs	r0, #0
 801991e:	6038      	str	r0, [r7, #0]
 8019920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019924:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 8019928:	461c      	mov	r4, r3
 801992a:	4619      	mov	r1, r3
 801992c:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 8019930:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8019934:	f1be 0f09 	cmp.w	lr, #9
 8019938:	d919      	bls.n	801996e <rcl_validate_topic_name+0x9e>
 801993a:	f022 0e20 	bic.w	lr, r2, #32
 801993e:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8019942:	f1be 0f19 	cmp.w	lr, #25
 8019946:	d912      	bls.n	801996e <rcl_validate_topic_name+0x9e>
 8019948:	2a5f      	cmp	r2, #95	@ 0x5f
 801994a:	d019      	beq.n	8019980 <rcl_validate_topic_name+0xb0>
 801994c:	2a2f      	cmp	r2, #47	@ 0x2f
 801994e:	d051      	beq.n	80199f4 <rcl_validate_topic_name+0x124>
 8019950:	2a7e      	cmp	r2, #126	@ 0x7e
 8019952:	d048      	beq.n	80199e6 <rcl_validate_topic_name+0x116>
 8019954:	2a7b      	cmp	r2, #123	@ 0x7b
 8019956:	d054      	beq.n	8019a02 <rcl_validate_topic_name+0x132>
 8019958:	2a7d      	cmp	r2, #125	@ 0x7d
 801995a:	d161      	bne.n	8019a20 <rcl_validate_topic_name+0x150>
 801995c:	2c00      	cmp	r4, #0
 801995e:	d155      	bne.n	8019a0c <rcl_validate_topic_name+0x13c>
 8019960:	2305      	movs	r3, #5
 8019962:	6033      	str	r3, [r6, #0]
 8019964:	b107      	cbz	r7, 8019968 <rcl_validate_topic_name+0x98>
 8019966:	6039      	str	r1, [r7, #0]
 8019968:	2000      	movs	r0, #0
 801996a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801996e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019972:	0752      	lsls	r2, r2, #29
 8019974:	d504      	bpl.n	8019980 <rcl_validate_topic_name+0xb0>
 8019976:	b11c      	cbz	r4, 8019980 <rcl_validate_topic_name+0xb0>
 8019978:	b111      	cbz	r1, 8019980 <rcl_validate_topic_name+0xb0>
 801997a:	1e4a      	subs	r2, r1, #1
 801997c:	429a      	cmp	r2, r3
 801997e:	d02d      	beq.n	80199dc <rcl_validate_topic_name+0x10c>
 8019980:	3101      	adds	r1, #1
 8019982:	4288      	cmp	r0, r1
 8019984:	d1d2      	bne.n	801992c <rcl_validate_topic_name+0x5c>
 8019986:	2c00      	cmp	r4, #0
 8019988:	d145      	bne.n	8019a16 <rcl_validate_topic_name+0x146>
 801998a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801998e:	d04f      	beq.n	8019a30 <rcl_validate_topic_name+0x160>
 8019990:	4620      	mov	r0, r4
 8019992:	2301      	movs	r3, #1
 8019994:	e006      	b.n	80199a4 <rcl_validate_topic_name+0xd4>
 8019996:	428b      	cmp	r3, r1
 8019998:	f105 0501 	add.w	r5, r5, #1
 801999c:	f103 0201 	add.w	r2, r3, #1
 80199a0:	d236      	bcs.n	8019a10 <rcl_validate_topic_name+0x140>
 80199a2:	4613      	mov	r3, r2
 80199a4:	4580      	cmp	r8, r0
 80199a6:	f100 0001 	add.w	r0, r0, #1
 80199aa:	d0f4      	beq.n	8019996 <rcl_validate_topic_name+0xc6>
 80199ac:	782a      	ldrb	r2, [r5, #0]
 80199ae:	2a2f      	cmp	r2, #47	@ 0x2f
 80199b0:	d1f1      	bne.n	8019996 <rcl_validate_topic_name+0xc6>
 80199b2:	786a      	ldrb	r2, [r5, #1]
 80199b4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80199b8:	0754      	lsls	r4, r2, #29
 80199ba:	d5ec      	bpl.n	8019996 <rcl_validate_topic_name+0xc6>
 80199bc:	2204      	movs	r2, #4
 80199be:	6032      	str	r2, [r6, #0]
 80199c0:	2f00      	cmp	r7, #0
 80199c2:	d0d1      	beq.n	8019968 <rcl_validate_topic_name+0x98>
 80199c4:	603b      	str	r3, [r7, #0]
 80199c6:	2000      	movs	r0, #0
 80199c8:	e7aa      	b.n	8019920 <rcl_validate_topic_name+0x50>
 80199ca:	200b      	movs	r0, #11
 80199cc:	4770      	bx	lr
 80199ce:	2304      	movs	r3, #4
 80199d0:	6033      	str	r3, [r6, #0]
 80199d2:	2f00      	cmp	r7, #0
 80199d4:	d1a2      	bne.n	801991c <rcl_validate_topic_name+0x4c>
 80199d6:	e7c7      	b.n	8019968 <rcl_validate_topic_name+0x98>
 80199d8:	200b      	movs	r0, #11
 80199da:	e7a1      	b.n	8019920 <rcl_validate_topic_name+0x50>
 80199dc:	2309      	movs	r3, #9
 80199de:	6033      	str	r3, [r6, #0]
 80199e0:	2f00      	cmp	r7, #0
 80199e2:	d1c0      	bne.n	8019966 <rcl_validate_topic_name+0x96>
 80199e4:	e7c0      	b.n	8019968 <rcl_validate_topic_name+0x98>
 80199e6:	2900      	cmp	r1, #0
 80199e8:	d0ca      	beq.n	8019980 <rcl_validate_topic_name+0xb0>
 80199ea:	2306      	movs	r3, #6
 80199ec:	6033      	str	r3, [r6, #0]
 80199ee:	2f00      	cmp	r7, #0
 80199f0:	d1b9      	bne.n	8019966 <rcl_validate_topic_name+0x96>
 80199f2:	e7b9      	b.n	8019968 <rcl_validate_topic_name+0x98>
 80199f4:	2c00      	cmp	r4, #0
 80199f6:	d0c3      	beq.n	8019980 <rcl_validate_topic_name+0xb0>
 80199f8:	2308      	movs	r3, #8
 80199fa:	6033      	str	r3, [r6, #0]
 80199fc:	2f00      	cmp	r7, #0
 80199fe:	d1b2      	bne.n	8019966 <rcl_validate_topic_name+0x96>
 8019a00:	e7b2      	b.n	8019968 <rcl_validate_topic_name+0x98>
 8019a02:	2c00      	cmp	r4, #0
 8019a04:	d1f8      	bne.n	80199f8 <rcl_validate_topic_name+0x128>
 8019a06:	460b      	mov	r3, r1
 8019a08:	2401      	movs	r4, #1
 8019a0a:	e7b9      	b.n	8019980 <rcl_validate_topic_name+0xb0>
 8019a0c:	2400      	movs	r4, #0
 8019a0e:	e7b7      	b.n	8019980 <rcl_validate_topic_name+0xb0>
 8019a10:	2000      	movs	r0, #0
 8019a12:	6030      	str	r0, [r6, #0]
 8019a14:	e784      	b.n	8019920 <rcl_validate_topic_name+0x50>
 8019a16:	2205      	movs	r2, #5
 8019a18:	6032      	str	r2, [r6, #0]
 8019a1a:	2f00      	cmp	r7, #0
 8019a1c:	d1d2      	bne.n	80199c4 <rcl_validate_topic_name+0xf4>
 8019a1e:	e7a3      	b.n	8019968 <rcl_validate_topic_name+0x98>
 8019a20:	2c00      	cmp	r4, #0
 8019a22:	bf14      	ite	ne
 8019a24:	2308      	movne	r3, #8
 8019a26:	2303      	moveq	r3, #3
 8019a28:	6033      	str	r3, [r6, #0]
 8019a2a:	2f00      	cmp	r7, #0
 8019a2c:	d19b      	bne.n	8019966 <rcl_validate_topic_name+0x96>
 8019a2e:	e79b      	b.n	8019968 <rcl_validate_topic_name+0x98>
 8019a30:	2301      	movs	r3, #1
 8019a32:	e00a      	b.n	8019a4a <rcl_validate_topic_name+0x17a>
 8019a34:	2c01      	cmp	r4, #1
 8019a36:	d013      	beq.n	8019a60 <rcl_validate_topic_name+0x190>
 8019a38:	4299      	cmp	r1, r3
 8019a3a:	f104 0401 	add.w	r4, r4, #1
 8019a3e:	f105 0501 	add.w	r5, r5, #1
 8019a42:	f103 0201 	add.w	r2, r3, #1
 8019a46:	d9e3      	bls.n	8019a10 <rcl_validate_topic_name+0x140>
 8019a48:	4613      	mov	r3, r2
 8019a4a:	45a0      	cmp	r8, r4
 8019a4c:	d0f4      	beq.n	8019a38 <rcl_validate_topic_name+0x168>
 8019a4e:	782a      	ldrb	r2, [r5, #0]
 8019a50:	2a2f      	cmp	r2, #47	@ 0x2f
 8019a52:	d1ef      	bne.n	8019a34 <rcl_validate_topic_name+0x164>
 8019a54:	786a      	ldrb	r2, [r5, #1]
 8019a56:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8019a5a:	0752      	lsls	r2, r2, #29
 8019a5c:	d5ec      	bpl.n	8019a38 <rcl_validate_topic_name+0x168>
 8019a5e:	e7ad      	b.n	80199bc <rcl_validate_topic_name+0xec>
 8019a60:	2307      	movs	r3, #7
 8019a62:	6033      	str	r3, [r6, #0]
 8019a64:	2f00      	cmp	r7, #0
 8019a66:	f43f af7f 	beq.w	8019968 <rcl_validate_topic_name+0x98>
 8019a6a:	603c      	str	r4, [r7, #0]
 8019a6c:	2000      	movs	r0, #0
 8019a6e:	e757      	b.n	8019920 <rcl_validate_topic_name+0x50>
 8019a70:	0801c0df 	.word	0x0801c0df

08019a74 <rmw_create_guard_condition>:
 8019a74:	b538      	push	{r3, r4, r5, lr}
 8019a76:	4605      	mov	r5, r0
 8019a78:	4807      	ldr	r0, [pc, #28]	@ (8019a98 <rmw_create_guard_condition+0x24>)
 8019a7a:	f7fd ff41 	bl	8017900 <get_memory>
 8019a7e:	b148      	cbz	r0, 8019a94 <rmw_create_guard_condition+0x20>
 8019a80:	6884      	ldr	r4, [r0, #8]
 8019a82:	2300      	movs	r3, #0
 8019a84:	7423      	strb	r3, [r4, #16]
 8019a86:	61e5      	str	r5, [r4, #28]
 8019a88:	f7fd ffa2 	bl	80179d0 <rmw_get_implementation_identifier>
 8019a8c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8019a90:	f104 0014 	add.w	r0, r4, #20
 8019a94:	bd38      	pop	{r3, r4, r5, pc}
 8019a96:	bf00      	nop
 8019a98:	2000af3c 	.word	0x2000af3c

08019a9c <rmw_destroy_guard_condition>:
 8019a9c:	b508      	push	{r3, lr}
 8019a9e:	4b08      	ldr	r3, [pc, #32]	@ (8019ac0 <rmw_destroy_guard_condition+0x24>)
 8019aa0:	6819      	ldr	r1, [r3, #0]
 8019aa2:	b911      	cbnz	r1, 8019aaa <rmw_destroy_guard_condition+0xe>
 8019aa4:	e00a      	b.n	8019abc <rmw_destroy_guard_condition+0x20>
 8019aa6:	6849      	ldr	r1, [r1, #4]
 8019aa8:	b141      	cbz	r1, 8019abc <rmw_destroy_guard_condition+0x20>
 8019aaa:	688b      	ldr	r3, [r1, #8]
 8019aac:	3314      	adds	r3, #20
 8019aae:	4298      	cmp	r0, r3
 8019ab0:	d1f9      	bne.n	8019aa6 <rmw_destroy_guard_condition+0xa>
 8019ab2:	4803      	ldr	r0, [pc, #12]	@ (8019ac0 <rmw_destroy_guard_condition+0x24>)
 8019ab4:	f7fd ff34 	bl	8017920 <put_memory>
 8019ab8:	2000      	movs	r0, #0
 8019aba:	bd08      	pop	{r3, pc}
 8019abc:	2001      	movs	r0, #1
 8019abe:	bd08      	pop	{r3, pc}
 8019ac0:	2000af3c 	.word	0x2000af3c

08019ac4 <rmw_trigger_guard_condition>:
 8019ac4:	b160      	cbz	r0, 8019ae0 <rmw_trigger_guard_condition+0x1c>
 8019ac6:	b510      	push	{r4, lr}
 8019ac8:	4604      	mov	r4, r0
 8019aca:	6800      	ldr	r0, [r0, #0]
 8019acc:	f7f5 fcc6 	bl	800f45c <is_uxrce_rmw_identifier_valid>
 8019ad0:	b908      	cbnz	r0, 8019ad6 <rmw_trigger_guard_condition+0x12>
 8019ad2:	2001      	movs	r0, #1
 8019ad4:	bd10      	pop	{r4, pc}
 8019ad6:	6863      	ldr	r3, [r4, #4]
 8019ad8:	2201      	movs	r2, #1
 8019ada:	741a      	strb	r2, [r3, #16]
 8019adc:	2000      	movs	r0, #0
 8019ade:	bd10      	pop	{r4, pc}
 8019ae0:	2001      	movs	r0, #1
 8019ae2:	4770      	bx	lr

08019ae4 <rosidl_runtime_c__String__init>:
 8019ae4:	b510      	push	{r4, lr}
 8019ae6:	4604      	mov	r4, r0
 8019ae8:	b086      	sub	sp, #24
 8019aea:	b170      	cbz	r0, 8019b0a <rosidl_runtime_c__String__init+0x26>
 8019aec:	a801      	add	r0, sp, #4
 8019aee:	f7f4 fa73 	bl	800dfd8 <rcutils_get_default_allocator>
 8019af2:	9b01      	ldr	r3, [sp, #4]
 8019af4:	9905      	ldr	r1, [sp, #20]
 8019af6:	2001      	movs	r0, #1
 8019af8:	4798      	blx	r3
 8019afa:	6020      	str	r0, [r4, #0]
 8019afc:	b128      	cbz	r0, 8019b0a <rosidl_runtime_c__String__init+0x26>
 8019afe:	2100      	movs	r1, #0
 8019b00:	2201      	movs	r2, #1
 8019b02:	7001      	strb	r1, [r0, #0]
 8019b04:	e9c4 1201 	strd	r1, r2, [r4, #4]
 8019b08:	4610      	mov	r0, r2
 8019b0a:	b006      	add	sp, #24
 8019b0c:	bd10      	pop	{r4, pc}
 8019b0e:	bf00      	nop

08019b10 <rosidl_runtime_c__String__fini>:
 8019b10:	b320      	cbz	r0, 8019b5c <rosidl_runtime_c__String__fini+0x4c>
 8019b12:	b510      	push	{r4, lr}
 8019b14:	6803      	ldr	r3, [r0, #0]
 8019b16:	b086      	sub	sp, #24
 8019b18:	4604      	mov	r4, r0
 8019b1a:	b173      	cbz	r3, 8019b3a <rosidl_runtime_c__String__fini+0x2a>
 8019b1c:	6883      	ldr	r3, [r0, #8]
 8019b1e:	b1f3      	cbz	r3, 8019b5e <rosidl_runtime_c__String__fini+0x4e>
 8019b20:	a801      	add	r0, sp, #4
 8019b22:	f7f4 fa59 	bl	800dfd8 <rcutils_get_default_allocator>
 8019b26:	9b02      	ldr	r3, [sp, #8]
 8019b28:	9905      	ldr	r1, [sp, #20]
 8019b2a:	6820      	ldr	r0, [r4, #0]
 8019b2c:	4798      	blx	r3
 8019b2e:	2300      	movs	r3, #0
 8019b30:	e9c4 3300 	strd	r3, r3, [r4]
 8019b34:	60a3      	str	r3, [r4, #8]
 8019b36:	b006      	add	sp, #24
 8019b38:	bd10      	pop	{r4, pc}
 8019b3a:	6843      	ldr	r3, [r0, #4]
 8019b3c:	b9db      	cbnz	r3, 8019b76 <rosidl_runtime_c__String__fini+0x66>
 8019b3e:	6883      	ldr	r3, [r0, #8]
 8019b40:	2b00      	cmp	r3, #0
 8019b42:	d0f8      	beq.n	8019b36 <rosidl_runtime_c__String__fini+0x26>
 8019b44:	4b12      	ldr	r3, [pc, #72]	@ (8019b90 <rosidl_runtime_c__String__fini+0x80>)
 8019b46:	4813      	ldr	r0, [pc, #76]	@ (8019b94 <rosidl_runtime_c__String__fini+0x84>)
 8019b48:	681b      	ldr	r3, [r3, #0]
 8019b4a:	2251      	movs	r2, #81	@ 0x51
 8019b4c:	68db      	ldr	r3, [r3, #12]
 8019b4e:	2101      	movs	r1, #1
 8019b50:	f000 fb82 	bl	801a258 <fwrite>
 8019b54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b58:	f000 f83e 	bl	8019bd8 <exit>
 8019b5c:	4770      	bx	lr
 8019b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8019b90 <rosidl_runtime_c__String__fini+0x80>)
 8019b60:	480d      	ldr	r0, [pc, #52]	@ (8019b98 <rosidl_runtime_c__String__fini+0x88>)
 8019b62:	681b      	ldr	r3, [r3, #0]
 8019b64:	224c      	movs	r2, #76	@ 0x4c
 8019b66:	68db      	ldr	r3, [r3, #12]
 8019b68:	2101      	movs	r1, #1
 8019b6a:	f000 fb75 	bl	801a258 <fwrite>
 8019b6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b72:	f000 f831 	bl	8019bd8 <exit>
 8019b76:	4b06      	ldr	r3, [pc, #24]	@ (8019b90 <rosidl_runtime_c__String__fini+0x80>)
 8019b78:	4808      	ldr	r0, [pc, #32]	@ (8019b9c <rosidl_runtime_c__String__fini+0x8c>)
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	224e      	movs	r2, #78	@ 0x4e
 8019b7e:	68db      	ldr	r3, [r3, #12]
 8019b80:	2101      	movs	r1, #1
 8019b82:	f000 fb69 	bl	801a258 <fwrite>
 8019b86:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8019b8a:	f000 f825 	bl	8019bd8 <exit>
 8019b8e:	bf00      	nop
 8019b90:	20000290 	.word	0x20000290
 8019b94:	0801bbf8 	.word	0x0801bbf8
 8019b98:	0801bb58 	.word	0x0801bb58
 8019b9c:	0801bba8 	.word	0x0801bba8

08019ba0 <calloc>:
 8019ba0:	4b02      	ldr	r3, [pc, #8]	@ (8019bac <calloc+0xc>)
 8019ba2:	460a      	mov	r2, r1
 8019ba4:	4601      	mov	r1, r0
 8019ba6:	6818      	ldr	r0, [r3, #0]
 8019ba8:	f000 b802 	b.w	8019bb0 <_calloc_r>
 8019bac:	20000290 	.word	0x20000290

08019bb0 <_calloc_r>:
 8019bb0:	b570      	push	{r4, r5, r6, lr}
 8019bb2:	fba1 5402 	umull	r5, r4, r1, r2
 8019bb6:	b934      	cbnz	r4, 8019bc6 <_calloc_r+0x16>
 8019bb8:	4629      	mov	r1, r5
 8019bba:	f000 f899 	bl	8019cf0 <_malloc_r>
 8019bbe:	4606      	mov	r6, r0
 8019bc0:	b928      	cbnz	r0, 8019bce <_calloc_r+0x1e>
 8019bc2:	4630      	mov	r0, r6
 8019bc4:	bd70      	pop	{r4, r5, r6, pc}
 8019bc6:	220c      	movs	r2, #12
 8019bc8:	6002      	str	r2, [r0, #0]
 8019bca:	2600      	movs	r6, #0
 8019bcc:	e7f9      	b.n	8019bc2 <_calloc_r+0x12>
 8019bce:	462a      	mov	r2, r5
 8019bd0:	4621      	mov	r1, r4
 8019bd2:	f000 fcd5 	bl	801a580 <memset>
 8019bd6:	e7f4      	b.n	8019bc2 <_calloc_r+0x12>

08019bd8 <exit>:
 8019bd8:	b508      	push	{r3, lr}
 8019bda:	4b06      	ldr	r3, [pc, #24]	@ (8019bf4 <exit+0x1c>)
 8019bdc:	4604      	mov	r4, r0
 8019bde:	b113      	cbz	r3, 8019be6 <exit+0xe>
 8019be0:	2100      	movs	r1, #0
 8019be2:	f3af 8000 	nop.w
 8019be6:	4b04      	ldr	r3, [pc, #16]	@ (8019bf8 <exit+0x20>)
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	b103      	cbz	r3, 8019bee <exit+0x16>
 8019bec:	4798      	blx	r3
 8019bee:	4620      	mov	r0, r4
 8019bf0:	f7e8 fe12 	bl	8002818 <_exit>
 8019bf4:	00000000 	.word	0x00000000
 8019bf8:	2000b1f4 	.word	0x2000b1f4

08019bfc <getenv>:
 8019bfc:	b507      	push	{r0, r1, r2, lr}
 8019bfe:	4b04      	ldr	r3, [pc, #16]	@ (8019c10 <getenv+0x14>)
 8019c00:	4601      	mov	r1, r0
 8019c02:	aa01      	add	r2, sp, #4
 8019c04:	6818      	ldr	r0, [r3, #0]
 8019c06:	f000 f805 	bl	8019c14 <_findenv_r>
 8019c0a:	b003      	add	sp, #12
 8019c0c:	f85d fb04 	ldr.w	pc, [sp], #4
 8019c10:	20000290 	.word	0x20000290

08019c14 <_findenv_r>:
 8019c14:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c18:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8019c88 <_findenv_r+0x74>
 8019c1c:	4606      	mov	r6, r0
 8019c1e:	4689      	mov	r9, r1
 8019c20:	4617      	mov	r7, r2
 8019c22:	f000 fda3 	bl	801a76c <__env_lock>
 8019c26:	f8da 4000 	ldr.w	r4, [sl]
 8019c2a:	b134      	cbz	r4, 8019c3a <_findenv_r+0x26>
 8019c2c:	464b      	mov	r3, r9
 8019c2e:	4698      	mov	r8, r3
 8019c30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019c34:	b13a      	cbz	r2, 8019c46 <_findenv_r+0x32>
 8019c36:	2a3d      	cmp	r2, #61	@ 0x3d
 8019c38:	d1f9      	bne.n	8019c2e <_findenv_r+0x1a>
 8019c3a:	4630      	mov	r0, r6
 8019c3c:	f000 fd9c 	bl	801a778 <__env_unlock>
 8019c40:	2000      	movs	r0, #0
 8019c42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c46:	eba8 0809 	sub.w	r8, r8, r9
 8019c4a:	46a3      	mov	fp, r4
 8019c4c:	f854 0b04 	ldr.w	r0, [r4], #4
 8019c50:	2800      	cmp	r0, #0
 8019c52:	d0f2      	beq.n	8019c3a <_findenv_r+0x26>
 8019c54:	4642      	mov	r2, r8
 8019c56:	4649      	mov	r1, r9
 8019c58:	f000 fca7 	bl	801a5aa <strncmp>
 8019c5c:	2800      	cmp	r0, #0
 8019c5e:	d1f4      	bne.n	8019c4a <_findenv_r+0x36>
 8019c60:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8019c64:	eb03 0508 	add.w	r5, r3, r8
 8019c68:	f813 3008 	ldrb.w	r3, [r3, r8]
 8019c6c:	2b3d      	cmp	r3, #61	@ 0x3d
 8019c6e:	d1ec      	bne.n	8019c4a <_findenv_r+0x36>
 8019c70:	f8da 3000 	ldr.w	r3, [sl]
 8019c74:	ebab 0303 	sub.w	r3, fp, r3
 8019c78:	109b      	asrs	r3, r3, #2
 8019c7a:	4630      	mov	r0, r6
 8019c7c:	603b      	str	r3, [r7, #0]
 8019c7e:	f000 fd7b 	bl	801a778 <__env_unlock>
 8019c82:	1c68      	adds	r0, r5, #1
 8019c84:	e7dd      	b.n	8019c42 <_findenv_r+0x2e>
 8019c86:	bf00      	nop
 8019c88:	20000000 	.word	0x20000000

08019c8c <malloc>:
 8019c8c:	4b02      	ldr	r3, [pc, #8]	@ (8019c98 <malloc+0xc>)
 8019c8e:	4601      	mov	r1, r0
 8019c90:	6818      	ldr	r0, [r3, #0]
 8019c92:	f000 b82d 	b.w	8019cf0 <_malloc_r>
 8019c96:	bf00      	nop
 8019c98:	20000290 	.word	0x20000290

08019c9c <free>:
 8019c9c:	4b02      	ldr	r3, [pc, #8]	@ (8019ca8 <free+0xc>)
 8019c9e:	4601      	mov	r1, r0
 8019ca0:	6818      	ldr	r0, [r3, #0]
 8019ca2:	f000 bd6f 	b.w	801a784 <_free_r>
 8019ca6:	bf00      	nop
 8019ca8:	20000290 	.word	0x20000290

08019cac <sbrk_aligned>:
 8019cac:	b570      	push	{r4, r5, r6, lr}
 8019cae:	4e0f      	ldr	r6, [pc, #60]	@ (8019cec <sbrk_aligned+0x40>)
 8019cb0:	460c      	mov	r4, r1
 8019cb2:	6831      	ldr	r1, [r6, #0]
 8019cb4:	4605      	mov	r5, r0
 8019cb6:	b911      	cbnz	r1, 8019cbe <sbrk_aligned+0x12>
 8019cb8:	f000 fcd4 	bl	801a664 <_sbrk_r>
 8019cbc:	6030      	str	r0, [r6, #0]
 8019cbe:	4621      	mov	r1, r4
 8019cc0:	4628      	mov	r0, r5
 8019cc2:	f000 fccf 	bl	801a664 <_sbrk_r>
 8019cc6:	1c43      	adds	r3, r0, #1
 8019cc8:	d103      	bne.n	8019cd2 <sbrk_aligned+0x26>
 8019cca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8019cce:	4620      	mov	r0, r4
 8019cd0:	bd70      	pop	{r4, r5, r6, pc}
 8019cd2:	1cc4      	adds	r4, r0, #3
 8019cd4:	f024 0403 	bic.w	r4, r4, #3
 8019cd8:	42a0      	cmp	r0, r4
 8019cda:	d0f8      	beq.n	8019cce <sbrk_aligned+0x22>
 8019cdc:	1a21      	subs	r1, r4, r0
 8019cde:	4628      	mov	r0, r5
 8019ce0:	f000 fcc0 	bl	801a664 <_sbrk_r>
 8019ce4:	3001      	adds	r0, #1
 8019ce6:	d1f2      	bne.n	8019cce <sbrk_aligned+0x22>
 8019ce8:	e7ef      	b.n	8019cca <sbrk_aligned+0x1e>
 8019cea:	bf00      	nop
 8019cec:	2000b0b4 	.word	0x2000b0b4

08019cf0 <_malloc_r>:
 8019cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019cf4:	1ccd      	adds	r5, r1, #3
 8019cf6:	f025 0503 	bic.w	r5, r5, #3
 8019cfa:	3508      	adds	r5, #8
 8019cfc:	2d0c      	cmp	r5, #12
 8019cfe:	bf38      	it	cc
 8019d00:	250c      	movcc	r5, #12
 8019d02:	2d00      	cmp	r5, #0
 8019d04:	4606      	mov	r6, r0
 8019d06:	db01      	blt.n	8019d0c <_malloc_r+0x1c>
 8019d08:	42a9      	cmp	r1, r5
 8019d0a:	d904      	bls.n	8019d16 <_malloc_r+0x26>
 8019d0c:	230c      	movs	r3, #12
 8019d0e:	6033      	str	r3, [r6, #0]
 8019d10:	2000      	movs	r0, #0
 8019d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019d16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8019dec <_malloc_r+0xfc>
 8019d1a:	f000 f869 	bl	8019df0 <__malloc_lock>
 8019d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8019d22:	461c      	mov	r4, r3
 8019d24:	bb44      	cbnz	r4, 8019d78 <_malloc_r+0x88>
 8019d26:	4629      	mov	r1, r5
 8019d28:	4630      	mov	r0, r6
 8019d2a:	f7ff ffbf 	bl	8019cac <sbrk_aligned>
 8019d2e:	1c43      	adds	r3, r0, #1
 8019d30:	4604      	mov	r4, r0
 8019d32:	d158      	bne.n	8019de6 <_malloc_r+0xf6>
 8019d34:	f8d8 4000 	ldr.w	r4, [r8]
 8019d38:	4627      	mov	r7, r4
 8019d3a:	2f00      	cmp	r7, #0
 8019d3c:	d143      	bne.n	8019dc6 <_malloc_r+0xd6>
 8019d3e:	2c00      	cmp	r4, #0
 8019d40:	d04b      	beq.n	8019dda <_malloc_r+0xea>
 8019d42:	6823      	ldr	r3, [r4, #0]
 8019d44:	4639      	mov	r1, r7
 8019d46:	4630      	mov	r0, r6
 8019d48:	eb04 0903 	add.w	r9, r4, r3
 8019d4c:	f000 fc8a 	bl	801a664 <_sbrk_r>
 8019d50:	4581      	cmp	r9, r0
 8019d52:	d142      	bne.n	8019dda <_malloc_r+0xea>
 8019d54:	6821      	ldr	r1, [r4, #0]
 8019d56:	1a6d      	subs	r5, r5, r1
 8019d58:	4629      	mov	r1, r5
 8019d5a:	4630      	mov	r0, r6
 8019d5c:	f7ff ffa6 	bl	8019cac <sbrk_aligned>
 8019d60:	3001      	adds	r0, #1
 8019d62:	d03a      	beq.n	8019dda <_malloc_r+0xea>
 8019d64:	6823      	ldr	r3, [r4, #0]
 8019d66:	442b      	add	r3, r5
 8019d68:	6023      	str	r3, [r4, #0]
 8019d6a:	f8d8 3000 	ldr.w	r3, [r8]
 8019d6e:	685a      	ldr	r2, [r3, #4]
 8019d70:	bb62      	cbnz	r2, 8019dcc <_malloc_r+0xdc>
 8019d72:	f8c8 7000 	str.w	r7, [r8]
 8019d76:	e00f      	b.n	8019d98 <_malloc_r+0xa8>
 8019d78:	6822      	ldr	r2, [r4, #0]
 8019d7a:	1b52      	subs	r2, r2, r5
 8019d7c:	d420      	bmi.n	8019dc0 <_malloc_r+0xd0>
 8019d7e:	2a0b      	cmp	r2, #11
 8019d80:	d917      	bls.n	8019db2 <_malloc_r+0xc2>
 8019d82:	1961      	adds	r1, r4, r5
 8019d84:	42a3      	cmp	r3, r4
 8019d86:	6025      	str	r5, [r4, #0]
 8019d88:	bf18      	it	ne
 8019d8a:	6059      	strne	r1, [r3, #4]
 8019d8c:	6863      	ldr	r3, [r4, #4]
 8019d8e:	bf08      	it	eq
 8019d90:	f8c8 1000 	streq.w	r1, [r8]
 8019d94:	5162      	str	r2, [r4, r5]
 8019d96:	604b      	str	r3, [r1, #4]
 8019d98:	4630      	mov	r0, r6
 8019d9a:	f000 f82f 	bl	8019dfc <__malloc_unlock>
 8019d9e:	f104 000b 	add.w	r0, r4, #11
 8019da2:	1d23      	adds	r3, r4, #4
 8019da4:	f020 0007 	bic.w	r0, r0, #7
 8019da8:	1ac2      	subs	r2, r0, r3
 8019daa:	bf1c      	itt	ne
 8019dac:	1a1b      	subne	r3, r3, r0
 8019dae:	50a3      	strne	r3, [r4, r2]
 8019db0:	e7af      	b.n	8019d12 <_malloc_r+0x22>
 8019db2:	6862      	ldr	r2, [r4, #4]
 8019db4:	42a3      	cmp	r3, r4
 8019db6:	bf0c      	ite	eq
 8019db8:	f8c8 2000 	streq.w	r2, [r8]
 8019dbc:	605a      	strne	r2, [r3, #4]
 8019dbe:	e7eb      	b.n	8019d98 <_malloc_r+0xa8>
 8019dc0:	4623      	mov	r3, r4
 8019dc2:	6864      	ldr	r4, [r4, #4]
 8019dc4:	e7ae      	b.n	8019d24 <_malloc_r+0x34>
 8019dc6:	463c      	mov	r4, r7
 8019dc8:	687f      	ldr	r7, [r7, #4]
 8019dca:	e7b6      	b.n	8019d3a <_malloc_r+0x4a>
 8019dcc:	461a      	mov	r2, r3
 8019dce:	685b      	ldr	r3, [r3, #4]
 8019dd0:	42a3      	cmp	r3, r4
 8019dd2:	d1fb      	bne.n	8019dcc <_malloc_r+0xdc>
 8019dd4:	2300      	movs	r3, #0
 8019dd6:	6053      	str	r3, [r2, #4]
 8019dd8:	e7de      	b.n	8019d98 <_malloc_r+0xa8>
 8019dda:	230c      	movs	r3, #12
 8019ddc:	6033      	str	r3, [r6, #0]
 8019dde:	4630      	mov	r0, r6
 8019de0:	f000 f80c 	bl	8019dfc <__malloc_unlock>
 8019de4:	e794      	b.n	8019d10 <_malloc_r+0x20>
 8019de6:	6005      	str	r5, [r0, #0]
 8019de8:	e7d6      	b.n	8019d98 <_malloc_r+0xa8>
 8019dea:	bf00      	nop
 8019dec:	2000b0b8 	.word	0x2000b0b8

08019df0 <__malloc_lock>:
 8019df0:	4801      	ldr	r0, [pc, #4]	@ (8019df8 <__malloc_lock+0x8>)
 8019df2:	f000 bc84 	b.w	801a6fe <__retarget_lock_acquire_recursive>
 8019df6:	bf00      	nop
 8019df8:	2000b1fd 	.word	0x2000b1fd

08019dfc <__malloc_unlock>:
 8019dfc:	4801      	ldr	r0, [pc, #4]	@ (8019e04 <__malloc_unlock+0x8>)
 8019dfe:	f000 bc7f 	b.w	801a700 <__retarget_lock_release_recursive>
 8019e02:	bf00      	nop
 8019e04:	2000b1fd 	.word	0x2000b1fd

08019e08 <srand>:
 8019e08:	b538      	push	{r3, r4, r5, lr}
 8019e0a:	4b10      	ldr	r3, [pc, #64]	@ (8019e4c <srand+0x44>)
 8019e0c:	681d      	ldr	r5, [r3, #0]
 8019e0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019e10:	4604      	mov	r4, r0
 8019e12:	b9b3      	cbnz	r3, 8019e42 <srand+0x3a>
 8019e14:	2018      	movs	r0, #24
 8019e16:	f7ff ff39 	bl	8019c8c <malloc>
 8019e1a:	4602      	mov	r2, r0
 8019e1c:	6328      	str	r0, [r5, #48]	@ 0x30
 8019e1e:	b920      	cbnz	r0, 8019e2a <srand+0x22>
 8019e20:	4b0b      	ldr	r3, [pc, #44]	@ (8019e50 <srand+0x48>)
 8019e22:	480c      	ldr	r0, [pc, #48]	@ (8019e54 <srand+0x4c>)
 8019e24:	2146      	movs	r1, #70	@ 0x46
 8019e26:	f000 fc83 	bl	801a730 <__assert_func>
 8019e2a:	490b      	ldr	r1, [pc, #44]	@ (8019e58 <srand+0x50>)
 8019e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8019e5c <srand+0x54>)
 8019e2e:	e9c0 1300 	strd	r1, r3, [r0]
 8019e32:	4b0b      	ldr	r3, [pc, #44]	@ (8019e60 <srand+0x58>)
 8019e34:	6083      	str	r3, [r0, #8]
 8019e36:	230b      	movs	r3, #11
 8019e38:	8183      	strh	r3, [r0, #12]
 8019e3a:	2100      	movs	r1, #0
 8019e3c:	2001      	movs	r0, #1
 8019e3e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019e42:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8019e44:	2200      	movs	r2, #0
 8019e46:	611c      	str	r4, [r3, #16]
 8019e48:	615a      	str	r2, [r3, #20]
 8019e4a:	bd38      	pop	{r3, r4, r5, pc}
 8019e4c:	20000290 	.word	0x20000290
 8019e50:	0801c000 	.word	0x0801c000
 8019e54:	0801c017 	.word	0x0801c017
 8019e58:	abcd330e 	.word	0xabcd330e
 8019e5c:	e66d1234 	.word	0xe66d1234
 8019e60:	0005deec 	.word	0x0005deec

08019e64 <rand>:
 8019e64:	4b16      	ldr	r3, [pc, #88]	@ (8019ec0 <rand+0x5c>)
 8019e66:	b510      	push	{r4, lr}
 8019e68:	681c      	ldr	r4, [r3, #0]
 8019e6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8019e6c:	b9b3      	cbnz	r3, 8019e9c <rand+0x38>
 8019e6e:	2018      	movs	r0, #24
 8019e70:	f7ff ff0c 	bl	8019c8c <malloc>
 8019e74:	4602      	mov	r2, r0
 8019e76:	6320      	str	r0, [r4, #48]	@ 0x30
 8019e78:	b920      	cbnz	r0, 8019e84 <rand+0x20>
 8019e7a:	4b12      	ldr	r3, [pc, #72]	@ (8019ec4 <rand+0x60>)
 8019e7c:	4812      	ldr	r0, [pc, #72]	@ (8019ec8 <rand+0x64>)
 8019e7e:	2152      	movs	r1, #82	@ 0x52
 8019e80:	f000 fc56 	bl	801a730 <__assert_func>
 8019e84:	4911      	ldr	r1, [pc, #68]	@ (8019ecc <rand+0x68>)
 8019e86:	4b12      	ldr	r3, [pc, #72]	@ (8019ed0 <rand+0x6c>)
 8019e88:	e9c0 1300 	strd	r1, r3, [r0]
 8019e8c:	4b11      	ldr	r3, [pc, #68]	@ (8019ed4 <rand+0x70>)
 8019e8e:	6083      	str	r3, [r0, #8]
 8019e90:	230b      	movs	r3, #11
 8019e92:	8183      	strh	r3, [r0, #12]
 8019e94:	2100      	movs	r1, #0
 8019e96:	2001      	movs	r0, #1
 8019e98:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8019e9c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8019e9e:	480e      	ldr	r0, [pc, #56]	@ (8019ed8 <rand+0x74>)
 8019ea0:	690b      	ldr	r3, [r1, #16]
 8019ea2:	694c      	ldr	r4, [r1, #20]
 8019ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8019edc <rand+0x78>)
 8019ea6:	4358      	muls	r0, r3
 8019ea8:	fb02 0004 	mla	r0, r2, r4, r0
 8019eac:	fba3 3202 	umull	r3, r2, r3, r2
 8019eb0:	3301      	adds	r3, #1
 8019eb2:	eb40 0002 	adc.w	r0, r0, r2
 8019eb6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8019eba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8019ebe:	bd10      	pop	{r4, pc}
 8019ec0:	20000290 	.word	0x20000290
 8019ec4:	0801c000 	.word	0x0801c000
 8019ec8:	0801c017 	.word	0x0801c017
 8019ecc:	abcd330e 	.word	0xabcd330e
 8019ed0:	e66d1234 	.word	0xe66d1234
 8019ed4:	0005deec 	.word	0x0005deec
 8019ed8:	5851f42d 	.word	0x5851f42d
 8019edc:	4c957f2d 	.word	0x4c957f2d

08019ee0 <realloc>:
 8019ee0:	4b02      	ldr	r3, [pc, #8]	@ (8019eec <realloc+0xc>)
 8019ee2:	460a      	mov	r2, r1
 8019ee4:	4601      	mov	r1, r0
 8019ee6:	6818      	ldr	r0, [r3, #0]
 8019ee8:	f000 b802 	b.w	8019ef0 <_realloc_r>
 8019eec:	20000290 	.word	0x20000290

08019ef0 <_realloc_r>:
 8019ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ef4:	4607      	mov	r7, r0
 8019ef6:	4614      	mov	r4, r2
 8019ef8:	460d      	mov	r5, r1
 8019efa:	b921      	cbnz	r1, 8019f06 <_realloc_r+0x16>
 8019efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f00:	4611      	mov	r1, r2
 8019f02:	f7ff bef5 	b.w	8019cf0 <_malloc_r>
 8019f06:	b92a      	cbnz	r2, 8019f14 <_realloc_r+0x24>
 8019f08:	f000 fc3c 	bl	801a784 <_free_r>
 8019f0c:	4625      	mov	r5, r4
 8019f0e:	4628      	mov	r0, r5
 8019f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f14:	f000 fc80 	bl	801a818 <_malloc_usable_size_r>
 8019f18:	4284      	cmp	r4, r0
 8019f1a:	4606      	mov	r6, r0
 8019f1c:	d802      	bhi.n	8019f24 <_realloc_r+0x34>
 8019f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019f22:	d8f4      	bhi.n	8019f0e <_realloc_r+0x1e>
 8019f24:	4621      	mov	r1, r4
 8019f26:	4638      	mov	r0, r7
 8019f28:	f7ff fee2 	bl	8019cf0 <_malloc_r>
 8019f2c:	4680      	mov	r8, r0
 8019f2e:	b908      	cbnz	r0, 8019f34 <_realloc_r+0x44>
 8019f30:	4645      	mov	r5, r8
 8019f32:	e7ec      	b.n	8019f0e <_realloc_r+0x1e>
 8019f34:	42b4      	cmp	r4, r6
 8019f36:	4622      	mov	r2, r4
 8019f38:	4629      	mov	r1, r5
 8019f3a:	bf28      	it	cs
 8019f3c:	4632      	movcs	r2, r6
 8019f3e:	f000 fbe8 	bl	801a712 <memcpy>
 8019f42:	4629      	mov	r1, r5
 8019f44:	4638      	mov	r0, r7
 8019f46:	f000 fc1d 	bl	801a784 <_free_r>
 8019f4a:	e7f1      	b.n	8019f30 <_realloc_r+0x40>

08019f4c <_strtoul_l.isra.0>:
 8019f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019f50:	4e34      	ldr	r6, [pc, #208]	@ (801a024 <_strtoul_l.isra.0+0xd8>)
 8019f52:	4686      	mov	lr, r0
 8019f54:	460d      	mov	r5, r1
 8019f56:	4628      	mov	r0, r5
 8019f58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019f5c:	5d37      	ldrb	r7, [r6, r4]
 8019f5e:	f017 0708 	ands.w	r7, r7, #8
 8019f62:	d1f8      	bne.n	8019f56 <_strtoul_l.isra.0+0xa>
 8019f64:	2c2d      	cmp	r4, #45	@ 0x2d
 8019f66:	d110      	bne.n	8019f8a <_strtoul_l.isra.0+0x3e>
 8019f68:	782c      	ldrb	r4, [r5, #0]
 8019f6a:	2701      	movs	r7, #1
 8019f6c:	1c85      	adds	r5, r0, #2
 8019f6e:	f033 0010 	bics.w	r0, r3, #16
 8019f72:	d115      	bne.n	8019fa0 <_strtoul_l.isra.0+0x54>
 8019f74:	2c30      	cmp	r4, #48	@ 0x30
 8019f76:	d10d      	bne.n	8019f94 <_strtoul_l.isra.0+0x48>
 8019f78:	7828      	ldrb	r0, [r5, #0]
 8019f7a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8019f7e:	2858      	cmp	r0, #88	@ 0x58
 8019f80:	d108      	bne.n	8019f94 <_strtoul_l.isra.0+0x48>
 8019f82:	786c      	ldrb	r4, [r5, #1]
 8019f84:	3502      	adds	r5, #2
 8019f86:	2310      	movs	r3, #16
 8019f88:	e00a      	b.n	8019fa0 <_strtoul_l.isra.0+0x54>
 8019f8a:	2c2b      	cmp	r4, #43	@ 0x2b
 8019f8c:	bf04      	itt	eq
 8019f8e:	782c      	ldrbeq	r4, [r5, #0]
 8019f90:	1c85      	addeq	r5, r0, #2
 8019f92:	e7ec      	b.n	8019f6e <_strtoul_l.isra.0+0x22>
 8019f94:	2b00      	cmp	r3, #0
 8019f96:	d1f6      	bne.n	8019f86 <_strtoul_l.isra.0+0x3a>
 8019f98:	2c30      	cmp	r4, #48	@ 0x30
 8019f9a:	bf14      	ite	ne
 8019f9c:	230a      	movne	r3, #10
 8019f9e:	2308      	moveq	r3, #8
 8019fa0:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8019fa4:	2600      	movs	r6, #0
 8019fa6:	fbb8 f8f3 	udiv	r8, r8, r3
 8019faa:	fb03 f908 	mul.w	r9, r3, r8
 8019fae:	ea6f 0909 	mvn.w	r9, r9
 8019fb2:	4630      	mov	r0, r6
 8019fb4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019fb8:	f1bc 0f09 	cmp.w	ip, #9
 8019fbc:	d810      	bhi.n	8019fe0 <_strtoul_l.isra.0+0x94>
 8019fbe:	4664      	mov	r4, ip
 8019fc0:	42a3      	cmp	r3, r4
 8019fc2:	dd1e      	ble.n	801a002 <_strtoul_l.isra.0+0xb6>
 8019fc4:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8019fc8:	d007      	beq.n	8019fda <_strtoul_l.isra.0+0x8e>
 8019fca:	4580      	cmp	r8, r0
 8019fcc:	d316      	bcc.n	8019ffc <_strtoul_l.isra.0+0xb0>
 8019fce:	d101      	bne.n	8019fd4 <_strtoul_l.isra.0+0x88>
 8019fd0:	45a1      	cmp	r9, r4
 8019fd2:	db13      	blt.n	8019ffc <_strtoul_l.isra.0+0xb0>
 8019fd4:	fb00 4003 	mla	r0, r0, r3, r4
 8019fd8:	2601      	movs	r6, #1
 8019fda:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019fde:	e7e9      	b.n	8019fb4 <_strtoul_l.isra.0+0x68>
 8019fe0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8019fe4:	f1bc 0f19 	cmp.w	ip, #25
 8019fe8:	d801      	bhi.n	8019fee <_strtoul_l.isra.0+0xa2>
 8019fea:	3c37      	subs	r4, #55	@ 0x37
 8019fec:	e7e8      	b.n	8019fc0 <_strtoul_l.isra.0+0x74>
 8019fee:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8019ff2:	f1bc 0f19 	cmp.w	ip, #25
 8019ff6:	d804      	bhi.n	801a002 <_strtoul_l.isra.0+0xb6>
 8019ff8:	3c57      	subs	r4, #87	@ 0x57
 8019ffa:	e7e1      	b.n	8019fc0 <_strtoul_l.isra.0+0x74>
 8019ffc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801a000:	e7eb      	b.n	8019fda <_strtoul_l.isra.0+0x8e>
 801a002:	1c73      	adds	r3, r6, #1
 801a004:	d106      	bne.n	801a014 <_strtoul_l.isra.0+0xc8>
 801a006:	2322      	movs	r3, #34	@ 0x22
 801a008:	f8ce 3000 	str.w	r3, [lr]
 801a00c:	4630      	mov	r0, r6
 801a00e:	b932      	cbnz	r2, 801a01e <_strtoul_l.isra.0+0xd2>
 801a010:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a014:	b107      	cbz	r7, 801a018 <_strtoul_l.isra.0+0xcc>
 801a016:	4240      	negs	r0, r0
 801a018:	2a00      	cmp	r2, #0
 801a01a:	d0f9      	beq.n	801a010 <_strtoul_l.isra.0+0xc4>
 801a01c:	b106      	cbz	r6, 801a020 <_strtoul_l.isra.0+0xd4>
 801a01e:	1e69      	subs	r1, r5, #1
 801a020:	6011      	str	r1, [r2, #0]
 801a022:	e7f5      	b.n	801a010 <_strtoul_l.isra.0+0xc4>
 801a024:	0801c0df 	.word	0x0801c0df

0801a028 <strtoul>:
 801a028:	4613      	mov	r3, r2
 801a02a:	460a      	mov	r2, r1
 801a02c:	4601      	mov	r1, r0
 801a02e:	4802      	ldr	r0, [pc, #8]	@ (801a038 <strtoul+0x10>)
 801a030:	6800      	ldr	r0, [r0, #0]
 801a032:	f7ff bf8b 	b.w	8019f4c <_strtoul_l.isra.0>
 801a036:	bf00      	nop
 801a038:	20000290 	.word	0x20000290

0801a03c <std>:
 801a03c:	2300      	movs	r3, #0
 801a03e:	b510      	push	{r4, lr}
 801a040:	4604      	mov	r4, r0
 801a042:	e9c0 3300 	strd	r3, r3, [r0]
 801a046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a04a:	6083      	str	r3, [r0, #8]
 801a04c:	8181      	strh	r1, [r0, #12]
 801a04e:	6643      	str	r3, [r0, #100]	@ 0x64
 801a050:	81c2      	strh	r2, [r0, #14]
 801a052:	6183      	str	r3, [r0, #24]
 801a054:	4619      	mov	r1, r3
 801a056:	2208      	movs	r2, #8
 801a058:	305c      	adds	r0, #92	@ 0x5c
 801a05a:	f000 fa91 	bl	801a580 <memset>
 801a05e:	4b0d      	ldr	r3, [pc, #52]	@ (801a094 <std+0x58>)
 801a060:	6263      	str	r3, [r4, #36]	@ 0x24
 801a062:	4b0d      	ldr	r3, [pc, #52]	@ (801a098 <std+0x5c>)
 801a064:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a066:	4b0d      	ldr	r3, [pc, #52]	@ (801a09c <std+0x60>)
 801a068:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a06a:	4b0d      	ldr	r3, [pc, #52]	@ (801a0a0 <std+0x64>)
 801a06c:	6323      	str	r3, [r4, #48]	@ 0x30
 801a06e:	4b0d      	ldr	r3, [pc, #52]	@ (801a0a4 <std+0x68>)
 801a070:	6224      	str	r4, [r4, #32]
 801a072:	429c      	cmp	r4, r3
 801a074:	d006      	beq.n	801a084 <std+0x48>
 801a076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a07a:	4294      	cmp	r4, r2
 801a07c:	d002      	beq.n	801a084 <std+0x48>
 801a07e:	33d0      	adds	r3, #208	@ 0xd0
 801a080:	429c      	cmp	r4, r3
 801a082:	d105      	bne.n	801a090 <std+0x54>
 801a084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a08c:	f000 bb36 	b.w	801a6fc <__retarget_lock_init_recursive>
 801a090:	bd10      	pop	{r4, pc}
 801a092:	bf00      	nop
 801a094:	0801a305 	.word	0x0801a305
 801a098:	0801a327 	.word	0x0801a327
 801a09c:	0801a35f 	.word	0x0801a35f
 801a0a0:	0801a383 	.word	0x0801a383
 801a0a4:	2000b0bc 	.word	0x2000b0bc

0801a0a8 <stdio_exit_handler>:
 801a0a8:	4a02      	ldr	r2, [pc, #8]	@ (801a0b4 <stdio_exit_handler+0xc>)
 801a0aa:	4903      	ldr	r1, [pc, #12]	@ (801a0b8 <stdio_exit_handler+0x10>)
 801a0ac:	4803      	ldr	r0, [pc, #12]	@ (801a0bc <stdio_exit_handler+0x14>)
 801a0ae:	f000 b869 	b.w	801a184 <_fwalk_sglue>
 801a0b2:	bf00      	nop
 801a0b4:	20000284 	.word	0x20000284
 801a0b8:	0801b17d 	.word	0x0801b17d
 801a0bc:	20000294 	.word	0x20000294

0801a0c0 <cleanup_stdio>:
 801a0c0:	6841      	ldr	r1, [r0, #4]
 801a0c2:	4b0c      	ldr	r3, [pc, #48]	@ (801a0f4 <cleanup_stdio+0x34>)
 801a0c4:	4299      	cmp	r1, r3
 801a0c6:	b510      	push	{r4, lr}
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	d001      	beq.n	801a0d0 <cleanup_stdio+0x10>
 801a0cc:	f001 f856 	bl	801b17c <_fflush_r>
 801a0d0:	68a1      	ldr	r1, [r4, #8]
 801a0d2:	4b09      	ldr	r3, [pc, #36]	@ (801a0f8 <cleanup_stdio+0x38>)
 801a0d4:	4299      	cmp	r1, r3
 801a0d6:	d002      	beq.n	801a0de <cleanup_stdio+0x1e>
 801a0d8:	4620      	mov	r0, r4
 801a0da:	f001 f84f 	bl	801b17c <_fflush_r>
 801a0de:	68e1      	ldr	r1, [r4, #12]
 801a0e0:	4b06      	ldr	r3, [pc, #24]	@ (801a0fc <cleanup_stdio+0x3c>)
 801a0e2:	4299      	cmp	r1, r3
 801a0e4:	d004      	beq.n	801a0f0 <cleanup_stdio+0x30>
 801a0e6:	4620      	mov	r0, r4
 801a0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0ec:	f001 b846 	b.w	801b17c <_fflush_r>
 801a0f0:	bd10      	pop	{r4, pc}
 801a0f2:	bf00      	nop
 801a0f4:	2000b0bc 	.word	0x2000b0bc
 801a0f8:	2000b124 	.word	0x2000b124
 801a0fc:	2000b18c 	.word	0x2000b18c

0801a100 <global_stdio_init.part.0>:
 801a100:	b510      	push	{r4, lr}
 801a102:	4b0b      	ldr	r3, [pc, #44]	@ (801a130 <global_stdio_init.part.0+0x30>)
 801a104:	4c0b      	ldr	r4, [pc, #44]	@ (801a134 <global_stdio_init.part.0+0x34>)
 801a106:	4a0c      	ldr	r2, [pc, #48]	@ (801a138 <global_stdio_init.part.0+0x38>)
 801a108:	601a      	str	r2, [r3, #0]
 801a10a:	4620      	mov	r0, r4
 801a10c:	2200      	movs	r2, #0
 801a10e:	2104      	movs	r1, #4
 801a110:	f7ff ff94 	bl	801a03c <std>
 801a114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a118:	2201      	movs	r2, #1
 801a11a:	2109      	movs	r1, #9
 801a11c:	f7ff ff8e 	bl	801a03c <std>
 801a120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a124:	2202      	movs	r2, #2
 801a126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a12a:	2112      	movs	r1, #18
 801a12c:	f7ff bf86 	b.w	801a03c <std>
 801a130:	2000b1f4 	.word	0x2000b1f4
 801a134:	2000b0bc 	.word	0x2000b0bc
 801a138:	0801a0a9 	.word	0x0801a0a9

0801a13c <__sfp_lock_acquire>:
 801a13c:	4801      	ldr	r0, [pc, #4]	@ (801a144 <__sfp_lock_acquire+0x8>)
 801a13e:	f000 bade 	b.w	801a6fe <__retarget_lock_acquire_recursive>
 801a142:	bf00      	nop
 801a144:	2000b1fe 	.word	0x2000b1fe

0801a148 <__sfp_lock_release>:
 801a148:	4801      	ldr	r0, [pc, #4]	@ (801a150 <__sfp_lock_release+0x8>)
 801a14a:	f000 bad9 	b.w	801a700 <__retarget_lock_release_recursive>
 801a14e:	bf00      	nop
 801a150:	2000b1fe 	.word	0x2000b1fe

0801a154 <__sinit>:
 801a154:	b510      	push	{r4, lr}
 801a156:	4604      	mov	r4, r0
 801a158:	f7ff fff0 	bl	801a13c <__sfp_lock_acquire>
 801a15c:	6a23      	ldr	r3, [r4, #32]
 801a15e:	b11b      	cbz	r3, 801a168 <__sinit+0x14>
 801a160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a164:	f7ff bff0 	b.w	801a148 <__sfp_lock_release>
 801a168:	4b04      	ldr	r3, [pc, #16]	@ (801a17c <__sinit+0x28>)
 801a16a:	6223      	str	r3, [r4, #32]
 801a16c:	4b04      	ldr	r3, [pc, #16]	@ (801a180 <__sinit+0x2c>)
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d1f5      	bne.n	801a160 <__sinit+0xc>
 801a174:	f7ff ffc4 	bl	801a100 <global_stdio_init.part.0>
 801a178:	e7f2      	b.n	801a160 <__sinit+0xc>
 801a17a:	bf00      	nop
 801a17c:	0801a0c1 	.word	0x0801a0c1
 801a180:	2000b1f4 	.word	0x2000b1f4

0801a184 <_fwalk_sglue>:
 801a184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a188:	4607      	mov	r7, r0
 801a18a:	4688      	mov	r8, r1
 801a18c:	4614      	mov	r4, r2
 801a18e:	2600      	movs	r6, #0
 801a190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a194:	f1b9 0901 	subs.w	r9, r9, #1
 801a198:	d505      	bpl.n	801a1a6 <_fwalk_sglue+0x22>
 801a19a:	6824      	ldr	r4, [r4, #0]
 801a19c:	2c00      	cmp	r4, #0
 801a19e:	d1f7      	bne.n	801a190 <_fwalk_sglue+0xc>
 801a1a0:	4630      	mov	r0, r6
 801a1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a1a6:	89ab      	ldrh	r3, [r5, #12]
 801a1a8:	2b01      	cmp	r3, #1
 801a1aa:	d907      	bls.n	801a1bc <_fwalk_sglue+0x38>
 801a1ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a1b0:	3301      	adds	r3, #1
 801a1b2:	d003      	beq.n	801a1bc <_fwalk_sglue+0x38>
 801a1b4:	4629      	mov	r1, r5
 801a1b6:	4638      	mov	r0, r7
 801a1b8:	47c0      	blx	r8
 801a1ba:	4306      	orrs	r6, r0
 801a1bc:	3568      	adds	r5, #104	@ 0x68
 801a1be:	e7e9      	b.n	801a194 <_fwalk_sglue+0x10>

0801a1c0 <_fwrite_r>:
 801a1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c4:	9c08      	ldr	r4, [sp, #32]
 801a1c6:	468a      	mov	sl, r1
 801a1c8:	4690      	mov	r8, r2
 801a1ca:	fb02 f903 	mul.w	r9, r2, r3
 801a1ce:	4606      	mov	r6, r0
 801a1d0:	b118      	cbz	r0, 801a1da <_fwrite_r+0x1a>
 801a1d2:	6a03      	ldr	r3, [r0, #32]
 801a1d4:	b90b      	cbnz	r3, 801a1da <_fwrite_r+0x1a>
 801a1d6:	f7ff ffbd 	bl	801a154 <__sinit>
 801a1da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a1dc:	07dd      	lsls	r5, r3, #31
 801a1de:	d405      	bmi.n	801a1ec <_fwrite_r+0x2c>
 801a1e0:	89a3      	ldrh	r3, [r4, #12]
 801a1e2:	0598      	lsls	r0, r3, #22
 801a1e4:	d402      	bmi.n	801a1ec <_fwrite_r+0x2c>
 801a1e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a1e8:	f000 fa89 	bl	801a6fe <__retarget_lock_acquire_recursive>
 801a1ec:	89a3      	ldrh	r3, [r4, #12]
 801a1ee:	0719      	lsls	r1, r3, #28
 801a1f0:	d516      	bpl.n	801a220 <_fwrite_r+0x60>
 801a1f2:	6923      	ldr	r3, [r4, #16]
 801a1f4:	b1a3      	cbz	r3, 801a220 <_fwrite_r+0x60>
 801a1f6:	2500      	movs	r5, #0
 801a1f8:	454d      	cmp	r5, r9
 801a1fa:	d01f      	beq.n	801a23c <_fwrite_r+0x7c>
 801a1fc:	68a7      	ldr	r7, [r4, #8]
 801a1fe:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801a202:	3f01      	subs	r7, #1
 801a204:	2f00      	cmp	r7, #0
 801a206:	60a7      	str	r7, [r4, #8]
 801a208:	da04      	bge.n	801a214 <_fwrite_r+0x54>
 801a20a:	69a3      	ldr	r3, [r4, #24]
 801a20c:	429f      	cmp	r7, r3
 801a20e:	db0f      	blt.n	801a230 <_fwrite_r+0x70>
 801a210:	290a      	cmp	r1, #10
 801a212:	d00d      	beq.n	801a230 <_fwrite_r+0x70>
 801a214:	6823      	ldr	r3, [r4, #0]
 801a216:	1c5a      	adds	r2, r3, #1
 801a218:	6022      	str	r2, [r4, #0]
 801a21a:	7019      	strb	r1, [r3, #0]
 801a21c:	3501      	adds	r5, #1
 801a21e:	e7eb      	b.n	801a1f8 <_fwrite_r+0x38>
 801a220:	4621      	mov	r1, r4
 801a222:	4630      	mov	r0, r6
 801a224:	f000 f92c 	bl	801a480 <__swsetup_r>
 801a228:	2800      	cmp	r0, #0
 801a22a:	d0e4      	beq.n	801a1f6 <_fwrite_r+0x36>
 801a22c:	2500      	movs	r5, #0
 801a22e:	e005      	b.n	801a23c <_fwrite_r+0x7c>
 801a230:	4622      	mov	r2, r4
 801a232:	4630      	mov	r0, r6
 801a234:	f000 f8e6 	bl	801a404 <__swbuf_r>
 801a238:	3001      	adds	r0, #1
 801a23a:	d1ef      	bne.n	801a21c <_fwrite_r+0x5c>
 801a23c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a23e:	07da      	lsls	r2, r3, #31
 801a240:	d405      	bmi.n	801a24e <_fwrite_r+0x8e>
 801a242:	89a3      	ldrh	r3, [r4, #12]
 801a244:	059b      	lsls	r3, r3, #22
 801a246:	d402      	bmi.n	801a24e <_fwrite_r+0x8e>
 801a248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a24a:	f000 fa59 	bl	801a700 <__retarget_lock_release_recursive>
 801a24e:	fbb5 f0f8 	udiv	r0, r5, r8
 801a252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801a258 <fwrite>:
 801a258:	b507      	push	{r0, r1, r2, lr}
 801a25a:	9300      	str	r3, [sp, #0]
 801a25c:	4613      	mov	r3, r2
 801a25e:	460a      	mov	r2, r1
 801a260:	4601      	mov	r1, r0
 801a262:	4803      	ldr	r0, [pc, #12]	@ (801a270 <fwrite+0x18>)
 801a264:	6800      	ldr	r0, [r0, #0]
 801a266:	f7ff ffab 	bl	801a1c0 <_fwrite_r>
 801a26a:	b003      	add	sp, #12
 801a26c:	f85d fb04 	ldr.w	pc, [sp], #4
 801a270:	20000290 	.word	0x20000290

0801a274 <iprintf>:
 801a274:	b40f      	push	{r0, r1, r2, r3}
 801a276:	b507      	push	{r0, r1, r2, lr}
 801a278:	4906      	ldr	r1, [pc, #24]	@ (801a294 <iprintf+0x20>)
 801a27a:	ab04      	add	r3, sp, #16
 801a27c:	6808      	ldr	r0, [r1, #0]
 801a27e:	f853 2b04 	ldr.w	r2, [r3], #4
 801a282:	6881      	ldr	r1, [r0, #8]
 801a284:	9301      	str	r3, [sp, #4]
 801a286:	f000 fc51 	bl	801ab2c <_vfiprintf_r>
 801a28a:	b003      	add	sp, #12
 801a28c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a290:	b004      	add	sp, #16
 801a292:	4770      	bx	lr
 801a294:	20000290 	.word	0x20000290

0801a298 <sniprintf>:
 801a298:	b40c      	push	{r2, r3}
 801a29a:	b530      	push	{r4, r5, lr}
 801a29c:	4b18      	ldr	r3, [pc, #96]	@ (801a300 <sniprintf+0x68>)
 801a29e:	1e0c      	subs	r4, r1, #0
 801a2a0:	681d      	ldr	r5, [r3, #0]
 801a2a2:	b09d      	sub	sp, #116	@ 0x74
 801a2a4:	da08      	bge.n	801a2b8 <sniprintf+0x20>
 801a2a6:	238b      	movs	r3, #139	@ 0x8b
 801a2a8:	602b      	str	r3, [r5, #0]
 801a2aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a2ae:	b01d      	add	sp, #116	@ 0x74
 801a2b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a2b4:	b002      	add	sp, #8
 801a2b6:	4770      	bx	lr
 801a2b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a2bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a2c0:	f04f 0300 	mov.w	r3, #0
 801a2c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a2c6:	bf14      	ite	ne
 801a2c8:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a2cc:	4623      	moveq	r3, r4
 801a2ce:	9304      	str	r3, [sp, #16]
 801a2d0:	9307      	str	r3, [sp, #28]
 801a2d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a2d6:	9002      	str	r0, [sp, #8]
 801a2d8:	9006      	str	r0, [sp, #24]
 801a2da:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a2de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a2e0:	ab21      	add	r3, sp, #132	@ 0x84
 801a2e2:	a902      	add	r1, sp, #8
 801a2e4:	4628      	mov	r0, r5
 801a2e6:	9301      	str	r3, [sp, #4]
 801a2e8:	f000 fafa 	bl	801a8e0 <_svfiprintf_r>
 801a2ec:	1c43      	adds	r3, r0, #1
 801a2ee:	bfbc      	itt	lt
 801a2f0:	238b      	movlt	r3, #139	@ 0x8b
 801a2f2:	602b      	strlt	r3, [r5, #0]
 801a2f4:	2c00      	cmp	r4, #0
 801a2f6:	d0da      	beq.n	801a2ae <sniprintf+0x16>
 801a2f8:	9b02      	ldr	r3, [sp, #8]
 801a2fa:	2200      	movs	r2, #0
 801a2fc:	701a      	strb	r2, [r3, #0]
 801a2fe:	e7d6      	b.n	801a2ae <sniprintf+0x16>
 801a300:	20000290 	.word	0x20000290

0801a304 <__sread>:
 801a304:	b510      	push	{r4, lr}
 801a306:	460c      	mov	r4, r1
 801a308:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a30c:	f000 f998 	bl	801a640 <_read_r>
 801a310:	2800      	cmp	r0, #0
 801a312:	bfab      	itete	ge
 801a314:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a316:	89a3      	ldrhlt	r3, [r4, #12]
 801a318:	181b      	addge	r3, r3, r0
 801a31a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a31e:	bfac      	ite	ge
 801a320:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a322:	81a3      	strhlt	r3, [r4, #12]
 801a324:	bd10      	pop	{r4, pc}

0801a326 <__swrite>:
 801a326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a32a:	461f      	mov	r7, r3
 801a32c:	898b      	ldrh	r3, [r1, #12]
 801a32e:	05db      	lsls	r3, r3, #23
 801a330:	4605      	mov	r5, r0
 801a332:	460c      	mov	r4, r1
 801a334:	4616      	mov	r6, r2
 801a336:	d505      	bpl.n	801a344 <__swrite+0x1e>
 801a338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a33c:	2302      	movs	r3, #2
 801a33e:	2200      	movs	r2, #0
 801a340:	f000 f96c 	bl	801a61c <_lseek_r>
 801a344:	89a3      	ldrh	r3, [r4, #12]
 801a346:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a34a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a34e:	81a3      	strh	r3, [r4, #12]
 801a350:	4632      	mov	r2, r6
 801a352:	463b      	mov	r3, r7
 801a354:	4628      	mov	r0, r5
 801a356:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a35a:	f000 b993 	b.w	801a684 <_write_r>

0801a35e <__sseek>:
 801a35e:	b510      	push	{r4, lr}
 801a360:	460c      	mov	r4, r1
 801a362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a366:	f000 f959 	bl	801a61c <_lseek_r>
 801a36a:	1c43      	adds	r3, r0, #1
 801a36c:	89a3      	ldrh	r3, [r4, #12]
 801a36e:	bf15      	itete	ne
 801a370:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a372:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a376:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a37a:	81a3      	strheq	r3, [r4, #12]
 801a37c:	bf18      	it	ne
 801a37e:	81a3      	strhne	r3, [r4, #12]
 801a380:	bd10      	pop	{r4, pc}

0801a382 <__sclose>:
 801a382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a386:	f000 b939 	b.w	801a5fc <_close_r>

0801a38a <_vsniprintf_r>:
 801a38a:	b530      	push	{r4, r5, lr}
 801a38c:	4614      	mov	r4, r2
 801a38e:	2c00      	cmp	r4, #0
 801a390:	b09b      	sub	sp, #108	@ 0x6c
 801a392:	4605      	mov	r5, r0
 801a394:	461a      	mov	r2, r3
 801a396:	da05      	bge.n	801a3a4 <_vsniprintf_r+0x1a>
 801a398:	238b      	movs	r3, #139	@ 0x8b
 801a39a:	6003      	str	r3, [r0, #0]
 801a39c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a3a0:	b01b      	add	sp, #108	@ 0x6c
 801a3a2:	bd30      	pop	{r4, r5, pc}
 801a3a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a3a8:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a3ac:	f04f 0300 	mov.w	r3, #0
 801a3b0:	9319      	str	r3, [sp, #100]	@ 0x64
 801a3b2:	bf14      	ite	ne
 801a3b4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801a3b8:	4623      	moveq	r3, r4
 801a3ba:	9302      	str	r3, [sp, #8]
 801a3bc:	9305      	str	r3, [sp, #20]
 801a3be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a3c2:	9100      	str	r1, [sp, #0]
 801a3c4:	9104      	str	r1, [sp, #16]
 801a3c6:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a3ca:	4669      	mov	r1, sp
 801a3cc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a3ce:	f000 fa87 	bl	801a8e0 <_svfiprintf_r>
 801a3d2:	1c43      	adds	r3, r0, #1
 801a3d4:	bfbc      	itt	lt
 801a3d6:	238b      	movlt	r3, #139	@ 0x8b
 801a3d8:	602b      	strlt	r3, [r5, #0]
 801a3da:	2c00      	cmp	r4, #0
 801a3dc:	d0e0      	beq.n	801a3a0 <_vsniprintf_r+0x16>
 801a3de:	9b00      	ldr	r3, [sp, #0]
 801a3e0:	2200      	movs	r2, #0
 801a3e2:	701a      	strb	r2, [r3, #0]
 801a3e4:	e7dc      	b.n	801a3a0 <_vsniprintf_r+0x16>
	...

0801a3e8 <vsniprintf>:
 801a3e8:	b507      	push	{r0, r1, r2, lr}
 801a3ea:	9300      	str	r3, [sp, #0]
 801a3ec:	4613      	mov	r3, r2
 801a3ee:	460a      	mov	r2, r1
 801a3f0:	4601      	mov	r1, r0
 801a3f2:	4803      	ldr	r0, [pc, #12]	@ (801a400 <vsniprintf+0x18>)
 801a3f4:	6800      	ldr	r0, [r0, #0]
 801a3f6:	f7ff ffc8 	bl	801a38a <_vsniprintf_r>
 801a3fa:	b003      	add	sp, #12
 801a3fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801a400:	20000290 	.word	0x20000290

0801a404 <__swbuf_r>:
 801a404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a406:	460e      	mov	r6, r1
 801a408:	4614      	mov	r4, r2
 801a40a:	4605      	mov	r5, r0
 801a40c:	b118      	cbz	r0, 801a416 <__swbuf_r+0x12>
 801a40e:	6a03      	ldr	r3, [r0, #32]
 801a410:	b90b      	cbnz	r3, 801a416 <__swbuf_r+0x12>
 801a412:	f7ff fe9f 	bl	801a154 <__sinit>
 801a416:	69a3      	ldr	r3, [r4, #24]
 801a418:	60a3      	str	r3, [r4, #8]
 801a41a:	89a3      	ldrh	r3, [r4, #12]
 801a41c:	071a      	lsls	r2, r3, #28
 801a41e:	d501      	bpl.n	801a424 <__swbuf_r+0x20>
 801a420:	6923      	ldr	r3, [r4, #16]
 801a422:	b943      	cbnz	r3, 801a436 <__swbuf_r+0x32>
 801a424:	4621      	mov	r1, r4
 801a426:	4628      	mov	r0, r5
 801a428:	f000 f82a 	bl	801a480 <__swsetup_r>
 801a42c:	b118      	cbz	r0, 801a436 <__swbuf_r+0x32>
 801a42e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801a432:	4638      	mov	r0, r7
 801a434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a436:	6823      	ldr	r3, [r4, #0]
 801a438:	6922      	ldr	r2, [r4, #16]
 801a43a:	1a98      	subs	r0, r3, r2
 801a43c:	6963      	ldr	r3, [r4, #20]
 801a43e:	b2f6      	uxtb	r6, r6
 801a440:	4283      	cmp	r3, r0
 801a442:	4637      	mov	r7, r6
 801a444:	dc05      	bgt.n	801a452 <__swbuf_r+0x4e>
 801a446:	4621      	mov	r1, r4
 801a448:	4628      	mov	r0, r5
 801a44a:	f000 fe97 	bl	801b17c <_fflush_r>
 801a44e:	2800      	cmp	r0, #0
 801a450:	d1ed      	bne.n	801a42e <__swbuf_r+0x2a>
 801a452:	68a3      	ldr	r3, [r4, #8]
 801a454:	3b01      	subs	r3, #1
 801a456:	60a3      	str	r3, [r4, #8]
 801a458:	6823      	ldr	r3, [r4, #0]
 801a45a:	1c5a      	adds	r2, r3, #1
 801a45c:	6022      	str	r2, [r4, #0]
 801a45e:	701e      	strb	r6, [r3, #0]
 801a460:	6962      	ldr	r2, [r4, #20]
 801a462:	1c43      	adds	r3, r0, #1
 801a464:	429a      	cmp	r2, r3
 801a466:	d004      	beq.n	801a472 <__swbuf_r+0x6e>
 801a468:	89a3      	ldrh	r3, [r4, #12]
 801a46a:	07db      	lsls	r3, r3, #31
 801a46c:	d5e1      	bpl.n	801a432 <__swbuf_r+0x2e>
 801a46e:	2e0a      	cmp	r6, #10
 801a470:	d1df      	bne.n	801a432 <__swbuf_r+0x2e>
 801a472:	4621      	mov	r1, r4
 801a474:	4628      	mov	r0, r5
 801a476:	f000 fe81 	bl	801b17c <_fflush_r>
 801a47a:	2800      	cmp	r0, #0
 801a47c:	d0d9      	beq.n	801a432 <__swbuf_r+0x2e>
 801a47e:	e7d6      	b.n	801a42e <__swbuf_r+0x2a>

0801a480 <__swsetup_r>:
 801a480:	b538      	push	{r3, r4, r5, lr}
 801a482:	4b29      	ldr	r3, [pc, #164]	@ (801a528 <__swsetup_r+0xa8>)
 801a484:	4605      	mov	r5, r0
 801a486:	6818      	ldr	r0, [r3, #0]
 801a488:	460c      	mov	r4, r1
 801a48a:	b118      	cbz	r0, 801a494 <__swsetup_r+0x14>
 801a48c:	6a03      	ldr	r3, [r0, #32]
 801a48e:	b90b      	cbnz	r3, 801a494 <__swsetup_r+0x14>
 801a490:	f7ff fe60 	bl	801a154 <__sinit>
 801a494:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a498:	0719      	lsls	r1, r3, #28
 801a49a:	d422      	bmi.n	801a4e2 <__swsetup_r+0x62>
 801a49c:	06da      	lsls	r2, r3, #27
 801a49e:	d407      	bmi.n	801a4b0 <__swsetup_r+0x30>
 801a4a0:	2209      	movs	r2, #9
 801a4a2:	602a      	str	r2, [r5, #0]
 801a4a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a4a8:	81a3      	strh	r3, [r4, #12]
 801a4aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a4ae:	e033      	b.n	801a518 <__swsetup_r+0x98>
 801a4b0:	0758      	lsls	r0, r3, #29
 801a4b2:	d512      	bpl.n	801a4da <__swsetup_r+0x5a>
 801a4b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a4b6:	b141      	cbz	r1, 801a4ca <__swsetup_r+0x4a>
 801a4b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a4bc:	4299      	cmp	r1, r3
 801a4be:	d002      	beq.n	801a4c6 <__swsetup_r+0x46>
 801a4c0:	4628      	mov	r0, r5
 801a4c2:	f000 f95f 	bl	801a784 <_free_r>
 801a4c6:	2300      	movs	r3, #0
 801a4c8:	6363      	str	r3, [r4, #52]	@ 0x34
 801a4ca:	89a3      	ldrh	r3, [r4, #12]
 801a4cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a4d0:	81a3      	strh	r3, [r4, #12]
 801a4d2:	2300      	movs	r3, #0
 801a4d4:	6063      	str	r3, [r4, #4]
 801a4d6:	6923      	ldr	r3, [r4, #16]
 801a4d8:	6023      	str	r3, [r4, #0]
 801a4da:	89a3      	ldrh	r3, [r4, #12]
 801a4dc:	f043 0308 	orr.w	r3, r3, #8
 801a4e0:	81a3      	strh	r3, [r4, #12]
 801a4e2:	6923      	ldr	r3, [r4, #16]
 801a4e4:	b94b      	cbnz	r3, 801a4fa <__swsetup_r+0x7a>
 801a4e6:	89a3      	ldrh	r3, [r4, #12]
 801a4e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a4ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a4f0:	d003      	beq.n	801a4fa <__swsetup_r+0x7a>
 801a4f2:	4621      	mov	r1, r4
 801a4f4:	4628      	mov	r0, r5
 801a4f6:	f000 fea1 	bl	801b23c <__smakebuf_r>
 801a4fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4fe:	f013 0201 	ands.w	r2, r3, #1
 801a502:	d00a      	beq.n	801a51a <__swsetup_r+0x9a>
 801a504:	2200      	movs	r2, #0
 801a506:	60a2      	str	r2, [r4, #8]
 801a508:	6962      	ldr	r2, [r4, #20]
 801a50a:	4252      	negs	r2, r2
 801a50c:	61a2      	str	r2, [r4, #24]
 801a50e:	6922      	ldr	r2, [r4, #16]
 801a510:	b942      	cbnz	r2, 801a524 <__swsetup_r+0xa4>
 801a512:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a516:	d1c5      	bne.n	801a4a4 <__swsetup_r+0x24>
 801a518:	bd38      	pop	{r3, r4, r5, pc}
 801a51a:	0799      	lsls	r1, r3, #30
 801a51c:	bf58      	it	pl
 801a51e:	6962      	ldrpl	r2, [r4, #20]
 801a520:	60a2      	str	r2, [r4, #8]
 801a522:	e7f4      	b.n	801a50e <__swsetup_r+0x8e>
 801a524:	2000      	movs	r0, #0
 801a526:	e7f7      	b.n	801a518 <__swsetup_r+0x98>
 801a528:	20000290 	.word	0x20000290

0801a52c <memcmp>:
 801a52c:	b510      	push	{r4, lr}
 801a52e:	3901      	subs	r1, #1
 801a530:	4402      	add	r2, r0
 801a532:	4290      	cmp	r0, r2
 801a534:	d101      	bne.n	801a53a <memcmp+0xe>
 801a536:	2000      	movs	r0, #0
 801a538:	e005      	b.n	801a546 <memcmp+0x1a>
 801a53a:	7803      	ldrb	r3, [r0, #0]
 801a53c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a540:	42a3      	cmp	r3, r4
 801a542:	d001      	beq.n	801a548 <memcmp+0x1c>
 801a544:	1b18      	subs	r0, r3, r4
 801a546:	bd10      	pop	{r4, pc}
 801a548:	3001      	adds	r0, #1
 801a54a:	e7f2      	b.n	801a532 <memcmp+0x6>

0801a54c <memmove>:
 801a54c:	4288      	cmp	r0, r1
 801a54e:	b510      	push	{r4, lr}
 801a550:	eb01 0402 	add.w	r4, r1, r2
 801a554:	d902      	bls.n	801a55c <memmove+0x10>
 801a556:	4284      	cmp	r4, r0
 801a558:	4623      	mov	r3, r4
 801a55a:	d807      	bhi.n	801a56c <memmove+0x20>
 801a55c:	1e43      	subs	r3, r0, #1
 801a55e:	42a1      	cmp	r1, r4
 801a560:	d008      	beq.n	801a574 <memmove+0x28>
 801a562:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a566:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a56a:	e7f8      	b.n	801a55e <memmove+0x12>
 801a56c:	4402      	add	r2, r0
 801a56e:	4601      	mov	r1, r0
 801a570:	428a      	cmp	r2, r1
 801a572:	d100      	bne.n	801a576 <memmove+0x2a>
 801a574:	bd10      	pop	{r4, pc}
 801a576:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a57a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a57e:	e7f7      	b.n	801a570 <memmove+0x24>

0801a580 <memset>:
 801a580:	4402      	add	r2, r0
 801a582:	4603      	mov	r3, r0
 801a584:	4293      	cmp	r3, r2
 801a586:	d100      	bne.n	801a58a <memset+0xa>
 801a588:	4770      	bx	lr
 801a58a:	f803 1b01 	strb.w	r1, [r3], #1
 801a58e:	e7f9      	b.n	801a584 <memset+0x4>

0801a590 <strchr>:
 801a590:	b2c9      	uxtb	r1, r1
 801a592:	4603      	mov	r3, r0
 801a594:	4618      	mov	r0, r3
 801a596:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a59a:	b112      	cbz	r2, 801a5a2 <strchr+0x12>
 801a59c:	428a      	cmp	r2, r1
 801a59e:	d1f9      	bne.n	801a594 <strchr+0x4>
 801a5a0:	4770      	bx	lr
 801a5a2:	2900      	cmp	r1, #0
 801a5a4:	bf18      	it	ne
 801a5a6:	2000      	movne	r0, #0
 801a5a8:	4770      	bx	lr

0801a5aa <strncmp>:
 801a5aa:	b510      	push	{r4, lr}
 801a5ac:	b16a      	cbz	r2, 801a5ca <strncmp+0x20>
 801a5ae:	3901      	subs	r1, #1
 801a5b0:	1884      	adds	r4, r0, r2
 801a5b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a5b6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a5ba:	429a      	cmp	r2, r3
 801a5bc:	d103      	bne.n	801a5c6 <strncmp+0x1c>
 801a5be:	42a0      	cmp	r0, r4
 801a5c0:	d001      	beq.n	801a5c6 <strncmp+0x1c>
 801a5c2:	2a00      	cmp	r2, #0
 801a5c4:	d1f5      	bne.n	801a5b2 <strncmp+0x8>
 801a5c6:	1ad0      	subs	r0, r2, r3
 801a5c8:	bd10      	pop	{r4, pc}
 801a5ca:	4610      	mov	r0, r2
 801a5cc:	e7fc      	b.n	801a5c8 <strncmp+0x1e>

0801a5ce <strstr>:
 801a5ce:	780a      	ldrb	r2, [r1, #0]
 801a5d0:	b570      	push	{r4, r5, r6, lr}
 801a5d2:	b96a      	cbnz	r2, 801a5f0 <strstr+0x22>
 801a5d4:	bd70      	pop	{r4, r5, r6, pc}
 801a5d6:	429a      	cmp	r2, r3
 801a5d8:	d109      	bne.n	801a5ee <strstr+0x20>
 801a5da:	460c      	mov	r4, r1
 801a5dc:	4605      	mov	r5, r0
 801a5de:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d0f6      	beq.n	801a5d4 <strstr+0x6>
 801a5e6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801a5ea:	429e      	cmp	r6, r3
 801a5ec:	d0f7      	beq.n	801a5de <strstr+0x10>
 801a5ee:	3001      	adds	r0, #1
 801a5f0:	7803      	ldrb	r3, [r0, #0]
 801a5f2:	2b00      	cmp	r3, #0
 801a5f4:	d1ef      	bne.n	801a5d6 <strstr+0x8>
 801a5f6:	4618      	mov	r0, r3
 801a5f8:	e7ec      	b.n	801a5d4 <strstr+0x6>
	...

0801a5fc <_close_r>:
 801a5fc:	b538      	push	{r3, r4, r5, lr}
 801a5fe:	4d06      	ldr	r5, [pc, #24]	@ (801a618 <_close_r+0x1c>)
 801a600:	2300      	movs	r3, #0
 801a602:	4604      	mov	r4, r0
 801a604:	4608      	mov	r0, r1
 801a606:	602b      	str	r3, [r5, #0]
 801a608:	f7e8 f94a 	bl	80028a0 <_close>
 801a60c:	1c43      	adds	r3, r0, #1
 801a60e:	d102      	bne.n	801a616 <_close_r+0x1a>
 801a610:	682b      	ldr	r3, [r5, #0]
 801a612:	b103      	cbz	r3, 801a616 <_close_r+0x1a>
 801a614:	6023      	str	r3, [r4, #0]
 801a616:	bd38      	pop	{r3, r4, r5, pc}
 801a618:	2000b1f8 	.word	0x2000b1f8

0801a61c <_lseek_r>:
 801a61c:	b538      	push	{r3, r4, r5, lr}
 801a61e:	4d07      	ldr	r5, [pc, #28]	@ (801a63c <_lseek_r+0x20>)
 801a620:	4604      	mov	r4, r0
 801a622:	4608      	mov	r0, r1
 801a624:	4611      	mov	r1, r2
 801a626:	2200      	movs	r2, #0
 801a628:	602a      	str	r2, [r5, #0]
 801a62a:	461a      	mov	r2, r3
 801a62c:	f7e8 f95f 	bl	80028ee <_lseek>
 801a630:	1c43      	adds	r3, r0, #1
 801a632:	d102      	bne.n	801a63a <_lseek_r+0x1e>
 801a634:	682b      	ldr	r3, [r5, #0]
 801a636:	b103      	cbz	r3, 801a63a <_lseek_r+0x1e>
 801a638:	6023      	str	r3, [r4, #0]
 801a63a:	bd38      	pop	{r3, r4, r5, pc}
 801a63c:	2000b1f8 	.word	0x2000b1f8

0801a640 <_read_r>:
 801a640:	b538      	push	{r3, r4, r5, lr}
 801a642:	4d07      	ldr	r5, [pc, #28]	@ (801a660 <_read_r+0x20>)
 801a644:	4604      	mov	r4, r0
 801a646:	4608      	mov	r0, r1
 801a648:	4611      	mov	r1, r2
 801a64a:	2200      	movs	r2, #0
 801a64c:	602a      	str	r2, [r5, #0]
 801a64e:	461a      	mov	r2, r3
 801a650:	f7e8 f8ed 	bl	800282e <_read>
 801a654:	1c43      	adds	r3, r0, #1
 801a656:	d102      	bne.n	801a65e <_read_r+0x1e>
 801a658:	682b      	ldr	r3, [r5, #0]
 801a65a:	b103      	cbz	r3, 801a65e <_read_r+0x1e>
 801a65c:	6023      	str	r3, [r4, #0]
 801a65e:	bd38      	pop	{r3, r4, r5, pc}
 801a660:	2000b1f8 	.word	0x2000b1f8

0801a664 <_sbrk_r>:
 801a664:	b538      	push	{r3, r4, r5, lr}
 801a666:	4d06      	ldr	r5, [pc, #24]	@ (801a680 <_sbrk_r+0x1c>)
 801a668:	2300      	movs	r3, #0
 801a66a:	4604      	mov	r4, r0
 801a66c:	4608      	mov	r0, r1
 801a66e:	602b      	str	r3, [r5, #0]
 801a670:	f7e8 f94a 	bl	8002908 <_sbrk>
 801a674:	1c43      	adds	r3, r0, #1
 801a676:	d102      	bne.n	801a67e <_sbrk_r+0x1a>
 801a678:	682b      	ldr	r3, [r5, #0]
 801a67a:	b103      	cbz	r3, 801a67e <_sbrk_r+0x1a>
 801a67c:	6023      	str	r3, [r4, #0]
 801a67e:	bd38      	pop	{r3, r4, r5, pc}
 801a680:	2000b1f8 	.word	0x2000b1f8

0801a684 <_write_r>:
 801a684:	b538      	push	{r3, r4, r5, lr}
 801a686:	4d07      	ldr	r5, [pc, #28]	@ (801a6a4 <_write_r+0x20>)
 801a688:	4604      	mov	r4, r0
 801a68a:	4608      	mov	r0, r1
 801a68c:	4611      	mov	r1, r2
 801a68e:	2200      	movs	r2, #0
 801a690:	602a      	str	r2, [r5, #0]
 801a692:	461a      	mov	r2, r3
 801a694:	f7e8 f8e8 	bl	8002868 <_write>
 801a698:	1c43      	adds	r3, r0, #1
 801a69a:	d102      	bne.n	801a6a2 <_write_r+0x1e>
 801a69c:	682b      	ldr	r3, [r5, #0]
 801a69e:	b103      	cbz	r3, 801a6a2 <_write_r+0x1e>
 801a6a0:	6023      	str	r3, [r4, #0]
 801a6a2:	bd38      	pop	{r3, r4, r5, pc}
 801a6a4:	2000b1f8 	.word	0x2000b1f8

0801a6a8 <__errno>:
 801a6a8:	4b01      	ldr	r3, [pc, #4]	@ (801a6b0 <__errno+0x8>)
 801a6aa:	6818      	ldr	r0, [r3, #0]
 801a6ac:	4770      	bx	lr
 801a6ae:	bf00      	nop
 801a6b0:	20000290 	.word	0x20000290

0801a6b4 <__libc_init_array>:
 801a6b4:	b570      	push	{r4, r5, r6, lr}
 801a6b6:	4d0d      	ldr	r5, [pc, #52]	@ (801a6ec <__libc_init_array+0x38>)
 801a6b8:	4c0d      	ldr	r4, [pc, #52]	@ (801a6f0 <__libc_init_array+0x3c>)
 801a6ba:	1b64      	subs	r4, r4, r5
 801a6bc:	10a4      	asrs	r4, r4, #2
 801a6be:	2600      	movs	r6, #0
 801a6c0:	42a6      	cmp	r6, r4
 801a6c2:	d109      	bne.n	801a6d8 <__libc_init_array+0x24>
 801a6c4:	4d0b      	ldr	r5, [pc, #44]	@ (801a6f4 <__libc_init_array+0x40>)
 801a6c6:	4c0c      	ldr	r4, [pc, #48]	@ (801a6f8 <__libc_init_array+0x44>)
 801a6c8:	f000 fe62 	bl	801b390 <_init>
 801a6cc:	1b64      	subs	r4, r4, r5
 801a6ce:	10a4      	asrs	r4, r4, #2
 801a6d0:	2600      	movs	r6, #0
 801a6d2:	42a6      	cmp	r6, r4
 801a6d4:	d105      	bne.n	801a6e2 <__libc_init_array+0x2e>
 801a6d6:	bd70      	pop	{r4, r5, r6, pc}
 801a6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6dc:	4798      	blx	r3
 801a6de:	3601      	adds	r6, #1
 801a6e0:	e7ee      	b.n	801a6c0 <__libc_init_array+0xc>
 801a6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6e6:	4798      	blx	r3
 801a6e8:	3601      	adds	r6, #1
 801a6ea:	e7f2      	b.n	801a6d2 <__libc_init_array+0x1e>
 801a6ec:	0801c1e8 	.word	0x0801c1e8
 801a6f0:	0801c1e8 	.word	0x0801c1e8
 801a6f4:	0801c1e8 	.word	0x0801c1e8
 801a6f8:	0801c1f0 	.word	0x0801c1f0

0801a6fc <__retarget_lock_init_recursive>:
 801a6fc:	4770      	bx	lr

0801a6fe <__retarget_lock_acquire_recursive>:
 801a6fe:	4770      	bx	lr

0801a700 <__retarget_lock_release_recursive>:
 801a700:	4770      	bx	lr

0801a702 <strcpy>:
 801a702:	4603      	mov	r3, r0
 801a704:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a708:	f803 2b01 	strb.w	r2, [r3], #1
 801a70c:	2a00      	cmp	r2, #0
 801a70e:	d1f9      	bne.n	801a704 <strcpy+0x2>
 801a710:	4770      	bx	lr

0801a712 <memcpy>:
 801a712:	440a      	add	r2, r1
 801a714:	4291      	cmp	r1, r2
 801a716:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801a71a:	d100      	bne.n	801a71e <memcpy+0xc>
 801a71c:	4770      	bx	lr
 801a71e:	b510      	push	{r4, lr}
 801a720:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a724:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a728:	4291      	cmp	r1, r2
 801a72a:	d1f9      	bne.n	801a720 <memcpy+0xe>
 801a72c:	bd10      	pop	{r4, pc}
	...

0801a730 <__assert_func>:
 801a730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a732:	4614      	mov	r4, r2
 801a734:	461a      	mov	r2, r3
 801a736:	4b09      	ldr	r3, [pc, #36]	@ (801a75c <__assert_func+0x2c>)
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	4605      	mov	r5, r0
 801a73c:	68d8      	ldr	r0, [r3, #12]
 801a73e:	b14c      	cbz	r4, 801a754 <__assert_func+0x24>
 801a740:	4b07      	ldr	r3, [pc, #28]	@ (801a760 <__assert_func+0x30>)
 801a742:	9100      	str	r1, [sp, #0]
 801a744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a748:	4906      	ldr	r1, [pc, #24]	@ (801a764 <__assert_func+0x34>)
 801a74a:	462b      	mov	r3, r5
 801a74c:	f000 fd3e 	bl	801b1cc <fiprintf>
 801a750:	f000 fdd2 	bl	801b2f8 <abort>
 801a754:	4b04      	ldr	r3, [pc, #16]	@ (801a768 <__assert_func+0x38>)
 801a756:	461c      	mov	r4, r3
 801a758:	e7f3      	b.n	801a742 <__assert_func+0x12>
 801a75a:	bf00      	nop
 801a75c:	20000290 	.word	0x20000290
 801a760:	0801c06f 	.word	0x0801c06f
 801a764:	0801c07c 	.word	0x0801c07c
 801a768:	0801c0aa 	.word	0x0801c0aa

0801a76c <__env_lock>:
 801a76c:	4801      	ldr	r0, [pc, #4]	@ (801a774 <__env_lock+0x8>)
 801a76e:	f7ff bfc6 	b.w	801a6fe <__retarget_lock_acquire_recursive>
 801a772:	bf00      	nop
 801a774:	2000b1fc 	.word	0x2000b1fc

0801a778 <__env_unlock>:
 801a778:	4801      	ldr	r0, [pc, #4]	@ (801a780 <__env_unlock+0x8>)
 801a77a:	f7ff bfc1 	b.w	801a700 <__retarget_lock_release_recursive>
 801a77e:	bf00      	nop
 801a780:	2000b1fc 	.word	0x2000b1fc

0801a784 <_free_r>:
 801a784:	b538      	push	{r3, r4, r5, lr}
 801a786:	4605      	mov	r5, r0
 801a788:	2900      	cmp	r1, #0
 801a78a:	d041      	beq.n	801a810 <_free_r+0x8c>
 801a78c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a790:	1f0c      	subs	r4, r1, #4
 801a792:	2b00      	cmp	r3, #0
 801a794:	bfb8      	it	lt
 801a796:	18e4      	addlt	r4, r4, r3
 801a798:	f7ff fb2a 	bl	8019df0 <__malloc_lock>
 801a79c:	4a1d      	ldr	r2, [pc, #116]	@ (801a814 <_free_r+0x90>)
 801a79e:	6813      	ldr	r3, [r2, #0]
 801a7a0:	b933      	cbnz	r3, 801a7b0 <_free_r+0x2c>
 801a7a2:	6063      	str	r3, [r4, #4]
 801a7a4:	6014      	str	r4, [r2, #0]
 801a7a6:	4628      	mov	r0, r5
 801a7a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a7ac:	f7ff bb26 	b.w	8019dfc <__malloc_unlock>
 801a7b0:	42a3      	cmp	r3, r4
 801a7b2:	d908      	bls.n	801a7c6 <_free_r+0x42>
 801a7b4:	6820      	ldr	r0, [r4, #0]
 801a7b6:	1821      	adds	r1, r4, r0
 801a7b8:	428b      	cmp	r3, r1
 801a7ba:	bf01      	itttt	eq
 801a7bc:	6819      	ldreq	r1, [r3, #0]
 801a7be:	685b      	ldreq	r3, [r3, #4]
 801a7c0:	1809      	addeq	r1, r1, r0
 801a7c2:	6021      	streq	r1, [r4, #0]
 801a7c4:	e7ed      	b.n	801a7a2 <_free_r+0x1e>
 801a7c6:	461a      	mov	r2, r3
 801a7c8:	685b      	ldr	r3, [r3, #4]
 801a7ca:	b10b      	cbz	r3, 801a7d0 <_free_r+0x4c>
 801a7cc:	42a3      	cmp	r3, r4
 801a7ce:	d9fa      	bls.n	801a7c6 <_free_r+0x42>
 801a7d0:	6811      	ldr	r1, [r2, #0]
 801a7d2:	1850      	adds	r0, r2, r1
 801a7d4:	42a0      	cmp	r0, r4
 801a7d6:	d10b      	bne.n	801a7f0 <_free_r+0x6c>
 801a7d8:	6820      	ldr	r0, [r4, #0]
 801a7da:	4401      	add	r1, r0
 801a7dc:	1850      	adds	r0, r2, r1
 801a7de:	4283      	cmp	r3, r0
 801a7e0:	6011      	str	r1, [r2, #0]
 801a7e2:	d1e0      	bne.n	801a7a6 <_free_r+0x22>
 801a7e4:	6818      	ldr	r0, [r3, #0]
 801a7e6:	685b      	ldr	r3, [r3, #4]
 801a7e8:	6053      	str	r3, [r2, #4]
 801a7ea:	4408      	add	r0, r1
 801a7ec:	6010      	str	r0, [r2, #0]
 801a7ee:	e7da      	b.n	801a7a6 <_free_r+0x22>
 801a7f0:	d902      	bls.n	801a7f8 <_free_r+0x74>
 801a7f2:	230c      	movs	r3, #12
 801a7f4:	602b      	str	r3, [r5, #0]
 801a7f6:	e7d6      	b.n	801a7a6 <_free_r+0x22>
 801a7f8:	6820      	ldr	r0, [r4, #0]
 801a7fa:	1821      	adds	r1, r4, r0
 801a7fc:	428b      	cmp	r3, r1
 801a7fe:	bf04      	itt	eq
 801a800:	6819      	ldreq	r1, [r3, #0]
 801a802:	685b      	ldreq	r3, [r3, #4]
 801a804:	6063      	str	r3, [r4, #4]
 801a806:	bf04      	itt	eq
 801a808:	1809      	addeq	r1, r1, r0
 801a80a:	6021      	streq	r1, [r4, #0]
 801a80c:	6054      	str	r4, [r2, #4]
 801a80e:	e7ca      	b.n	801a7a6 <_free_r+0x22>
 801a810:	bd38      	pop	{r3, r4, r5, pc}
 801a812:	bf00      	nop
 801a814:	2000b0b8 	.word	0x2000b0b8

0801a818 <_malloc_usable_size_r>:
 801a818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a81c:	1f18      	subs	r0, r3, #4
 801a81e:	2b00      	cmp	r3, #0
 801a820:	bfbc      	itt	lt
 801a822:	580b      	ldrlt	r3, [r1, r0]
 801a824:	18c0      	addlt	r0, r0, r3
 801a826:	4770      	bx	lr

0801a828 <__ssputs_r>:
 801a828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a82c:	688e      	ldr	r6, [r1, #8]
 801a82e:	461f      	mov	r7, r3
 801a830:	42be      	cmp	r6, r7
 801a832:	680b      	ldr	r3, [r1, #0]
 801a834:	4682      	mov	sl, r0
 801a836:	460c      	mov	r4, r1
 801a838:	4690      	mov	r8, r2
 801a83a:	d82d      	bhi.n	801a898 <__ssputs_r+0x70>
 801a83c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a840:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a844:	d026      	beq.n	801a894 <__ssputs_r+0x6c>
 801a846:	6965      	ldr	r5, [r4, #20]
 801a848:	6909      	ldr	r1, [r1, #16]
 801a84a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a84e:	eba3 0901 	sub.w	r9, r3, r1
 801a852:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a856:	1c7b      	adds	r3, r7, #1
 801a858:	444b      	add	r3, r9
 801a85a:	106d      	asrs	r5, r5, #1
 801a85c:	429d      	cmp	r5, r3
 801a85e:	bf38      	it	cc
 801a860:	461d      	movcc	r5, r3
 801a862:	0553      	lsls	r3, r2, #21
 801a864:	d527      	bpl.n	801a8b6 <__ssputs_r+0x8e>
 801a866:	4629      	mov	r1, r5
 801a868:	f7ff fa42 	bl	8019cf0 <_malloc_r>
 801a86c:	4606      	mov	r6, r0
 801a86e:	b360      	cbz	r0, 801a8ca <__ssputs_r+0xa2>
 801a870:	6921      	ldr	r1, [r4, #16]
 801a872:	464a      	mov	r2, r9
 801a874:	f7ff ff4d 	bl	801a712 <memcpy>
 801a878:	89a3      	ldrh	r3, [r4, #12]
 801a87a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a87e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a882:	81a3      	strh	r3, [r4, #12]
 801a884:	6126      	str	r6, [r4, #16]
 801a886:	6165      	str	r5, [r4, #20]
 801a888:	444e      	add	r6, r9
 801a88a:	eba5 0509 	sub.w	r5, r5, r9
 801a88e:	6026      	str	r6, [r4, #0]
 801a890:	60a5      	str	r5, [r4, #8]
 801a892:	463e      	mov	r6, r7
 801a894:	42be      	cmp	r6, r7
 801a896:	d900      	bls.n	801a89a <__ssputs_r+0x72>
 801a898:	463e      	mov	r6, r7
 801a89a:	6820      	ldr	r0, [r4, #0]
 801a89c:	4632      	mov	r2, r6
 801a89e:	4641      	mov	r1, r8
 801a8a0:	f7ff fe54 	bl	801a54c <memmove>
 801a8a4:	68a3      	ldr	r3, [r4, #8]
 801a8a6:	1b9b      	subs	r3, r3, r6
 801a8a8:	60a3      	str	r3, [r4, #8]
 801a8aa:	6823      	ldr	r3, [r4, #0]
 801a8ac:	4433      	add	r3, r6
 801a8ae:	6023      	str	r3, [r4, #0]
 801a8b0:	2000      	movs	r0, #0
 801a8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8b6:	462a      	mov	r2, r5
 801a8b8:	f7ff fb1a 	bl	8019ef0 <_realloc_r>
 801a8bc:	4606      	mov	r6, r0
 801a8be:	2800      	cmp	r0, #0
 801a8c0:	d1e0      	bne.n	801a884 <__ssputs_r+0x5c>
 801a8c2:	6921      	ldr	r1, [r4, #16]
 801a8c4:	4650      	mov	r0, sl
 801a8c6:	f7ff ff5d 	bl	801a784 <_free_r>
 801a8ca:	230c      	movs	r3, #12
 801a8cc:	f8ca 3000 	str.w	r3, [sl]
 801a8d0:	89a3      	ldrh	r3, [r4, #12]
 801a8d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a8d6:	81a3      	strh	r3, [r4, #12]
 801a8d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a8dc:	e7e9      	b.n	801a8b2 <__ssputs_r+0x8a>
	...

0801a8e0 <_svfiprintf_r>:
 801a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8e4:	4698      	mov	r8, r3
 801a8e6:	898b      	ldrh	r3, [r1, #12]
 801a8e8:	061b      	lsls	r3, r3, #24
 801a8ea:	b09d      	sub	sp, #116	@ 0x74
 801a8ec:	4607      	mov	r7, r0
 801a8ee:	460d      	mov	r5, r1
 801a8f0:	4614      	mov	r4, r2
 801a8f2:	d510      	bpl.n	801a916 <_svfiprintf_r+0x36>
 801a8f4:	690b      	ldr	r3, [r1, #16]
 801a8f6:	b973      	cbnz	r3, 801a916 <_svfiprintf_r+0x36>
 801a8f8:	2140      	movs	r1, #64	@ 0x40
 801a8fa:	f7ff f9f9 	bl	8019cf0 <_malloc_r>
 801a8fe:	6028      	str	r0, [r5, #0]
 801a900:	6128      	str	r0, [r5, #16]
 801a902:	b930      	cbnz	r0, 801a912 <_svfiprintf_r+0x32>
 801a904:	230c      	movs	r3, #12
 801a906:	603b      	str	r3, [r7, #0]
 801a908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801a90c:	b01d      	add	sp, #116	@ 0x74
 801a90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a912:	2340      	movs	r3, #64	@ 0x40
 801a914:	616b      	str	r3, [r5, #20]
 801a916:	2300      	movs	r3, #0
 801a918:	9309      	str	r3, [sp, #36]	@ 0x24
 801a91a:	2320      	movs	r3, #32
 801a91c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a920:	f8cd 800c 	str.w	r8, [sp, #12]
 801a924:	2330      	movs	r3, #48	@ 0x30
 801a926:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801aac4 <_svfiprintf_r+0x1e4>
 801a92a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a92e:	f04f 0901 	mov.w	r9, #1
 801a932:	4623      	mov	r3, r4
 801a934:	469a      	mov	sl, r3
 801a936:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a93a:	b10a      	cbz	r2, 801a940 <_svfiprintf_r+0x60>
 801a93c:	2a25      	cmp	r2, #37	@ 0x25
 801a93e:	d1f9      	bne.n	801a934 <_svfiprintf_r+0x54>
 801a940:	ebba 0b04 	subs.w	fp, sl, r4
 801a944:	d00b      	beq.n	801a95e <_svfiprintf_r+0x7e>
 801a946:	465b      	mov	r3, fp
 801a948:	4622      	mov	r2, r4
 801a94a:	4629      	mov	r1, r5
 801a94c:	4638      	mov	r0, r7
 801a94e:	f7ff ff6b 	bl	801a828 <__ssputs_r>
 801a952:	3001      	adds	r0, #1
 801a954:	f000 80a7 	beq.w	801aaa6 <_svfiprintf_r+0x1c6>
 801a958:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a95a:	445a      	add	r2, fp
 801a95c:	9209      	str	r2, [sp, #36]	@ 0x24
 801a95e:	f89a 3000 	ldrb.w	r3, [sl]
 801a962:	2b00      	cmp	r3, #0
 801a964:	f000 809f 	beq.w	801aaa6 <_svfiprintf_r+0x1c6>
 801a968:	2300      	movs	r3, #0
 801a96a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a96e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a972:	f10a 0a01 	add.w	sl, sl, #1
 801a976:	9304      	str	r3, [sp, #16]
 801a978:	9307      	str	r3, [sp, #28]
 801a97a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a97e:	931a      	str	r3, [sp, #104]	@ 0x68
 801a980:	4654      	mov	r4, sl
 801a982:	2205      	movs	r2, #5
 801a984:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a988:	484e      	ldr	r0, [pc, #312]	@ (801aac4 <_svfiprintf_r+0x1e4>)
 801a98a:	f7e5 fc61 	bl	8000250 <memchr>
 801a98e:	9a04      	ldr	r2, [sp, #16]
 801a990:	b9d8      	cbnz	r0, 801a9ca <_svfiprintf_r+0xea>
 801a992:	06d0      	lsls	r0, r2, #27
 801a994:	bf44      	itt	mi
 801a996:	2320      	movmi	r3, #32
 801a998:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a99c:	0711      	lsls	r1, r2, #28
 801a99e:	bf44      	itt	mi
 801a9a0:	232b      	movmi	r3, #43	@ 0x2b
 801a9a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a9a6:	f89a 3000 	ldrb.w	r3, [sl]
 801a9aa:	2b2a      	cmp	r3, #42	@ 0x2a
 801a9ac:	d015      	beq.n	801a9da <_svfiprintf_r+0xfa>
 801a9ae:	9a07      	ldr	r2, [sp, #28]
 801a9b0:	4654      	mov	r4, sl
 801a9b2:	2000      	movs	r0, #0
 801a9b4:	f04f 0c0a 	mov.w	ip, #10
 801a9b8:	4621      	mov	r1, r4
 801a9ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9be:	3b30      	subs	r3, #48	@ 0x30
 801a9c0:	2b09      	cmp	r3, #9
 801a9c2:	d94b      	bls.n	801aa5c <_svfiprintf_r+0x17c>
 801a9c4:	b1b0      	cbz	r0, 801a9f4 <_svfiprintf_r+0x114>
 801a9c6:	9207      	str	r2, [sp, #28]
 801a9c8:	e014      	b.n	801a9f4 <_svfiprintf_r+0x114>
 801a9ca:	eba0 0308 	sub.w	r3, r0, r8
 801a9ce:	fa09 f303 	lsl.w	r3, r9, r3
 801a9d2:	4313      	orrs	r3, r2
 801a9d4:	9304      	str	r3, [sp, #16]
 801a9d6:	46a2      	mov	sl, r4
 801a9d8:	e7d2      	b.n	801a980 <_svfiprintf_r+0xa0>
 801a9da:	9b03      	ldr	r3, [sp, #12]
 801a9dc:	1d19      	adds	r1, r3, #4
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	9103      	str	r1, [sp, #12]
 801a9e2:	2b00      	cmp	r3, #0
 801a9e4:	bfbb      	ittet	lt
 801a9e6:	425b      	neglt	r3, r3
 801a9e8:	f042 0202 	orrlt.w	r2, r2, #2
 801a9ec:	9307      	strge	r3, [sp, #28]
 801a9ee:	9307      	strlt	r3, [sp, #28]
 801a9f0:	bfb8      	it	lt
 801a9f2:	9204      	strlt	r2, [sp, #16]
 801a9f4:	7823      	ldrb	r3, [r4, #0]
 801a9f6:	2b2e      	cmp	r3, #46	@ 0x2e
 801a9f8:	d10a      	bne.n	801aa10 <_svfiprintf_r+0x130>
 801a9fa:	7863      	ldrb	r3, [r4, #1]
 801a9fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a9fe:	d132      	bne.n	801aa66 <_svfiprintf_r+0x186>
 801aa00:	9b03      	ldr	r3, [sp, #12]
 801aa02:	1d1a      	adds	r2, r3, #4
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	9203      	str	r2, [sp, #12]
 801aa08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801aa0c:	3402      	adds	r4, #2
 801aa0e:	9305      	str	r3, [sp, #20]
 801aa10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801aad4 <_svfiprintf_r+0x1f4>
 801aa14:	7821      	ldrb	r1, [r4, #0]
 801aa16:	2203      	movs	r2, #3
 801aa18:	4650      	mov	r0, sl
 801aa1a:	f7e5 fc19 	bl	8000250 <memchr>
 801aa1e:	b138      	cbz	r0, 801aa30 <_svfiprintf_r+0x150>
 801aa20:	9b04      	ldr	r3, [sp, #16]
 801aa22:	eba0 000a 	sub.w	r0, r0, sl
 801aa26:	2240      	movs	r2, #64	@ 0x40
 801aa28:	4082      	lsls	r2, r0
 801aa2a:	4313      	orrs	r3, r2
 801aa2c:	3401      	adds	r4, #1
 801aa2e:	9304      	str	r3, [sp, #16]
 801aa30:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aa34:	4824      	ldr	r0, [pc, #144]	@ (801aac8 <_svfiprintf_r+0x1e8>)
 801aa36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801aa3a:	2206      	movs	r2, #6
 801aa3c:	f7e5 fc08 	bl	8000250 <memchr>
 801aa40:	2800      	cmp	r0, #0
 801aa42:	d036      	beq.n	801aab2 <_svfiprintf_r+0x1d2>
 801aa44:	4b21      	ldr	r3, [pc, #132]	@ (801aacc <_svfiprintf_r+0x1ec>)
 801aa46:	bb1b      	cbnz	r3, 801aa90 <_svfiprintf_r+0x1b0>
 801aa48:	9b03      	ldr	r3, [sp, #12]
 801aa4a:	3307      	adds	r3, #7
 801aa4c:	f023 0307 	bic.w	r3, r3, #7
 801aa50:	3308      	adds	r3, #8
 801aa52:	9303      	str	r3, [sp, #12]
 801aa54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa56:	4433      	add	r3, r6
 801aa58:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa5a:	e76a      	b.n	801a932 <_svfiprintf_r+0x52>
 801aa5c:	fb0c 3202 	mla	r2, ip, r2, r3
 801aa60:	460c      	mov	r4, r1
 801aa62:	2001      	movs	r0, #1
 801aa64:	e7a8      	b.n	801a9b8 <_svfiprintf_r+0xd8>
 801aa66:	2300      	movs	r3, #0
 801aa68:	3401      	adds	r4, #1
 801aa6a:	9305      	str	r3, [sp, #20]
 801aa6c:	4619      	mov	r1, r3
 801aa6e:	f04f 0c0a 	mov.w	ip, #10
 801aa72:	4620      	mov	r0, r4
 801aa74:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa78:	3a30      	subs	r2, #48	@ 0x30
 801aa7a:	2a09      	cmp	r2, #9
 801aa7c:	d903      	bls.n	801aa86 <_svfiprintf_r+0x1a6>
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d0c6      	beq.n	801aa10 <_svfiprintf_r+0x130>
 801aa82:	9105      	str	r1, [sp, #20]
 801aa84:	e7c4      	b.n	801aa10 <_svfiprintf_r+0x130>
 801aa86:	fb0c 2101 	mla	r1, ip, r1, r2
 801aa8a:	4604      	mov	r4, r0
 801aa8c:	2301      	movs	r3, #1
 801aa8e:	e7f0      	b.n	801aa72 <_svfiprintf_r+0x192>
 801aa90:	ab03      	add	r3, sp, #12
 801aa92:	9300      	str	r3, [sp, #0]
 801aa94:	462a      	mov	r2, r5
 801aa96:	4b0e      	ldr	r3, [pc, #56]	@ (801aad0 <_svfiprintf_r+0x1f0>)
 801aa98:	a904      	add	r1, sp, #16
 801aa9a:	4638      	mov	r0, r7
 801aa9c:	f3af 8000 	nop.w
 801aaa0:	1c42      	adds	r2, r0, #1
 801aaa2:	4606      	mov	r6, r0
 801aaa4:	d1d6      	bne.n	801aa54 <_svfiprintf_r+0x174>
 801aaa6:	89ab      	ldrh	r3, [r5, #12]
 801aaa8:	065b      	lsls	r3, r3, #25
 801aaaa:	f53f af2d 	bmi.w	801a908 <_svfiprintf_r+0x28>
 801aaae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801aab0:	e72c      	b.n	801a90c <_svfiprintf_r+0x2c>
 801aab2:	ab03      	add	r3, sp, #12
 801aab4:	9300      	str	r3, [sp, #0]
 801aab6:	462a      	mov	r2, r5
 801aab8:	4b05      	ldr	r3, [pc, #20]	@ (801aad0 <_svfiprintf_r+0x1f0>)
 801aaba:	a904      	add	r1, sp, #16
 801aabc:	4638      	mov	r0, r7
 801aabe:	f000 f9bb 	bl	801ae38 <_printf_i>
 801aac2:	e7ed      	b.n	801aaa0 <_svfiprintf_r+0x1c0>
 801aac4:	0801c0ab 	.word	0x0801c0ab
 801aac8:	0801c0b5 	.word	0x0801c0b5
 801aacc:	00000000 	.word	0x00000000
 801aad0:	0801a829 	.word	0x0801a829
 801aad4:	0801c0b1 	.word	0x0801c0b1

0801aad8 <__sfputc_r>:
 801aad8:	6893      	ldr	r3, [r2, #8]
 801aada:	3b01      	subs	r3, #1
 801aadc:	2b00      	cmp	r3, #0
 801aade:	b410      	push	{r4}
 801aae0:	6093      	str	r3, [r2, #8]
 801aae2:	da08      	bge.n	801aaf6 <__sfputc_r+0x1e>
 801aae4:	6994      	ldr	r4, [r2, #24]
 801aae6:	42a3      	cmp	r3, r4
 801aae8:	db01      	blt.n	801aaee <__sfputc_r+0x16>
 801aaea:	290a      	cmp	r1, #10
 801aaec:	d103      	bne.n	801aaf6 <__sfputc_r+0x1e>
 801aaee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aaf2:	f7ff bc87 	b.w	801a404 <__swbuf_r>
 801aaf6:	6813      	ldr	r3, [r2, #0]
 801aaf8:	1c58      	adds	r0, r3, #1
 801aafa:	6010      	str	r0, [r2, #0]
 801aafc:	7019      	strb	r1, [r3, #0]
 801aafe:	4608      	mov	r0, r1
 801ab00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ab04:	4770      	bx	lr

0801ab06 <__sfputs_r>:
 801ab06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab08:	4606      	mov	r6, r0
 801ab0a:	460f      	mov	r7, r1
 801ab0c:	4614      	mov	r4, r2
 801ab0e:	18d5      	adds	r5, r2, r3
 801ab10:	42ac      	cmp	r4, r5
 801ab12:	d101      	bne.n	801ab18 <__sfputs_r+0x12>
 801ab14:	2000      	movs	r0, #0
 801ab16:	e007      	b.n	801ab28 <__sfputs_r+0x22>
 801ab18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ab1c:	463a      	mov	r2, r7
 801ab1e:	4630      	mov	r0, r6
 801ab20:	f7ff ffda 	bl	801aad8 <__sfputc_r>
 801ab24:	1c43      	adds	r3, r0, #1
 801ab26:	d1f3      	bne.n	801ab10 <__sfputs_r+0xa>
 801ab28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801ab2c <_vfiprintf_r>:
 801ab2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab30:	460d      	mov	r5, r1
 801ab32:	b09d      	sub	sp, #116	@ 0x74
 801ab34:	4614      	mov	r4, r2
 801ab36:	4698      	mov	r8, r3
 801ab38:	4606      	mov	r6, r0
 801ab3a:	b118      	cbz	r0, 801ab44 <_vfiprintf_r+0x18>
 801ab3c:	6a03      	ldr	r3, [r0, #32]
 801ab3e:	b90b      	cbnz	r3, 801ab44 <_vfiprintf_r+0x18>
 801ab40:	f7ff fb08 	bl	801a154 <__sinit>
 801ab44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab46:	07d9      	lsls	r1, r3, #31
 801ab48:	d405      	bmi.n	801ab56 <_vfiprintf_r+0x2a>
 801ab4a:	89ab      	ldrh	r3, [r5, #12]
 801ab4c:	059a      	lsls	r2, r3, #22
 801ab4e:	d402      	bmi.n	801ab56 <_vfiprintf_r+0x2a>
 801ab50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab52:	f7ff fdd4 	bl	801a6fe <__retarget_lock_acquire_recursive>
 801ab56:	89ab      	ldrh	r3, [r5, #12]
 801ab58:	071b      	lsls	r3, r3, #28
 801ab5a:	d501      	bpl.n	801ab60 <_vfiprintf_r+0x34>
 801ab5c:	692b      	ldr	r3, [r5, #16]
 801ab5e:	b99b      	cbnz	r3, 801ab88 <_vfiprintf_r+0x5c>
 801ab60:	4629      	mov	r1, r5
 801ab62:	4630      	mov	r0, r6
 801ab64:	f7ff fc8c 	bl	801a480 <__swsetup_r>
 801ab68:	b170      	cbz	r0, 801ab88 <_vfiprintf_r+0x5c>
 801ab6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ab6c:	07dc      	lsls	r4, r3, #31
 801ab6e:	d504      	bpl.n	801ab7a <_vfiprintf_r+0x4e>
 801ab70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ab74:	b01d      	add	sp, #116	@ 0x74
 801ab76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab7a:	89ab      	ldrh	r3, [r5, #12]
 801ab7c:	0598      	lsls	r0, r3, #22
 801ab7e:	d4f7      	bmi.n	801ab70 <_vfiprintf_r+0x44>
 801ab80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ab82:	f7ff fdbd 	bl	801a700 <__retarget_lock_release_recursive>
 801ab86:	e7f3      	b.n	801ab70 <_vfiprintf_r+0x44>
 801ab88:	2300      	movs	r3, #0
 801ab8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab8c:	2320      	movs	r3, #32
 801ab8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801ab92:	f8cd 800c 	str.w	r8, [sp, #12]
 801ab96:	2330      	movs	r3, #48	@ 0x30
 801ab98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801ad48 <_vfiprintf_r+0x21c>
 801ab9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801aba0:	f04f 0901 	mov.w	r9, #1
 801aba4:	4623      	mov	r3, r4
 801aba6:	469a      	mov	sl, r3
 801aba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801abac:	b10a      	cbz	r2, 801abb2 <_vfiprintf_r+0x86>
 801abae:	2a25      	cmp	r2, #37	@ 0x25
 801abb0:	d1f9      	bne.n	801aba6 <_vfiprintf_r+0x7a>
 801abb2:	ebba 0b04 	subs.w	fp, sl, r4
 801abb6:	d00b      	beq.n	801abd0 <_vfiprintf_r+0xa4>
 801abb8:	465b      	mov	r3, fp
 801abba:	4622      	mov	r2, r4
 801abbc:	4629      	mov	r1, r5
 801abbe:	4630      	mov	r0, r6
 801abc0:	f7ff ffa1 	bl	801ab06 <__sfputs_r>
 801abc4:	3001      	adds	r0, #1
 801abc6:	f000 80a7 	beq.w	801ad18 <_vfiprintf_r+0x1ec>
 801abca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abcc:	445a      	add	r2, fp
 801abce:	9209      	str	r2, [sp, #36]	@ 0x24
 801abd0:	f89a 3000 	ldrb.w	r3, [sl]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	f000 809f 	beq.w	801ad18 <_vfiprintf_r+0x1ec>
 801abda:	2300      	movs	r3, #0
 801abdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801abe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801abe4:	f10a 0a01 	add.w	sl, sl, #1
 801abe8:	9304      	str	r3, [sp, #16]
 801abea:	9307      	str	r3, [sp, #28]
 801abec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801abf0:	931a      	str	r3, [sp, #104]	@ 0x68
 801abf2:	4654      	mov	r4, sl
 801abf4:	2205      	movs	r2, #5
 801abf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801abfa:	4853      	ldr	r0, [pc, #332]	@ (801ad48 <_vfiprintf_r+0x21c>)
 801abfc:	f7e5 fb28 	bl	8000250 <memchr>
 801ac00:	9a04      	ldr	r2, [sp, #16]
 801ac02:	b9d8      	cbnz	r0, 801ac3c <_vfiprintf_r+0x110>
 801ac04:	06d1      	lsls	r1, r2, #27
 801ac06:	bf44      	itt	mi
 801ac08:	2320      	movmi	r3, #32
 801ac0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac0e:	0713      	lsls	r3, r2, #28
 801ac10:	bf44      	itt	mi
 801ac12:	232b      	movmi	r3, #43	@ 0x2b
 801ac14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ac18:	f89a 3000 	ldrb.w	r3, [sl]
 801ac1c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac1e:	d015      	beq.n	801ac4c <_vfiprintf_r+0x120>
 801ac20:	9a07      	ldr	r2, [sp, #28]
 801ac22:	4654      	mov	r4, sl
 801ac24:	2000      	movs	r0, #0
 801ac26:	f04f 0c0a 	mov.w	ip, #10
 801ac2a:	4621      	mov	r1, r4
 801ac2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ac30:	3b30      	subs	r3, #48	@ 0x30
 801ac32:	2b09      	cmp	r3, #9
 801ac34:	d94b      	bls.n	801acce <_vfiprintf_r+0x1a2>
 801ac36:	b1b0      	cbz	r0, 801ac66 <_vfiprintf_r+0x13a>
 801ac38:	9207      	str	r2, [sp, #28]
 801ac3a:	e014      	b.n	801ac66 <_vfiprintf_r+0x13a>
 801ac3c:	eba0 0308 	sub.w	r3, r0, r8
 801ac40:	fa09 f303 	lsl.w	r3, r9, r3
 801ac44:	4313      	orrs	r3, r2
 801ac46:	9304      	str	r3, [sp, #16]
 801ac48:	46a2      	mov	sl, r4
 801ac4a:	e7d2      	b.n	801abf2 <_vfiprintf_r+0xc6>
 801ac4c:	9b03      	ldr	r3, [sp, #12]
 801ac4e:	1d19      	adds	r1, r3, #4
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	9103      	str	r1, [sp, #12]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	bfbb      	ittet	lt
 801ac58:	425b      	neglt	r3, r3
 801ac5a:	f042 0202 	orrlt.w	r2, r2, #2
 801ac5e:	9307      	strge	r3, [sp, #28]
 801ac60:	9307      	strlt	r3, [sp, #28]
 801ac62:	bfb8      	it	lt
 801ac64:	9204      	strlt	r2, [sp, #16]
 801ac66:	7823      	ldrb	r3, [r4, #0]
 801ac68:	2b2e      	cmp	r3, #46	@ 0x2e
 801ac6a:	d10a      	bne.n	801ac82 <_vfiprintf_r+0x156>
 801ac6c:	7863      	ldrb	r3, [r4, #1]
 801ac6e:	2b2a      	cmp	r3, #42	@ 0x2a
 801ac70:	d132      	bne.n	801acd8 <_vfiprintf_r+0x1ac>
 801ac72:	9b03      	ldr	r3, [sp, #12]
 801ac74:	1d1a      	adds	r2, r3, #4
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	9203      	str	r2, [sp, #12]
 801ac7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ac7e:	3402      	adds	r4, #2
 801ac80:	9305      	str	r3, [sp, #20]
 801ac82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801ad58 <_vfiprintf_r+0x22c>
 801ac86:	7821      	ldrb	r1, [r4, #0]
 801ac88:	2203      	movs	r2, #3
 801ac8a:	4650      	mov	r0, sl
 801ac8c:	f7e5 fae0 	bl	8000250 <memchr>
 801ac90:	b138      	cbz	r0, 801aca2 <_vfiprintf_r+0x176>
 801ac92:	9b04      	ldr	r3, [sp, #16]
 801ac94:	eba0 000a 	sub.w	r0, r0, sl
 801ac98:	2240      	movs	r2, #64	@ 0x40
 801ac9a:	4082      	lsls	r2, r0
 801ac9c:	4313      	orrs	r3, r2
 801ac9e:	3401      	adds	r4, #1
 801aca0:	9304      	str	r3, [sp, #16]
 801aca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801aca6:	4829      	ldr	r0, [pc, #164]	@ (801ad4c <_vfiprintf_r+0x220>)
 801aca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801acac:	2206      	movs	r2, #6
 801acae:	f7e5 facf 	bl	8000250 <memchr>
 801acb2:	2800      	cmp	r0, #0
 801acb4:	d03f      	beq.n	801ad36 <_vfiprintf_r+0x20a>
 801acb6:	4b26      	ldr	r3, [pc, #152]	@ (801ad50 <_vfiprintf_r+0x224>)
 801acb8:	bb1b      	cbnz	r3, 801ad02 <_vfiprintf_r+0x1d6>
 801acba:	9b03      	ldr	r3, [sp, #12]
 801acbc:	3307      	adds	r3, #7
 801acbe:	f023 0307 	bic.w	r3, r3, #7
 801acc2:	3308      	adds	r3, #8
 801acc4:	9303      	str	r3, [sp, #12]
 801acc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801acc8:	443b      	add	r3, r7
 801acca:	9309      	str	r3, [sp, #36]	@ 0x24
 801accc:	e76a      	b.n	801aba4 <_vfiprintf_r+0x78>
 801acce:	fb0c 3202 	mla	r2, ip, r2, r3
 801acd2:	460c      	mov	r4, r1
 801acd4:	2001      	movs	r0, #1
 801acd6:	e7a8      	b.n	801ac2a <_vfiprintf_r+0xfe>
 801acd8:	2300      	movs	r3, #0
 801acda:	3401      	adds	r4, #1
 801acdc:	9305      	str	r3, [sp, #20]
 801acde:	4619      	mov	r1, r3
 801ace0:	f04f 0c0a 	mov.w	ip, #10
 801ace4:	4620      	mov	r0, r4
 801ace6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801acea:	3a30      	subs	r2, #48	@ 0x30
 801acec:	2a09      	cmp	r2, #9
 801acee:	d903      	bls.n	801acf8 <_vfiprintf_r+0x1cc>
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	d0c6      	beq.n	801ac82 <_vfiprintf_r+0x156>
 801acf4:	9105      	str	r1, [sp, #20]
 801acf6:	e7c4      	b.n	801ac82 <_vfiprintf_r+0x156>
 801acf8:	fb0c 2101 	mla	r1, ip, r1, r2
 801acfc:	4604      	mov	r4, r0
 801acfe:	2301      	movs	r3, #1
 801ad00:	e7f0      	b.n	801ace4 <_vfiprintf_r+0x1b8>
 801ad02:	ab03      	add	r3, sp, #12
 801ad04:	9300      	str	r3, [sp, #0]
 801ad06:	462a      	mov	r2, r5
 801ad08:	4b12      	ldr	r3, [pc, #72]	@ (801ad54 <_vfiprintf_r+0x228>)
 801ad0a:	a904      	add	r1, sp, #16
 801ad0c:	4630      	mov	r0, r6
 801ad0e:	f3af 8000 	nop.w
 801ad12:	4607      	mov	r7, r0
 801ad14:	1c78      	adds	r0, r7, #1
 801ad16:	d1d6      	bne.n	801acc6 <_vfiprintf_r+0x19a>
 801ad18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801ad1a:	07d9      	lsls	r1, r3, #31
 801ad1c:	d405      	bmi.n	801ad2a <_vfiprintf_r+0x1fe>
 801ad1e:	89ab      	ldrh	r3, [r5, #12]
 801ad20:	059a      	lsls	r2, r3, #22
 801ad22:	d402      	bmi.n	801ad2a <_vfiprintf_r+0x1fe>
 801ad24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801ad26:	f7ff fceb 	bl	801a700 <__retarget_lock_release_recursive>
 801ad2a:	89ab      	ldrh	r3, [r5, #12]
 801ad2c:	065b      	lsls	r3, r3, #25
 801ad2e:	f53f af1f 	bmi.w	801ab70 <_vfiprintf_r+0x44>
 801ad32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801ad34:	e71e      	b.n	801ab74 <_vfiprintf_r+0x48>
 801ad36:	ab03      	add	r3, sp, #12
 801ad38:	9300      	str	r3, [sp, #0]
 801ad3a:	462a      	mov	r2, r5
 801ad3c:	4b05      	ldr	r3, [pc, #20]	@ (801ad54 <_vfiprintf_r+0x228>)
 801ad3e:	a904      	add	r1, sp, #16
 801ad40:	4630      	mov	r0, r6
 801ad42:	f000 f879 	bl	801ae38 <_printf_i>
 801ad46:	e7e4      	b.n	801ad12 <_vfiprintf_r+0x1e6>
 801ad48:	0801c0ab 	.word	0x0801c0ab
 801ad4c:	0801c0b5 	.word	0x0801c0b5
 801ad50:	00000000 	.word	0x00000000
 801ad54:	0801ab07 	.word	0x0801ab07
 801ad58:	0801c0b1 	.word	0x0801c0b1

0801ad5c <_printf_common>:
 801ad5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad60:	4616      	mov	r6, r2
 801ad62:	4698      	mov	r8, r3
 801ad64:	688a      	ldr	r2, [r1, #8]
 801ad66:	690b      	ldr	r3, [r1, #16]
 801ad68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801ad6c:	4293      	cmp	r3, r2
 801ad6e:	bfb8      	it	lt
 801ad70:	4613      	movlt	r3, r2
 801ad72:	6033      	str	r3, [r6, #0]
 801ad74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801ad78:	4607      	mov	r7, r0
 801ad7a:	460c      	mov	r4, r1
 801ad7c:	b10a      	cbz	r2, 801ad82 <_printf_common+0x26>
 801ad7e:	3301      	adds	r3, #1
 801ad80:	6033      	str	r3, [r6, #0]
 801ad82:	6823      	ldr	r3, [r4, #0]
 801ad84:	0699      	lsls	r1, r3, #26
 801ad86:	bf42      	ittt	mi
 801ad88:	6833      	ldrmi	r3, [r6, #0]
 801ad8a:	3302      	addmi	r3, #2
 801ad8c:	6033      	strmi	r3, [r6, #0]
 801ad8e:	6825      	ldr	r5, [r4, #0]
 801ad90:	f015 0506 	ands.w	r5, r5, #6
 801ad94:	d106      	bne.n	801ada4 <_printf_common+0x48>
 801ad96:	f104 0a19 	add.w	sl, r4, #25
 801ad9a:	68e3      	ldr	r3, [r4, #12]
 801ad9c:	6832      	ldr	r2, [r6, #0]
 801ad9e:	1a9b      	subs	r3, r3, r2
 801ada0:	42ab      	cmp	r3, r5
 801ada2:	dc26      	bgt.n	801adf2 <_printf_common+0x96>
 801ada4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801ada8:	6822      	ldr	r2, [r4, #0]
 801adaa:	3b00      	subs	r3, #0
 801adac:	bf18      	it	ne
 801adae:	2301      	movne	r3, #1
 801adb0:	0692      	lsls	r2, r2, #26
 801adb2:	d42b      	bmi.n	801ae0c <_printf_common+0xb0>
 801adb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801adb8:	4641      	mov	r1, r8
 801adba:	4638      	mov	r0, r7
 801adbc:	47c8      	blx	r9
 801adbe:	3001      	adds	r0, #1
 801adc0:	d01e      	beq.n	801ae00 <_printf_common+0xa4>
 801adc2:	6823      	ldr	r3, [r4, #0]
 801adc4:	6922      	ldr	r2, [r4, #16]
 801adc6:	f003 0306 	and.w	r3, r3, #6
 801adca:	2b04      	cmp	r3, #4
 801adcc:	bf02      	ittt	eq
 801adce:	68e5      	ldreq	r5, [r4, #12]
 801add0:	6833      	ldreq	r3, [r6, #0]
 801add2:	1aed      	subeq	r5, r5, r3
 801add4:	68a3      	ldr	r3, [r4, #8]
 801add6:	bf0c      	ite	eq
 801add8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801addc:	2500      	movne	r5, #0
 801adde:	4293      	cmp	r3, r2
 801ade0:	bfc4      	itt	gt
 801ade2:	1a9b      	subgt	r3, r3, r2
 801ade4:	18ed      	addgt	r5, r5, r3
 801ade6:	2600      	movs	r6, #0
 801ade8:	341a      	adds	r4, #26
 801adea:	42b5      	cmp	r5, r6
 801adec:	d11a      	bne.n	801ae24 <_printf_common+0xc8>
 801adee:	2000      	movs	r0, #0
 801adf0:	e008      	b.n	801ae04 <_printf_common+0xa8>
 801adf2:	2301      	movs	r3, #1
 801adf4:	4652      	mov	r2, sl
 801adf6:	4641      	mov	r1, r8
 801adf8:	4638      	mov	r0, r7
 801adfa:	47c8      	blx	r9
 801adfc:	3001      	adds	r0, #1
 801adfe:	d103      	bne.n	801ae08 <_printf_common+0xac>
 801ae00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801ae04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae08:	3501      	adds	r5, #1
 801ae0a:	e7c6      	b.n	801ad9a <_printf_common+0x3e>
 801ae0c:	18e1      	adds	r1, r4, r3
 801ae0e:	1c5a      	adds	r2, r3, #1
 801ae10:	2030      	movs	r0, #48	@ 0x30
 801ae12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801ae16:	4422      	add	r2, r4
 801ae18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801ae1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801ae20:	3302      	adds	r3, #2
 801ae22:	e7c7      	b.n	801adb4 <_printf_common+0x58>
 801ae24:	2301      	movs	r3, #1
 801ae26:	4622      	mov	r2, r4
 801ae28:	4641      	mov	r1, r8
 801ae2a:	4638      	mov	r0, r7
 801ae2c:	47c8      	blx	r9
 801ae2e:	3001      	adds	r0, #1
 801ae30:	d0e6      	beq.n	801ae00 <_printf_common+0xa4>
 801ae32:	3601      	adds	r6, #1
 801ae34:	e7d9      	b.n	801adea <_printf_common+0x8e>
	...

0801ae38 <_printf_i>:
 801ae38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ae3c:	7e0f      	ldrb	r7, [r1, #24]
 801ae3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ae40:	2f78      	cmp	r7, #120	@ 0x78
 801ae42:	4691      	mov	r9, r2
 801ae44:	4680      	mov	r8, r0
 801ae46:	460c      	mov	r4, r1
 801ae48:	469a      	mov	sl, r3
 801ae4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ae4e:	d807      	bhi.n	801ae60 <_printf_i+0x28>
 801ae50:	2f62      	cmp	r7, #98	@ 0x62
 801ae52:	d80a      	bhi.n	801ae6a <_printf_i+0x32>
 801ae54:	2f00      	cmp	r7, #0
 801ae56:	f000 80d1 	beq.w	801affc <_printf_i+0x1c4>
 801ae5a:	2f58      	cmp	r7, #88	@ 0x58
 801ae5c:	f000 80b8 	beq.w	801afd0 <_printf_i+0x198>
 801ae60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ae64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ae68:	e03a      	b.n	801aee0 <_printf_i+0xa8>
 801ae6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ae6e:	2b15      	cmp	r3, #21
 801ae70:	d8f6      	bhi.n	801ae60 <_printf_i+0x28>
 801ae72:	a101      	add	r1, pc, #4	@ (adr r1, 801ae78 <_printf_i+0x40>)
 801ae74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ae78:	0801aed1 	.word	0x0801aed1
 801ae7c:	0801aee5 	.word	0x0801aee5
 801ae80:	0801ae61 	.word	0x0801ae61
 801ae84:	0801ae61 	.word	0x0801ae61
 801ae88:	0801ae61 	.word	0x0801ae61
 801ae8c:	0801ae61 	.word	0x0801ae61
 801ae90:	0801aee5 	.word	0x0801aee5
 801ae94:	0801ae61 	.word	0x0801ae61
 801ae98:	0801ae61 	.word	0x0801ae61
 801ae9c:	0801ae61 	.word	0x0801ae61
 801aea0:	0801ae61 	.word	0x0801ae61
 801aea4:	0801afe3 	.word	0x0801afe3
 801aea8:	0801af0f 	.word	0x0801af0f
 801aeac:	0801af9d 	.word	0x0801af9d
 801aeb0:	0801ae61 	.word	0x0801ae61
 801aeb4:	0801ae61 	.word	0x0801ae61
 801aeb8:	0801b005 	.word	0x0801b005
 801aebc:	0801ae61 	.word	0x0801ae61
 801aec0:	0801af0f 	.word	0x0801af0f
 801aec4:	0801ae61 	.word	0x0801ae61
 801aec8:	0801ae61 	.word	0x0801ae61
 801aecc:	0801afa5 	.word	0x0801afa5
 801aed0:	6833      	ldr	r3, [r6, #0]
 801aed2:	1d1a      	adds	r2, r3, #4
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	6032      	str	r2, [r6, #0]
 801aed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801aedc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801aee0:	2301      	movs	r3, #1
 801aee2:	e09c      	b.n	801b01e <_printf_i+0x1e6>
 801aee4:	6833      	ldr	r3, [r6, #0]
 801aee6:	6820      	ldr	r0, [r4, #0]
 801aee8:	1d19      	adds	r1, r3, #4
 801aeea:	6031      	str	r1, [r6, #0]
 801aeec:	0606      	lsls	r6, r0, #24
 801aeee:	d501      	bpl.n	801aef4 <_printf_i+0xbc>
 801aef0:	681d      	ldr	r5, [r3, #0]
 801aef2:	e003      	b.n	801aefc <_printf_i+0xc4>
 801aef4:	0645      	lsls	r5, r0, #25
 801aef6:	d5fb      	bpl.n	801aef0 <_printf_i+0xb8>
 801aef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 801aefc:	2d00      	cmp	r5, #0
 801aefe:	da03      	bge.n	801af08 <_printf_i+0xd0>
 801af00:	232d      	movs	r3, #45	@ 0x2d
 801af02:	426d      	negs	r5, r5
 801af04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801af08:	4858      	ldr	r0, [pc, #352]	@ (801b06c <_printf_i+0x234>)
 801af0a:	230a      	movs	r3, #10
 801af0c:	e011      	b.n	801af32 <_printf_i+0xfa>
 801af0e:	6821      	ldr	r1, [r4, #0]
 801af10:	6833      	ldr	r3, [r6, #0]
 801af12:	0608      	lsls	r0, r1, #24
 801af14:	f853 5b04 	ldr.w	r5, [r3], #4
 801af18:	d402      	bmi.n	801af20 <_printf_i+0xe8>
 801af1a:	0649      	lsls	r1, r1, #25
 801af1c:	bf48      	it	mi
 801af1e:	b2ad      	uxthmi	r5, r5
 801af20:	2f6f      	cmp	r7, #111	@ 0x6f
 801af22:	4852      	ldr	r0, [pc, #328]	@ (801b06c <_printf_i+0x234>)
 801af24:	6033      	str	r3, [r6, #0]
 801af26:	bf14      	ite	ne
 801af28:	230a      	movne	r3, #10
 801af2a:	2308      	moveq	r3, #8
 801af2c:	2100      	movs	r1, #0
 801af2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801af32:	6866      	ldr	r6, [r4, #4]
 801af34:	60a6      	str	r6, [r4, #8]
 801af36:	2e00      	cmp	r6, #0
 801af38:	db05      	blt.n	801af46 <_printf_i+0x10e>
 801af3a:	6821      	ldr	r1, [r4, #0]
 801af3c:	432e      	orrs	r6, r5
 801af3e:	f021 0104 	bic.w	r1, r1, #4
 801af42:	6021      	str	r1, [r4, #0]
 801af44:	d04b      	beq.n	801afde <_printf_i+0x1a6>
 801af46:	4616      	mov	r6, r2
 801af48:	fbb5 f1f3 	udiv	r1, r5, r3
 801af4c:	fb03 5711 	mls	r7, r3, r1, r5
 801af50:	5dc7      	ldrb	r7, [r0, r7]
 801af52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801af56:	462f      	mov	r7, r5
 801af58:	42bb      	cmp	r3, r7
 801af5a:	460d      	mov	r5, r1
 801af5c:	d9f4      	bls.n	801af48 <_printf_i+0x110>
 801af5e:	2b08      	cmp	r3, #8
 801af60:	d10b      	bne.n	801af7a <_printf_i+0x142>
 801af62:	6823      	ldr	r3, [r4, #0]
 801af64:	07df      	lsls	r7, r3, #31
 801af66:	d508      	bpl.n	801af7a <_printf_i+0x142>
 801af68:	6923      	ldr	r3, [r4, #16]
 801af6a:	6861      	ldr	r1, [r4, #4]
 801af6c:	4299      	cmp	r1, r3
 801af6e:	bfde      	ittt	le
 801af70:	2330      	movle	r3, #48	@ 0x30
 801af72:	f806 3c01 	strble.w	r3, [r6, #-1]
 801af76:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801af7a:	1b92      	subs	r2, r2, r6
 801af7c:	6122      	str	r2, [r4, #16]
 801af7e:	f8cd a000 	str.w	sl, [sp]
 801af82:	464b      	mov	r3, r9
 801af84:	aa03      	add	r2, sp, #12
 801af86:	4621      	mov	r1, r4
 801af88:	4640      	mov	r0, r8
 801af8a:	f7ff fee7 	bl	801ad5c <_printf_common>
 801af8e:	3001      	adds	r0, #1
 801af90:	d14a      	bne.n	801b028 <_printf_i+0x1f0>
 801af92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801af96:	b004      	add	sp, #16
 801af98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af9c:	6823      	ldr	r3, [r4, #0]
 801af9e:	f043 0320 	orr.w	r3, r3, #32
 801afa2:	6023      	str	r3, [r4, #0]
 801afa4:	4832      	ldr	r0, [pc, #200]	@ (801b070 <_printf_i+0x238>)
 801afa6:	2778      	movs	r7, #120	@ 0x78
 801afa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801afac:	6823      	ldr	r3, [r4, #0]
 801afae:	6831      	ldr	r1, [r6, #0]
 801afb0:	061f      	lsls	r7, r3, #24
 801afb2:	f851 5b04 	ldr.w	r5, [r1], #4
 801afb6:	d402      	bmi.n	801afbe <_printf_i+0x186>
 801afb8:	065f      	lsls	r7, r3, #25
 801afba:	bf48      	it	mi
 801afbc:	b2ad      	uxthmi	r5, r5
 801afbe:	6031      	str	r1, [r6, #0]
 801afc0:	07d9      	lsls	r1, r3, #31
 801afc2:	bf44      	itt	mi
 801afc4:	f043 0320 	orrmi.w	r3, r3, #32
 801afc8:	6023      	strmi	r3, [r4, #0]
 801afca:	b11d      	cbz	r5, 801afd4 <_printf_i+0x19c>
 801afcc:	2310      	movs	r3, #16
 801afce:	e7ad      	b.n	801af2c <_printf_i+0xf4>
 801afd0:	4826      	ldr	r0, [pc, #152]	@ (801b06c <_printf_i+0x234>)
 801afd2:	e7e9      	b.n	801afa8 <_printf_i+0x170>
 801afd4:	6823      	ldr	r3, [r4, #0]
 801afd6:	f023 0320 	bic.w	r3, r3, #32
 801afda:	6023      	str	r3, [r4, #0]
 801afdc:	e7f6      	b.n	801afcc <_printf_i+0x194>
 801afde:	4616      	mov	r6, r2
 801afe0:	e7bd      	b.n	801af5e <_printf_i+0x126>
 801afe2:	6833      	ldr	r3, [r6, #0]
 801afe4:	6825      	ldr	r5, [r4, #0]
 801afe6:	6961      	ldr	r1, [r4, #20]
 801afe8:	1d18      	adds	r0, r3, #4
 801afea:	6030      	str	r0, [r6, #0]
 801afec:	062e      	lsls	r6, r5, #24
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	d501      	bpl.n	801aff6 <_printf_i+0x1be>
 801aff2:	6019      	str	r1, [r3, #0]
 801aff4:	e002      	b.n	801affc <_printf_i+0x1c4>
 801aff6:	0668      	lsls	r0, r5, #25
 801aff8:	d5fb      	bpl.n	801aff2 <_printf_i+0x1ba>
 801affa:	8019      	strh	r1, [r3, #0]
 801affc:	2300      	movs	r3, #0
 801affe:	6123      	str	r3, [r4, #16]
 801b000:	4616      	mov	r6, r2
 801b002:	e7bc      	b.n	801af7e <_printf_i+0x146>
 801b004:	6833      	ldr	r3, [r6, #0]
 801b006:	1d1a      	adds	r2, r3, #4
 801b008:	6032      	str	r2, [r6, #0]
 801b00a:	681e      	ldr	r6, [r3, #0]
 801b00c:	6862      	ldr	r2, [r4, #4]
 801b00e:	2100      	movs	r1, #0
 801b010:	4630      	mov	r0, r6
 801b012:	f7e5 f91d 	bl	8000250 <memchr>
 801b016:	b108      	cbz	r0, 801b01c <_printf_i+0x1e4>
 801b018:	1b80      	subs	r0, r0, r6
 801b01a:	6060      	str	r0, [r4, #4]
 801b01c:	6863      	ldr	r3, [r4, #4]
 801b01e:	6123      	str	r3, [r4, #16]
 801b020:	2300      	movs	r3, #0
 801b022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801b026:	e7aa      	b.n	801af7e <_printf_i+0x146>
 801b028:	6923      	ldr	r3, [r4, #16]
 801b02a:	4632      	mov	r2, r6
 801b02c:	4649      	mov	r1, r9
 801b02e:	4640      	mov	r0, r8
 801b030:	47d0      	blx	sl
 801b032:	3001      	adds	r0, #1
 801b034:	d0ad      	beq.n	801af92 <_printf_i+0x15a>
 801b036:	6823      	ldr	r3, [r4, #0]
 801b038:	079b      	lsls	r3, r3, #30
 801b03a:	d413      	bmi.n	801b064 <_printf_i+0x22c>
 801b03c:	68e0      	ldr	r0, [r4, #12]
 801b03e:	9b03      	ldr	r3, [sp, #12]
 801b040:	4298      	cmp	r0, r3
 801b042:	bfb8      	it	lt
 801b044:	4618      	movlt	r0, r3
 801b046:	e7a6      	b.n	801af96 <_printf_i+0x15e>
 801b048:	2301      	movs	r3, #1
 801b04a:	4632      	mov	r2, r6
 801b04c:	4649      	mov	r1, r9
 801b04e:	4640      	mov	r0, r8
 801b050:	47d0      	blx	sl
 801b052:	3001      	adds	r0, #1
 801b054:	d09d      	beq.n	801af92 <_printf_i+0x15a>
 801b056:	3501      	adds	r5, #1
 801b058:	68e3      	ldr	r3, [r4, #12]
 801b05a:	9903      	ldr	r1, [sp, #12]
 801b05c:	1a5b      	subs	r3, r3, r1
 801b05e:	42ab      	cmp	r3, r5
 801b060:	dcf2      	bgt.n	801b048 <_printf_i+0x210>
 801b062:	e7eb      	b.n	801b03c <_printf_i+0x204>
 801b064:	2500      	movs	r5, #0
 801b066:	f104 0619 	add.w	r6, r4, #25
 801b06a:	e7f5      	b.n	801b058 <_printf_i+0x220>
 801b06c:	0801c0bc 	.word	0x0801c0bc
 801b070:	0801c0cd 	.word	0x0801c0cd

0801b074 <__sflush_r>:
 801b074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b07c:	0716      	lsls	r6, r2, #28
 801b07e:	4605      	mov	r5, r0
 801b080:	460c      	mov	r4, r1
 801b082:	d454      	bmi.n	801b12e <__sflush_r+0xba>
 801b084:	684b      	ldr	r3, [r1, #4]
 801b086:	2b00      	cmp	r3, #0
 801b088:	dc02      	bgt.n	801b090 <__sflush_r+0x1c>
 801b08a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	dd48      	ble.n	801b122 <__sflush_r+0xae>
 801b090:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b092:	2e00      	cmp	r6, #0
 801b094:	d045      	beq.n	801b122 <__sflush_r+0xae>
 801b096:	2300      	movs	r3, #0
 801b098:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b09c:	682f      	ldr	r7, [r5, #0]
 801b09e:	6a21      	ldr	r1, [r4, #32]
 801b0a0:	602b      	str	r3, [r5, #0]
 801b0a2:	d030      	beq.n	801b106 <__sflush_r+0x92>
 801b0a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b0a6:	89a3      	ldrh	r3, [r4, #12]
 801b0a8:	0759      	lsls	r1, r3, #29
 801b0aa:	d505      	bpl.n	801b0b8 <__sflush_r+0x44>
 801b0ac:	6863      	ldr	r3, [r4, #4]
 801b0ae:	1ad2      	subs	r2, r2, r3
 801b0b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b0b2:	b10b      	cbz	r3, 801b0b8 <__sflush_r+0x44>
 801b0b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b0b6:	1ad2      	subs	r2, r2, r3
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b0bc:	6a21      	ldr	r1, [r4, #32]
 801b0be:	4628      	mov	r0, r5
 801b0c0:	47b0      	blx	r6
 801b0c2:	1c43      	adds	r3, r0, #1
 801b0c4:	89a3      	ldrh	r3, [r4, #12]
 801b0c6:	d106      	bne.n	801b0d6 <__sflush_r+0x62>
 801b0c8:	6829      	ldr	r1, [r5, #0]
 801b0ca:	291d      	cmp	r1, #29
 801b0cc:	d82b      	bhi.n	801b126 <__sflush_r+0xb2>
 801b0ce:	4a2a      	ldr	r2, [pc, #168]	@ (801b178 <__sflush_r+0x104>)
 801b0d0:	40ca      	lsrs	r2, r1
 801b0d2:	07d6      	lsls	r6, r2, #31
 801b0d4:	d527      	bpl.n	801b126 <__sflush_r+0xb2>
 801b0d6:	2200      	movs	r2, #0
 801b0d8:	6062      	str	r2, [r4, #4]
 801b0da:	04d9      	lsls	r1, r3, #19
 801b0dc:	6922      	ldr	r2, [r4, #16]
 801b0de:	6022      	str	r2, [r4, #0]
 801b0e0:	d504      	bpl.n	801b0ec <__sflush_r+0x78>
 801b0e2:	1c42      	adds	r2, r0, #1
 801b0e4:	d101      	bne.n	801b0ea <__sflush_r+0x76>
 801b0e6:	682b      	ldr	r3, [r5, #0]
 801b0e8:	b903      	cbnz	r3, 801b0ec <__sflush_r+0x78>
 801b0ea:	6560      	str	r0, [r4, #84]	@ 0x54
 801b0ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b0ee:	602f      	str	r7, [r5, #0]
 801b0f0:	b1b9      	cbz	r1, 801b122 <__sflush_r+0xae>
 801b0f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b0f6:	4299      	cmp	r1, r3
 801b0f8:	d002      	beq.n	801b100 <__sflush_r+0x8c>
 801b0fa:	4628      	mov	r0, r5
 801b0fc:	f7ff fb42 	bl	801a784 <_free_r>
 801b100:	2300      	movs	r3, #0
 801b102:	6363      	str	r3, [r4, #52]	@ 0x34
 801b104:	e00d      	b.n	801b122 <__sflush_r+0xae>
 801b106:	2301      	movs	r3, #1
 801b108:	4628      	mov	r0, r5
 801b10a:	47b0      	blx	r6
 801b10c:	4602      	mov	r2, r0
 801b10e:	1c50      	adds	r0, r2, #1
 801b110:	d1c9      	bne.n	801b0a6 <__sflush_r+0x32>
 801b112:	682b      	ldr	r3, [r5, #0]
 801b114:	2b00      	cmp	r3, #0
 801b116:	d0c6      	beq.n	801b0a6 <__sflush_r+0x32>
 801b118:	2b1d      	cmp	r3, #29
 801b11a:	d001      	beq.n	801b120 <__sflush_r+0xac>
 801b11c:	2b16      	cmp	r3, #22
 801b11e:	d11e      	bne.n	801b15e <__sflush_r+0xea>
 801b120:	602f      	str	r7, [r5, #0]
 801b122:	2000      	movs	r0, #0
 801b124:	e022      	b.n	801b16c <__sflush_r+0xf8>
 801b126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b12a:	b21b      	sxth	r3, r3
 801b12c:	e01b      	b.n	801b166 <__sflush_r+0xf2>
 801b12e:	690f      	ldr	r7, [r1, #16]
 801b130:	2f00      	cmp	r7, #0
 801b132:	d0f6      	beq.n	801b122 <__sflush_r+0xae>
 801b134:	0793      	lsls	r3, r2, #30
 801b136:	680e      	ldr	r6, [r1, #0]
 801b138:	bf08      	it	eq
 801b13a:	694b      	ldreq	r3, [r1, #20]
 801b13c:	600f      	str	r7, [r1, #0]
 801b13e:	bf18      	it	ne
 801b140:	2300      	movne	r3, #0
 801b142:	eba6 0807 	sub.w	r8, r6, r7
 801b146:	608b      	str	r3, [r1, #8]
 801b148:	f1b8 0f00 	cmp.w	r8, #0
 801b14c:	dde9      	ble.n	801b122 <__sflush_r+0xae>
 801b14e:	6a21      	ldr	r1, [r4, #32]
 801b150:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b152:	4643      	mov	r3, r8
 801b154:	463a      	mov	r2, r7
 801b156:	4628      	mov	r0, r5
 801b158:	47b0      	blx	r6
 801b15a:	2800      	cmp	r0, #0
 801b15c:	dc08      	bgt.n	801b170 <__sflush_r+0xfc>
 801b15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b166:	81a3      	strh	r3, [r4, #12]
 801b168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b170:	4407      	add	r7, r0
 801b172:	eba8 0800 	sub.w	r8, r8, r0
 801b176:	e7e7      	b.n	801b148 <__sflush_r+0xd4>
 801b178:	20400001 	.word	0x20400001

0801b17c <_fflush_r>:
 801b17c:	b538      	push	{r3, r4, r5, lr}
 801b17e:	690b      	ldr	r3, [r1, #16]
 801b180:	4605      	mov	r5, r0
 801b182:	460c      	mov	r4, r1
 801b184:	b913      	cbnz	r3, 801b18c <_fflush_r+0x10>
 801b186:	2500      	movs	r5, #0
 801b188:	4628      	mov	r0, r5
 801b18a:	bd38      	pop	{r3, r4, r5, pc}
 801b18c:	b118      	cbz	r0, 801b196 <_fflush_r+0x1a>
 801b18e:	6a03      	ldr	r3, [r0, #32]
 801b190:	b90b      	cbnz	r3, 801b196 <_fflush_r+0x1a>
 801b192:	f7fe ffdf 	bl	801a154 <__sinit>
 801b196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b19a:	2b00      	cmp	r3, #0
 801b19c:	d0f3      	beq.n	801b186 <_fflush_r+0xa>
 801b19e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b1a0:	07d0      	lsls	r0, r2, #31
 801b1a2:	d404      	bmi.n	801b1ae <_fflush_r+0x32>
 801b1a4:	0599      	lsls	r1, r3, #22
 801b1a6:	d402      	bmi.n	801b1ae <_fflush_r+0x32>
 801b1a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1aa:	f7ff faa8 	bl	801a6fe <__retarget_lock_acquire_recursive>
 801b1ae:	4628      	mov	r0, r5
 801b1b0:	4621      	mov	r1, r4
 801b1b2:	f7ff ff5f 	bl	801b074 <__sflush_r>
 801b1b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b1b8:	07da      	lsls	r2, r3, #31
 801b1ba:	4605      	mov	r5, r0
 801b1bc:	d4e4      	bmi.n	801b188 <_fflush_r+0xc>
 801b1be:	89a3      	ldrh	r3, [r4, #12]
 801b1c0:	059b      	lsls	r3, r3, #22
 801b1c2:	d4e1      	bmi.n	801b188 <_fflush_r+0xc>
 801b1c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b1c6:	f7ff fa9b 	bl	801a700 <__retarget_lock_release_recursive>
 801b1ca:	e7dd      	b.n	801b188 <_fflush_r+0xc>

0801b1cc <fiprintf>:
 801b1cc:	b40e      	push	{r1, r2, r3}
 801b1ce:	b503      	push	{r0, r1, lr}
 801b1d0:	4601      	mov	r1, r0
 801b1d2:	ab03      	add	r3, sp, #12
 801b1d4:	4805      	ldr	r0, [pc, #20]	@ (801b1ec <fiprintf+0x20>)
 801b1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1da:	6800      	ldr	r0, [r0, #0]
 801b1dc:	9301      	str	r3, [sp, #4]
 801b1de:	f7ff fca5 	bl	801ab2c <_vfiprintf_r>
 801b1e2:	b002      	add	sp, #8
 801b1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1e8:	b003      	add	sp, #12
 801b1ea:	4770      	bx	lr
 801b1ec:	20000290 	.word	0x20000290

0801b1f0 <__swhatbuf_r>:
 801b1f0:	b570      	push	{r4, r5, r6, lr}
 801b1f2:	460c      	mov	r4, r1
 801b1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b1f8:	2900      	cmp	r1, #0
 801b1fa:	b096      	sub	sp, #88	@ 0x58
 801b1fc:	4615      	mov	r5, r2
 801b1fe:	461e      	mov	r6, r3
 801b200:	da0d      	bge.n	801b21e <__swhatbuf_r+0x2e>
 801b202:	89a3      	ldrh	r3, [r4, #12]
 801b204:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801b208:	f04f 0100 	mov.w	r1, #0
 801b20c:	bf14      	ite	ne
 801b20e:	2340      	movne	r3, #64	@ 0x40
 801b210:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801b214:	2000      	movs	r0, #0
 801b216:	6031      	str	r1, [r6, #0]
 801b218:	602b      	str	r3, [r5, #0]
 801b21a:	b016      	add	sp, #88	@ 0x58
 801b21c:	bd70      	pop	{r4, r5, r6, pc}
 801b21e:	466a      	mov	r2, sp
 801b220:	f000 f848 	bl	801b2b4 <_fstat_r>
 801b224:	2800      	cmp	r0, #0
 801b226:	dbec      	blt.n	801b202 <__swhatbuf_r+0x12>
 801b228:	9901      	ldr	r1, [sp, #4]
 801b22a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801b22e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801b232:	4259      	negs	r1, r3
 801b234:	4159      	adcs	r1, r3
 801b236:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801b23a:	e7eb      	b.n	801b214 <__swhatbuf_r+0x24>

0801b23c <__smakebuf_r>:
 801b23c:	898b      	ldrh	r3, [r1, #12]
 801b23e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b240:	079d      	lsls	r5, r3, #30
 801b242:	4606      	mov	r6, r0
 801b244:	460c      	mov	r4, r1
 801b246:	d507      	bpl.n	801b258 <__smakebuf_r+0x1c>
 801b248:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801b24c:	6023      	str	r3, [r4, #0]
 801b24e:	6123      	str	r3, [r4, #16]
 801b250:	2301      	movs	r3, #1
 801b252:	6163      	str	r3, [r4, #20]
 801b254:	b003      	add	sp, #12
 801b256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b258:	ab01      	add	r3, sp, #4
 801b25a:	466a      	mov	r2, sp
 801b25c:	f7ff ffc8 	bl	801b1f0 <__swhatbuf_r>
 801b260:	9f00      	ldr	r7, [sp, #0]
 801b262:	4605      	mov	r5, r0
 801b264:	4639      	mov	r1, r7
 801b266:	4630      	mov	r0, r6
 801b268:	f7fe fd42 	bl	8019cf0 <_malloc_r>
 801b26c:	b948      	cbnz	r0, 801b282 <__smakebuf_r+0x46>
 801b26e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b272:	059a      	lsls	r2, r3, #22
 801b274:	d4ee      	bmi.n	801b254 <__smakebuf_r+0x18>
 801b276:	f023 0303 	bic.w	r3, r3, #3
 801b27a:	f043 0302 	orr.w	r3, r3, #2
 801b27e:	81a3      	strh	r3, [r4, #12]
 801b280:	e7e2      	b.n	801b248 <__smakebuf_r+0xc>
 801b282:	89a3      	ldrh	r3, [r4, #12]
 801b284:	6020      	str	r0, [r4, #0]
 801b286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b28a:	81a3      	strh	r3, [r4, #12]
 801b28c:	9b01      	ldr	r3, [sp, #4]
 801b28e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801b292:	b15b      	cbz	r3, 801b2ac <__smakebuf_r+0x70>
 801b294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b298:	4630      	mov	r0, r6
 801b29a:	f000 f81d 	bl	801b2d8 <_isatty_r>
 801b29e:	b128      	cbz	r0, 801b2ac <__smakebuf_r+0x70>
 801b2a0:	89a3      	ldrh	r3, [r4, #12]
 801b2a2:	f023 0303 	bic.w	r3, r3, #3
 801b2a6:	f043 0301 	orr.w	r3, r3, #1
 801b2aa:	81a3      	strh	r3, [r4, #12]
 801b2ac:	89a3      	ldrh	r3, [r4, #12]
 801b2ae:	431d      	orrs	r5, r3
 801b2b0:	81a5      	strh	r5, [r4, #12]
 801b2b2:	e7cf      	b.n	801b254 <__smakebuf_r+0x18>

0801b2b4 <_fstat_r>:
 801b2b4:	b538      	push	{r3, r4, r5, lr}
 801b2b6:	4d07      	ldr	r5, [pc, #28]	@ (801b2d4 <_fstat_r+0x20>)
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	4604      	mov	r4, r0
 801b2bc:	4608      	mov	r0, r1
 801b2be:	4611      	mov	r1, r2
 801b2c0:	602b      	str	r3, [r5, #0]
 801b2c2:	f7e7 faf9 	bl	80028b8 <_fstat>
 801b2c6:	1c43      	adds	r3, r0, #1
 801b2c8:	d102      	bne.n	801b2d0 <_fstat_r+0x1c>
 801b2ca:	682b      	ldr	r3, [r5, #0]
 801b2cc:	b103      	cbz	r3, 801b2d0 <_fstat_r+0x1c>
 801b2ce:	6023      	str	r3, [r4, #0]
 801b2d0:	bd38      	pop	{r3, r4, r5, pc}
 801b2d2:	bf00      	nop
 801b2d4:	2000b1f8 	.word	0x2000b1f8

0801b2d8 <_isatty_r>:
 801b2d8:	b538      	push	{r3, r4, r5, lr}
 801b2da:	4d06      	ldr	r5, [pc, #24]	@ (801b2f4 <_isatty_r+0x1c>)
 801b2dc:	2300      	movs	r3, #0
 801b2de:	4604      	mov	r4, r0
 801b2e0:	4608      	mov	r0, r1
 801b2e2:	602b      	str	r3, [r5, #0]
 801b2e4:	f7e7 faf8 	bl	80028d8 <_isatty>
 801b2e8:	1c43      	adds	r3, r0, #1
 801b2ea:	d102      	bne.n	801b2f2 <_isatty_r+0x1a>
 801b2ec:	682b      	ldr	r3, [r5, #0]
 801b2ee:	b103      	cbz	r3, 801b2f2 <_isatty_r+0x1a>
 801b2f0:	6023      	str	r3, [r4, #0]
 801b2f2:	bd38      	pop	{r3, r4, r5, pc}
 801b2f4:	2000b1f8 	.word	0x2000b1f8

0801b2f8 <abort>:
 801b2f8:	b508      	push	{r3, lr}
 801b2fa:	2006      	movs	r0, #6
 801b2fc:	f000 f82c 	bl	801b358 <raise>
 801b300:	2001      	movs	r0, #1
 801b302:	f7e7 fa89 	bl	8002818 <_exit>

0801b306 <_raise_r>:
 801b306:	291f      	cmp	r1, #31
 801b308:	b538      	push	{r3, r4, r5, lr}
 801b30a:	4605      	mov	r5, r0
 801b30c:	460c      	mov	r4, r1
 801b30e:	d904      	bls.n	801b31a <_raise_r+0x14>
 801b310:	2316      	movs	r3, #22
 801b312:	6003      	str	r3, [r0, #0]
 801b314:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b318:	bd38      	pop	{r3, r4, r5, pc}
 801b31a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801b31c:	b112      	cbz	r2, 801b324 <_raise_r+0x1e>
 801b31e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b322:	b94b      	cbnz	r3, 801b338 <_raise_r+0x32>
 801b324:	4628      	mov	r0, r5
 801b326:	f000 f831 	bl	801b38c <_getpid_r>
 801b32a:	4622      	mov	r2, r4
 801b32c:	4601      	mov	r1, r0
 801b32e:	4628      	mov	r0, r5
 801b330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b334:	f000 b818 	b.w	801b368 <_kill_r>
 801b338:	2b01      	cmp	r3, #1
 801b33a:	d00a      	beq.n	801b352 <_raise_r+0x4c>
 801b33c:	1c59      	adds	r1, r3, #1
 801b33e:	d103      	bne.n	801b348 <_raise_r+0x42>
 801b340:	2316      	movs	r3, #22
 801b342:	6003      	str	r3, [r0, #0]
 801b344:	2001      	movs	r0, #1
 801b346:	e7e7      	b.n	801b318 <_raise_r+0x12>
 801b348:	2100      	movs	r1, #0
 801b34a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801b34e:	4620      	mov	r0, r4
 801b350:	4798      	blx	r3
 801b352:	2000      	movs	r0, #0
 801b354:	e7e0      	b.n	801b318 <_raise_r+0x12>
	...

0801b358 <raise>:
 801b358:	4b02      	ldr	r3, [pc, #8]	@ (801b364 <raise+0xc>)
 801b35a:	4601      	mov	r1, r0
 801b35c:	6818      	ldr	r0, [r3, #0]
 801b35e:	f7ff bfd2 	b.w	801b306 <_raise_r>
 801b362:	bf00      	nop
 801b364:	20000290 	.word	0x20000290

0801b368 <_kill_r>:
 801b368:	b538      	push	{r3, r4, r5, lr}
 801b36a:	4d07      	ldr	r5, [pc, #28]	@ (801b388 <_kill_r+0x20>)
 801b36c:	2300      	movs	r3, #0
 801b36e:	4604      	mov	r4, r0
 801b370:	4608      	mov	r0, r1
 801b372:	4611      	mov	r1, r2
 801b374:	602b      	str	r3, [r5, #0]
 801b376:	f7e7 fa3f 	bl	80027f8 <_kill>
 801b37a:	1c43      	adds	r3, r0, #1
 801b37c:	d102      	bne.n	801b384 <_kill_r+0x1c>
 801b37e:	682b      	ldr	r3, [r5, #0]
 801b380:	b103      	cbz	r3, 801b384 <_kill_r+0x1c>
 801b382:	6023      	str	r3, [r4, #0]
 801b384:	bd38      	pop	{r3, r4, r5, pc}
 801b386:	bf00      	nop
 801b388:	2000b1f8 	.word	0x2000b1f8

0801b38c <_getpid_r>:
 801b38c:	f7e7 ba2c 	b.w	80027e8 <_getpid>

0801b390 <_init>:
 801b390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b392:	bf00      	nop
 801b394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b396:	bc08      	pop	{r3}
 801b398:	469e      	mov	lr, r3
 801b39a:	4770      	bx	lr

0801b39c <_fini>:
 801b39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b39e:	bf00      	nop
 801b3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b3a2:	bc08      	pop	{r3}
 801b3a4:	469e      	mov	lr, r3
 801b3a6:	4770      	bx	lr
