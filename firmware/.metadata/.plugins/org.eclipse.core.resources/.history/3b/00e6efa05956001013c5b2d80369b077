/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * @file           : main.c
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "dma.h"
#include "i2c.h"
#include "usart.h"
#include "tim.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <rcl/rcl.h>
#include <rcl/error_handling.h>
#include <rclc/rclc.h>
#include <rclc/executor.h>
#include <uxr/client/transport.h>
#include <rmw_microxrcedds_c/config.h>
#include <rmw_microros/rmw_microros.h>

#include <std_msgs/msg/int32.h>
#include <std_msgs/msg/int16.h>

#include <std_msgs/msg/multi_array_dimension.h>
#include <std_msgs/msg/multi_array_layout.h>
#include <std_msgs/msg/float64_multi_array.h>
#include <std_msgs/msg/float32_multi_array.h>
#include <geometry_msgs/msg/twist.h>

#include "config.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define EEPROM_ADDR 0b01000010
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define RCLSOFTCHECK(fn) if (fn != RCL_RET_OK) {};
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
rclc_support_t support;
rcl_allocator_t allocator;
rcl_node_t node;
rcl_init_options_t init_options;
rclc_executor_t executor;

rcl_timer_t timer;
const int timeout_ms = 10;
const unsigned int timer_period = RCL_MS_TO_NS(10);

rcl_publisher_t publisher;
std_msgs__msg__Float64MultiArray pub_msg;

rcl_subscription_t subscriber_brush_spin;
std_msgs__msg__Int32 msg_brush_spin;

rcl_subscription_t subscriber_L_encoder;
std_msgs__msg__Int32 msg_L_encoder;

rcl_subscription_t subscriber_R_encoder;
std_msgs__msg__Int32 msg_R_encoder;

rcl_subscription_t subscriber_water_pump;
std_msgs__msg__Int32 msg_water_pump;

uint8_t cmd_mode;
uint8_t cmd_spin;
uint16_t cmd_L_encoder;
uint16_t cmd_R_encoder;
uint8_t cmd_water_pump;

uint16_t L_encoder;
uint16_t R_encoder;
uint8_t loadcell;
uint8_t U_proximity;
uint8_t D_proximity;

uint16_t cmd_vel1;
uint16_t cmd_vel2;
uint16_t pump_timer;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
bool cubemx_transport_open(struct uxrCustomTransport *transport);
bool cubemx_transport_close(struct uxrCustomTransport *transport);
size_t cubemx_transport_write(struct uxrCustomTransport *transport,
		const uint8_t *buf, size_t len, uint8_t *err);
size_t cubemx_transport_read(struct uxrCustomTransport *transport, uint8_t *buf,
		size_t len, int timeout, uint8_t *err);

void* microros_allocate(size_t size, void *state);
void microros_deallocate(void *pointer, void *state);
void* microros_reallocate(void *pointer, size_t size, void *state);
void* microros_zero_allocate(size_t number_of_elements, size_t size_of_element,
		void *state);

void setup_io();
uint16_t read_encoder_data(uint8_t EEPROM_ADR, uint16_t len);
void move_brush_manual();
void move_brush_auto();
void spin_brush();
void pump_water();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t *timer, int64_t last_call_time) {
	if (timer != NULL) {
		// Sync micro-ROS session
		rmw_uros_sync_session(timeout_ms);

		// brush encoder
		L_encoder = read_encoder_data(0b01000000, 1);
		R_encoder = read_encoder_data(0b01000010, 1);

		// Left highest 950 lowest 1000
		// Right highest 427 lowest 235

		if (cmd_L_encoder < 950 || cmd_L_encoder > 1000) {
			cmd_L_encoder = 950;
		}
		if (cmd_R_encoder < 235 || cmd_R_encoder > 427) {
			cmd_R_encoder = 427;
		}

		// loadcell
		// loadcell = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);

		// proximity
		// U_proximity = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
		// D_proximity = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);

//		if (cmd_mode == 0) {
//			BrushUpDownMaunal();
//		}
//		else if (cmd_mode == 1) {
//			BrushUpDownAuto();
//		}

		if (cmd_spin == 1) {
			spin_brush();
		}

		// Prepare and publish multi-array message with motor data
		if (pub_msg.data.data != NULL) {
			pub_msg.data.data[0] = L_encoder;
			pub_msg.data.data[1] = R_encoder;
			pub_msg.data.data[2] = loadcell;
			pub_msg.data.data[3] = U_proximity;
			pub_msg.data.data[4] = D_proximity;

			// Publish the multi-array message
			RCLSOFTCHECK(rcl_publish(&publisher, &pub_msg, NULL));
		}

		// Reinitialize watchdog timer
//		HAL_IWDG_Init(&hiwdg);
	}
}

void subscription_callback_mode(const void * msgin)
{
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32*)msgin;
	cmd_mode = msg->data;
}

void subscription_callback_brush_spin(const void * msgin)
{
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32*)msgin;
	cmd_spin = msg->data;
}

void subscription_callback_L_encoder(const void * msgin)
{
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32*)msgin;
	cmd_L_encoder = msg->data;
}

void subscription_callback_R_encoder(const void * msgin)
{
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32*)msgin;
	cmd_R_encoder = msg->data;
}

void subscription_callback_water_pump(const void * msgin)
{
	const std_msgs__msg__Int32 * msg = (const std_msgs__msg__Int32*)msgin;
	cmd_water_pump = msg->data;
}

void StartDefaultTask(void *argument) {

	// micro-ROS configuration
	rmw_uros_set_custom_transport(
	true, (void*) &hlpuart1, cubemx_transport_open, cubemx_transport_close,
			cubemx_transport_write, cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator =
			rcutils_get_zero_initialized_allocator();
	freeRTOS_allocator.allocate = microros_allocate;
	freeRTOS_allocator.deallocate = microros_deallocate;
	freeRTOS_allocator.reallocate = microros_reallocate;
	freeRTOS_allocator.zero_allocate = microros_zero_allocate;

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
		printf("Error on default allocators (line %d)\n", __LINE__);
	}

	allocator = rcl_get_default_allocator();

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
	RCLSOFTCHECK(rcl_init_options_init(&init_options, allocator));
	RCLSOFTCHECK(rcl_init_options_set_domain_id(&init_options, 99));

	rclc_support_init_with_options(&support, 0, NULL, &init_options,
			&allocator);

	// create node
	rclc_node_init_default(&node, "cleaner_node", "", &support);

	pub_msg.layout.dim.capacity = 1;
	pub_msg.layout.dim.size = 1;
	pub_msg.layout.dim.data = malloc(
			sizeof(std_msgs__msg__MultiArrayDimension) * 1);

	pub_msg.layout.dim.data[0].label.data = malloc(10);
	pub_msg.layout.dim.data[0].label.capacity = 10;
	pub_msg.layout.dim.data[0].label.size = strlen("mani_data");
	strcpy(pub_msg.layout.dim.data[0].label.data, "mani_data");

	pub_msg.layout.data_offset = 0;

	pub_msg.data.capacity = 5;
	pub_msg.data.size = 5;
	pub_msg.data.data = malloc(5 * sizeof(double));

	// create publisher

	rclc_publisher_init_default(
		&publisher,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Float64MultiArray),
		"manipulator");

	// Create subscriber
	rclc_subscription_init_default(
		&subscriber_mode,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		"mode");

	rclc_subscription_init_default(
		&subscriber_brush_spin,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		"brush_spin");

	rclc_subscription_init_default(
		&subscriber_R_encoder,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		"L_encoder");

	rclc_subscription_init_default(
		&subscriber_R_encoder,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		"R_encoder");

	rclc_subscription_init_default(
		&subscriber_water_pump,
		&node,
		ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
		"water_pump");

	// create timer
	rclc_timer_init_default(&timer, &support, timer_period, timer_callback);

	// create executor
	executor = rclc_executor_get_zero_initialized_executor();
	rclc_executor_init(&executor, &support.context, 6, &allocator); // total number of handles = #subscriptions + #timers
	rclc_executor_add_timer(&executor, &timer);
	rclc_executor_add_subscription(&executor, &subscriber_mode, &msg_mode, subscription_callback_mode, ON_NEW_DATA);
	rclc_executor_add_subscription(&executor, &subscriber_brush_spin, &msg_brush_spin, subscription_callback_brush_spin, ON_NEW_DATA);
	rclc_executor_add_subscription(&executor, &subscriber_L_encoder, &msg_L_encoder, subscription_callback_L_encoder, ON_NEW_DATA);
	rclc_executor_add_subscription(&executor, &subscriber_R_encoder, &msg_R_encoder, subscription_callback_R_encoder, ON_NEW_DATA);
	rclc_executor_add_subscription(&executor, &subscriber_water_pump, &msg_water_pump, subscription_callback_water_pump, ON_NEW_DATA);
	rclc_executor_spin(&executor);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_LPUART1_UART_Init();
  MX_I2C1_Init();
  MX_TIM2_Init();
  MX_TIM3_Init();
  /* USER CODE BEGIN 2 */
	setup_io();
	cleaner_begin();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();

  /* Start scheduler */
  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
  RCC_OscInitStruct.PLL.PLLN = 85;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void setup_io() {
	if (hi2c1.State == HAL_I2C_STATE_READY) {
		uint8_t dirB = 0x00;
		uint8_t dirA = 0xFF;
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0x01, I2C_MEMADD_SIZE_8BIT,
				&dirB, 1, 100);  // IODIRB
		HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT,
				&dirA, 1, 100);  // IODIRA
	}
}

uint16_t read_encoder_data(uint8_t EEPROM_ADR, uint16_t len) {
	if (hi2c1.State == HAL_I2C_STATE_READY) {
		uint8_t lowbyte;
		uint8_t highbyte;
		uint16_t data_encoder;

		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADR, 0x12, I2C_MEMADD_SIZE_8BIT, &lowbyte, len);
		HAL_Delay(1);
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADR, 0x13, I2C_MEMADD_SIZE_8BIT, &highbyte, len);
		HAL_Delay(1);

		lowbyte = ~lowbyte;
		highbyte = ~highbyte;
		data_encoder = (highbyte >> 4 & 0b1) * 1000 + (highbyte & 0b1111) * 100
				+ (lowbyte >> 4 & 0b1111) * 10 + (lowbyte & 0b1111);
		return data_encoder;
	}
	HAL_Delay(1);
}

void move_brush_manual() {
	cmd_vel1 = PWM_Satuation(PID_CONTROLLER_Compute(&pid1, cmd_L_encoder - L_encoder),
			65535, -65535);
	cmd_vel2 = PWM_Satuation(PID_CONTROLLER_Compute(&pid2, cmd_R_encoder - R_encoder),
			65535, -65535);
	MDXX_set_range(&motor1, 2000, cmd_vel1);
	MDXX_set_range(&motor2, 2000, cmd_vel2);
}

void move_brush_auto() {

}

void spin_brush() {
	MDXX_set_range(&motor3, 2000, 30000);
}

void pump_water() {
	if (U_proximity == 0 && D_proximity == 0) {
		// start pump (move hose down)
		if(pump_timer < 1000)
		{
			MDXX_set_range(&motor4, 2000, 30000);
			pump_timer++;
		}
		else {
			MDXX_set_range(&motor4, 2000, 0);
		}
	}

	if (U_proximity == 1 && D_proximity == 1) {
		// stop pump (move hose up)
		if(pump_timer < 1000)
		{
			MDXX_set_range(&motor4, 2000, -30000);
			pump_timer++;
		}
		else {
			MDXX_set_range(&motor4, 2000, 0);
			pump_timer = 0;
		}
	}
}
/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM1 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
  {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
		if (htim == &htim2) {

		}
  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
		/* User can add his own implementation to report the HAL error return state */
		__disable_irq();
		while (1) {
		}
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
